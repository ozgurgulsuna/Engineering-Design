
ST_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007428  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080075bc  080075bc  000175bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800761c  0800761c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007624  08007624  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007628  08007628  00017628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  0800762c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001494  2000013c  08007768  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d0  08007768  000215d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cf7  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2d  00000000  00000000  00031e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00034b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00035918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fbc  00000000  00000000  00036588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119d0  00000000  00000000  0004f544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e00b  00000000  00000000  00060f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eef1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003714  00000000  00000000  000eef70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000013c 	.word	0x2000013c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080075a4 	.word	0x080075a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000140 	.word	0x20000140
 80001d0:	080075a4 	.word	0x080075a4

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fa10 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f834 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8c6 	bl	8000688 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004fc:	f000 f89a 	bl	8000634 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000500:	f006 fb14 	bl	8006b2c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_Delay(1000);
 8000504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000508:	f000 fa76 	bl	80009f8 <HAL_Delay>
	CDC_Transmit_FS(usb_out,sizeof(usb_out));
 800050c:	2120      	movs	r1, #32
 800050e:	480f      	ldr	r0, [pc, #60]	; (800054c <main+0x60>)
 8000510:	f006 fbca 	bl	8006ca8 <CDC_Transmit_FS>
	if(led_bool == 0){
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <main+0x64>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d103      	bne.n	8000524 <main+0x38>
		CDC_Receive_FS(usb_in,sizeof(usb_in));
 800051c:	2120      	movs	r1, #32
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <main+0x68>)
 8000520:	f006 fbae 	bl	8006c80 <CDC_Receive_FS>
	}


	if(strcmp((char *)blink_led_cmd, (char *)usb_in) == 0){
 8000524:	490b      	ldr	r1, [pc, #44]	; (8000554 <main+0x68>)
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <main+0x6c>)
 8000528:	f7ff fe54 	bl	80001d4 <strcmp>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1e8      	bne.n	8000504 <main+0x18>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000536:	4809      	ldr	r0, [pc, #36]	; (800055c <main+0x70>)
 8000538:	f000 fd31 	bl	8000f9e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f000 fa5a 	bl	80009f8 <HAL_Delay>
		led_bool = 1;
 8000544:	4b02      	ldr	r3, [pc, #8]	; (8000550 <main+0x64>)
 8000546:	2201      	movs	r2, #1
 8000548:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1000);
 800054a:	e7db      	b.n	8000504 <main+0x18>
 800054c:	20000000 	.word	0x20000000
 8000550:	2000019c 	.word	0x2000019c
 8000554:	200001a0 	.word	0x200001a0
 8000558:	20000020 	.word	0x20000020
 800055c:	40020800 	.word	0x40020800

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f007 f810 	bl	8007594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <SystemClock_Config+0xd0>)
 80005ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005d4:	2319      	movs	r3, #25
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005d8:	23c0      	movs	r3, #192	; 0xc0
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005dc:	2304      	movs	r3, #4
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 ff6f 	bl	80024cc <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f4:	f000 f8a8 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2101      	movs	r1, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f002 f9d1 	bl	80029bc <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000620:	f000 f892 	bl	8000748 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART1_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_USART1_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART1_UART_Init+0x4c>)
 8000640:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART1_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART1_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART1_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART1_UART_Init+0x4c>)
 800066c:	f002 fb86 	bl	8002d7c <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f867 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000158 	.word	0x20000158
 8000684:	40011000 	.word	0x40011000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a26      	ldr	r2, [pc, #152]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MX_GPIO_Init+0xb8>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_GPIO_Init+0xb8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLINK_LED_PIN_GPIO_Port, BLINK_LED_PIN_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <MX_GPIO_Init+0xbc>)
 8000716:	f000 fc29 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLINK_LED_PIN_Pin */
  GPIO_InitStruct.Pin = BLINK_LED_PIN_Pin;
 800071a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLINK_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_GPIO_Init+0xbc>)
 8000734:	f000 fa96 	bl	8000c64 <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40020800 	.word	0x40020800

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <HAL_MspInit+0x4c>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <HAL_UART_MspInit+0x84>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d12b      	bne.n	800081e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_UART_MspInit+0x88>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <HAL_UART_MspInit+0x88>)
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6453      	str	r3, [r2, #68]	; 0x44
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_UART_MspInit+0x88>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <HAL_UART_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <HAL_UART_MspInit+0x88>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_UART_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fe:	23c0      	movs	r3, #192	; 0xc0
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800080e:	2307      	movs	r3, #7
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <HAL_UART_MspInit+0x8c>)
 800081a:	f000 fa23 	bl	8000c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40011000 	.word	0x40011000
 800082c:	40023800 	.word	0x40023800
 8000830:	40020400 	.word	0x40020400

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f89a 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <OTG_FS_IRQHandler+0x10>)
 800088e:	f000 fcf0 	bl	8001272 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000ea4 	.word	0x20000ea4

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c6:	490e      	ldr	r1, [pc, #56]	; (8000900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008dc:	4c0b      	ldr	r4, [pc, #44]	; (800090c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ea:	f7ff ffd7 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f006 fe2d 	bl	800754c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fdfb 	bl	80004ec <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8000904:	0800762c 	.word	0x0800762c
  ldr r2, =_sbss
 8000908:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 800090c:	200015d0 	.word	0x200015d0

08000910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <HAL_Init+0x40>)
 800091e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_Init+0x40>)
 800092a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x40>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f94f 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff ff04 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f967 	bl	8000c4a <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f92f 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000040 	.word	0x20000040
 80009b0:	20000048 	.word	0x20000048
 80009b4:	20000044 	.word	0x20000044

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000048 	.word	0x20000048
 80009dc:	200001c0 	.word	0x200001c0

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	200001c0 	.word	0x200001c0

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff ffee 	bl	80009e0 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffde 	bl	80009e0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000048 	.word	0x20000048

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff29 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff3e 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff31 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffa2 	bl	8000b9c <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	e159      	b.n	8000f34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c80:	2201      	movs	r2, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	f040 8148 	bne.w	8000f2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d005      	beq.n	8000cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d130      	bne.n	8000d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	f003 0201 	and.w	r2, r3, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d017      	beq.n	8000d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d123      	bne.n	8000da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	69b9      	ldr	r1, [r7, #24]
 8000da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0203 	and.w	r2, r3, #3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80a2 	beq.w	8000f2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b57      	ldr	r3, [pc, #348]	; (8000f4c <HAL_GPIO_Init+0x2e8>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a56      	ldr	r2, [pc, #344]	; (8000f4c <HAL_GPIO_Init+0x2e8>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b54      	ldr	r3, [pc, #336]	; (8000f4c <HAL_GPIO_Init+0x2e8>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e06:	4a52      	ldr	r2, [pc, #328]	; (8000f50 <HAL_GPIO_Init+0x2ec>)
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a49      	ldr	r2, [pc, #292]	; (8000f54 <HAL_GPIO_Init+0x2f0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d019      	beq.n	8000e66 <HAL_GPIO_Init+0x202>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a48      	ldr	r2, [pc, #288]	; (8000f58 <HAL_GPIO_Init+0x2f4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_GPIO_Init+0x1fe>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a47      	ldr	r2, [pc, #284]	; (8000f5c <HAL_GPIO_Init+0x2f8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00d      	beq.n	8000e5e <HAL_GPIO_Init+0x1fa>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a46      	ldr	r2, [pc, #280]	; (8000f60 <HAL_GPIO_Init+0x2fc>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x1f6>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a45      	ldr	r2, [pc, #276]	; (8000f64 <HAL_GPIO_Init+0x300>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_GPIO_Init+0x1f2>
 8000e52:	2304      	movs	r3, #4
 8000e54:	e008      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e56:	2307      	movs	r3, #7
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e004      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e002      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e62:	2301      	movs	r3, #1
 8000e64:	e000      	b.n	8000e68 <HAL_GPIO_Init+0x204>
 8000e66:	2300      	movs	r3, #0
 8000e68:	69fa      	ldr	r2, [r7, #28]
 8000e6a:	f002 0203 	and.w	r2, r2, #3
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	4093      	lsls	r3, r2
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e78:	4935      	ldr	r1, [pc, #212]	; (8000f50 <HAL_GPIO_Init+0x2ec>)
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eaa:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed4:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000efe:	4a1a      	ldr	r2, [pc, #104]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f04:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f28:	4a0f      	ldr	r2, [pc, #60]	; (8000f68 <HAL_GPIO_Init+0x304>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3301      	adds	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	2b0f      	cmp	r3, #15
 8000f38:	f67f aea2 	bls.w	8000c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40013800 	.word	0x40013800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40013c00 	.word	0x40013c00

08000f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f88:	e003      	b.n	8000f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	041a      	lsls	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b085      	sub	sp, #20
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb0:	887a      	ldrh	r2, [r7, #2]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	041a      	lsls	r2, r3, #16
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd4:	b08f      	sub	sp, #60	; 0x3c
 8000fd6:	af0a      	add	r7, sp, #40	; 0x28
 8000fd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e10f      	b.n	8001204 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d106      	bne.n	8001004 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f005 ff9a 	bl	8006f38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2203      	movs	r2, #3
 8001008:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f002 fa81 	bl	800352a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	687e      	ldr	r6, [r7, #4]
 8001030:	466d      	mov	r5, sp
 8001032:	f106 0410 	add.w	r4, r6, #16
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001042:	e885 0003 	stmia.w	r5, {r0, r1}
 8001046:	1d33      	adds	r3, r6, #4
 8001048:	cb0e      	ldmia	r3, {r1, r2, r3}
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f002 f958 	bl	8003300 <USB_CoreInit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2202      	movs	r2, #2
 800105a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0d0      	b.n	8001204 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fa6f 	bl	800354c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e04a      	b.n	800110a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	333d      	adds	r3, #61	; 0x3d
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001088:	7bfa      	ldrb	r2, [r7, #15]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	333c      	adds	r3, #60	; 0x3c
 8001098:	7bfa      	ldrb	r2, [r7, #15]
 800109a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	b298      	uxth	r0, r3
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3344      	adds	r3, #68	; 0x44
 80010b0:	4602      	mov	r2, r0
 80010b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	3340      	adds	r3, #64	; 0x40
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3348      	adds	r3, #72	; 0x48
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	334c      	adds	r3, #76	; 0x4c
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	4413      	add	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	3354      	adds	r3, #84	; 0x54
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	3301      	adds	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	d3af      	bcc.n	8001074 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e044      	b.n	80011a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	440b      	add	r3, r1
 8001154:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	440b      	add	r3, r1
 800116a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001172:	7bfa      	ldrb	r2, [r7, #15]
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	440b      	add	r3, r1
 8001180:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	3301      	adds	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3b5      	bcc.n	800111a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	687e      	ldr	r6, [r7, #4]
 80011b6:	466d      	mov	r5, sp
 80011b8:	f106 0410 	add.w	r4, r6, #16
 80011bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80011cc:	1d33      	adds	r3, r6, #4
 80011ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f002 fa07 	bl	80035e4 <USB_DevInit>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e00d      	b.n	8001204 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 fb56 	bl	80048ae <USB_DevDisconnect>

  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800120c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001220:	2b01      	cmp	r3, #1
 8001222:	d101      	bne.n	8001228 <HAL_PCD_Start+0x1c>
 8001224:	2302      	movs	r3, #2
 8001226:	e020      	b.n	800126a <HAL_PCD_Start+0x5e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	2b01      	cmp	r3, #1
 8001236:	d109      	bne.n	800124c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001244:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f002 f959 	bl	8003508 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f003 fb06 	bl	800486c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001272:	b590      	push	{r4, r7, lr}
 8001274:	b08d      	sub	sp, #52	; 0x34
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fbc4 	bl	8004a16 <USB_GetMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	f040 848a 	bne.w	8001baa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fb28 	bl	80048f0 <USB_ReadInterrupts>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8480 	beq.w	8001ba8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 fb15 	bl	80048f0 <USB_ReadInterrupts>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d107      	bne.n	80012e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f002 0202 	and.w	r2, r2, #2
 80012de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 fb03 	bl	80048f0 <USB_ReadInterrupts>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d161      	bne.n	80013b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0210 	bic.w	r2, r2, #16
 8001302:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	f003 020f 	and.w	r2, r3, #15
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	3304      	adds	r3, #4
 8001322:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	0c5b      	lsrs	r3, r3, #17
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	2b02      	cmp	r3, #2
 800132e:	d124      	bne.n	800137a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d035      	beq.n	80013a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001346:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134a:	b29b      	uxth	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	6a38      	ldr	r0, [r7, #32]
 8001350:	f003 f93a 	bl	80045c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	691a      	ldr	r2, [r3, #16]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001360:	441a      	add	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	6a1a      	ldr	r2, [r3, #32]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001372:	441a      	add	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	621a      	str	r2, [r3, #32]
 8001378:	e016      	b.n	80013a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	0c5b      	lsrs	r3, r3, #17
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	2b06      	cmp	r3, #6
 8001384:	d110      	bne.n	80013a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800138c:	2208      	movs	r2, #8
 800138e:	4619      	mov	r1, r3
 8001390:	6a38      	ldr	r0, [r7, #32]
 8001392:	f003 f919 	bl	80045c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	6a1a      	ldr	r2, [r3, #32]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a2:	441a      	add	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	699a      	ldr	r2, [r3, #24]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0210 	orr.w	r2, r2, #16
 80013b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f003 fa97 	bl	80048f0 <USB_ReadInterrupts>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013cc:	f040 80a7 	bne.w	800151e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 fa9c 	bl	8004916 <USB_ReadDevAllOutEpInterrupt>
 80013de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013e0:	e099      	b.n	8001516 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 808e 	beq.w	800150a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fac0 	bl	800497e <USB_ReadDevOutEPInterrupt>
 80013fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00c      	beq.n	8001424 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001416:	461a      	mov	r2, r3
 8001418:	2301      	movs	r3, #1
 800141a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800141c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fec2 	bl	80021a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	015a      	lsls	r2, r3, #5
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	4413      	add	r3, r2
 8001436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143a:	461a      	mov	r2, r3
 800143c:	2308      	movs	r3, #8
 800143e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 ff98 	bl	8002378 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4413      	add	r3, r2
 800145a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800145e:	461a      	mov	r2, r3
 8001460:	2310      	movs	r3, #16
 8001462:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d030      	beq.n	80014d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	2b80      	cmp	r3, #128	; 0x80
 8001478:	d109      	bne.n	800148e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001488:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800148c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	3304      	adds	r3, #4
 80014a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	78db      	ldrb	r3, [r3, #3]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d108      	bne.n	80014be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2200      	movs	r2, #0
 80014b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f005 fe39 	bl	8007130 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ca:	461a      	mov	r2, r3
 80014cc:	2302      	movs	r3, #2
 80014ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d008      	beq.n	80014ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	015a      	lsls	r2, r3, #5
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e6:	461a      	mov	r2, r3
 80014e8:	2320      	movs	r3, #32
 80014ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	015a      	lsls	r2, r3, #5
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	4413      	add	r3, r2
 80014fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001502:	461a      	mov	r2, r3
 8001504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001508:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	3301      	adds	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001512:	085b      	lsrs	r3, r3, #1
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001518:	2b00      	cmp	r3, #0
 800151a:	f47f af62 	bne.w	80013e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f003 f9e4 	bl	80048f0 <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001532:	f040 80db 	bne.w	80016ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fa05 	bl	800494a <USB_ReadDevAllInEpInterrupt>
 8001540:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001546:	e0cd      	b.n	80016e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80c2 	beq.w	80016d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fa2b 	bl	80049ba <USB_ReadDevInEPInterrupt>
 8001564:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d057      	beq.n	8001620 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	2201      	movs	r2, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	69f9      	ldr	r1, [r7, #28]
 800158c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001590:	4013      	ands	r3, r2
 8001592:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	4413      	add	r3, r2
 800159c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a0:	461a      	mov	r2, r3
 80015a2:	2301      	movs	r3, #1
 80015a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d132      	bne.n	8001614 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	334c      	adds	r3, #76	; 0x4c
 80015be:	6819      	ldr	r1, [r3, #0]
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c4:	4613      	mov	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4403      	add	r3, r0
 80015ce:	3348      	adds	r3, #72	; 0x48
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4419      	add	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4403      	add	r3, r0
 80015e2:	334c      	adds	r3, #76	; 0x4c
 80015e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d113      	bne.n	8001614 <HAL_PCD_IRQHandler+0x3a2>
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3354      	adds	r3, #84	; 0x54
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800160c:	461a      	mov	r2, r3
 800160e:	2101      	movs	r1, #1
 8001610:	f003 fa32 	bl	8004a78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4619      	mov	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f005 fd0d 	bl	800703a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001636:	461a      	mov	r2, r3
 8001638:	2308      	movs	r3, #8
 800163a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	015a      	lsls	r2, r3, #5
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	4413      	add	r3, r2
 800164e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001652:	461a      	mov	r2, r3
 8001654:	2310      	movs	r3, #16
 8001656:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166e:	461a      	mov	r2, r3
 8001670:	2340      	movs	r3, #64	; 0x40
 8001672:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d023      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800167e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001680:	6a38      	ldr	r0, [r7, #32]
 8001682:	f002 f913 	bl	80038ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	3338      	adds	r3, #56	; 0x38
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	3304      	adds	r3, #4
 8001698:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	78db      	ldrb	r3, [r3, #3]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d108      	bne.n	80016b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2200      	movs	r2, #0
 80016a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f005 fd50 	bl	8007154 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c0:	461a      	mov	r2, r3
 80016c2:	2302      	movs	r3, #2
 80016c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fcdb 	bl	800208e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	3301      	adds	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	085b      	lsrs	r3, r3, #1
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f47f af2e 	bne.w	8001548 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 f8fd 	bl	80048f0 <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001700:	d122      	bne.n	8001748 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001728:	2100      	movs	r1, #0
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fec2 	bl	80024b4 <HAL_PCDEx_LPM_Callback>
 8001730:	e002      	b.n	8001738 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f005 fcee 	bl	8007114 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f8cf 	bl	80048f0 <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800175c:	d112      	bne.n	8001784 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d102      	bne.n	8001774 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f005 fcaa 	bl	80070c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001782:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f003 f8b1 	bl	80048f0 <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001798:	f040 80b7 	bne.w	800190a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2110      	movs	r1, #16
 80017b6:	4618      	mov	r0, r3
 80017b8:	f002 f878 	bl	80038ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c0:	e046      	b.n	8001850 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ce:	461a      	mov	r2, r3
 80017d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e6:	0151      	lsls	r1, r2, #5
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	440a      	add	r2, r1
 80017ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001802:	461a      	mov	r2, r3
 8001804:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001808:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181a:	0151      	lsls	r1, r2, #5
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	440a      	add	r2, r1
 8001820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001824:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001828:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	015a      	lsls	r2, r3, #5
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	4413      	add	r3, r2
 8001832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800183a:	0151      	lsls	r1, r2, #5
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	440a      	add	r2, r1
 8001840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001844:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001848:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	3301      	adds	r3, #1
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001856:	429a      	cmp	r2, r3
 8001858:	d3b3      	bcc.n	80017c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001868:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800186c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001886:	f043 030b 	orr.w	r3, r3, #11
 800188a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189c:	f043 030b 	orr.w	r3, r3, #11
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	e015      	b.n	80018d0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ca:	f043 030b 	orr.w	r3, r3, #11
 80018ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018f4:	461a      	mov	r2, r3
 80018f6:	f003 f8bf 	bl	8004a78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 ffee 	bl	80048f0 <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191e:	d124      	bne.n	800196a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f003 f884 	bl	8004a32 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f002 f839 	bl	80039a6 <USB_GetDevSpeed>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681c      	ldr	r4, [r3, #0]
 8001940:	f001 f9e8 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8001944:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	4620      	mov	r0, r4
 8001950:	f001 fd38 	bl	80033c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f005 fb98 	bl	800708a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695a      	ldr	r2, [r3, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001968:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 ffbe 	bl	80048f0 <USB_ReadInterrupts>
 8001974:	4603      	mov	r3, r0
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b08      	cmp	r3, #8
 800197c:	d10a      	bne.n	8001994 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f005 fb75 	bl	800706e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f002 0208 	and.w	r2, r2, #8
 8001992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f002 ffa9 	bl	80048f0 <USB_ReadInterrupts>
 800199e:	4603      	mov	r3, r0
 80019a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a4:	2b80      	cmp	r3, #128	; 0x80
 80019a6:	d122      	bne.n	80019ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b4:	2301      	movs	r3, #1
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	e014      	b.n	80019e4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d105      	bne.n	80019de <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	4619      	mov	r1, r3
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fb27 	bl	800202c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d3e5      	bcc.n	80019ba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 ff7c 	bl	80048f0 <USB_ReadInterrupts>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a02:	d13b      	bne.n	8001a7c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a04:	2301      	movs	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
 8001a08:	e02b      	b.n	8001a62 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3340      	adds	r3, #64	; 0x40
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d115      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da12      	bge.n	8001a5c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	333f      	adds	r3, #63	; 0x3f
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4619      	mov	r1, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fae8 	bl	800202c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	3301      	adds	r3, #1
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d3ce      	bcc.n	8001a0a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 ff35 	bl	80048f0 <USB_ReadInterrupts>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a90:	d155      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a92:	2301      	movs	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	e045      	b.n	8001b24 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	015a      	lsls	r2, r3, #5
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aac:	4613      	mov	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d12e      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ac0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da2b      	bge.n	8001b1e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ad2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d121      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10a      	bne.n	8001b1e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1a:	6053      	str	r3, [r2, #4]
            break;
 8001b1c:	e007      	b.n	8001b2e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	3301      	adds	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d3b4      	bcc.n	8001a98 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fed4 	bl	80048f0 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b52:	d10a      	bne.n	8001b6a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f005 fb0f 	bl	8007178 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 febe 	bl	80048f0 <USB_ReadInterrupts>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d115      	bne.n	8001baa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f005 faff 	bl	8007194 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	e000      	b.n	8001baa <HAL_PCD_IRQHandler+0x938>
      return;
 8001ba8:	bf00      	nop
    }
  }
}
 8001baa:	3734      	adds	r7, #52	; 0x34
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}

08001bb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_PCD_SetAddress+0x1a>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e013      	b.n	8001bf2 <HAL_PCD_SetAddress+0x42>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fe1c 	bl	8004820 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	4608      	mov	r0, r1
 8001c04:	4611      	mov	r1, r2
 8001c06:	461a      	mov	r2, r3
 8001c08:	4603      	mov	r3, r0
 8001c0a:	70fb      	strb	r3, [r7, #3]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	803b      	strh	r3, [r7, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	da0f      	bge.n	8001c40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	f003 020f 	and.w	r2, r3, #15
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	3338      	adds	r3, #56	; 0x38
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	3304      	adds	r3, #4
 8001c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	705a      	strb	r2, [r3, #1]
 8001c3e:	e00f      	b.n	8001c60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 020f 	and.w	r2, r3, #15
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c6c:	883a      	ldrh	r2, [r7, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	78ba      	ldrb	r2, [r7, #2]
 8001c76:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c8a:	78bb      	ldrb	r3, [r7, #2]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d102      	bne.n	8001c96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_PCD_EP_Open+0xaa>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e00e      	b.n	8001cc2 <HAL_PCD_EP_Open+0xc8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fe9c 	bl	80039f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da0f      	bge.n	8001cfe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f003 020f 	and.w	r2, r3, #15
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	3338      	adds	r3, #56	; 0x38
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	705a      	strb	r2, [r3, #1]
 8001cfc:	e00f      	b.n	8001d1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_PCD_EP_Close+0x6e>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e00e      	b.n	8001d56 <HAL_PCD_EP_Close+0x8c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 feda 	bl	8003b00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	3304      	adds	r3, #4
 8001d86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d102      	bne.n	8001dba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dba:	7afb      	ldrb	r3, [r7, #11]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6979      	ldr	r1, [r7, #20]
 8001dd2:	f002 f9b9 	bl	8004148 <USB_EP0StartXfer>
 8001dd6:	e008      	b.n	8001dea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6818      	ldr	r0, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	6979      	ldr	r1, [r7, #20]
 8001de6:	f001 ff67 	bl	8003cb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	460b      	mov	r3, r1
 8001e32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e34:	7afb      	ldrb	r3, [r7, #11]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	3338      	adds	r3, #56	; 0x38
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2201      	movs	r2, #1
 8001e62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e7e:	7afb      	ldrb	r3, [r7, #11]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	6979      	ldr	r1, [r7, #20]
 8001e96:	f002 f957 	bl	8004148 <USB_EP0StartXfer>
 8001e9a:	e008      	b.n	8001eae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6979      	ldr	r1, [r7, #20]
 8001eaa:	f001 ff05 	bl	8003cb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	f003 020f 	and.w	r2, r3, #15
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d901      	bls.n	8001ed6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e050      	b.n	8001f78 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da0f      	bge.n	8001efe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	3338      	adds	r3, #56	; 0x38
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	705a      	strb	r2, [r3, #1]
 8001efc:	e00d      	b.n	8001f1a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	3304      	adds	r3, #4
 8001f12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_PCD_EP_SetStall+0x82>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e01e      	b.n	8001f78 <HAL_PCD_EP_SetStall+0xc0>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68f9      	ldr	r1, [r7, #12]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 fb95 	bl	8004678 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	b2d9      	uxtb	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f002 fd85 	bl	8004a78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 020f 	and.w	r2, r3, #15
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d901      	bls.n	8001f9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e042      	b.n	8002024 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da0f      	bge.n	8001fc6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	f003 020f 	and.w	r2, r3, #15
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	3338      	adds	r3, #56	; 0x38
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3304      	adds	r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	705a      	strb	r2, [r3, #1]
 8001fc4:	e00f      	b.n	8001fe6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	f003 020f 	and.w	r2, r3, #15
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_PCD_EP_ClrStall+0x86>
 8002002:	2302      	movs	r3, #2
 8002004:	e00e      	b.n	8002024 <HAL_PCD_EP_ClrStall+0xa4>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fb9d 	bl	8004754 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800203c:	2b00      	cmp	r3, #0
 800203e:	da0c      	bge.n	800205a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	3338      	adds	r3, #56	; 0x38
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e00c      	b.n	8002074 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 020f 	and.w	r2, r3, #15
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	3304      	adds	r3, #4
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	4618      	mov	r0, r3
 800207c:	f002 f9bc 	bl	80043f8 <USB_EPStopXfer>
 8002080:	4603      	mov	r3, r0
 8002082:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002084:	7afb      	ldrb	r3, [r7, #11]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b08a      	sub	sp, #40	; 0x28
 8002092:	af02      	add	r7, sp, #8
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	3338      	adds	r3, #56	; 0x38
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a1a      	ldr	r2, [r3, #32]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d901      	bls.n	80020c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06c      	b.n	80021a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	699a      	ldr	r2, [r3, #24]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d902      	bls.n	80020e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3303      	adds	r3, #3
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ea:	e02b      	b.n	8002144 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d902      	bls.n	8002108 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3303      	adds	r3, #3
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002120:	b2db      	uxtb	r3, r3
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	4603      	mov	r3, r0
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f002 fa10 	bl	800454c <USB_WritePacket>

    ep->xfer_buff  += len;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	441a      	add	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a1a      	ldr	r2, [r3, #32]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	441a      	add	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	b29b      	uxth	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	429a      	cmp	r2, r3
 8002158:	d809      	bhi.n	800216e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002162:	429a      	cmp	r2, r3
 8002164:	d203      	bcs.n	800216e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1be      	bne.n	80020ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	429a      	cmp	r2, r3
 8002178:	d811      	bhi.n	800219e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	2201      	movs	r2, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	43db      	mvns	r3, r3
 8002194:	6939      	ldr	r1, [r7, #16]
 8002196:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800219a:	4013      	ands	r3, r2
 800219c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	333c      	adds	r3, #60	; 0x3c
 80021c0:	3304      	adds	r3, #4
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d17b      	bne.n	80022d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d015      	beq.n	8002214 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	4a61      	ldr	r2, [pc, #388]	; (8002370 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	f240 80b9 	bls.w	8002364 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80b3 	beq.w	8002364 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	461a      	mov	r2, r3
 800220c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002210:	6093      	str	r3, [r2, #8]
 8002212:	e0a7      	b.n	8002364 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222a:	461a      	mov	r2, r3
 800222c:	2320      	movs	r3, #32
 800222e:	6093      	str	r3, [r2, #8]
 8002230:	e098      	b.n	8002364 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	f040 8093 	bne.w	8002364 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	4a4b      	ldr	r2, [pc, #300]	; (8002370 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d90f      	bls.n	8002266 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225c:	461a      	mov	r2, r3
 800225e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002262:	6093      	str	r3, [r2, #8]
 8002264:	e07e      	b.n	8002364 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	3304      	adds	r3, #4
 800227a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	0159      	lsls	r1, r3, #5
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	440b      	add	r3, r1
 8002288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002292:	1ad2      	subs	r2, r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d114      	bne.n	80022c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022b0:	461a      	mov	r2, r3
 80022b2:	2101      	movs	r1, #1
 80022b4:	f002 fbe0 	bl	8004a78 <USB_EP0_OutStart>
 80022b8:	e006      	b.n	80022c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	441a      	add	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f004 fe98 	bl	8007004 <HAL_PCD_DataOutStageCallback>
 80022d4:	e046      	b.n	8002364 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4a26      	ldr	r2, [pc, #152]	; (8002374 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d124      	bne.n	8002328 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f4:	461a      	mov	r2, r3
 80022f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fa:	6093      	str	r3, [r2, #8]
 80022fc:	e032      	b.n	8002364 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002314:	461a      	mov	r2, r3
 8002316:	2320      	movs	r3, #32
 8002318:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	4619      	mov	r1, r3
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f004 fe6f 	bl	8007004 <HAL_PCD_DataOutStageCallback>
 8002326:	e01d      	b.n	8002364 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d114      	bne.n	8002358 <PCD_EP_OutXfrComplete_int+0x1b0>
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d108      	bne.n	8002358 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002350:	461a      	mov	r2, r3
 8002352:	2100      	movs	r1, #0
 8002354:	f002 fb90 	bl	8004a78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f004 fe50 	bl	8007004 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	4f54300a 	.word	0x4f54300a
 8002374:	4f54310a 	.word	0x4f54310a

08002378 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	333c      	adds	r3, #60	; 0x3c
 8002390:	3304      	adds	r3, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a15      	ldr	r2, [pc, #84]	; (8002400 <PCD_EP_OutSetupPacket_int+0x88>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d90e      	bls.n	80023cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c4:	461a      	mov	r2, r3
 80023c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f004 fe07 	bl	8006fe0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <PCD_EP_OutSetupPacket_int+0x88>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d90c      	bls.n	80023f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023ec:	461a      	mov	r2, r3
 80023ee:	2101      	movs	r1, #1
 80023f0:	f002 fb42 	bl	8004a78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	4f54300a 	.word	0x4f54300a

08002404 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
 8002410:	4613      	mov	r3, r2
 8002412:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002422:	883b      	ldrh	r3, [r7, #0]
 8002424:	0419      	lsls	r1, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	430a      	orrs	r2, r1
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
 8002430:	e028      	b.n	8002484 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	0c1b      	lsrs	r3, r3, #16
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4413      	add	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e00d      	b.n	8002462 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3340      	adds	r3, #64	; 0x40
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	4413      	add	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	3301      	adds	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	3b01      	subs	r3, #1
 8002468:	429a      	cmp	r2, r3
 800246a:	d3ec      	bcc.n	8002446 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800246c:	883b      	ldrh	r3, [r7, #0]
 800246e:	0418      	lsls	r0, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	3b01      	subs	r3, #1
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	4302      	orrs	r2, r0
 800247c:	3340      	adds	r3, #64	; 0x40
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e267      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d075      	beq.n	80025d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ea:	4b88      	ldr	r3, [pc, #544]	; (800270c <HAL_RCC_OscConfig+0x240>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d00c      	beq.n	8002510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f6:	4b85      	ldr	r3, [pc, #532]	; (800270c <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d112      	bne.n	8002528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002502:	4b82      	ldr	r3, [pc, #520]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250e:	d10b      	bne.n	8002528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	4b7e      	ldr	r3, [pc, #504]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d05b      	beq.n	80025d4 <HAL_RCC_OscConfig+0x108>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d157      	bne.n	80025d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e242      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d106      	bne.n	8002540 <HAL_RCC_OscConfig+0x74>
 8002532:	4b76      	ldr	r3, [pc, #472]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a75      	ldr	r2, [pc, #468]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xb0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x98>
 800254a:	4b70      	ldr	r3, [pc, #448]	; (800270c <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6f      	ldr	r2, [pc, #444]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b6d      	ldr	r3, [pc, #436]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6c      	ldr	r2, [pc, #432]	; (800270c <HAL_RCC_OscConfig+0x240>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xb0>
 8002564:	4b69      	ldr	r3, [pc, #420]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a68      	ldr	r2, [pc, #416]	; (800270c <HAL_RCC_OscConfig+0x240>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a65      	ldr	r2, [pc, #404]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fa2c 	bl	80009e0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe fa28 	bl	80009e0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e207      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b5b      	ldr	r3, [pc, #364]	; (800270c <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xc0>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fa18 	bl	80009e0 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe fa14 	bl	80009e0 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1f3      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	4b51      	ldr	r3, [pc, #324]	; (800270c <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0xe8>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d063      	beq.n	80026aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_RCC_OscConfig+0x240>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_RCC_OscConfig+0x240>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fa:	4b44      	ldr	r3, [pc, #272]	; (800270c <HAL_RCC_OscConfig+0x240>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x152>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1c7      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b3b      	ldr	r3, [pc, #236]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4937      	ldr	r1, [pc, #220]	; (800270c <HAL_RCC_OscConfig+0x240>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	e03a      	b.n	80026aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263c:	4b34      	ldr	r3, [pc, #208]	; (8002710 <HAL_RCC_OscConfig+0x244>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7fe f9cd 	bl	80009e0 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264a:	f7fe f9c9 	bl	80009e0 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1a8      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <HAL_RCC_OscConfig+0x240>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_RCC_OscConfig+0x240>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4925      	ldr	r1, [pc, #148]	; (800270c <HAL_RCC_OscConfig+0x240>)
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
 800267c:	e015      	b.n	80026aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_OscConfig+0x244>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe f9ac 	bl	80009e0 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800268c:	f7fe f9a8 	bl	80009e0 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e187      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d036      	beq.n	8002724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_RCC_OscConfig+0x248>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe f98c 	bl	80009e0 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fe f988 	bl	80009e0 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e167      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x240>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x200>
 80026ea:	e01b      	b.n	8002724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_OscConfig+0x248>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe f975 	bl	80009e0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	e00e      	b.n	8002718 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fa:	f7fe f971 	bl	80009e0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d907      	bls.n	8002718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e150      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
 800270c:	40023800 	.word	0x40023800
 8002710:	42470000 	.word	0x42470000
 8002714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002718:	4b88      	ldr	r3, [pc, #544]	; (800293c <HAL_RCC_OscConfig+0x470>)
 800271a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ea      	bne.n	80026fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8097 	beq.w	8002860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002736:	4b81      	ldr	r3, [pc, #516]	; (800293c <HAL_RCC_OscConfig+0x470>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10f      	bne.n	8002762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b7d      	ldr	r3, [pc, #500]	; (800293c <HAL_RCC_OscConfig+0x470>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a7c      	ldr	r2, [pc, #496]	; (800293c <HAL_RCC_OscConfig+0x470>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b7a      	ldr	r3, [pc, #488]	; (800293c <HAL_RCC_OscConfig+0x470>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275e:	2301      	movs	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002762:	4b77      	ldr	r3, [pc, #476]	; (8002940 <HAL_RCC_OscConfig+0x474>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d118      	bne.n	80027a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800276e:	4b74      	ldr	r3, [pc, #464]	; (8002940 <HAL_RCC_OscConfig+0x474>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a73      	ldr	r2, [pc, #460]	; (8002940 <HAL_RCC_OscConfig+0x474>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277a:	f7fe f931 	bl	80009e0 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002782:	f7fe f92d 	bl	80009e0 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e10c      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_OscConfig+0x474>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x2ea>
 80027a8:	4b64      	ldr	r3, [pc, #400]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a63      	ldr	r2, [pc, #396]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	e01c      	b.n	80027f0 <HAL_RCC_OscConfig+0x324>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x30c>
 80027be:	4b5f      	ldr	r3, [pc, #380]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a5e      	ldr	r2, [pc, #376]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	4b5c      	ldr	r3, [pc, #368]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a5b      	ldr	r2, [pc, #364]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0x324>
 80027d8:	4b58      	ldr	r3, [pc, #352]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a57      	ldr	r2, [pc, #348]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	4b55      	ldr	r3, [pc, #340]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a54      	ldr	r2, [pc, #336]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80027ea:	f023 0304 	bic.w	r3, r3, #4
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d015      	beq.n	8002824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe f8f2 	bl	80009e0 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7fe f8ee 	bl	80009e0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e0cb      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002816:	4b49      	ldr	r3, [pc, #292]	; (800293c <HAL_RCC_OscConfig+0x470>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ee      	beq.n	8002800 <HAL_RCC_OscConfig+0x334>
 8002822:	e014      	b.n	800284e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002824:	f7fe f8dc 	bl	80009e0 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282a:	e00a      	b.n	8002842 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282c:	f7fe f8d8 	bl	80009e0 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0b5      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002842:	4b3e      	ldr	r3, [pc, #248]	; (800293c <HAL_RCC_OscConfig+0x470>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ee      	bne.n	800282c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284e:	7dfb      	ldrb	r3, [r7, #23]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002854:	4b39      	ldr	r3, [pc, #228]	; (800293c <HAL_RCC_OscConfig+0x470>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4a38      	ldr	r2, [pc, #224]	; (800293c <HAL_RCC_OscConfig+0x470>)
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80a1 	beq.w	80029ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800286a:	4b34      	ldr	r3, [pc, #208]	; (800293c <HAL_RCC_OscConfig+0x470>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b08      	cmp	r3, #8
 8002874:	d05c      	beq.n	8002930 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d141      	bne.n	8002902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_OscConfig+0x478>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe f8ac 	bl	80009e0 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe f8a8 	bl	80009e0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e087      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	019b      	lsls	r3, r3, #6
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	3b01      	subs	r3, #1
 80028c4:	041b      	lsls	r3, r3, #16
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	491b      	ldr	r1, [pc, #108]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x478>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe f881 	bl	80009e0 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe f87d 	bl	80009e0 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e05c      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <HAL_RCC_OscConfig+0x470>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x416>
 8002900:	e054      	b.n	80029ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_RCC_OscConfig+0x478>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe f86a 	bl	80009e0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe f866 	bl	80009e0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e045      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_RCC_OscConfig+0x470>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x444>
 800292e:	e03d      	b.n	80029ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e038      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
 800293c:	40023800 	.word	0x40023800
 8002940:	40007000 	.word	0x40007000
 8002944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4ec>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d028      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d121      	bne.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d11a      	bne.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002978:	4013      	ands	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800297e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002980:	4293      	cmp	r3, r2
 8002982:	d111      	bne.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	3b01      	subs	r3, #1
 8002992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0cc      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90c      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	494d      	ldr	r1, [pc, #308]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d044      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e067      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4934      	ldr	r1, [pc, #208]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7fd ff98 	bl	80009e0 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7fd ff94 	bl	80009e0 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d20c      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e032      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b42:	f000 f821 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	490a      	ldr	r1, [pc, #40]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fef8 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	08007604 	.word	0x08007604
 8002b80:	20000040 	.word	0x20000040
 8002b84:	20000044 	.word	0x20000044

08002b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b090      	sub	sp, #64	; 0x40
 8002b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
 8002b94:	2300      	movs	r3, #0
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b98:	2300      	movs	r3, #0
 8002b9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba0:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d00d      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	f200 80a1 	bhi.w	8002cf4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x34>
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bba:	e09b      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bbc:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x184>)
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bc0:	e09b      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc2:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bc6:	e098      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc8:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd2:	4b4d      	ldr	r3, [pc, #308]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d028      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bde:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	2200      	movs	r2, #0
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	627a      	str	r2, [r7, #36]	; 0x24
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf4:	fb03 f201 	mul.w	r2, r3, r1
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	4a43      	ldr	r2, [pc, #268]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c02:	fba0 1202 	umull	r1, r2, r0, r2
 8002c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c08:	460a      	mov	r2, r1
 8002c0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0e:	4413      	add	r3, r2
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	2200      	movs	r2, #0
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	61fa      	str	r2, [r7, #28]
 8002c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c22:	f7fd fae1 	bl	80001e8 <__aeabi_uldivmod>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2e:	e053      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c30:	4b35      	ldr	r3, [pc, #212]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	2200      	movs	r2, #0
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	617a      	str	r2, [r7, #20]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c42:	f04f 0b00 	mov.w	fp, #0
 8002c46:	4652      	mov	r2, sl
 8002c48:	465b      	mov	r3, fp
 8002c4a:	f04f 0000 	mov.w	r0, #0
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	0159      	lsls	r1, r3, #5
 8002c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c58:	0150      	lsls	r0, r2, #5
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	ebb2 080a 	subs.w	r8, r2, sl
 8002c62:	eb63 090b 	sbc.w	r9, r3, fp
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c7a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c7e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	00eb      	lsls	r3, r5, #3
 8002c8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c90:	00e2      	lsls	r2, r4, #3
 8002c92:	4614      	mov	r4, r2
 8002c94:	461d      	mov	r5, r3
 8002c96:	eb14 030a 	adds.w	r3, r4, sl
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	eb45 030b 	adc.w	r3, r5, fp
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cae:	4629      	mov	r1, r5
 8002cb0:	028b      	lsls	r3, r1, #10
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb8:	4621      	mov	r1, r4
 8002cba:	028a      	lsls	r2, r1, #10
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	60fa      	str	r2, [r7, #12]
 8002cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ccc:	f7fd fa8c 	bl	80001e8 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	0c1b      	lsrs	r3, r3, #16
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x184>)
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3740      	adds	r7, #64	; 0x40
 8002d00:	46bd      	mov	sp, r7
 8002d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	017d7840 	.word	0x017d7840

08002d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000040 	.word	0x20000040

08002d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d30:	f7ff fff0 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	0a9b      	lsrs	r3, r3, #10
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4903      	ldr	r1, [pc, #12]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	08007614 	.word	0x08007614

08002d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d58:	f7ff ffdc 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0b5b      	lsrs	r3, r3, #13
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08007614 	.word	0x08007614

08002d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e03f      	b.n	8002e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd fcfe 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f829 	bl	8002e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e1c:	b0c0      	sub	sp, #256	; 0x100
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	68d9      	ldr	r1, [r3, #12]
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	ea40 0301 	orr.w	r3, r0, r1
 8002e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e70:	f021 010c 	bic.w	r1, r1, #12
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e92:	6999      	ldr	r1, [r3, #24]
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	ea40 0301 	orr.w	r3, r0, r1
 8002e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b8f      	ldr	r3, [pc, #572]	; (80030e4 <UART_SetConfig+0x2cc>)
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d005      	beq.n	8002eb8 <UART_SetConfig+0xa0>
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b8d      	ldr	r3, [pc, #564]	; (80030e8 <UART_SetConfig+0x2d0>)
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d104      	bne.n	8002ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eb8:	f7ff ff4c 	bl	8002d54 <HAL_RCC_GetPCLK2Freq>
 8002ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ec0:	e003      	b.n	8002eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ec2:	f7ff ff33 	bl	8002d2c <HAL_RCC_GetPCLK1Freq>
 8002ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed4:	f040 810c 	bne.w	80030f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002edc:	2200      	movs	r2, #0
 8002ede:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002eea:	4622      	mov	r2, r4
 8002eec:	462b      	mov	r3, r5
 8002eee:	1891      	adds	r1, r2, r2
 8002ef0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ef2:	415b      	adcs	r3, r3
 8002ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002efa:	4621      	mov	r1, r4
 8002efc:	eb12 0801 	adds.w	r8, r2, r1
 8002f00:	4629      	mov	r1, r5
 8002f02:	eb43 0901 	adc.w	r9, r3, r1
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f1a:	4690      	mov	r8, r2
 8002f1c:	4699      	mov	r9, r3
 8002f1e:	4623      	mov	r3, r4
 8002f20:	eb18 0303 	adds.w	r3, r8, r3
 8002f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f28:	462b      	mov	r3, r5
 8002f2a:	eb49 0303 	adc.w	r3, r9, r3
 8002f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f46:	460b      	mov	r3, r1
 8002f48:	18db      	adds	r3, r3, r3
 8002f4a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	eb42 0303 	adc.w	r3, r2, r3
 8002f52:	657b      	str	r3, [r7, #84]	; 0x54
 8002f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f5c:	f7fd f944 	bl	80001e8 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <UART_SetConfig+0x2d4>)
 8002f66:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	011c      	lsls	r4, r3, #4
 8002f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	1891      	adds	r1, r2, r2
 8002f86:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f88:	415b      	adcs	r3, r3
 8002f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f90:	4641      	mov	r1, r8
 8002f92:	eb12 0a01 	adds.w	sl, r2, r1
 8002f96:	4649      	mov	r1, r9
 8002f98:	eb43 0b01 	adc.w	fp, r3, r1
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fb0:	4692      	mov	sl, r2
 8002fb2:	469b      	mov	fp, r3
 8002fb4:	4643      	mov	r3, r8
 8002fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8002fba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	18db      	adds	r3, r3, r3
 8002fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	eb42 0303 	adc.w	r3, r2, r3
 8002fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ff2:	f7fd f8f9 	bl	80001e8 <__aeabi_uldivmod>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <UART_SetConfig+0x2d4>)
 8002ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2264      	movs	r2, #100	; 0x64
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	1acb      	subs	r3, r1, r3
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003012:	4b36      	ldr	r3, [pc, #216]	; (80030ec <UART_SetConfig+0x2d4>)
 8003014:	fba3 2302 	umull	r2, r3, r3, r2
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003020:	441c      	add	r4, r3
 8003022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800302c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	1891      	adds	r1, r2, r2
 800303a:	63b9      	str	r1, [r7, #56]	; 0x38
 800303c:	415b      	adcs	r3, r3
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003044:	4641      	mov	r1, r8
 8003046:	1851      	adds	r1, r2, r1
 8003048:	6339      	str	r1, [r7, #48]	; 0x30
 800304a:	4649      	mov	r1, r9
 800304c:	414b      	adcs	r3, r1
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800305c:	4659      	mov	r1, fp
 800305e:	00cb      	lsls	r3, r1, #3
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003066:	4651      	mov	r1, sl
 8003068:	00ca      	lsls	r2, r1, #3
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	4603      	mov	r3, r0
 8003070:	4642      	mov	r2, r8
 8003072:	189b      	adds	r3, r3, r2
 8003074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003078:	464b      	mov	r3, r9
 800307a:	460a      	mov	r2, r1
 800307c:	eb42 0303 	adc.w	r3, r2, r3
 8003080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003090:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003098:	460b      	mov	r3, r1
 800309a:	18db      	adds	r3, r3, r3
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
 800309e:	4613      	mov	r3, r2
 80030a0:	eb42 0303 	adc.w	r3, r2, r3
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030ae:	f7fd f89b 	bl	80001e8 <__aeabi_uldivmod>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <UART_SetConfig+0x2d4>)
 80030b8:	fba3 1302 	umull	r1, r3, r3, r2
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	2164      	movs	r1, #100	; 0x64
 80030c0:	fb01 f303 	mul.w	r3, r1, r3
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	3332      	adds	r3, #50	; 0x32
 80030ca:	4a08      	ldr	r2, [pc, #32]	; (80030ec <UART_SetConfig+0x2d4>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	f003 0207 	and.w	r2, r3, #7
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4422      	add	r2, r4
 80030de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030e0:	e105      	b.n	80032ee <UART_SetConfig+0x4d6>
 80030e2:	bf00      	nop
 80030e4:	40011000 	.word	0x40011000
 80030e8:	40011400 	.word	0x40011400
 80030ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f4:	2200      	movs	r2, #0
 80030f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003102:	4642      	mov	r2, r8
 8003104:	464b      	mov	r3, r9
 8003106:	1891      	adds	r1, r2, r2
 8003108:	6239      	str	r1, [r7, #32]
 800310a:	415b      	adcs	r3, r3
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003112:	4641      	mov	r1, r8
 8003114:	1854      	adds	r4, r2, r1
 8003116:	4649      	mov	r1, r9
 8003118:	eb43 0501 	adc.w	r5, r3, r1
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	00eb      	lsls	r3, r5, #3
 8003126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800312a:	00e2      	lsls	r2, r4, #3
 800312c:	4614      	mov	r4, r2
 800312e:	461d      	mov	r5, r3
 8003130:	4643      	mov	r3, r8
 8003132:	18e3      	adds	r3, r4, r3
 8003134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003138:	464b      	mov	r3, r9
 800313a:	eb45 0303 	adc.w	r3, r5, r3
 800313e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800314e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800315e:	4629      	mov	r1, r5
 8003160:	008b      	lsls	r3, r1, #2
 8003162:	4621      	mov	r1, r4
 8003164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003168:	4621      	mov	r1, r4
 800316a:	008a      	lsls	r2, r1, #2
 800316c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003170:	f7fd f83a 	bl	80001e8 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4b60      	ldr	r3, [pc, #384]	; (80032fc <UART_SetConfig+0x4e4>)
 800317a:	fba3 2302 	umull	r2, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	011c      	lsls	r4, r3, #4
 8003182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800318c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003194:	4642      	mov	r2, r8
 8003196:	464b      	mov	r3, r9
 8003198:	1891      	adds	r1, r2, r2
 800319a:	61b9      	str	r1, [r7, #24]
 800319c:	415b      	adcs	r3, r3
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a4:	4641      	mov	r1, r8
 80031a6:	1851      	adds	r1, r2, r1
 80031a8:	6139      	str	r1, [r7, #16]
 80031aa:	4649      	mov	r1, r9
 80031ac:	414b      	adcs	r3, r1
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031bc:	4659      	mov	r1, fp
 80031be:	00cb      	lsls	r3, r1, #3
 80031c0:	4651      	mov	r1, sl
 80031c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c6:	4651      	mov	r1, sl
 80031c8:	00ca      	lsls	r2, r1, #3
 80031ca:	4610      	mov	r0, r2
 80031cc:	4619      	mov	r1, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	4642      	mov	r2, r8
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d8:	464b      	mov	r3, r9
 80031da:	460a      	mov	r2, r1
 80031dc:	eb42 0303 	adc.w	r3, r2, r3
 80031e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80031ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031fc:	4649      	mov	r1, r9
 80031fe:	008b      	lsls	r3, r1, #2
 8003200:	4641      	mov	r1, r8
 8003202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003206:	4641      	mov	r1, r8
 8003208:	008a      	lsls	r2, r1, #2
 800320a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800320e:	f7fc ffeb 	bl	80001e8 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4b39      	ldr	r3, [pc, #228]	; (80032fc <UART_SetConfig+0x4e4>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2164      	movs	r1, #100	; 0x64
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	3332      	adds	r3, #50	; 0x32
 800322a:	4a34      	ldr	r2, [pc, #208]	; (80032fc <UART_SetConfig+0x4e4>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003236:	441c      	add	r4, r3
 8003238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800323c:	2200      	movs	r2, #0
 800323e:	673b      	str	r3, [r7, #112]	; 0x70
 8003240:	677a      	str	r2, [r7, #116]	; 0x74
 8003242:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003246:	4642      	mov	r2, r8
 8003248:	464b      	mov	r3, r9
 800324a:	1891      	adds	r1, r2, r2
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	415b      	adcs	r3, r3
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003256:	4641      	mov	r1, r8
 8003258:	1851      	adds	r1, r2, r1
 800325a:	6039      	str	r1, [r7, #0]
 800325c:	4649      	mov	r1, r9
 800325e:	414b      	adcs	r3, r1
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800326e:	4659      	mov	r1, fp
 8003270:	00cb      	lsls	r3, r1, #3
 8003272:	4651      	mov	r1, sl
 8003274:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003278:	4651      	mov	r1, sl
 800327a:	00ca      	lsls	r2, r1, #3
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	4603      	mov	r3, r0
 8003282:	4642      	mov	r2, r8
 8003284:	189b      	adds	r3, r3, r2
 8003286:	66bb      	str	r3, [r7, #104]	; 0x68
 8003288:	464b      	mov	r3, r9
 800328a:	460a      	mov	r2, r1
 800328c:	eb42 0303 	adc.w	r3, r2, r3
 8003290:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	663b      	str	r3, [r7, #96]	; 0x60
 800329c:	667a      	str	r2, [r7, #100]	; 0x64
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032aa:	4649      	mov	r1, r9
 80032ac:	008b      	lsls	r3, r1, #2
 80032ae:	4641      	mov	r1, r8
 80032b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032b4:	4641      	mov	r1, r8
 80032b6:	008a      	lsls	r2, r1, #2
 80032b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032bc:	f7fc ff94 	bl	80001e8 <__aeabi_uldivmod>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <UART_SetConfig+0x4e4>)
 80032c6:	fba3 1302 	umull	r1, r3, r3, r2
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	2164      	movs	r1, #100	; 0x64
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	3332      	adds	r3, #50	; 0x32
 80032d8:	4a08      	ldr	r2, [pc, #32]	; (80032fc <UART_SetConfig+0x4e4>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	f003 020f 	and.w	r2, r3, #15
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4422      	add	r2, r4
 80032ec:	609a      	str	r2, [r3, #8]
}
 80032ee:	bf00      	nop
 80032f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	51eb851f 	.word	0x51eb851f

08003300 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003300:	b084      	sub	sp, #16
 8003302:	b580      	push	{r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	f107 001c 	add.w	r0, r7, #28
 800330e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	2b01      	cmp	r3, #1
 8003316:	d122      	bne.n	800335e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800332c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d105      	bne.n	8003352 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f001 fbee 	bl	8004b34 <USB_CoreReset>
 8003358:	4603      	mov	r3, r0
 800335a:	73fb      	strb	r3, [r7, #15]
 800335c:	e01a      	b.n	8003394 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f001 fbe2 	bl	8004b34 <USB_CoreReset>
 8003370:	4603      	mov	r3, r0
 8003372:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
 8003386:	e005      	b.n	8003394 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10b      	bne.n	80033b2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f043 0206 	orr.w	r2, r3, #6
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f043 0220 	orr.w	r2, r3, #32
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033be:	b004      	add	sp, #16
 80033c0:	4770      	bx	lr
	...

080033c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	4613      	mov	r3, r2
 80033d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d165      	bne.n	80034a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4a41      	ldr	r2, [pc, #260]	; (80034e0 <USB_SetTurnaroundTime+0x11c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d906      	bls.n	80033ee <USB_SetTurnaroundTime+0x2a>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4a40      	ldr	r2, [pc, #256]	; (80034e4 <USB_SetTurnaroundTime+0x120>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d202      	bcs.n	80033ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80033e8:	230f      	movs	r3, #15
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e062      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4a3c      	ldr	r2, [pc, #240]	; (80034e4 <USB_SetTurnaroundTime+0x120>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d306      	bcc.n	8003404 <USB_SetTurnaroundTime+0x40>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4a3b      	ldr	r2, [pc, #236]	; (80034e8 <USB_SetTurnaroundTime+0x124>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d202      	bcs.n	8003404 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80033fe:	230e      	movs	r3, #14
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e057      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4a38      	ldr	r2, [pc, #224]	; (80034e8 <USB_SetTurnaroundTime+0x124>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d306      	bcc.n	800341a <USB_SetTurnaroundTime+0x56>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4a37      	ldr	r2, [pc, #220]	; (80034ec <USB_SetTurnaroundTime+0x128>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d202      	bcs.n	800341a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003414:	230d      	movs	r3, #13
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e04c      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4a33      	ldr	r2, [pc, #204]	; (80034ec <USB_SetTurnaroundTime+0x128>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d306      	bcc.n	8003430 <USB_SetTurnaroundTime+0x6c>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4a32      	ldr	r2, [pc, #200]	; (80034f0 <USB_SetTurnaroundTime+0x12c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d802      	bhi.n	8003430 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800342a:	230c      	movs	r3, #12
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e041      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4a2f      	ldr	r2, [pc, #188]	; (80034f0 <USB_SetTurnaroundTime+0x12c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d906      	bls.n	8003446 <USB_SetTurnaroundTime+0x82>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <USB_SetTurnaroundTime+0x130>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d802      	bhi.n	8003446 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003440:	230b      	movs	r3, #11
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e036      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4a2a      	ldr	r2, [pc, #168]	; (80034f4 <USB_SetTurnaroundTime+0x130>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d906      	bls.n	800345c <USB_SetTurnaroundTime+0x98>
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <USB_SetTurnaroundTime+0x134>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d802      	bhi.n	800345c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003456:	230a      	movs	r3, #10
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	e02b      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4a26      	ldr	r2, [pc, #152]	; (80034f8 <USB_SetTurnaroundTime+0x134>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d906      	bls.n	8003472 <USB_SetTurnaroundTime+0xae>
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4a25      	ldr	r2, [pc, #148]	; (80034fc <USB_SetTurnaroundTime+0x138>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d202      	bcs.n	8003472 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800346c:	2309      	movs	r3, #9
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e020      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4a21      	ldr	r2, [pc, #132]	; (80034fc <USB_SetTurnaroundTime+0x138>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d306      	bcc.n	8003488 <USB_SetTurnaroundTime+0xc4>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4a20      	ldr	r2, [pc, #128]	; (8003500 <USB_SetTurnaroundTime+0x13c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d802      	bhi.n	8003488 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003482:	2308      	movs	r3, #8
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e015      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4a1d      	ldr	r2, [pc, #116]	; (8003500 <USB_SetTurnaroundTime+0x13c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d906      	bls.n	800349e <USB_SetTurnaroundTime+0xda>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4a1c      	ldr	r2, [pc, #112]	; (8003504 <USB_SetTurnaroundTime+0x140>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d202      	bcs.n	800349e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003498:	2307      	movs	r3, #7
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e00a      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800349e:	2306      	movs	r3, #6
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e007      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80034aa:	2309      	movs	r3, #9
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e001      	b.n	80034b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80034b0:	2309      	movs	r3, #9
 80034b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	029b      	lsls	r3, r3, #10
 80034c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	371c      	adds	r7, #28
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	00d8acbf 	.word	0x00d8acbf
 80034e4:	00e4e1c0 	.word	0x00e4e1c0
 80034e8:	00f42400 	.word	0x00f42400
 80034ec:	01067380 	.word	0x01067380
 80034f0:	011a499f 	.word	0x011a499f
 80034f4:	01312cff 	.word	0x01312cff
 80034f8:	014ca43f 	.word	0x014ca43f
 80034fc:	016e3600 	.word	0x016e3600
 8003500:	01a6ab1f 	.word	0x01a6ab1f
 8003504:	01e84800 	.word	0x01e84800

08003508 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f043 0201 	orr.w	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f023 0201 	bic.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d115      	bne.n	800359a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800357a:	2001      	movs	r0, #1
 800357c:	f7fd fa3c 	bl	80009f8 <HAL_Delay>
      ms++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3301      	adds	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f001 fa45 	bl	8004a16 <USB_GetMode>
 800358c:	4603      	mov	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d01e      	beq.n	80035d0 <USB_SetCurrentMode+0x84>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b31      	cmp	r3, #49	; 0x31
 8003596:	d9f0      	bls.n	800357a <USB_SetCurrentMode+0x2e>
 8003598:	e01a      	b.n	80035d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d115      	bne.n	80035cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7fd fa23 	bl	80009f8 <HAL_Delay>
      ms++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3301      	adds	r3, #1
 80035b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f001 fa2c 	bl	8004a16 <USB_GetMode>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <USB_SetCurrentMode+0x84>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b31      	cmp	r3, #49	; 0x31
 80035c8:	d9f0      	bls.n	80035ac <USB_SetCurrentMode+0x60>
 80035ca:	e001      	b.n	80035d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e005      	b.n	80035dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b32      	cmp	r3, #50	; 0x32
 80035d4:	d101      	bne.n	80035da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035e4:	b084      	sub	sp, #16
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b086      	sub	sp, #24
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	e009      	b.n	8003618 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3340      	adds	r3, #64	; 0x40
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	2200      	movs	r2, #0
 8003610:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	3301      	adds	r3, #1
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b0e      	cmp	r3, #14
 800361c:	d9f2      	bls.n	8003604 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800361e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11c      	bne.n	800365e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003632:	f043 0302 	orr.w	r3, r3, #2
 8003636:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	639a      	str	r2, [r3, #56]	; 0x38
 800365c:	e00b      	b.n	8003676 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800367c:	461a      	mov	r2, r3
 800367e:	2300      	movs	r3, #0
 8003680:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003688:	4619      	mov	r1, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003690:	461a      	mov	r2, r3
 8003692:	680b      	ldr	r3, [r1, #0]
 8003694:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	2b01      	cmp	r3, #1
 800369a:	d10c      	bne.n	80036b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d104      	bne.n	80036ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80036a2:	2100      	movs	r1, #0
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f965 	bl	8003974 <USB_SetDevSpeed>
 80036aa:	e008      	b.n	80036be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80036ac:	2101      	movs	r1, #1
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f960 	bl	8003974 <USB_SetDevSpeed>
 80036b4:	e003      	b.n	80036be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80036b6:	2103      	movs	r1, #3
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f95b 	bl	8003974 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80036be:	2110      	movs	r1, #16
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8f3 	bl	80038ac <USB_FlushTxFifo>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f91f 	bl	8003914 <USB_FlushRxFifo>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e6:	461a      	mov	r2, r3
 80036e8:	2300      	movs	r3, #0
 80036ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f2:	461a      	mov	r2, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	461a      	mov	r2, r3
 8003700:	2300      	movs	r3, #0
 8003702:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003704:	2300      	movs	r3, #0
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	e043      	b.n	8003792 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800371c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003720:	d118      	bne.n	8003754 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003734:	461a      	mov	r2, r3
 8003736:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	e013      	b.n	8003766 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374a:	461a      	mov	r2, r3
 800374c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e008      	b.n	8003766 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003760:	461a      	mov	r2, r3
 8003762:	2300      	movs	r3, #0
 8003764:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003772:	461a      	mov	r2, r3
 8003774:	2300      	movs	r3, #0
 8003776:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003784:	461a      	mov	r2, r3
 8003786:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800378a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3301      	adds	r3, #1
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	429a      	cmp	r2, r3
 8003798:	d3b7      	bcc.n	800370a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	e043      	b.n	8003828 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037b6:	d118      	bne.n	80037ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10a      	bne.n	80037d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ca:	461a      	mov	r2, r3
 80037cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e013      	b.n	80037fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e0:	461a      	mov	r2, r3
 80037e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	e008      	b.n	80037fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f6:	461a      	mov	r2, r3
 80037f8:	2300      	movs	r3, #0
 80037fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003808:	461a      	mov	r2, r3
 800380a:	2300      	movs	r3, #0
 800380c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381a:	461a      	mov	r2, r3
 800381c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003820:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3301      	adds	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d3b7      	bcc.n	80037a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003842:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003850:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	2b00      	cmp	r3, #0
 8003856:	d105      	bne.n	8003864 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f043 0210 	orr.w	r2, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <USB_DevInit+0x2c4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f043 0208 	orr.w	r2, r3, #8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d107      	bne.n	8003898 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003898:	7dfb      	ldrb	r3, [r7, #23]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038a4:	b004      	add	sp, #16
 80038a6:	4770      	bx	lr
 80038a8:	803c3800 	.word	0x803c3800

080038ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3301      	adds	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a13      	ldr	r2, [pc, #76]	; (8003910 <USB_FlushTxFifo+0x64>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e01b      	b.n	8003904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	daf2      	bge.n	80038ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	019b      	lsls	r3, r3, #6
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3301      	adds	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a08      	ldr	r2, [pc, #32]	; (8003910 <USB_FlushTxFifo+0x64>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e006      	b.n	8003904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d0f0      	beq.n	80038e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	00030d40 	.word	0x00030d40

08003914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3301      	adds	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4a11      	ldr	r2, [pc, #68]	; (8003970 <USB_FlushRxFifo+0x5c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e018      	b.n	8003964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	daf2      	bge.n	8003920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2210      	movs	r2, #16
 8003942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3301      	adds	r3, #1
 8003948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4a08      	ldr	r2, [pc, #32]	; (8003970 <USB_FlushRxFifo+0x5c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e006      	b.n	8003964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d0f0      	beq.n	8003944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	00030d40 	.word	0x00030d40

08003974 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	68f9      	ldr	r1, [r7, #12]
 8003990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b087      	sub	sp, #28
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0306 	and.w	r3, r3, #6
 80039be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80039c6:	2300      	movs	r3, #0
 80039c8:	75fb      	strb	r3, [r7, #23]
 80039ca:	e00a      	b.n	80039e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d002      	beq.n	80039d8 <USB_GetDevSpeed+0x32>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b06      	cmp	r3, #6
 80039d6:	d102      	bne.n	80039de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80039d8:	2302      	movs	r3, #2
 80039da:	75fb      	strb	r3, [r7, #23]
 80039dc:	e001      	b.n	80039e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80039de:	230f      	movs	r3, #15
 80039e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d13a      	bne.n	8003a82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	68f9      	ldr	r1, [r7, #12]
 8003a26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d155      	bne.n	8003af0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	791b      	ldrb	r3, [r3, #4]
 8003a5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	059b      	lsls	r3, r3, #22
 8003a66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	e036      	b.n	8003af0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a88:	69da      	ldr	r2, [r3, #28]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	68f9      	ldr	r1, [r7, #12]
 8003a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11a      	bne.n	8003af0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	791b      	ldrb	r3, [r3, #4]
 8003ad4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	0151      	lsls	r1, r2, #5
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	440a      	add	r2, r1
 8003ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	785b      	ldrb	r3, [r3, #1]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d161      	bne.n	8003be0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b32:	d11f      	bne.n	8003b74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b94:	4013      	ands	r3, r2
 8003b96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	0159      	lsls	r1, r3, #5
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	440b      	add	r3, r1
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <USB_DeactivateEndpoint+0x1b0>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
 8003bde:	e060      	b.n	8003ca2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bf6:	d11f      	bne.n	8003c38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	0151      	lsls	r1, r2, #5
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	43db      	mvns	r3, r3
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c58:	4013      	ands	r3, r2
 8003c5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	43db      	mvns	r3, r3
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	0159      	lsls	r1, r3, #5
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	440b      	add	r3, r1
 8003c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <USB_DeactivateEndpoint+0x1b4>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	ec337800 	.word	0xec337800
 8003cb4:	eff37800 	.word	0xeff37800

08003cb8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	785b      	ldrb	r3, [r3, #1]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	f040 815c 	bne.w	8003f92 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d132      	bne.n	8003d48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	0151      	lsls	r1, r2, #5
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cfc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	0151      	lsls	r1, r2, #5
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	440a      	add	r2, r1
 8003d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d40:	0cdb      	lsrs	r3, r3, #19
 8003d42:	04db      	lsls	r3, r3, #19
 8003d44:	6113      	str	r3, [r2, #16]
 8003d46:	e074      	b.n	8003e32 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	0151      	lsls	r1, r2, #5
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d62:	0cdb      	lsrs	r3, r3, #19
 8003d64:	04db      	lsls	r3, r3, #19
 8003d66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d98:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6999      	ldr	r1, [r3, #24]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	440b      	add	r3, r1
 8003da4:	1e59      	subs	r1, r3, #1
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003db0:	4b9d      	ldr	r3, [pc, #628]	; (8004028 <USB_EPStartXfer+0x370>)
 8003db2:	400b      	ands	r3, r1
 8003db4:	69b9      	ldr	r1, [r7, #24]
 8003db6:	0148      	lsls	r0, r1, #5
 8003db8:	69f9      	ldr	r1, [r7, #28]
 8003dba:	4401      	add	r1, r0
 8003dbc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	0148      	lsls	r0, r1, #5
 8003dde:	69f9      	ldr	r1, [r7, #28]
 8003de0:	4401      	add	r1, r0
 8003de2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003de6:	4313      	orrs	r3, r2
 8003de8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	791b      	ldrb	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d11f      	bne.n	8003e32 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	0151      	lsls	r1, r2, #5
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	440a      	add	r2, r1
 8003e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	0151      	lsls	r1, r2, #5
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	440a      	add	r2, r1
 8003e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d14b      	bne.n	8003ed0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	791b      	ldrb	r3, [r3, #4]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d128      	bne.n	8003eae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d110      	bne.n	8003e8e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	0151      	lsls	r1, r2, #5
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	440a      	add	r2, r1
 8003e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	e00f      	b.n	8003eae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	0151      	lsls	r1, r2, #5
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e133      	b.n	8004138 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	0151      	lsls	r1, r2, #5
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	440a      	add	r2, r1
 8003ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003eee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d015      	beq.n	8003f24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 811b 	beq.w	8004138 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	2101      	movs	r1, #1
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	69f9      	ldr	r1, [r7, #28]
 8003f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	634b      	str	r3, [r1, #52]	; 0x34
 8003f22:	e109      	b.n	8004138 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e00f      	b.n	8003f76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	0151      	lsls	r1, r2, #5
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	440a      	add	r2, r1
 8003f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6919      	ldr	r1, [r3, #16]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	b298      	uxth	r0, r3
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	4603      	mov	r3, r0
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fade 	bl	800454c <USB_WritePacket>
 8003f90:	e0d2      	b.n	8004138 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	0151      	lsls	r1, r2, #5
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	440a      	add	r2, r1
 8003fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fac:	0cdb      	lsrs	r3, r3, #19
 8003fae:	04db      	lsls	r3, r3, #19
 8003fb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	0151      	lsls	r1, r2, #5
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d126      	bne.n	800402c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff4:	69b9      	ldr	r1, [r7, #24]
 8003ff6:	0148      	lsls	r0, r1, #5
 8003ff8:	69f9      	ldr	r1, [r7, #28]
 8003ffa:	4401      	add	r1, r0
 8003ffc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004000:	4313      	orrs	r3, r2
 8004002:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004022:	6113      	str	r3, [r2, #16]
 8004024:	e03a      	b.n	800409c <USB_EPStartXfer+0x3e4>
 8004026:	bf00      	nop
 8004028:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4413      	add	r3, r2
 8004036:	1e5a      	subs	r2, r3, #1
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	8afa      	ldrh	r2, [r7, #22]
 8004048:	fb03 f202 	mul.w	r2, r3, r2
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	8afb      	ldrh	r3, [r7, #22]
 8004060:	04d9      	lsls	r1, r3, #19
 8004062:	4b38      	ldr	r3, [pc, #224]	; (8004144 <USB_EPStartXfer+0x48c>)
 8004064:	400b      	ands	r3, r1
 8004066:	69b9      	ldr	r1, [r7, #24]
 8004068:	0148      	lsls	r0, r1, #5
 800406a:	69f9      	ldr	r1, [r7, #28]
 800406c:	4401      	add	r1, r0
 800406e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004072:	4313      	orrs	r3, r2
 8004074:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	0148      	lsls	r0, r1, #5
 8004090:	69f9      	ldr	r1, [r7, #28]
 8004092:	4401      	add	r1, r0
 8004094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004098:	4313      	orrs	r3, r2
 800409a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10d      	bne.n	80040be <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ba:	460a      	mov	r2, r1
 80040bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	791b      	ldrb	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d128      	bne.n	8004118 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d110      	bne.n	80040f8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	0151      	lsls	r1, r2, #5
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	440a      	add	r2, r1
 80040ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	e00f      	b.n	8004118 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	440a      	add	r2, r1
 800410e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004116:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	440a      	add	r2, r1
 800412e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004136:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	1ff80000 	.word	0x1ff80000

08004148 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	4613      	mov	r3, r2
 8004154:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	2b01      	cmp	r3, #1
 8004166:	f040 80ce 	bne.w	8004306 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d132      	bne.n	80041d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004194:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d0:	0cdb      	lsrs	r3, r3, #19
 80041d2:	04db      	lsls	r3, r3, #19
 80041d4:	6113      	str	r3, [r2, #16]
 80041d6:	e04e      	b.n	8004276 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f2:	0cdb      	lsrs	r3, r3, #19
 80041f4:	04db      	lsls	r3, r3, #19
 80041f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	440a      	add	r2, r1
 800420e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004212:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004216:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800421a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	429a      	cmp	r2, r3
 8004226:	d903      	bls.n	8004230 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	0151      	lsls	r1, r2, #5
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	440a      	add	r2, r1
 8004246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800424e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004266:	6939      	ldr	r1, [r7, #16]
 8004268:	0148      	lsls	r0, r1, #5
 800426a:	6979      	ldr	r1, [r7, #20]
 800426c:	4401      	add	r1, r0
 800426e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004272:	4313      	orrs	r3, r2
 8004274:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d11e      	bne.n	80042ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004290:	461a      	mov	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e097      	b.n	80043ea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8083 	beq.w	80043ea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	6979      	ldr	r1, [r7, #20]
 80042fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004300:	4313      	orrs	r3, r2
 8004302:	634b      	str	r3, [r1, #52]	; 0x34
 8004304:	e071      	b.n	80043ea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004320:	0cdb      	lsrs	r3, r3, #19
 8004322:	04db      	lsls	r3, r3, #19
 8004324:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004340:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004344:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004348:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004380:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	4413      	add	r3, r2
 800438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004398:	6939      	ldr	r1, [r7, #16]
 800439a:	0148      	lsls	r0, r1, #5
 800439c:	6979      	ldr	r1, [r7, #20]
 800439e:	4401      	add	r1, r0
 80043a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043a4:	4313      	orrs	r3, r2
 80043a6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d10d      	bne.n	80043ca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6919      	ldr	r1, [r3, #16]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	460a      	mov	r2, r1
 80043c8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d14a      	bne.n	80044ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800442a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800442e:	f040 8086 	bne.w	800453e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004450:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004454:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004474:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004478:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f242 7210 	movw	r2, #10000	; 0x2710
 8004486:	4293      	cmp	r3, r2
 8004488:	d902      	bls.n	8004490 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
          break;
 800448e:	e056      	b.n	800453e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044a8:	d0e7      	beq.n	800447a <USB_EPStopXfer+0x82>
 80044aa:	e048      	b.n	800453e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044c4:	d13b      	bne.n	800453e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	0151      	lsls	r1, r2, #5
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	440a      	add	r2, r1
 80044e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	7812      	ldrb	r2, [r2, #0]
 80044fe:	0151      	lsls	r1, r2, #5
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	440a      	add	r2, r1
 8004504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800450c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3301      	adds	r3, #1
 8004512:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f242 7210 	movw	r2, #10000	; 0x2710
 800451a:	4293      	cmp	r3, r2
 800451c:	d902      	bls.n	8004524 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
          break;
 8004522:	e00c      	b.n	800453e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800453c:	d0e7      	beq.n	800450e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800453e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004540:	4618      	mov	r0, r3
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	460b      	mov	r3, r1
 800455c:	71fb      	strb	r3, [r7, #7]
 800455e:	4613      	mov	r3, r2
 8004560:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800456a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d123      	bne.n	80045ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004572:	88bb      	ldrh	r3, [r7, #4]
 8004574:	3303      	adds	r3, #3
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e018      	b.n	80045b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	031a      	lsls	r2, r3, #12
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	4413      	add	r3, r2
 8004588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800458c:	461a      	mov	r2, r3
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3301      	adds	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3301      	adds	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3301      	adds	r3, #1
 80045aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3e2      	bcc.n	8004580 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3724      	adds	r7, #36	; 0x24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b08b      	sub	sp, #44	; 0x2c
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	e014      	b.n	800461e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	3301      	adds	r3, #1
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	3301      	adds	r3, #1
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	3301      	adds	r3, #1
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	3301      	adds	r3, #1
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	3301      	adds	r3, #1
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	6a3a      	ldr	r2, [r7, #32]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	429a      	cmp	r2, r3
 8004624:	d3e6      	bcc.n	80045f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004626:	8bfb      	ldrh	r3, [r7, #30]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01e      	beq.n	800466a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	461a      	mov	r2, r3
 8004638:	f107 0310 	add.w	r3, r7, #16
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	b2da      	uxtb	r2, r3
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	701a      	strb	r2, [r3, #0]
      i++;
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	3301      	adds	r3, #1
 8004656:	623b      	str	r3, [r7, #32]
      pDest++;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	3301      	adds	r3, #1
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800465e:	8bfb      	ldrh	r3, [r7, #30]
 8004660:	3b01      	subs	r3, #1
 8004662:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004664:	8bfb      	ldrh	r3, [r7, #30]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ea      	bne.n	8004640 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800466c:	4618      	mov	r0, r3
 800466e:	372c      	adds	r7, #44	; 0x2c
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d12c      	bne.n	80046ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	db12      	blt.n	80046cc <USB_EPSetStall+0x54>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00f      	beq.n	80046cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e02b      	b.n	8004746 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	db12      	blt.n	8004726 <USB_EPSetStall+0xae>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00f      	beq.n	8004726 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004720:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004724:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004744:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d128      	bne.n	80047c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	0151      	lsls	r1, r2, #5
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	440a      	add	r2, r1
 8004786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800478e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	791b      	ldrb	r3, [r3, #4]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d003      	beq.n	80047a0 <USB_EPClearStall+0x4c>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	791b      	ldrb	r3, [r3, #4]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d138      	bne.n	8004812 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e027      	b.n	8004812 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	791b      	ldrb	r3, [r3, #4]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d003      	beq.n	80047f2 <USB_EPClearStall+0x9e>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	791b      	ldrb	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d10f      	bne.n	8004812 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800480c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004810:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004842:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004854:	68f9      	ldr	r1, [r7, #12]
 8004856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800489a:	f023 0302 	bic.w	r3, r3, #2
 800489e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048c8:	f023 0303 	bic.w	r3, r3, #3
 80048cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048dc:	f043 0302 	orr.w	r3, r3, #2
 80048e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	0c1b      	lsrs	r3, r3, #16
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	b29b      	uxth	r3, r3
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	4013      	ands	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049ac:	68bb      	ldr	r3, [r7, #8]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b087      	sub	sp, #28
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ea:	01db      	lsls	r3, r3, #7
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4013      	ands	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a08:	68bb      	ldr	r3, [r7, #8]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0301 	and.w	r3, r3, #1
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	460b      	mov	r3, r1
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	333c      	adds	r3, #60	; 0x3c
 8004a8e:	3304      	adds	r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <USB_EP0_OutStart+0xb8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d90a      	bls.n	8004ab2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aac:	d101      	bne.n	8004ab2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e037      	b.n	8004b22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2300      	movs	r3, #0
 8004abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004acc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae0:	f043 0318 	orr.w	r3, r3, #24
 8004ae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004af8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004afa:	7afb      	ldrb	r3, [r7, #11]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10f      	bne.n	8004b20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	461a      	mov	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004b1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	4f54300a 	.word	0x4f54300a

08004b34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <USB_CoreReset+0x64>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e01b      	b.n	8004b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	daf2      	bge.n	8004b40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f043 0201 	orr.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <USB_CoreReset+0x64>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e006      	b.n	8004b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d0f0      	beq.n	8004b6a <USB_CoreReset+0x36>

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	00030d40 	.word	0x00030d40

08004b9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ba8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004bac:	f002 fc8a 	bl	80074c4 <USBD_static_malloc>
 8004bb0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	32b0      	adds	r2, #176	; 0xb0
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e0d4      	b.n	8004d76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004bcc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f002 fcde 	bl	8007594 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	32b0      	adds	r2, #176	; 0xb0
 8004be2:	68f9      	ldr	r1, [r7, #12]
 8004be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	32b0      	adds	r2, #176	; 0xb0
 8004bf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	7c1b      	ldrb	r3, [r3, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d138      	bne.n	8004c76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c04:	4b5e      	ldr	r3, [pc, #376]	; (8004d80 <USBD_CDC_Init+0x1e4>)
 8004c06:	7819      	ldrb	r1, [r3, #0]
 8004c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f002 fb35 	bl	800727e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c14:	4b5a      	ldr	r3, [pc, #360]	; (8004d80 <USBD_CDC_Init+0x1e4>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	f003 020f 	and.w	r2, r3, #15
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	3324      	adds	r3, #36	; 0x24
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c2e:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <USBD_CDC_Init+0x1e8>)
 8004c30:	7819      	ldrb	r1, [r3, #0]
 8004c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c36:	2202      	movs	r2, #2
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f002 fb20 	bl	800727e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004c3e:	4b51      	ldr	r3, [pc, #324]	; (8004d84 <USBD_CDC_Init+0x1e8>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004c56:	2201      	movs	r2, #1
 8004c58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c5a:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <USBD_CDC_Init+0x1ec>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f003 020f 	and.w	r2, r3, #15
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3326      	adds	r3, #38	; 0x26
 8004c70:	2210      	movs	r2, #16
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e035      	b.n	8004ce2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004c76:	4b42      	ldr	r3, [pc, #264]	; (8004d80 <USBD_CDC_Init+0x1e4>)
 8004c78:	7819      	ldrb	r1, [r3, #0]
 8004c7a:	2340      	movs	r3, #64	; 0x40
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f002 fafd 	bl	800727e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004c84:	4b3e      	ldr	r3, [pc, #248]	; (8004d80 <USBD_CDC_Init+0x1e4>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	f003 020f 	and.w	r2, r3, #15
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3324      	adds	r3, #36	; 0x24
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004c9e:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <USBD_CDC_Init+0x1e8>)
 8004ca0:	7819      	ldrb	r1, [r3, #0]
 8004ca2:	2340      	movs	r3, #64	; 0x40
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f002 fae9 	bl	800727e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004cac:	4b35      	ldr	r3, [pc, #212]	; (8004d84 <USBD_CDC_Init+0x1e8>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 020f 	and.w	r2, r3, #15
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004cc8:	4b2f      	ldr	r3, [pc, #188]	; (8004d88 <USBD_CDC_Init+0x1ec>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	f003 020f 	and.w	r2, r3, #15
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	3326      	adds	r3, #38	; 0x26
 8004cde:	2210      	movs	r2, #16
 8004ce0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004ce2:	4b29      	ldr	r3, [pc, #164]	; (8004d88 <USBD_CDC_Init+0x1ec>)
 8004ce4:	7819      	ldrb	r1, [r3, #0]
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	2203      	movs	r2, #3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f002 fac7 	bl	800727e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004cf0:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <USBD_CDC_Init+0x1ec>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	f003 020f 	and.w	r2, r3, #15
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3324      	adds	r3, #36	; 0x24
 8004d06:	2201      	movs	r2, #1
 8004d08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	33b0      	adds	r3, #176	; 0xb0
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004d40:	2302      	movs	r3, #2
 8004d42:	e018      	b.n	8004d76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7c1b      	ldrb	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d4c:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <USBD_CDC_Init+0x1e8>)
 8004d4e:	7819      	ldrb	r1, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f002 fb7e 	bl	800745c <USBD_LL_PrepareReceive>
 8004d60:	e008      	b.n	8004d74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <USBD_CDC_Init+0x1e8>)
 8004d64:	7819      	ldrb	r1, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d6c:	2340      	movs	r3, #64	; 0x40
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f002 fb74 	bl	800745c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	200000d3 	.word	0x200000d3
 8004d84:	200000d4 	.word	0x200000d4
 8004d88:	200000d5 	.word	0x200000d5

08004d8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004d98:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <USBD_CDC_DeInit+0xf8>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f002 fa93 	bl	80072ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004da4:	4b37      	ldr	r3, [pc, #220]	; (8004e84 <USBD_CDC_DeInit+0xf8>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	2200      	movs	r2, #0
 8004dbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004dbe:	4b32      	ldr	r3, [pc, #200]	; (8004e88 <USBD_CDC_DeInit+0xfc>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f002 fa80 	bl	80072ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004dca:	4b2f      	ldr	r3, [pc, #188]	; (8004e88 <USBD_CDC_DeInit+0xfc>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	f003 020f 	and.w	r2, r3, #15
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004de2:	2200      	movs	r2, #0
 8004de4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <USBD_CDC_DeInit+0x100>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f002 fa6c 	bl	80072ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004df2:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <USBD_CDC_DeInit+0x100>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	f003 020f 	and.w	r2, r3, #15
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	3324      	adds	r3, #36	; 0x24
 8004e08:	2200      	movs	r2, #0
 8004e0a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004e0c:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <USBD_CDC_DeInit+0x100>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f003 020f 	and.w	r2, r3, #15
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	3326      	adds	r3, #38	; 0x26
 8004e22:	2200      	movs	r2, #0
 8004e24:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	32b0      	adds	r2, #176	; 0xb0
 8004e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01f      	beq.n	8004e78 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	33b0      	adds	r3, #176	; 0xb0
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	32b0      	adds	r2, #176	; 0xb0
 8004e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f002 fb40 	bl	80074e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	32b0      	adds	r2, #176	; 0xb0
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	200000d3 	.word	0x200000d3
 8004e88:	200000d4 	.word	0x200000d4
 8004e8c:	200000d5 	.word	0x200000d5

08004e90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	32b0      	adds	r2, #176	; 0xb0
 8004ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e0bf      	b.n	8005040 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d050      	beq.n	8004f6e <USBD_CDC_Setup+0xde>
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	f040 80af 	bne.w	8005030 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	88db      	ldrh	r3, [r3, #6]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d03a      	beq.n	8004f50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b25b      	sxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	da1b      	bge.n	8004f1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	33b0      	adds	r3, #176	; 0xb0
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004efa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	88d2      	ldrh	r2, [r2, #6]
 8004f00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	88db      	ldrh	r3, [r3, #6]
 8004f06:	2b07      	cmp	r3, #7
 8004f08:	bf28      	it	cs
 8004f0a:	2307      	movcs	r3, #7
 8004f0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	89fa      	ldrh	r2, [r7, #14]
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f001 fd89 	bl	8006a2c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004f1a:	e090      	b.n	800503e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	785a      	ldrb	r2, [r3, #1]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	88db      	ldrh	r3, [r3, #6]
 8004f2a:	2b3f      	cmp	r3, #63	; 0x3f
 8004f2c:	d803      	bhi.n	8004f36 <USBD_CDC_Setup+0xa6>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	88db      	ldrh	r3, [r3, #6]
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	e000      	b.n	8004f38 <USBD_CDC_Setup+0xa8>
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004f3e:	6939      	ldr	r1, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004f46:	461a      	mov	r2, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 fd9b 	bl	8006a84 <USBD_CtlPrepareRx>
      break;
 8004f4e:	e076      	b.n	800503e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	33b0      	adds	r3, #176	; 0xb0
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	7850      	ldrb	r0, [r2, #1]
 8004f66:	2200      	movs	r2, #0
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	4798      	blx	r3
      break;
 8004f6c:	e067      	b.n	800503e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	2b0b      	cmp	r3, #11
 8004f74:	d851      	bhi.n	800501a <USBD_CDC_Setup+0x18a>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <USBD_CDC_Setup+0xec>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	08005029 	.word	0x08005029
 8004f84:	0800501b 	.word	0x0800501b
 8004f88:	0800501b 	.word	0x0800501b
 8004f8c:	0800501b 	.word	0x0800501b
 8004f90:	0800501b 	.word	0x0800501b
 8004f94:	0800501b 	.word	0x0800501b
 8004f98:	0800501b 	.word	0x0800501b
 8004f9c:	0800501b 	.word	0x0800501b
 8004fa0:	0800501b 	.word	0x0800501b
 8004fa4:	08004fd7 	.word	0x08004fd7
 8004fa8:	08005001 	.word	0x08005001
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d107      	bne.n	8004fc8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004fb8:	f107 030a 	add.w	r3, r7, #10
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 fd33 	bl	8006a2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fc6:	e032      	b.n	800502e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 fcbd 	bl	800694a <USBD_CtlError>
            ret = USBD_FAIL;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd4:	e02b      	b.n	800502e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d107      	bne.n	8004ff2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fe2:	f107 030d 	add.w	r3, r7, #13
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4619      	mov	r1, r3
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f001 fd1e 	bl	8006a2c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ff0:	e01d      	b.n	800502e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f001 fca8 	bl	800694a <USBD_CtlError>
            ret = USBD_FAIL;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ffe:	e016      	b.n	800502e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b03      	cmp	r3, #3
 800500a:	d00f      	beq.n	800502c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 fc9b 	bl	800694a <USBD_CtlError>
            ret = USBD_FAIL;
 8005014:	2303      	movs	r3, #3
 8005016:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005018:	e008      	b.n	800502c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f001 fc94 	bl	800694a <USBD_CtlError>
          ret = USBD_FAIL;
 8005022:	2303      	movs	r3, #3
 8005024:	75fb      	strb	r3, [r7, #23]
          break;
 8005026:	e002      	b.n	800502e <USBD_CDC_Setup+0x19e>
          break;
 8005028:	bf00      	nop
 800502a:	e008      	b.n	800503e <USBD_CDC_Setup+0x1ae>
          break;
 800502c:	bf00      	nop
      }
      break;
 800502e:	e006      	b.n	800503e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 fc89 	bl	800694a <USBD_CtlError>
      ret = USBD_FAIL;
 8005038:	2303      	movs	r3, #3
 800503a:	75fb      	strb	r3, [r7, #23]
      break;
 800503c:	bf00      	nop
  }

  return (uint8_t)ret;
 800503e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800505a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	32b0      	adds	r2, #176	; 0xb0
 8005066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800506e:	2303      	movs	r3, #3
 8005070:	e065      	b.n	800513e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	32b0      	adds	r2, #176	; 0xb0
 800507c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005080:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	f003 020f 	and.w	r2, r3, #15
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	3318      	adds	r3, #24
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02f      	beq.n	80050fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	f003 020f 	and.w	r2, r3, #15
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	3318      	adds	r3, #24
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	f003 010f 	and.w	r1, r3, #15
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	460b      	mov	r3, r1
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	440b      	add	r3, r1
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4403      	add	r3, r0
 80050c4:	3348      	adds	r3, #72	; 0x48
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80050cc:	fb01 f303 	mul.w	r3, r1, r3
 80050d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d112      	bne.n	80050fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	f003 020f 	and.w	r2, r3, #15
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3318      	adds	r3, #24
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050ee:	78f9      	ldrb	r1, [r7, #3]
 80050f0:	2300      	movs	r3, #0
 80050f2:	2200      	movs	r2, #0
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f002 f990 	bl	800741a <USBD_LL_Transmit>
 80050fa:	e01f      	b.n	800513c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	33b0      	adds	r3, #176	; 0xb0
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d010      	beq.n	800513c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	33b0      	adds	r3, #176	; 0xb0
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005138:	78fa      	ldrb	r2, [r7, #3]
 800513a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	32b0      	adds	r2, #176	; 0xb0
 800515c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005160:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	32b0      	adds	r2, #176	; 0xb0
 800516c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005174:	2303      	movs	r3, #3
 8005176:	e01a      	b.n	80051ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f002 f98e 	bl	800749e <USBD_LL_GetRxDataSize>
 8005182:	4602      	mov	r2, r0
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	33b0      	adds	r3, #176	; 0xb0
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80051a8:	4611      	mov	r1, r2
 80051aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	32b0      	adds	r2, #176	; 0xb0
 80051c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e025      	b.n	8005224 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	33b0      	adds	r3, #176	; 0xb0
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01a      	beq.n	8005222 <USBD_CDC_EP0_RxReady+0x6c>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051f2:	2bff      	cmp	r3, #255	; 0xff
 80051f4:	d015      	beq.n	8005222 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	33b0      	adds	r3, #176	; 0xb0
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800520e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005216:	b292      	uxth	r2, r2
 8005218:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	22ff      	movs	r2, #255	; 0xff
 800521e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005234:	2182      	movs	r1, #130	; 0x82
 8005236:	4818      	ldr	r0, [pc, #96]	; (8005298 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005238:	f000 fd4f 	bl	8005cda <USBD_GetEpDesc>
 800523c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800523e:	2101      	movs	r1, #1
 8005240:	4815      	ldr	r0, [pc, #84]	; (8005298 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005242:	f000 fd4a 	bl	8005cda <USBD_GetEpDesc>
 8005246:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005248:	2181      	movs	r1, #129	; 0x81
 800524a:	4813      	ldr	r0, [pc, #76]	; (8005298 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800524c:	f000 fd45 	bl	8005cda <USBD_GetEpDesc>
 8005250:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2210      	movs	r2, #16
 800525c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d006      	beq.n	8005272 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2200      	movs	r2, #0
 8005268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800526c:	711a      	strb	r2, [r3, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005280:	711a      	strb	r2, [r3, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2243      	movs	r2, #67	; 0x43
 800528a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800528c:	4b02      	ldr	r3, [pc, #8]	; (8005298 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000090 	.word	0x20000090

0800529c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80052a4:	2182      	movs	r1, #130	; 0x82
 80052a6:	4818      	ldr	r0, [pc, #96]	; (8005308 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052a8:	f000 fd17 	bl	8005cda <USBD_GetEpDesc>
 80052ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80052ae:	2101      	movs	r1, #1
 80052b0:	4815      	ldr	r0, [pc, #84]	; (8005308 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052b2:	f000 fd12 	bl	8005cda <USBD_GetEpDesc>
 80052b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80052b8:	2181      	movs	r1, #129	; 0x81
 80052ba:	4813      	ldr	r0, [pc, #76]	; (8005308 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80052bc:	f000 fd0d 	bl	8005cda <USBD_GetEpDesc>
 80052c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2210      	movs	r2, #16
 80052cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d006      	beq.n	80052e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2200      	movs	r2, #0
 80052d8:	711a      	strb	r2, [r3, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f042 0202 	orr.w	r2, r2, #2
 80052e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	711a      	strb	r2, [r3, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f042 0202 	orr.w	r2, r2, #2
 80052f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2243      	movs	r2, #67	; 0x43
 80052fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80052fc:	4b02      	ldr	r3, [pc, #8]	; (8005308 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000090 	.word	0x20000090

0800530c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005314:	2182      	movs	r1, #130	; 0x82
 8005316:	4818      	ldr	r0, [pc, #96]	; (8005378 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005318:	f000 fcdf 	bl	8005cda <USBD_GetEpDesc>
 800531c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800531e:	2101      	movs	r1, #1
 8005320:	4815      	ldr	r0, [pc, #84]	; (8005378 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005322:	f000 fcda 	bl	8005cda <USBD_GetEpDesc>
 8005326:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005328:	2181      	movs	r1, #129	; 0x81
 800532a:	4813      	ldr	r0, [pc, #76]	; (8005378 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800532c:	f000 fcd5 	bl	8005cda <USBD_GetEpDesc>
 8005330:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2210      	movs	r2, #16
 800533c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d006      	beq.n	8005352 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2200      	movs	r2, #0
 8005348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800534c:	711a      	strb	r2, [r3, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005360:	711a      	strb	r2, [r3, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2243      	movs	r2, #67	; 0x43
 800536a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000090 	.word	0x20000090

0800537c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	220a      	movs	r2, #10
 8005388:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	2000004c 	.word	0x2000004c

0800539c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e009      	b.n	80053c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	33b0      	adds	r3, #176	; 0xb0
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	32b0      	adds	r2, #176	; 0xb0
 80053e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ea:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e008      	b.n	8005408 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	32b0      	adds	r2, #176	; 0xb0
 8005428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005434:	2303      	movs	r3, #3
 8005436:	e004      	b.n	8005442 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	32b0      	adds	r2, #176	; 0xb0
 8005462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005466:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	32b0      	adds	r2, #176	; 0xb0
 8005476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800547e:	2303      	movs	r3, #3
 8005480:	e025      	b.n	80054ce <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11f      	bne.n	80054cc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2201      	movs	r2, #1
 8005490:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005494:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <USBD_CDC_TransmitPacket+0x88>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f003 020f 	and.w	r2, r3, #15
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4403      	add	r3, r0
 80054ae:	3318      	adds	r3, #24
 80054b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <USBD_CDC_TransmitPacket+0x88>)
 80054b4:	7819      	ldrb	r1, [r3, #0]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 ffa9 	bl	800741a <USBD_LL_Transmit>

    ret = USBD_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	200000d3 	.word	0x200000d3

080054dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	32b0      	adds	r2, #176	; 0xb0
 80054ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	32b0      	adds	r2, #176	; 0xb0
 80054fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005506:	2303      	movs	r3, #3
 8005508:	e018      	b.n	800553c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	7c1b      	ldrb	r3, [r3, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005512:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <USBD_CDC_ReceivePacket+0x68>)
 8005514:	7819      	ldrb	r1, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800551c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 ff9b 	bl	800745c <USBD_LL_PrepareReceive>
 8005526:	e008      	b.n	800553a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <USBD_CDC_ReceivePacket+0x68>)
 800552a:	7819      	ldrb	r1, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005532:	2340      	movs	r3, #64	; 0x40
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 ff91 	bl	800745c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	200000d4 	.word	0x200000d4

08005548 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800555c:	2303      	movs	r3, #3
 800555e:	e01f      	b.n	80055a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	79fa      	ldrb	r2, [r7, #7]
 8005592:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f001 fe0b 	bl	80071b0 <USBD_LL_Init>
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800559e:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80055bc:	2303      	movs	r3, #3
 80055be:	e025      	b.n	800560c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	32ae      	adds	r2, #174	; 0xae
 80055d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00f      	beq.n	80055fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	32ae      	adds	r2, #174	; 0xae
 80055e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	f107 020e 	add.w	r2, r7, #14
 80055f0:	4610      	mov	r0, r2
 80055f2:	4798      	blx	r3
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 fe13 	bl	8007248 <USBD_LL_Start>
 8005622:	4603      	mov	r3, r0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005634:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	4611      	mov	r1, r2
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	4798      	blx	r3
 800566c:	4603      	mov	r3, r0
 800566e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	460b      	mov	r3, r1
 8005684:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	4611      	mov	r1, r2
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80056a0:	2303      	movs	r3, #3
 80056a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f001 f908 	bl	80068d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d01a      	beq.n	8005720 <USBD_LL_SetupStage+0x72>
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d822      	bhi.n	8005734 <USBD_LL_SetupStage+0x86>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <USBD_LL_SetupStage+0x4a>
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d00a      	beq.n	800570c <USBD_LL_SetupStage+0x5e>
 80056f6:	e01d      	b.n	8005734 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fb5f 	bl	8005dc4 <USBD_StdDevReq>
 8005706:	4603      	mov	r3, r0
 8005708:	73fb      	strb	r3, [r7, #15]
      break;
 800570a:	e020      	b.n	800574e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fbc7 	bl	8005ea8 <USBD_StdItfReq>
 800571a:	4603      	mov	r3, r0
 800571c:	73fb      	strb	r3, [r7, #15]
      break;
 800571e:	e016      	b.n	800574e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fc29 	bl	8005f80 <USBD_StdEPReq>
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]
      break;
 8005732:	e00c      	b.n	800574e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800573a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800573e:	b2db      	uxtb	r3, r3
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 fde0 	bl	8007308 <USBD_LL_StallEP>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
      break;
 800574c:	bf00      	nop
  }

  return ret;
 800574e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	460b      	mov	r3, r1
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800576a:	7afb      	ldrb	r3, [r7, #11]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d16e      	bne.n	800584e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005776:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800577e:	2b03      	cmp	r3, #3
 8005780:	f040 8098 	bne.w	80058b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	429a      	cmp	r2, r3
 800578e:	d913      	bls.n	80057b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	1ad2      	subs	r2, r2, r3
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	bf28      	it	cs
 80057aa:	4613      	movcs	r3, r2
 80057ac:	461a      	mov	r2, r3
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f001 f984 	bl	8006abe <USBD_CtlContinueRx>
 80057b6:	e07d      	b.n	80058b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d014      	beq.n	80057f0 <USBD_LL_DataOutStage+0x98>
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d81d      	bhi.n	8005806 <USBD_LL_DataOutStage+0xae>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <USBD_LL_DataOutStage+0x7c>
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d003      	beq.n	80057da <USBD_LL_DataOutStage+0x82>
 80057d2:	e018      	b.n	8005806 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	75bb      	strb	r3, [r7, #22]
            break;
 80057d8:	e018      	b.n	800580c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	4619      	mov	r1, r3
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fa5e 	bl	8005ca6 <USBD_CoreFindIF>
 80057ea:	4603      	mov	r3, r0
 80057ec:	75bb      	strb	r3, [r7, #22]
            break;
 80057ee:	e00d      	b.n	800580c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	4619      	mov	r1, r3
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fa60 	bl	8005cc0 <USBD_CoreFindEP>
 8005800:	4603      	mov	r3, r0
 8005802:	75bb      	strb	r3, [r7, #22]
            break;
 8005804:	e002      	b.n	800580c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	75bb      	strb	r3, [r7, #22]
            break;
 800580a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800580c:	7dbb      	ldrb	r3, [r7, #22]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d119      	bne.n	8005846 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b03      	cmp	r3, #3
 800581c:	d113      	bne.n	8005846 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800581e:	7dba      	ldrb	r2, [r7, #22]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	32ae      	adds	r2, #174	; 0xae
 8005824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800582e:	7dba      	ldrb	r2, [r7, #22]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005836:	7dba      	ldrb	r2, [r7, #22]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	32ae      	adds	r2, #174	; 0xae
 800583c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f001 f94a 	bl	8006ae0 <USBD_CtlSendStatus>
 800584c:	e032      	b.n	80058b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800584e:	7afb      	ldrb	r3, [r7, #11]
 8005850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005854:	b2db      	uxtb	r3, r3
 8005856:	4619      	mov	r1, r3
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fa31 	bl	8005cc0 <USBD_CoreFindEP>
 800585e:	4603      	mov	r3, r0
 8005860:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005862:	7dbb      	ldrb	r3, [r7, #22]
 8005864:	2bff      	cmp	r3, #255	; 0xff
 8005866:	d025      	beq.n	80058b4 <USBD_LL_DataOutStage+0x15c>
 8005868:	7dbb      	ldrb	r3, [r7, #22]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d122      	bne.n	80058b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b03      	cmp	r3, #3
 8005878:	d117      	bne.n	80058aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800587a:	7dba      	ldrb	r2, [r7, #22]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	32ae      	adds	r2, #174	; 0xae
 8005880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00f      	beq.n	80058aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800588a:	7dba      	ldrb	r2, [r7, #22]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005892:	7dba      	ldrb	r2, [r7, #22]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	32ae      	adds	r2, #174	; 0xae
 8005898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	7afa      	ldrb	r2, [r7, #11]
 80058a0:	4611      	mov	r1, r2
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	4798      	blx	r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	e000      	b.n	80058b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	460b      	mov	r3, r1
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80058cc:	7afb      	ldrb	r3, [r7, #11]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d16f      	bne.n	80059b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3314      	adds	r3, #20
 80058d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d15a      	bne.n	8005998 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d914      	bls.n	8005918 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	1ad2      	subs	r2, r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	461a      	mov	r2, r3
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f001 f8ac 	bl	8006a62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800590a:	2300      	movs	r3, #0
 800590c:	2200      	movs	r2, #0
 800590e:	2100      	movs	r1, #0
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f001 fda3 	bl	800745c <USBD_LL_PrepareReceive>
 8005916:	e03f      	b.n	8005998 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	429a      	cmp	r2, r3
 8005922:	d11c      	bne.n	800595e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800592c:	429a      	cmp	r2, r3
 800592e:	d316      	bcc.n	800595e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800593a:	429a      	cmp	r2, r3
 800593c:	d20f      	bcs.n	800595e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800593e:	2200      	movs	r2, #0
 8005940:	2100      	movs	r1, #0
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f001 f88d 	bl	8006a62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005950:	2300      	movs	r3, #0
 8005952:	2200      	movs	r2, #0
 8005954:	2100      	movs	r1, #0
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f001 fd80 	bl	800745c <USBD_LL_PrepareReceive>
 800595c:	e01c      	b.n	8005998 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b03      	cmp	r3, #3
 8005968:	d10f      	bne.n	800598a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800598a:	2180      	movs	r1, #128	; 0x80
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f001 fcbb 	bl	8007308 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f001 f8b7 	bl	8006b06 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d03a      	beq.n	8005a18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7ff fe42 	bl	800562c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80059b0:	e032      	b.n	8005a18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80059b2:	7afb      	ldrb	r3, [r7, #11]
 80059b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	4619      	mov	r1, r3
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f97f 	bl	8005cc0 <USBD_CoreFindEP>
 80059c2:	4603      	mov	r3, r0
 80059c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
 80059c8:	2bff      	cmp	r3, #255	; 0xff
 80059ca:	d025      	beq.n	8005a18 <USBD_LL_DataInStage+0x15a>
 80059cc:	7dfb      	ldrb	r3, [r7, #23]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d122      	bne.n	8005a18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d11c      	bne.n	8005a18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80059de:	7dfa      	ldrb	r2, [r7, #23]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	32ae      	adds	r2, #174	; 0xae
 80059e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d014      	beq.n	8005a18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80059ee:	7dfa      	ldrb	r2, [r7, #23]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059f6:	7dfa      	ldrb	r2, [r7, #23]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	32ae      	adds	r2, #174	; 0xae
 80059fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	7afa      	ldrb	r2, [r7, #11]
 8005a04:	4611      	mov	r1, r2
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	4798      	blx	r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005a0e:	7dbb      	ldrb	r3, [r7, #22]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005a14:	7dbb      	ldrb	r3, [r7, #22]
 8005a16:	e000      	b.n	8005a1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d014      	beq.n	8005a88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00e      	beq.n	8005a88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6852      	ldr	r2, [r2, #4]
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	4611      	mov	r1, r2
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a84:	2303      	movs	r3, #3
 8005a86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a88:	2340      	movs	r3, #64	; 0x40
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 fbf5 	bl	800727e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2240      	movs	r2, #64	; 0x40
 8005aa0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005aa4:	2340      	movs	r3, #64	; 0x40
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2180      	movs	r1, #128	; 0x80
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f001 fbe7 	bl	800727e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2240      	movs	r2, #64	; 0x40
 8005aba:	621a      	str	r2, [r3, #32]

  return ret;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	78fa      	ldrb	r2, [r7, #3]
 8005ad6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2204      	movs	r2, #4
 8005b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d106      	bne.n	8005b34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d110      	bne.n	8005b78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	32ae      	adds	r2, #174	; 0xae
 8005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e01c      	b.n	8005bde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d115      	bne.n	8005bdc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	32ae      	adds	r2, #174	; 0xae
 8005bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	32ae      	adds	r2, #174	; 0xae
 8005bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	78fa      	ldrb	r2, [r7, #3]
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	32ae      	adds	r2, #174	; 0xae
 8005bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e01c      	b.n	8005c42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d115      	bne.n	8005c40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	32ae      	adds	r2, #174	; 0xae
 8005c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	32ae      	adds	r2, #174	; 0xae
 8005c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	78fa      	ldrb	r2, [r7, #3]
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00e      	beq.n	8005c9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6852      	ldr	r2, [r2, #4]
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ccc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	885b      	ldrh	r3, [r3, #2]
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d920      	bls.n	8005d44 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005d0a:	e013      	b.n	8005d34 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005d0c:	f107 030a 	add.w	r3, r7, #10
 8005d10:	4619      	mov	r1, r3
 8005d12:	6978      	ldr	r0, [r7, #20]
 8005d14:	f000 f81b 	bl	8005d4e <USBD_GetNextDesc>
 8005d18:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b05      	cmp	r3, #5
 8005d20:	d108      	bne.n	8005d34 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	789b      	ldrb	r3, [r3, #2]
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d008      	beq.n	8005d42 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	885b      	ldrh	r3, [r3, #2]
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	897b      	ldrh	r3, [r7, #10]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d8e5      	bhi.n	8005d0c <USBD_GetEpDesc+0x32>
 8005d40:	e000      	b.n	8005d44 <USBD_GetEpDesc+0x6a>
          break;
 8005d42:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d44:	693b      	ldr	r3, [r7, #16]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b085      	sub	sp, #20
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	881a      	ldrh	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	461a      	mov	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4413      	add	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005da6:	8a3b      	ldrh	r3, [r7, #16]
 8005da8:	021b      	lsls	r3, r3, #8
 8005daa:	b21a      	sxth	r2, r3
 8005dac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	b21b      	sxth	r3, r3
 8005db4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005db6:	89fb      	ldrh	r3, [r7, #14]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d005      	beq.n	8005dea <USBD_StdDevReq+0x26>
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d857      	bhi.n	8005e92 <USBD_StdDevReq+0xce>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00f      	beq.n	8005e06 <USBD_StdDevReq+0x42>
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	d153      	bne.n	8005e92 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	32ae      	adds	r2, #174	; 0xae
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	e04a      	b.n	8005e9c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b09      	cmp	r3, #9
 8005e0c:	d83b      	bhi.n	8005e86 <USBD_StdDevReq+0xc2>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <USBD_StdDevReq+0x50>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005e7d 	.word	0x08005e7d
 8005e1c:	08005e87 	.word	0x08005e87
 8005e20:	08005e73 	.word	0x08005e73
 8005e24:	08005e87 	.word	0x08005e87
 8005e28:	08005e47 	.word	0x08005e47
 8005e2c:	08005e3d 	.word	0x08005e3d
 8005e30:	08005e87 	.word	0x08005e87
 8005e34:	08005e5f 	.word	0x08005e5f
 8005e38:	08005e51 	.word	0x08005e51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fa3c 	bl	80062bc <USBD_GetDescriptor>
          break;
 8005e44:	e024      	b.n	8005e90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fba1 	bl	8006590 <USBD_SetAddress>
          break;
 8005e4e:	e01f      	b.n	8005e90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fbe0 	bl	8006618 <USBD_SetConfig>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
          break;
 8005e5c:	e018      	b.n	8005e90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fc83 	bl	800676c <USBD_GetConfig>
          break;
 8005e66:	e013      	b.n	8005e90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fcb4 	bl	80067d8 <USBD_GetStatus>
          break;
 8005e70:	e00e      	b.n	8005e90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fce3 	bl	8006840 <USBD_SetFeature>
          break;
 8005e7a:	e009      	b.n	8005e90 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fd07 	bl	8006892 <USBD_ClrFeature>
          break;
 8005e84:	e004      	b.n	8005e90 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fd5e 	bl	800694a <USBD_CtlError>
          break;
 8005e8e:	bf00      	nop
      }
      break;
 8005e90:	e004      	b.n	8005e9c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fd58 	bl	800694a <USBD_CtlError>
      break;
 8005e9a:	bf00      	nop
  }

  return ret;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop

08005ea8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ebe:	2b40      	cmp	r3, #64	; 0x40
 8005ec0:	d005      	beq.n	8005ece <USBD_StdItfReq+0x26>
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d852      	bhi.n	8005f6c <USBD_StdItfReq+0xc4>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <USBD_StdItfReq+0x26>
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d14e      	bne.n	8005f6c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d840      	bhi.n	8005f5e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	889b      	ldrh	r3, [r3, #4]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d836      	bhi.n	8005f54 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	889b      	ldrh	r3, [r3, #4]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff fed9 	bl	8005ca6 <USBD_CoreFindIF>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	2bff      	cmp	r3, #255	; 0xff
 8005efc:	d01d      	beq.n	8005f3a <USBD_StdItfReq+0x92>
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d11a      	bne.n	8005f3a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005f04:	7bba      	ldrb	r2, [r7, #14]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	32ae      	adds	r2, #174	; 0xae
 8005f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00f      	beq.n	8005f34 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005f14:	7bba      	ldrb	r2, [r7, #14]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f1c:	7bba      	ldrb	r2, [r7, #14]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	32ae      	adds	r2, #174	; 0xae
 8005f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	4798      	blx	r3
 8005f2e:	4603      	mov	r3, r0
 8005f30:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f32:	e004      	b.n	8005f3e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f34:	2303      	movs	r3, #3
 8005f36:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f38:	e001      	b.n	8005f3e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	88db      	ldrh	r3, [r3, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d110      	bne.n	8005f68 <USBD_StdItfReq+0xc0>
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10d      	bne.n	8005f68 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fdc7 	bl	8006ae0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f52:	e009      	b.n	8005f68 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fcf7 	bl	800694a <USBD_CtlError>
          break;
 8005f5c:	e004      	b.n	8005f68 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fcf2 	bl	800694a <USBD_CtlError>
          break;
 8005f66:	e000      	b.n	8005f6a <USBD_StdItfReq+0xc2>
          break;
 8005f68:	bf00      	nop
      }
      break;
 8005f6a:	e004      	b.n	8005f76 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fceb 	bl	800694a <USBD_CtlError>
      break;
 8005f74:	bf00      	nop
  }

  return ret;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	889b      	ldrh	r3, [r3, #4]
 8005f92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d007      	beq.n	8005fb0 <USBD_StdEPReq+0x30>
 8005fa0:	2b40      	cmp	r3, #64	; 0x40
 8005fa2:	f200 817f 	bhi.w	80062a4 <USBD_StdEPReq+0x324>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d02a      	beq.n	8006000 <USBD_StdEPReq+0x80>
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	f040 817a 	bne.w	80062a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff fe83 	bl	8005cc0 <USBD_CoreFindEP>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fbe:	7b7b      	ldrb	r3, [r7, #13]
 8005fc0:	2bff      	cmp	r3, #255	; 0xff
 8005fc2:	f000 8174 	beq.w	80062ae <USBD_StdEPReq+0x32e>
 8005fc6:	7b7b      	ldrb	r3, [r7, #13]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 8170 	bne.w	80062ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005fce:	7b7a      	ldrb	r2, [r7, #13]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005fd6:	7b7a      	ldrb	r2, [r7, #13]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	32ae      	adds	r2, #174	; 0xae
 8005fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8163 	beq.w	80062ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005fe8:	7b7a      	ldrb	r2, [r7, #13]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	32ae      	adds	r2, #174	; 0xae
 8005fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	4798      	blx	r3
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ffe:	e156      	b.n	80062ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b03      	cmp	r3, #3
 8006006:	d008      	beq.n	800601a <USBD_StdEPReq+0x9a>
 8006008:	2b03      	cmp	r3, #3
 800600a:	f300 8145 	bgt.w	8006298 <USBD_StdEPReq+0x318>
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 809b 	beq.w	800614a <USBD_StdEPReq+0x1ca>
 8006014:	2b01      	cmp	r3, #1
 8006016:	d03c      	beq.n	8006092 <USBD_StdEPReq+0x112>
 8006018:	e13e      	b.n	8006298 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d002      	beq.n	800602c <USBD_StdEPReq+0xac>
 8006026:	2b03      	cmp	r3, #3
 8006028:	d016      	beq.n	8006058 <USBD_StdEPReq+0xd8>
 800602a:	e02c      	b.n	8006086 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00d      	beq.n	800604e <USBD_StdEPReq+0xce>
 8006032:	7bbb      	ldrb	r3, [r7, #14]
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d00a      	beq.n	800604e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006038:	7bbb      	ldrb	r3, [r7, #14]
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 f963 	bl	8007308 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006042:	2180      	movs	r1, #128	; 0x80
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 f95f 	bl	8007308 <USBD_LL_StallEP>
 800604a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800604c:	e020      	b.n	8006090 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fc7a 	bl	800694a <USBD_CtlError>
              break;
 8006056:	e01b      	b.n	8006090 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	885b      	ldrh	r3, [r3, #2]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10e      	bne.n	800607e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006060:	7bbb      	ldrb	r3, [r7, #14]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <USBD_StdEPReq+0xfe>
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	2b80      	cmp	r3, #128	; 0x80
 800606a:	d008      	beq.n	800607e <USBD_StdEPReq+0xfe>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	88db      	ldrh	r3, [r3, #6]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d104      	bne.n	800607e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 f945 	bl	8007308 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fd2e 	bl	8006ae0 <USBD_CtlSendStatus>

              break;
 8006084:	e004      	b.n	8006090 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fc5e 	bl	800694a <USBD_CtlError>
              break;
 800608e:	bf00      	nop
          }
          break;
 8006090:	e107      	b.n	80062a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d002      	beq.n	80060a4 <USBD_StdEPReq+0x124>
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d016      	beq.n	80060d0 <USBD_StdEPReq+0x150>
 80060a2:	e04b      	b.n	800613c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00d      	beq.n	80060c6 <USBD_StdEPReq+0x146>
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d00a      	beq.n	80060c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 f927 	bl	8007308 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060ba:	2180      	movs	r1, #128	; 0x80
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f923 	bl	8007308 <USBD_LL_StallEP>
 80060c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060c4:	e040      	b.n	8006148 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fc3e 	bl	800694a <USBD_CtlError>
              break;
 80060ce:	e03b      	b.n	8006148 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	885b      	ldrh	r3, [r3, #2]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d136      	bne.n	8006146 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060d8:	7bbb      	ldrb	r3, [r7, #14]
 80060da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060e2:	7bbb      	ldrb	r3, [r7, #14]
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 f92d 	bl	8007346 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fcf7 	bl	8006ae0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	4619      	mov	r1, r3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff fde2 	bl	8005cc0 <USBD_CoreFindEP>
 80060fc:	4603      	mov	r3, r0
 80060fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006100:	7b7b      	ldrb	r3, [r7, #13]
 8006102:	2bff      	cmp	r3, #255	; 0xff
 8006104:	d01f      	beq.n	8006146 <USBD_StdEPReq+0x1c6>
 8006106:	7b7b      	ldrb	r3, [r7, #13]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d11c      	bne.n	8006146 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800610c:	7b7a      	ldrb	r2, [r7, #13]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006114:	7b7a      	ldrb	r2, [r7, #13]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	32ae      	adds	r2, #174	; 0xae
 800611a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d010      	beq.n	8006146 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006124:	7b7a      	ldrb	r2, [r7, #13]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	32ae      	adds	r2, #174	; 0xae
 800612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
 8006136:	4603      	mov	r3, r0
 8006138:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800613a:	e004      	b.n	8006146 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fc03 	bl	800694a <USBD_CtlError>
              break;
 8006144:	e000      	b.n	8006148 <USBD_StdEPReq+0x1c8>
              break;
 8006146:	bf00      	nop
          }
          break;
 8006148:	e0ab      	b.n	80062a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d002      	beq.n	800615c <USBD_StdEPReq+0x1dc>
 8006156:	2b03      	cmp	r3, #3
 8006158:	d032      	beq.n	80061c0 <USBD_StdEPReq+0x240>
 800615a:	e097      	b.n	800628c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800615c:	7bbb      	ldrb	r3, [r7, #14]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <USBD_StdEPReq+0x1f2>
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	2b80      	cmp	r3, #128	; 0x80
 8006166:	d004      	beq.n	8006172 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fbed 	bl	800694a <USBD_CtlError>
                break;
 8006170:	e091      	b.n	8006296 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006172:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006176:	2b00      	cmp	r3, #0
 8006178:	da0b      	bge.n	8006192 <USBD_StdEPReq+0x212>
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	3310      	adds	r3, #16
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	3304      	adds	r3, #4
 8006190:	e00b      	b.n	80061aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006192:	7bbb      	ldrb	r3, [r7, #14]
 8006194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4413      	add	r3, r2
 80061a8:	3304      	adds	r3, #4
 80061aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2200      	movs	r2, #0
 80061b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2202      	movs	r2, #2
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fc37 	bl	8006a2c <USBD_CtlSendData>
              break;
 80061be:	e06a      	b.n	8006296 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	da11      	bge.n	80061ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	f003 020f 	and.w	r2, r3, #15
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	3324      	adds	r3, #36	; 0x24
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d117      	bne.n	8006212 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fbb0 	bl	800694a <USBD_CtlError>
                  break;
 80061ea:	e054      	b.n	8006296 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061ec:	7bbb      	ldrb	r3, [r7, #14]
 80061ee:	f003 020f 	and.w	r2, r3, #15
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fb9d 	bl	800694a <USBD_CtlError>
                  break;
 8006210:	e041      	b.n	8006296 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006212:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006216:	2b00      	cmp	r3, #0
 8006218:	da0b      	bge.n	8006232 <USBD_StdEPReq+0x2b2>
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	3310      	adds	r3, #16
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	3304      	adds	r3, #4
 8006230:	e00b      	b.n	800624a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4413      	add	r3, r2
 8006248:	3304      	adds	r3, #4
 800624a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800624c:	7bbb      	ldrb	r3, [r7, #14]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <USBD_StdEPReq+0x2d8>
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	2b80      	cmp	r3, #128	; 0x80
 8006256:	d103      	bne.n	8006260 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e00e      	b.n	800627e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 f88d 	bl	8007384 <USBD_LL_IsStallEP>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2201      	movs	r2, #1
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e002      	b.n	800627e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2202      	movs	r2, #2
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fbd1 	bl	8006a2c <USBD_CtlSendData>
              break;
 800628a:	e004      	b.n	8006296 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fb5b 	bl	800694a <USBD_CtlError>
              break;
 8006294:	bf00      	nop
          }
          break;
 8006296:	e004      	b.n	80062a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fb55 	bl	800694a <USBD_CtlError>
          break;
 80062a0:	bf00      	nop
      }
      break;
 80062a2:	e005      	b.n	80062b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fb4f 	bl	800694a <USBD_CtlError>
      break;
 80062ac:	e000      	b.n	80062b0 <USBD_StdEPReq+0x330>
      break;
 80062ae:	bf00      	nop
  }

  return ret;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	885b      	ldrh	r3, [r3, #2]
 80062d6:	0a1b      	lsrs	r3, r3, #8
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	2b06      	cmp	r3, #6
 80062de:	f200 8128 	bhi.w	8006532 <USBD_GetDescriptor+0x276>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <USBD_GetDescriptor+0x2c>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	08006305 	.word	0x08006305
 80062ec:	0800631d 	.word	0x0800631d
 80062f0:	0800635d 	.word	0x0800635d
 80062f4:	08006533 	.word	0x08006533
 80062f8:	08006533 	.word	0x08006533
 80062fc:	080064d3 	.word	0x080064d3
 8006300:	080064ff 	.word	0x080064ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	7c12      	ldrb	r2, [r2, #16]
 8006310:	f107 0108 	add.w	r1, r7, #8
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
 8006318:	60f8      	str	r0, [r7, #12]
      break;
 800631a:	e112      	b.n	8006542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7c1b      	ldrb	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10d      	bne.n	8006340 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632c:	f107 0208 	add.w	r2, r7, #8
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	2202      	movs	r2, #2
 800633c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800633e:	e100      	b.n	8006542 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	f107 0208 	add.w	r2, r7, #8
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	2202      	movs	r2, #2
 8006358:	701a      	strb	r2, [r3, #0]
      break;
 800635a:	e0f2      	b.n	8006542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	885b      	ldrh	r3, [r3, #2]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b05      	cmp	r3, #5
 8006364:	f200 80ac 	bhi.w	80064c0 <USBD_GetDescriptor+0x204>
 8006368:	a201      	add	r2, pc, #4	; (adr r2, 8006370 <USBD_GetDescriptor+0xb4>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006389 	.word	0x08006389
 8006374:	080063bd 	.word	0x080063bd
 8006378:	080063f1 	.word	0x080063f1
 800637c:	08006425 	.word	0x08006425
 8006380:	08006459 	.word	0x08006459
 8006384:	0800648d 	.word	0x0800648d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	7c12      	ldrb	r2, [r2, #16]
 80063a0:	f107 0108 	add.w	r1, r7, #8
 80063a4:	4610      	mov	r0, r2
 80063a6:	4798      	blx	r3
 80063a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063aa:	e091      	b.n	80064d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 facb 	bl	800694a <USBD_CtlError>
            err++;
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	3301      	adds	r3, #1
 80063b8:	72fb      	strb	r3, [r7, #11]
          break;
 80063ba:	e089      	b.n	80064d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	7c12      	ldrb	r2, [r2, #16]
 80063d4:	f107 0108 	add.w	r1, r7, #8
 80063d8:	4610      	mov	r0, r2
 80063da:	4798      	blx	r3
 80063dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063de:	e077      	b.n	80064d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fab1 	bl	800694a <USBD_CtlError>
            err++;
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	3301      	adds	r3, #1
 80063ec:	72fb      	strb	r3, [r7, #11]
          break;
 80063ee:	e06f      	b.n	80064d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	7c12      	ldrb	r2, [r2, #16]
 8006408:	f107 0108 	add.w	r1, r7, #8
 800640c:	4610      	mov	r0, r2
 800640e:	4798      	blx	r3
 8006410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006412:	e05d      	b.n	80064d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa97 	bl	800694a <USBD_CtlError>
            err++;
 800641c:	7afb      	ldrb	r3, [r7, #11]
 800641e:	3301      	adds	r3, #1
 8006420:	72fb      	strb	r3, [r7, #11]
          break;
 8006422:	e055      	b.n	80064d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	7c12      	ldrb	r2, [r2, #16]
 800643c:	f107 0108 	add.w	r1, r7, #8
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
 8006444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006446:	e043      	b.n	80064d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa7d 	bl	800694a <USBD_CtlError>
            err++;
 8006450:	7afb      	ldrb	r3, [r7, #11]
 8006452:	3301      	adds	r3, #1
 8006454:	72fb      	strb	r3, [r7, #11]
          break;
 8006456:	e03b      	b.n	80064d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00b      	beq.n	800647c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	7c12      	ldrb	r2, [r2, #16]
 8006470:	f107 0108 	add.w	r1, r7, #8
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
 8006478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800647a:	e029      	b.n	80064d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa63 	bl	800694a <USBD_CtlError>
            err++;
 8006484:	7afb      	ldrb	r3, [r7, #11]
 8006486:	3301      	adds	r3, #1
 8006488:	72fb      	strb	r3, [r7, #11]
          break;
 800648a:	e021      	b.n	80064d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00b      	beq.n	80064b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	7c12      	ldrb	r2, [r2, #16]
 80064a4:	f107 0108 	add.w	r1, r7, #8
 80064a8:	4610      	mov	r0, r2
 80064aa:	4798      	blx	r3
 80064ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ae:	e00f      	b.n	80064d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa49 	bl	800694a <USBD_CtlError>
            err++;
 80064b8:	7afb      	ldrb	r3, [r7, #11]
 80064ba:	3301      	adds	r3, #1
 80064bc:	72fb      	strb	r3, [r7, #11]
          break;
 80064be:	e007      	b.n	80064d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fa41 	bl	800694a <USBD_CtlError>
          err++;
 80064c8:	7afb      	ldrb	r3, [r7, #11]
 80064ca:	3301      	adds	r3, #1
 80064cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80064ce:	bf00      	nop
      }
      break;
 80064d0:	e037      	b.n	8006542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	7c1b      	ldrb	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e2:	f107 0208 	add.w	r2, r7, #8
 80064e6:	4610      	mov	r0, r2
 80064e8:	4798      	blx	r3
 80064ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064ec:	e029      	b.n	8006542 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fa2a 	bl	800694a <USBD_CtlError>
        err++;
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	3301      	adds	r3, #1
 80064fa:	72fb      	strb	r3, [r7, #11]
      break;
 80064fc:	e021      	b.n	8006542 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7c1b      	ldrb	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10d      	bne.n	8006522 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	f107 0208 	add.w	r2, r7, #8
 8006512:	4610      	mov	r0, r2
 8006514:	4798      	blx	r3
 8006516:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3301      	adds	r3, #1
 800651c:	2207      	movs	r2, #7
 800651e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006520:	e00f      	b.n	8006542 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fa10 	bl	800694a <USBD_CtlError>
        err++;
 800652a:	7afb      	ldrb	r3, [r7, #11]
 800652c:	3301      	adds	r3, #1
 800652e:	72fb      	strb	r3, [r7, #11]
      break;
 8006530:	e007      	b.n	8006542 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fa08 	bl	800694a <USBD_CtlError>
      err++;
 800653a:	7afb      	ldrb	r3, [r7, #11]
 800653c:	3301      	adds	r3, #1
 800653e:	72fb      	strb	r3, [r7, #11]
      break;
 8006540:	bf00      	nop
  }

  if (err != 0U)
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d11e      	bne.n	8006586 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	88db      	ldrh	r3, [r3, #6]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d016      	beq.n	800657e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006550:	893b      	ldrh	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00e      	beq.n	8006574 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	88da      	ldrh	r2, [r3, #6]
 800655a:	893b      	ldrh	r3, [r7, #8]
 800655c:	4293      	cmp	r3, r2
 800655e:	bf28      	it	cs
 8006560:	4613      	movcs	r3, r2
 8006562:	b29b      	uxth	r3, r3
 8006564:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006566:	893b      	ldrh	r3, [r7, #8]
 8006568:	461a      	mov	r2, r3
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fa5d 	bl	8006a2c <USBD_CtlSendData>
 8006572:	e009      	b.n	8006588 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9e7 	bl	800694a <USBD_CtlError>
 800657c:	e004      	b.n	8006588 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 faae 	bl	8006ae0 <USBD_CtlSendStatus>
 8006584:	e000      	b.n	8006588 <USBD_GetDescriptor+0x2cc>
    return;
 8006586:	bf00      	nop
  }
}
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop

08006590 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	889b      	ldrh	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d131      	bne.n	8006606 <USBD_SetAddress+0x76>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	88db      	ldrh	r3, [r3, #6]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d12d      	bne.n	8006606 <USBD_SetAddress+0x76>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	885b      	ldrh	r3, [r3, #2]
 80065ae:	2b7f      	cmp	r3, #127	; 0x7f
 80065b0:	d829      	bhi.n	8006606 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	885b      	ldrh	r3, [r3, #2]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d104      	bne.n	80065d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f9bc 	bl	800694a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d2:	e01d      	b.n	8006610 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	7bfa      	ldrb	r2, [r7, #15]
 80065d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fefb 	bl	80073dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fa7a 	bl	8006ae0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2202      	movs	r2, #2
 80065f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fa:	e009      	b.n	8006610 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006604:	e004      	b.n	8006610 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f99e 	bl	800694a <USBD_CtlError>
  }
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	885b      	ldrh	r3, [r3, #2]
 800662a:	b2da      	uxtb	r2, r3
 800662c:	4b4e      	ldr	r3, [pc, #312]	; (8006768 <USBD_SetConfig+0x150>)
 800662e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006630:	4b4d      	ldr	r3, [pc, #308]	; (8006768 <USBD_SetConfig+0x150>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d905      	bls.n	8006644 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f985 	bl	800694a <USBD_CtlError>
    return USBD_FAIL;
 8006640:	2303      	movs	r3, #3
 8006642:	e08c      	b.n	800675e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d002      	beq.n	8006656 <USBD_SetConfig+0x3e>
 8006650:	2b03      	cmp	r3, #3
 8006652:	d029      	beq.n	80066a8 <USBD_SetConfig+0x90>
 8006654:	e075      	b.n	8006742 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006656:	4b44      	ldr	r3, [pc, #272]	; (8006768 <USBD_SetConfig+0x150>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d020      	beq.n	80066a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800665e:	4b42      	ldr	r3, [pc, #264]	; (8006768 <USBD_SetConfig+0x150>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006668:	4b3f      	ldr	r3, [pc, #252]	; (8006768 <USBD_SetConfig+0x150>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fe ffe7 	bl	8005642 <USBD_SetClassConfig>
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d008      	beq.n	8006690 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f962 	bl	800694a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800668e:	e065      	b.n	800675c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fa25 	bl	8006ae0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2203      	movs	r2, #3
 800669a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800669e:	e05d      	b.n	800675c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fa1d 	bl	8006ae0 <USBD_CtlSendStatus>
      break;
 80066a6:	e059      	b.n	800675c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066a8:	4b2f      	ldr	r3, [pc, #188]	; (8006768 <USBD_SetConfig+0x150>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d112      	bne.n	80066d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80066b8:	4b2b      	ldr	r3, [pc, #172]	; (8006768 <USBD_SetConfig+0x150>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066c2:	4b29      	ldr	r3, [pc, #164]	; (8006768 <USBD_SetConfig+0x150>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7fe ffd6 	bl	800567a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fa06 	bl	8006ae0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066d4:	e042      	b.n	800675c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <USBD_SetConfig+0x150>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d02a      	beq.n	800673a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7fe ffc4 	bl	800567a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066f2:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <USBD_SetConfig+0x150>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066fc:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <USBD_SetConfig+0x150>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7fe ff9d 	bl	8005642 <USBD_SetClassConfig>
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00f      	beq.n	8006732 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f918 	bl	800694a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	4619      	mov	r1, r3
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fe ffa9 	bl	800567a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006730:	e014      	b.n	800675c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f9d4 	bl	8006ae0 <USBD_CtlSendStatus>
      break;
 8006738:	e010      	b.n	800675c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9d0 	bl	8006ae0 <USBD_CtlSendStatus>
      break;
 8006740:	e00c      	b.n	800675c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f900 	bl	800694a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800674a:	4b07      	ldr	r3, [pc, #28]	; (8006768 <USBD_SetConfig+0x150>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fe ff92 	bl	800567a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006756:	2303      	movs	r3, #3
 8006758:	73fb      	strb	r3, [r7, #15]
      break;
 800675a:	bf00      	nop
  }

  return ret;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	200001c4 	.word	0x200001c4

0800676c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	88db      	ldrh	r3, [r3, #6]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d004      	beq.n	8006788 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f8e2 	bl	800694a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006786:	e023      	b.n	80067d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	dc02      	bgt.n	800679a <USBD_GetConfig+0x2e>
 8006794:	2b00      	cmp	r3, #0
 8006796:	dc03      	bgt.n	80067a0 <USBD_GetConfig+0x34>
 8006798:	e015      	b.n	80067c6 <USBD_GetConfig+0x5a>
 800679a:	2b03      	cmp	r3, #3
 800679c:	d00b      	beq.n	80067b6 <USBD_GetConfig+0x4a>
 800679e:	e012      	b.n	80067c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3308      	adds	r3, #8
 80067aa:	2201      	movs	r2, #1
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f93c 	bl	8006a2c <USBD_CtlSendData>
        break;
 80067b4:	e00c      	b.n	80067d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	2201      	movs	r2, #1
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f934 	bl	8006a2c <USBD_CtlSendData>
        break;
 80067c4:	e004      	b.n	80067d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f8be 	bl	800694a <USBD_CtlError>
        break;
 80067ce:	bf00      	nop
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d81e      	bhi.n	800682e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	88db      	ldrh	r3, [r3, #6]
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d004      	beq.n	8006802 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f8a5 	bl	800694a <USBD_CtlError>
        break;
 8006800:	e01a      	b.n	8006838 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f043 0202 	orr.w	r2, r3, #2
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	330c      	adds	r3, #12
 8006822:	2202      	movs	r2, #2
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f900 	bl	8006a2c <USBD_CtlSendData>
      break;
 800682c:	e004      	b.n	8006838 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f88a 	bl	800694a <USBD_CtlError>
      break;
 8006836:	bf00      	nop
  }
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	885b      	ldrh	r3, [r3, #2]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d107      	bne.n	8006862 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f940 	bl	8006ae0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006860:	e013      	b.n	800688a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	885b      	ldrh	r3, [r3, #2]
 8006866:	2b02      	cmp	r3, #2
 8006868:	d10b      	bne.n	8006882 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	889b      	ldrh	r3, [r3, #4]
 800686e:	0a1b      	lsrs	r3, r3, #8
 8006870:	b29b      	uxth	r3, r3
 8006872:	b2da      	uxtb	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f930 	bl	8006ae0 <USBD_CtlSendStatus>
}
 8006880:	e003      	b.n	800688a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f860 	bl	800694a <USBD_CtlError>
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d80b      	bhi.n	80068c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	885b      	ldrh	r3, [r3, #2]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d10c      	bne.n	80068cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f910 	bl	8006ae0 <USBD_CtlSendStatus>
      }
      break;
 80068c0:	e004      	b.n	80068cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f840 	bl	800694a <USBD_CtlError>
      break;
 80068ca:	e000      	b.n	80068ce <USBD_ClrFeature+0x3c>
      break;
 80068cc:	bf00      	nop
  }
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3301      	adds	r3, #1
 80068f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	781a      	ldrb	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3301      	adds	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f7ff fa41 	bl	8005d88 <SWAPBYTE>
 8006906:	4603      	mov	r3, r0
 8006908:	461a      	mov	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3301      	adds	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	3301      	adds	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7ff fa34 	bl	8005d88 <SWAPBYTE>
 8006920:	4603      	mov	r3, r0
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3301      	adds	r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff fa27 	bl	8005d88 <SWAPBYTE>
 800693a:	4603      	mov	r3, r0
 800693c:	461a      	mov	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	80da      	strh	r2, [r3, #6]
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006954:	2180      	movs	r1, #128	; 0x80
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fcd6 	bl	8007308 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800695c:	2100      	movs	r1, #0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fcd2 	bl	8007308 <USBD_LL_StallEP>
}
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d036      	beq.n	80069f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006986:	6938      	ldr	r0, [r7, #16]
 8006988:	f000 f836 	bl	80069f8 <USBD_GetLen>
 800698c:	4603      	mov	r3, r0
 800698e:	3301      	adds	r3, #1
 8006990:	b29b      	uxth	r3, r3
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	4413      	add	r3, r2
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	7812      	ldrb	r2, [r2, #0]
 80069a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80069a6:	7dfb      	ldrb	r3, [r7, #23]
 80069a8:	3301      	adds	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	4413      	add	r3, r2
 80069b2:	2203      	movs	r2, #3
 80069b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	3301      	adds	r3, #1
 80069ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80069bc:	e013      	b.n	80069e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	4413      	add	r3, r2
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	7812      	ldrb	r2, [r2, #0]
 80069c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3301      	adds	r3, #1
 80069ce:	613b      	str	r3, [r7, #16]
    idx++;
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	3301      	adds	r3, #1
 80069d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	4413      	add	r3, r2
 80069dc:	2200      	movs	r2, #0
 80069de:	701a      	strb	r2, [r3, #0]
    idx++;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	3301      	adds	r3, #1
 80069e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e7      	bne.n	80069be <USBD_GetString+0x52>
 80069ee:	e000      	b.n	80069f2 <USBD_GetString+0x86>
    return;
 80069f0:	bf00      	nop
  }
}
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a08:	e005      	b.n	8006a16 <USBD_GetLen+0x1e>
  {
    len++;
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	3301      	adds	r3, #1
 8006a14:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f5      	bne.n	8006a0a <USBD_GetLen+0x12>
  }

  return len;
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	2100      	movs	r1, #0
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fce1 	bl	800741a <USBD_LL_Transmit>

  return USBD_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	2100      	movs	r1, #0
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fcd0 	bl	800741a <USBD_LL_Transmit>

  return USBD_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2203      	movs	r2, #3
 8006a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	2100      	movs	r1, #0
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 fcd4 	bl	800745c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	2100      	movs	r1, #0
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fcc3 	bl	800745c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2204      	movs	r2, #4
 8006aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006af0:	2300      	movs	r3, #0
 8006af2:	2200      	movs	r2, #0
 8006af4:	2100      	movs	r1, #0
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fc8f 	bl	800741a <USBD_LL_Transmit>

  return USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2205      	movs	r2, #5
 8006b12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b16:	2300      	movs	r3, #0
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fc9d 	bl	800745c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b30:	2200      	movs	r2, #0
 8006b32:	4912      	ldr	r1, [pc, #72]	; (8006b7c <MX_USB_DEVICE_Init+0x50>)
 8006b34:	4812      	ldr	r0, [pc, #72]	; (8006b80 <MX_USB_DEVICE_Init+0x54>)
 8006b36:	f7fe fd07 	bl	8005548 <USBD_Init>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b40:	f7f9 fe02 	bl	8000748 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b44:	490f      	ldr	r1, [pc, #60]	; (8006b84 <MX_USB_DEVICE_Init+0x58>)
 8006b46:	480e      	ldr	r0, [pc, #56]	; (8006b80 <MX_USB_DEVICE_Init+0x54>)
 8006b48:	f7fe fd2e 	bl	80055a8 <USBD_RegisterClass>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b52:	f7f9 fdf9 	bl	8000748 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b56:	490c      	ldr	r1, [pc, #48]	; (8006b88 <MX_USB_DEVICE_Init+0x5c>)
 8006b58:	4809      	ldr	r0, [pc, #36]	; (8006b80 <MX_USB_DEVICE_Init+0x54>)
 8006b5a:	f7fe fc1f 	bl	800539c <USBD_CDC_RegisterInterface>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b64:	f7f9 fdf0 	bl	8000748 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b68:	4805      	ldr	r0, [pc, #20]	; (8006b80 <MX_USB_DEVICE_Init+0x54>)
 8006b6a:	f7fe fd53 	bl	8005614 <USBD_Start>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b74:	f7f9 fde8 	bl	8000748 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b78:	bf00      	nop
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	200000ec 	.word	0x200000ec
 8006b80:	200001c8 	.word	0x200001c8
 8006b84:	20000058 	.word	0x20000058
 8006b88:	200000d8 	.word	0x200000d8

08006b8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006b90:	2200      	movs	r2, #0
 8006b92:	4905      	ldr	r1, [pc, #20]	; (8006ba8 <CDC_Init_FS+0x1c>)
 8006b94:	4805      	ldr	r0, [pc, #20]	; (8006bac <CDC_Init_FS+0x20>)
 8006b96:	f7fe fc1b 	bl	80053d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006b9a:	4905      	ldr	r1, [pc, #20]	; (8006bb0 <CDC_Init_FS+0x24>)
 8006b9c:	4803      	ldr	r0, [pc, #12]	; (8006bac <CDC_Init_FS+0x20>)
 8006b9e:	f7fe fc39 	bl	8005414 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006ba2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	200008a4 	.word	0x200008a4
 8006bac:	200001c8 	.word	0x200001c8
 8006bb0:	200004a4 	.word	0x200004a4

08006bb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	71fb      	strb	r3, [r7, #7]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	2b23      	cmp	r3, #35	; 0x23
 8006bd8:	d84a      	bhi.n	8006c70 <CDC_Control_FS+0xac>
 8006bda:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <CDC_Control_FS+0x1c>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006c71 	.word	0x08006c71
 8006be4:	08006c71 	.word	0x08006c71
 8006be8:	08006c71 	.word	0x08006c71
 8006bec:	08006c71 	.word	0x08006c71
 8006bf0:	08006c71 	.word	0x08006c71
 8006bf4:	08006c71 	.word	0x08006c71
 8006bf8:	08006c71 	.word	0x08006c71
 8006bfc:	08006c71 	.word	0x08006c71
 8006c00:	08006c71 	.word	0x08006c71
 8006c04:	08006c71 	.word	0x08006c71
 8006c08:	08006c71 	.word	0x08006c71
 8006c0c:	08006c71 	.word	0x08006c71
 8006c10:	08006c71 	.word	0x08006c71
 8006c14:	08006c71 	.word	0x08006c71
 8006c18:	08006c71 	.word	0x08006c71
 8006c1c:	08006c71 	.word	0x08006c71
 8006c20:	08006c71 	.word	0x08006c71
 8006c24:	08006c71 	.word	0x08006c71
 8006c28:	08006c71 	.word	0x08006c71
 8006c2c:	08006c71 	.word	0x08006c71
 8006c30:	08006c71 	.word	0x08006c71
 8006c34:	08006c71 	.word	0x08006c71
 8006c38:	08006c71 	.word	0x08006c71
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006c71 	.word	0x08006c71
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	08006c71 	.word	0x08006c71
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c71 	.word	0x08006c71
 8006c54:	08006c71 	.word	0x08006c71
 8006c58:	08006c71 	.word	0x08006c71
 8006c5c:	08006c71 	.word	0x08006c71
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c71 	.word	0x08006c71
 8006c68:	08006c71 	.word	0x08006c71
 8006c6c:	08006c71 	.word	0x08006c71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c70:	bf00      	nop
  }

  return (USBD_OK);
 8006c72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4805      	ldr	r0, [pc, #20]	; (8006ca4 <CDC_Receive_FS+0x24>)
 8006c8e:	f7fe fbc1 	bl	8005414 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006c92:	4804      	ldr	r0, [pc, #16]	; (8006ca4 <CDC_Receive_FS+0x24>)
 8006c94:	f7fe fc22 	bl	80054dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006c98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	200001c8 	.word	0x200001c8

08006ca8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006cb8:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <CDC_Transmit_FS+0x48>)
 8006cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e00b      	b.n	8006ce6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006cce:	887b      	ldrh	r3, [r7, #2]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	4806      	ldr	r0, [pc, #24]	; (8006cf0 <CDC_Transmit_FS+0x48>)
 8006cd6:	f7fe fb7b 	bl	80053d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006cda:	4805      	ldr	r0, [pc, #20]	; (8006cf0 <CDC_Transmit_FS+0x48>)
 8006cdc:	f7fe fbb8 	bl	8005450 <USBD_CDC_TransmitPacket>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	200001c8 	.word	0x200001c8

08006cf4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
	...

08006d18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	6039      	str	r1, [r7, #0]
 8006d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2212      	movs	r2, #18
 8006d28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d2a:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20000108 	.word	0x20000108

08006d3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	6039      	str	r1, [r7, #0]
 8006d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d4e:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	2000011c 	.word	0x2000011c

08006d60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d105      	bne.n	8006d7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4907      	ldr	r1, [pc, #28]	; (8006d94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d76:	4808      	ldr	r0, [pc, #32]	; (8006d98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d78:	f7ff fdf8 	bl	800696c <USBD_GetString>
 8006d7c:	e004      	b.n	8006d88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	4904      	ldr	r1, [pc, #16]	; (8006d94 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d82:	4805      	ldr	r0, [pc, #20]	; (8006d98 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d84:	f7ff fdf2 	bl	800696c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d88:	4b02      	ldr	r3, [pc, #8]	; (8006d94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000ca4 	.word	0x20000ca4
 8006d98:	080075bc 	.word	0x080075bc

08006d9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	6039      	str	r1, [r7, #0]
 8006da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	4904      	ldr	r1, [pc, #16]	; (8006dbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006dac:	4804      	ldr	r0, [pc, #16]	; (8006dc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006dae:	f7ff fddd 	bl	800696c <USBD_GetString>
  return USBD_StrDesc;
 8006db2:	4b02      	ldr	r3, [pc, #8]	; (8006dbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20000ca4 	.word	0x20000ca4
 8006dc0:	080075d4 	.word	0x080075d4

08006dc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	6039      	str	r1, [r7, #0]
 8006dce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	221a      	movs	r2, #26
 8006dd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006dd6:	f000 f843 	bl	8006e60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dda:	4b02      	ldr	r3, [pc, #8]	; (8006de4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000120 	.word	0x20000120

08006de8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	6039      	str	r1, [r7, #0]
 8006df2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	4907      	ldr	r1, [pc, #28]	; (8006e1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006dfe:	4808      	ldr	r0, [pc, #32]	; (8006e20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e00:	f7ff fdb4 	bl	800696c <USBD_GetString>
 8006e04:	e004      	b.n	8006e10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	4904      	ldr	r1, [pc, #16]	; (8006e1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e0a:	4805      	ldr	r0, [pc, #20]	; (8006e20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e0c:	f7ff fdae 	bl	800696c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e10:	4b02      	ldr	r3, [pc, #8]	; (8006e1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000ca4 	.word	0x20000ca4
 8006e20:	080075e8 	.word	0x080075e8

08006e24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	6039      	str	r1, [r7, #0]
 8006e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	4907      	ldr	r1, [pc, #28]	; (8006e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e3a:	4808      	ldr	r0, [pc, #32]	; (8006e5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e3c:	f7ff fd96 	bl	800696c <USBD_GetString>
 8006e40:	e004      	b.n	8006e4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	4904      	ldr	r1, [pc, #16]	; (8006e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e46:	4805      	ldr	r0, [pc, #20]	; (8006e5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e48:	f7ff fd90 	bl	800696c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e4c:	4b02      	ldr	r3, [pc, #8]	; (8006e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000ca4 	.word	0x20000ca4
 8006e5c:	080075f4 	.word	0x080075f4

08006e60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <Get_SerialNum+0x44>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <Get_SerialNum+0x48>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e72:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <Get_SerialNum+0x4c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006e86:	2208      	movs	r2, #8
 8006e88:	4909      	ldr	r1, [pc, #36]	; (8006eb0 <Get_SerialNum+0x50>)
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f814 	bl	8006eb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006e90:	2204      	movs	r2, #4
 8006e92:	4908      	ldr	r1, [pc, #32]	; (8006eb4 <Get_SerialNum+0x54>)
 8006e94:	68b8      	ldr	r0, [r7, #8]
 8006e96:	f000 f80f 	bl	8006eb8 <IntToUnicode>
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	1fff7a10 	.word	0x1fff7a10
 8006ea8:	1fff7a14 	.word	0x1fff7a14
 8006eac:	1fff7a18 	.word	0x1fff7a18
 8006eb0:	20000122 	.word	0x20000122
 8006eb4:	20000132 	.word	0x20000132

08006eb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]
 8006ece:	e027      	b.n	8006f20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	0f1b      	lsrs	r3, r3, #28
 8006ed4:	2b09      	cmp	r3, #9
 8006ed6:	d80b      	bhi.n	8006ef0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	0f1b      	lsrs	r3, r3, #28
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3230      	adds	r2, #48	; 0x30
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	e00a      	b.n	8006f06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	0f1b      	lsrs	r3, r3, #28
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	4619      	mov	r1, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	440b      	add	r3, r1
 8006f00:	3237      	adds	r2, #55	; 0x37
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	011b      	lsls	r3, r3, #4
 8006f0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	3301      	adds	r3, #1
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4413      	add	r3, r2
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
 8006f20:	7dfa      	ldrb	r2, [r7, #23]
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d3d3      	bcc.n	8006ed0 <IntToUnicode+0x18>
  }
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
	...

08006f38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	; 0x28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	609a      	str	r2, [r3, #8]
 8006f4c:	60da      	str	r2, [r3, #12]
 8006f4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f58:	d13a      	bne.n	8006fd0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <HAL_PCD_MspInit+0xa0>)
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <HAL_PCD_MspInit+0xa0>)
 8006f64:	f043 0301 	orr.w	r3, r3, #1
 8006f68:	6313      	str	r3, [r2, #48]	; 0x30
 8006f6a:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <HAL_PCD_MspInit+0xa0>)
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f84:	2303      	movs	r3, #3
 8006f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f88:	230a      	movs	r3, #10
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f8c:	f107 0314 	add.w	r3, r7, #20
 8006f90:	4619      	mov	r1, r3
 8006f92:	4812      	ldr	r0, [pc, #72]	; (8006fdc <HAL_PCD_MspInit+0xa4>)
 8006f94:	f7f9 fe66 	bl	8000c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f98:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <HAL_PCD_MspInit+0xa0>)
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	4a0e      	ldr	r2, [pc, #56]	; (8006fd8 <HAL_PCD_MspInit+0xa0>)
 8006f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa2:	6353      	str	r3, [r2, #52]	; 0x34
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <HAL_PCD_MspInit+0xa0>)
 8006faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fac:	4a0a      	ldr	r2, [pc, #40]	; (8006fd8 <HAL_PCD_MspInit+0xa0>)
 8006fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fb2:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb4:	4b08      	ldr	r3, [pc, #32]	; (8006fd8 <HAL_PCD_MspInit+0xa0>)
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	2043      	movs	r0, #67	; 0x43
 8006fc6:	f7f9 fe16 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fca:	2043      	movs	r0, #67	; 0x43
 8006fcc:	f7f9 fe2f 	bl	8000c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006fd0:	bf00      	nop
 8006fd2:	3728      	adds	r7, #40	; 0x28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40020000 	.word	0x40020000

08006fe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	f7fe fb59 	bl	80056ae <USBD_LL_SetupStage>
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007016:	78fa      	ldrb	r2, [r7, #3]
 8007018:	6879      	ldr	r1, [r7, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	4619      	mov	r1, r3
 800702e:	f7fe fb93 	bl	8005758 <USBD_LL_DataOutStage>
}
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800704c:	78fa      	ldrb	r2, [r7, #3]
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	4613      	mov	r3, r2
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	4413      	add	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	334c      	adds	r3, #76	; 0x4c
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	4619      	mov	r1, r3
 8007062:	f7fe fc2c 	bl	80058be <USBD_LL_DataInStage>
}
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fd60 	bl	8005b42 <USBD_LL_SOF>
}
 8007082:	bf00      	nop
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007092:	2301      	movs	r3, #1
 8007094:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d001      	beq.n	80070a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800709e:	f7f9 fb53 	bl	8000748 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070a8:	7bfa      	ldrb	r2, [r7, #15]
 80070aa:	4611      	mov	r1, r2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fd0a 	bl	8005ac6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fcb2 	bl	8005a22 <USBD_LL_Reset>
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe fd05 	bl	8005ae6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <HAL_PCD_SuspendCallback+0x48>)
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	4a03      	ldr	r2, [pc, #12]	; (8007110 <HAL_PCD_SuspendCallback+0x48>)
 8007102:	f043 0306 	orr.w	r3, r3, #6
 8007106:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	e000ed00 	.word	0xe000ed00

08007114 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fcf5 	bl	8005b12 <USBD_LL_Resume>
}
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	4611      	mov	r1, r2
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fd4d 	bl	8005be6 <USBD_LL_IsoOUTIncomplete>
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fd09 	bl	8005b82 <USBD_LL_IsoINIncomplete>
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fd5f 	bl	8005c4a <USBD_LL_DevConnected>
}
 800718c:	bf00      	nop
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fd5c 	bl	8005c60 <USBD_LL_DevDisconnected>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d13c      	bne.n	800723a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071c0:	4a20      	ldr	r2, [pc, #128]	; (8007244 <USBD_LL_Init+0x94>)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a1e      	ldr	r2, [pc, #120]	; (8007244 <USBD_LL_Init+0x94>)
 80071cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80071d0:	4b1c      	ldr	r3, [pc, #112]	; (8007244 <USBD_LL_Init+0x94>)
 80071d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80071d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80071d8:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <USBD_LL_Init+0x94>)
 80071da:	2204      	movs	r2, #4
 80071dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80071de:	4b19      	ldr	r3, [pc, #100]	; (8007244 <USBD_LL_Init+0x94>)
 80071e0:	2202      	movs	r2, #2
 80071e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80071e4:	4b17      	ldr	r3, [pc, #92]	; (8007244 <USBD_LL_Init+0x94>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80071ea:	4b16      	ldr	r3, [pc, #88]	; (8007244 <USBD_LL_Init+0x94>)
 80071ec:	2202      	movs	r2, #2
 80071ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80071f0:	4b14      	ldr	r3, [pc, #80]	; (8007244 <USBD_LL_Init+0x94>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80071f6:	4b13      	ldr	r3, [pc, #76]	; (8007244 <USBD_LL_Init+0x94>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80071fc:	4b11      	ldr	r3, [pc, #68]	; (8007244 <USBD_LL_Init+0x94>)
 80071fe:	2200      	movs	r2, #0
 8007200:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007202:	4b10      	ldr	r3, [pc, #64]	; (8007244 <USBD_LL_Init+0x94>)
 8007204:	2200      	movs	r2, #0
 8007206:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007208:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <USBD_LL_Init+0x94>)
 800720a:	2200      	movs	r2, #0
 800720c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800720e:	480d      	ldr	r0, [pc, #52]	; (8007244 <USBD_LL_Init+0x94>)
 8007210:	f7f9 fedf 	bl	8000fd2 <HAL_PCD_Init>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800721a:	f7f9 fa95 	bl	8000748 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800721e:	2180      	movs	r1, #128	; 0x80
 8007220:	4808      	ldr	r0, [pc, #32]	; (8007244 <USBD_LL_Init+0x94>)
 8007222:	f7fb f936 	bl	8002492 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007226:	2240      	movs	r2, #64	; 0x40
 8007228:	2100      	movs	r1, #0
 800722a:	4806      	ldr	r0, [pc, #24]	; (8007244 <USBD_LL_Init+0x94>)
 800722c:	f7fb f8ea 	bl	8002404 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007230:	2280      	movs	r2, #128	; 0x80
 8007232:	2101      	movs	r1, #1
 8007234:	4803      	ldr	r0, [pc, #12]	; (8007244 <USBD_LL_Init+0x94>)
 8007236:	f7fb f8e5 	bl	8002404 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000ea4 	.word	0x20000ea4

08007248 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800725e:	4618      	mov	r0, r3
 8007260:	f7f9 ffd4 	bl	800120c <HAL_PCD_Start>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f942 	bl	80074f4 <USBD_Get_USB_Status>
 8007270:	4603      	mov	r3, r0
 8007272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007274:	7bbb      	ldrb	r3, [r7, #14]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	4608      	mov	r0, r1
 8007288:	4611      	mov	r1, r2
 800728a:	461a      	mov	r2, r3
 800728c:	4603      	mov	r3, r0
 800728e:	70fb      	strb	r3, [r7, #3]
 8007290:	460b      	mov	r3, r1
 8007292:	70bb      	strb	r3, [r7, #2]
 8007294:	4613      	mov	r3, r2
 8007296:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80072a6:	78bb      	ldrb	r3, [r7, #2]
 80072a8:	883a      	ldrh	r2, [r7, #0]
 80072aa:	78f9      	ldrb	r1, [r7, #3]
 80072ac:	f7fa fca5 	bl	8001bfa <HAL_PCD_EP_Open>
 80072b0:	4603      	mov	r3, r0
 80072b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f91c 	bl	80074f4 <USBD_Get_USB_Status>
 80072bc:	4603      	mov	r3, r0
 80072be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072e4:	78fa      	ldrb	r2, [r7, #3]
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fa fcee 	bl	8001cca <HAL_PCD_EP_Close>
 80072ee:	4603      	mov	r3, r0
 80072f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 f8fd 	bl	80074f4 <USBD_Get_USB_Status>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	4611      	mov	r1, r2
 8007326:	4618      	mov	r0, r3
 8007328:	f7fa fdc6 	bl	8001eb8 <HAL_PCD_EP_SetStall>
 800732c:	4603      	mov	r3, r0
 800732e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f8de 	bl	80074f4 <USBD_Get_USB_Status>
 8007338:	4603      	mov	r3, r0
 800733a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800733c:	7bbb      	ldrb	r3, [r7, #14]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	4611      	mov	r1, r2
 8007364:	4618      	mov	r0, r3
 8007366:	f7fa fe0b 	bl	8001f80 <HAL_PCD_EP_ClrStall>
 800736a:	4603      	mov	r3, r0
 800736c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 f8bf 	bl	80074f4 <USBD_Get_USB_Status>
 8007376:	4603      	mov	r3, r0
 8007378:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800737a:	7bbb      	ldrb	r3, [r7, #14]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007396:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800739c:	2b00      	cmp	r3, #0
 800739e:	da0b      	bge.n	80073b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073a6:	68f9      	ldr	r1, [r7, #12]
 80073a8:	4613      	mov	r3, r2
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	440b      	add	r3, r1
 80073b2:	333e      	adds	r3, #62	; 0x3e
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	e00b      	b.n	80073d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	4613      	mov	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80073ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fa fbd8 	bl	8001bb0 <HAL_PCD_SetAddress>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	4618      	mov	r0, r3
 8007408:	f000 f874 	bl	80074f4 <USBD_Get_USB_Status>
 800740c:	4603      	mov	r3, r0
 800740e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007410:	7bbb      	ldrb	r3, [r7, #14]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
 8007426:	460b      	mov	r3, r1
 8007428:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007438:	7af9      	ldrb	r1, [r7, #11]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	f7fa fcf1 	bl	8001e24 <HAL_PCD_EP_Transmit>
 8007442:	4603      	mov	r3, r0
 8007444:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f853 	bl	80074f4 <USBD_Get_USB_Status>
 800744e:	4603      	mov	r3, r0
 8007450:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007452:	7dbb      	ldrb	r3, [r7, #22]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	460b      	mov	r3, r1
 800746a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800747a:	7af9      	ldrb	r1, [r7, #11]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	f7fa fc6d 	bl	8001d5e <HAL_PCD_EP_Receive>
 8007484:	4603      	mov	r3, r0
 8007486:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	4618      	mov	r0, r3
 800748c:	f000 f832 	bl	80074f4 <USBD_Get_USB_Status>
 8007490:	4603      	mov	r3, r0
 8007492:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007494:	7dbb      	ldrb	r3, [r7, #22]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	460b      	mov	r3, r1
 80074a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074b0:	78fa      	ldrb	r2, [r7, #3]
 80074b2:	4611      	mov	r1, r2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fa fc9d 	bl	8001df4 <HAL_PCD_EP_GetRxCount>
 80074ba:	4603      	mov	r3, r0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074cc:	4b03      	ldr	r3, [pc, #12]	; (80074dc <USBD_static_malloc+0x18>)
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	200013b0 	.word	0x200013b0

080074e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	4603      	mov	r3, r0
 80074fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007502:	79fb      	ldrb	r3, [r7, #7]
 8007504:	2b03      	cmp	r3, #3
 8007506:	d817      	bhi.n	8007538 <USBD_Get_USB_Status+0x44>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <USBD_Get_USB_Status+0x1c>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007521 	.word	0x08007521
 8007514:	08007527 	.word	0x08007527
 8007518:	0800752d 	.word	0x0800752d
 800751c:	08007533 	.word	0x08007533
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]
    break;
 8007524:	e00b      	b.n	800753e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007526:	2303      	movs	r3, #3
 8007528:	73fb      	strb	r3, [r7, #15]
    break;
 800752a:	e008      	b.n	800753e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800752c:	2301      	movs	r3, #1
 800752e:	73fb      	strb	r3, [r7, #15]
    break;
 8007530:	e005      	b.n	800753e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	73fb      	strb	r3, [r7, #15]
    break;
 8007536:	e002      	b.n	800753e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007538:	2303      	movs	r3, #3
 800753a:	73fb      	strb	r3, [r7, #15]
    break;
 800753c:	bf00      	nop
  }
  return usb_status;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <__libc_init_array>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	4d0d      	ldr	r5, [pc, #52]	; (8007584 <__libc_init_array+0x38>)
 8007550:	4c0d      	ldr	r4, [pc, #52]	; (8007588 <__libc_init_array+0x3c>)
 8007552:	1b64      	subs	r4, r4, r5
 8007554:	10a4      	asrs	r4, r4, #2
 8007556:	2600      	movs	r6, #0
 8007558:	42a6      	cmp	r6, r4
 800755a:	d109      	bne.n	8007570 <__libc_init_array+0x24>
 800755c:	4d0b      	ldr	r5, [pc, #44]	; (800758c <__libc_init_array+0x40>)
 800755e:	4c0c      	ldr	r4, [pc, #48]	; (8007590 <__libc_init_array+0x44>)
 8007560:	f000 f820 	bl	80075a4 <_init>
 8007564:	1b64      	subs	r4, r4, r5
 8007566:	10a4      	asrs	r4, r4, #2
 8007568:	2600      	movs	r6, #0
 800756a:	42a6      	cmp	r6, r4
 800756c:	d105      	bne.n	800757a <__libc_init_array+0x2e>
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	f855 3b04 	ldr.w	r3, [r5], #4
 8007574:	4798      	blx	r3
 8007576:	3601      	adds	r6, #1
 8007578:	e7ee      	b.n	8007558 <__libc_init_array+0xc>
 800757a:	f855 3b04 	ldr.w	r3, [r5], #4
 800757e:	4798      	blx	r3
 8007580:	3601      	adds	r6, #1
 8007582:	e7f2      	b.n	800756a <__libc_init_array+0x1e>
 8007584:	08007624 	.word	0x08007624
 8007588:	08007624 	.word	0x08007624
 800758c:	08007624 	.word	0x08007624
 8007590:	08007628 	.word	0x08007628

08007594 <memset>:
 8007594:	4402      	add	r2, r0
 8007596:	4603      	mov	r3, r0
 8007598:	4293      	cmp	r3, r2
 800759a:	d100      	bne.n	800759e <memset+0xa>
 800759c:	4770      	bx	lr
 800759e:	f803 1b01 	strb.w	r1, [r3], #1
 80075a2:	e7f9      	b.n	8007598 <memset+0x4>

080075a4 <_init>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr

080075b0 <_fini>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr
