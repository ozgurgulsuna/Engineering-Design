
ST_serial_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f64  08006f64  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f6c  08006f6c  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f6c  08006f6c  00016f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08006f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  2000013c  080070b0  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015c8  080070b0  000215c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df14  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002953  00000000  00000000  0002e080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  000309d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00031510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ffb  00000000  00000000  00031f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebf1  00000000  00000000  00049f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000862fc  00000000  00000000  00058afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dedf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c84  00000000  00000000  000dee48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000013c 	.word	0x2000013c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006ef4 	.word	0x08006ef4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000140 	.word	0x20000140
 80001d0:	08006ef4 	.word	0x08006ef4

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 f9a2 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f822 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f88a 	bl	8000610 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f005 ffbe 	bl	800647c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8000500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000504:	f000 fa0a 	bl	800091c <HAL_Delay>
	  CDC_Transmit_FS(usb_out,sizeof(usb_out));
 8000508:	2120      	movs	r1, #32
 800050a:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x40>)
 800050c:	f006 f874 	bl	80065f8 <CDC_Transmit_FS>
	  if(strcmp((char *)blink_led_cmd, (char *)usb_in) == 0){
 8000510:	4907      	ldr	r1, [pc, #28]	; (8000530 <main+0x44>)
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x48>)
 8000514:	f7ff fe5e 	bl	80001d4 <strcmp>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1f0      	bne.n	8000500 <main+0x14>
	  		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0x4c>)
 8000524:	f000 fccd 	bl	8000ec2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000528:	e7ea      	b.n	8000500 <main+0x14>
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	20000158 	.word	0x20000158
 8000534:	20000020 	.word	0x20000020
 8000538:	40020800 	.word	0x40020800

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 fcca 	bl	8006ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a20      	ldr	r2, [pc, #128]	; (800060c <SystemClock_Config+0xd0>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059c:	2301      	movs	r3, #1
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005b0:	2319      	movs	r3, #25
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005b4:	23c0      	movs	r3, #192	; 0xc0
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 ff13 	bl	80023f0 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d0:	f000 f870 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 f975 	bl	80028e0 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 f85a 	bl	80006b4 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_GPIO_Init+0x9c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a1f      	ldr	r2, [pc, #124]	; (80006ac <MX_GPIO_Init+0x9c>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <MX_GPIO_Init+0x9c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_GPIO_Init+0x9c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <MX_GPIO_Init+0x9c>)
 800064c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_GPIO_Init+0x9c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_GPIO_Init+0x9c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <MX_GPIO_Init+0x9c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_GPIO_Init+0x9c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLINK_LED_PIN_GPIO_Port, BLINK_LED_PIN_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	480b      	ldr	r0, [pc, #44]	; (80006b0 <MX_GPIO_Init+0xa0>)
 8000682:	f000 fc05 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLINK_LED_PIN_Pin */
  GPIO_InitStruct.Pin = BLINK_LED_PIN_Pin;
 8000686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLINK_LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_GPIO_Init+0xa0>)
 80006a0:	f000 fa72 	bl	8000b88 <HAL_GPIO_Init>

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020800 	.word	0x40020800

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <HAL_MspInit+0x4c>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6453      	str	r3, [r2, #68]	; 0x44
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_MspInit+0x4c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <HAL_MspInit+0x4c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	6413      	str	r3, [r2, #64]	; 0x40
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 f8be 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

	CDC_Receive_FS(usb_temp,sizeof(usb_temp));
 8000768:	2120      	movs	r1, #32
 800076a:	4811      	ldr	r0, [pc, #68]	; (80007b0 <OTG_FS_IRQHandler+0x4c>)
 800076c:	f005 ff30 	bl	80065d0 <CDC_Receive_FS>

	if(strcmp((char *)usb_temp, (char *)empty_string) != 0){
 8000770:	4910      	ldr	r1, [pc, #64]	; (80007b4 <OTG_FS_IRQHandler+0x50>)
 8000772:	480f      	ldr	r0, [pc, #60]	; (80007b0 <OTG_FS_IRQHandler+0x4c>)
 8000774:	f7ff fd2e 	bl	80001d4 <strcmp>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00d      	beq.n	800079a <OTG_FS_IRQHandler+0x36>
		// Store the data in usb_in array if a non-empty message received
		memcpy(&usb_in, &usb_temp, sizeof(usb_in));
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <OTG_FS_IRQHandler+0x54>)
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <OTG_FS_IRQHandler+0x4c>)
 8000782:	4614      	mov	r4, r2
 8000784:	461d      	mov	r5, r3
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	6020      	str	r0, [r4, #0]
 800078a:	6061      	str	r1, [r4, #4]
 800078c:	60a2      	str	r2, [r4, #8]
 800078e:	60e3      	str	r3, [r4, #12]
 8000790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000792:	6120      	str	r0, [r4, #16]
 8000794:	6161      	str	r1, [r4, #20]
 8000796:	61a2      	str	r2, [r4, #24]
 8000798:	61e3      	str	r3, [r4, #28]
	}

	// Clear usb_temp array
	memset(usb_temp, 0, sizeof(usb_temp));
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <OTG_FS_IRQHandler+0x4c>)
 80007a0:	f006 fba0 	bl	8006ee4 <memset>

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <OTG_FS_IRQHandler+0x58>)
 80007a6:	f000 fcf6 	bl	8001196 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bdb0      	pop	{r4, r5, r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000178 	.word	0x20000178
 80007b4:	20000198 	.word	0x20000198
 80007b8:	20000158 	.word	0x20000158
 80007bc:	20000e9c 	.word	0x20000e9c

080007c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <SystemInit+0x20>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <SystemInit+0x20>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800081c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007ea:	490e      	ldr	r1, [pc, #56]	; (8000824 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000800:	4c0b      	ldr	r4, [pc, #44]	; (8000830 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800080e:	f7ff ffd7 	bl	80007c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000812:	f006 fb43 	bl	8006e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000816:	f7ff fe69 	bl	80004ec <main>
  bx  lr    
 800081a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800081c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8000828:	08006f74 	.word	0x08006f74
  ldr r2, =_sbss
 800082c:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8000830:	200015c8 	.word	0x200015c8

08000834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_Init+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_Init+0x40>)
 8000842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000848:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_Init+0x40>)
 800084e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_Init+0x40>)
 800085a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f94f 	bl	8000b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f808 	bl	800087c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff ff28 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023c00 	.word	0x40023c00

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0x54>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_InitTick+0x58>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f967 	bl	8000b6e <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00e      	b.n	80008c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d80a      	bhi.n	80008c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f000 f92f 	bl	8000b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <HAL_InitTick+0x5c>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000040 	.word	0x20000040
 80008d4:	20000048 	.word	0x20000048
 80008d8:	20000044 	.word	0x20000044

080008dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x20>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x24>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_IncTick+0x24>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000048 	.word	0x20000048
 8000900:	200001b8 	.word	0x200001b8

08000904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <HAL_GetTick+0x14>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	200001b8 	.word	0x200001b8

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff ffee 	bl	8000904 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffde 	bl	8000904 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000048 	.word	0x20000048

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db0b      	blt.n	80009f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 021f 	and.w	r2, r3, #31
 80009e0:	4907      	ldr	r1, [pc, #28]	; (8000a00 <__NVIC_EnableIRQ+0x38>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	2001      	movs	r0, #1
 80009ea:	fa00 f202 	lsl.w	r2, r0, r2
 80009ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	; (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad0:	d301      	bcc.n	8000ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00f      	b.n	8000af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <SysTick_Config+0x40>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ade:	210f      	movs	r1, #15
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f7ff ff8e 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <SysTick_Config+0x40>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SysTick_Config+0x40>)
 8000af0:	2207      	movs	r2, #7
 8000af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	e000e010 	.word	0xe000e010

08000b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff29 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2c:	f7ff ff3e 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	68b9      	ldr	r1, [r7, #8]
 8000b36:	6978      	ldr	r0, [r7, #20]
 8000b38:	f7ff ff8e 	bl	8000a58 <NVIC_EncodePriority>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff5d 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b4a:	bf00      	nop
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff31 	bl	80009c8 <__NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffa2 	bl	8000ac0 <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	e159      	b.n	8000e58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 8148 	bne.w	8000e52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d005      	beq.n	8000bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d130      	bne.n	8000c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 0201 	and.w	r2, r3, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d017      	beq.n	8000c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d123      	bne.n	8000ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	69b9      	ldr	r1, [r7, #24]
 8000cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0203 	and.w	r2, r3, #3
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 80a2 	beq.w	8000e52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b57      	ldr	r3, [pc, #348]	; (8000e70 <HAL_GPIO_Init+0x2e8>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a56      	ldr	r2, [pc, #344]	; (8000e70 <HAL_GPIO_Init+0x2e8>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b54      	ldr	r3, [pc, #336]	; (8000e70 <HAL_GPIO_Init+0x2e8>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2a:	4a52      	ldr	r2, [pc, #328]	; (8000e74 <HAL_GPIO_Init+0x2ec>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a49      	ldr	r2, [pc, #292]	; (8000e78 <HAL_GPIO_Init+0x2f0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d019      	beq.n	8000d8a <HAL_GPIO_Init+0x202>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a48      	ldr	r2, [pc, #288]	; (8000e7c <HAL_GPIO_Init+0x2f4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d013      	beq.n	8000d86 <HAL_GPIO_Init+0x1fe>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a47      	ldr	r2, [pc, #284]	; (8000e80 <HAL_GPIO_Init+0x2f8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d00d      	beq.n	8000d82 <HAL_GPIO_Init+0x1fa>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a46      	ldr	r2, [pc, #280]	; (8000e84 <HAL_GPIO_Init+0x2fc>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_Init+0x1f6>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a45      	ldr	r2, [pc, #276]	; (8000e88 <HAL_GPIO_Init+0x300>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_GPIO_Init+0x1f2>
 8000d76:	2304      	movs	r3, #4
 8000d78:	e008      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e004      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e002      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e000      	b.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	f002 0203 	and.w	r2, r2, #3
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	4093      	lsls	r3, r2
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d9c:	4935      	ldr	r1, [pc, #212]	; (8000e74 <HAL_GPIO_Init+0x2ec>)
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000daa:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dce:	4a2f      	ldr	r2, [pc, #188]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000df8:	4a24      	ldr	r2, [pc, #144]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e22:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3301      	adds	r3, #1
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	2b0f      	cmp	r3, #15
 8000e5c:	f67f aea2 	bls.w	8000ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40013800 	.word	0x40013800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40013c00 	.word	0x40013c00

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ed4:	887a      	ldrh	r2, [r7, #2]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	041a      	lsls	r2, r3, #16
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	619a      	str	r2, [r3, #24]
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef8:	b08f      	sub	sp, #60	; 0x3c
 8000efa:	af0a      	add	r7, sp, #40	; 0x28
 8000efc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e10f      	b.n	8001128 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d106      	bne.n	8000f28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f005 fcb0 	bl	8006888 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 ff97 	bl	8002e7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	603b      	str	r3, [r7, #0]
 8000f52:	687e      	ldr	r6, [r7, #4]
 8000f54:	466d      	mov	r5, sp
 8000f56:	f106 0410 	add.w	r4, r6, #16
 8000f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f66:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f6a:	1d33      	adds	r3, r6, #4
 8000f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f6e:	6838      	ldr	r0, [r7, #0]
 8000f70:	f001 fe6e 	bl	8002c50 <USB_CoreInit>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d005      	beq.n	8000f86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e0d0      	b.n	8001128 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 ff85 	bl	8002e9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f92:	2300      	movs	r3, #0
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e04a      	b.n	800102e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	333d      	adds	r3, #61	; 0x3d
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	333c      	adds	r3, #60	; 0x3c
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	b298      	uxth	r0, r3
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	3344      	adds	r3, #68	; 0x44
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3340      	adds	r3, #64	; 0x40
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3348      	adds	r3, #72	; 0x48
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	334c      	adds	r3, #76	; 0x4c
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3354      	adds	r3, #84	; 0x54
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3301      	adds	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3af      	bcc.n	8000f98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e044      	b.n	80010c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800103e:	7bfa      	ldrb	r2, [r7, #15]
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4413      	add	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	440b      	add	r3, r1
 80010a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	3301      	adds	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	7bfa      	ldrb	r2, [r7, #15]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3b5      	bcc.n	800103e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	687e      	ldr	r6, [r7, #4]
 80010da:	466d      	mov	r5, sp
 80010dc:	f106 0410 	add.w	r4, r6, #16
 80010e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f0:	1d33      	adds	r3, r6, #4
 80010f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f001 ff1d 	bl	8002f34 <USB_DevInit>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2202      	movs	r2, #2
 8001104:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e00d      	b.n	8001128 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f003 f86c 	bl	80041fe <USB_DevDisconnect>

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001130 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001144:	2b01      	cmp	r3, #1
 8001146:	d101      	bne.n	800114c <HAL_PCD_Start+0x1c>
 8001148:	2302      	movs	r3, #2
 800114a:	e020      	b.n	800118e <HAL_PCD_Start+0x5e>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	2b01      	cmp	r3, #1
 800115a:	d109      	bne.n	8001170 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001168:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fe6f 	bl	8002e58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f003 f81c 	bl	80041bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001196:	b590      	push	{r4, r7, lr}
 8001198:	b08d      	sub	sp, #52	; 0x34
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f8da 	bl	8004366 <USB_GetMode>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f040 848a 	bne.w	8001ace <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 f83e 	bl	8004240 <USB_ReadInterrupts>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8480 	beq.w	8001acc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 f82b 	bl	8004240 <USB_ReadInterrupts>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d107      	bne.n	8001204 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f002 0202 	and.w	r2, r2, #2
 8001202:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f003 f819 	bl	8004240 <USB_ReadInterrupts>
 800120e:	4603      	mov	r3, r0
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	2b10      	cmp	r3, #16
 8001216:	d161      	bne.n	80012dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	699a      	ldr	r2, [r3, #24]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0210 	bic.w	r2, r2, #16
 8001226:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001228:	6a3b      	ldr	r3, [r7, #32]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	f003 020f 	and.w	r2, r3, #15
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	3304      	adds	r3, #4
 8001246:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	0c5b      	lsrs	r3, r3, #17
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	2b02      	cmp	r3, #2
 8001252:	d124      	bne.n	800129e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d035      	beq.n	80012cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800126a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800126e:	b29b      	uxth	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	6a38      	ldr	r0, [r7, #32]
 8001274:	f002 fe50 	bl	8003f18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	091b      	lsrs	r3, r3, #4
 8001280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001284:	441a      	add	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	6a1a      	ldr	r2, [r3, #32]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001296:	441a      	add	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	e016      	b.n	80012cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	0c5b      	lsrs	r3, r3, #17
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d110      	bne.n	80012cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012b0:	2208      	movs	r2, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	6a38      	ldr	r0, [r7, #32]
 80012b6:	f002 fe2f 	bl	8003f18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	6a1a      	ldr	r2, [r3, #32]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c6:	441a      	add	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	699a      	ldr	r2, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0210 	orr.w	r2, r2, #16
 80012da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 ffad 	bl	8004240 <USB_ReadInterrupts>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012f0:	f040 80a7 	bne.w	8001442 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 ffb2 	bl	8004266 <USB_ReadDevAllOutEpInterrupt>
 8001302:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001304:	e099      	b.n	800143a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 808e 	beq.w	800142e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f002 ffd6 	bl	80042ce <USB_ReadDevOutEPInterrupt>
 8001322:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00c      	beq.n	8001348 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	015a      	lsls	r2, r3, #5
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133a:	461a      	mov	r2, r3
 800133c:	2301      	movs	r3, #1
 800133e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fec2 	bl	80020cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00c      	beq.n	800136c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	015a      	lsls	r2, r3, #5
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	4413      	add	r3, r2
 800135a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800135e:	461a      	mov	r2, r3
 8001360:	2308      	movs	r3, #8
 8001362:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 ff98 	bl	800229c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	015a      	lsls	r2, r3, #5
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	4413      	add	r3, r2
 800137e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001382:	461a      	mov	r2, r3
 8001384:	2310      	movs	r3, #16
 8001386:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d030      	beq.n	80013f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139a:	2b80      	cmp	r3, #128	; 0x80
 800139c:	d109      	bne.n	80013b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b4:	4613      	mov	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4413      	add	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	3304      	adds	r3, #4
 80013c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	78db      	ldrb	r3, [r3, #3]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d108      	bne.n	80013e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2200      	movs	r2, #0
 80013d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f005 fb4f 	bl	8006a80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	015a      	lsls	r2, r3, #5
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	4413      	add	r3, r2
 80013ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ee:	461a      	mov	r2, r3
 80013f0:	2302      	movs	r3, #2
 80013f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	015a      	lsls	r2, r3, #5
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	4413      	add	r3, r2
 8001406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800140a:	461a      	mov	r2, r3
 800140c:	2320      	movs	r3, #32
 800140e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d009      	beq.n	800142e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	015a      	lsls	r2, r3, #5
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	4413      	add	r3, r2
 8001422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001426:	461a      	mov	r2, r3
 8001428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	3301      	adds	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143c:	2b00      	cmp	r3, #0
 800143e:	f47f af62 	bne.w	8001306 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fefa 	bl	8004240 <USB_ReadInterrupts>
 800144c:	4603      	mov	r3, r0
 800144e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001452:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001456:	f040 80db 	bne.w	8001610 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f002 ff1b 	bl	800429a <USB_ReadDevAllInEpInterrupt>
 8001464:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800146a:	e0cd      	b.n	8001608 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80c2 	beq.w	80015fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4611      	mov	r1, r2
 8001482:	4618      	mov	r0, r3
 8001484:	f002 ff41 	bl	800430a <USB_ReadDevInEPInterrupt>
 8001488:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d057      	beq.n	8001544 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	2201      	movs	r2, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69f9      	ldr	r1, [r7, #28]
 80014b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014b4:	4013      	ands	r3, r2
 80014b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	015a      	lsls	r2, r3, #5
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	4413      	add	r3, r2
 80014c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014c4:	461a      	mov	r2, r3
 80014c6:	2301      	movs	r3, #1
 80014c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d132      	bne.n	8001538 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	334c      	adds	r3, #76	; 0x4c
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e8:	4613      	mov	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4403      	add	r3, r0
 80014f2:	3348      	adds	r3, #72	; 0x48
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4419      	add	r1, r3
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4403      	add	r3, r0
 8001506:	334c      	adds	r3, #76	; 0x4c
 8001508:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	2b00      	cmp	r3, #0
 800150e:	d113      	bne.n	8001538 <HAL_PCD_IRQHandler+0x3a2>
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	3354      	adds	r3, #84	; 0x54
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d108      	bne.n	8001538 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001530:	461a      	mov	r2, r3
 8001532:	2101      	movs	r1, #1
 8001534:	f002 ff48 	bl	80043c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4619      	mov	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f005 fa23 	bl	800698a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800155a:	461a      	mov	r2, r3
 800155c:	2308      	movs	r3, #8
 800155e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	d008      	beq.n	800157c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	015a      	lsls	r2, r3, #5
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	4413      	add	r3, r2
 8001572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001576:	461a      	mov	r2, r3
 8001578:	2310      	movs	r3, #16
 800157a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001582:	2b00      	cmp	r3, #0
 8001584:	d008      	beq.n	8001598 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	015a      	lsls	r2, r3, #5
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	4413      	add	r3, r2
 800158e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001592:	461a      	mov	r2, r3
 8001594:	2340      	movs	r3, #64	; 0x40
 8001596:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d023      	beq.n	80015ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015a4:	6a38      	ldr	r0, [r7, #32]
 80015a6:	f001 fe29 	bl	80031fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	3338      	adds	r3, #56	; 0x38
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	3304      	adds	r3, #4
 80015bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	78db      	ldrb	r3, [r3, #3]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d108      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	2200      	movs	r2, #0
 80015ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f005 fa66 	bl	8006aa4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	015a      	lsls	r2, r3, #5
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	4413      	add	r3, r2
 80015e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e4:	461a      	mov	r2, r3
 80015e6:	2302      	movs	r3, #2
 80015e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fcdb 	bl	8001fb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	3301      	adds	r3, #1
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	085b      	lsrs	r3, r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	2b00      	cmp	r3, #0
 800160c:	f47f af2e 	bne.w	800146c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fe13 	bl	8004240 <USB_ReadInterrupts>
 800161a:	4603      	mov	r3, r0
 800161c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001624:	d122      	bne.n	800166c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800164c:	2100      	movs	r1, #0
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fec2 	bl	80023d8 <HAL_PCDEx_LPM_Callback>
 8001654:	e002      	b.n	800165c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f005 fa04 	bl	8006a64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800166a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fde5 	bl	8004240 <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800167c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001680:	d112      	bne.n	80016a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f005 f9c0 	bl	8006a18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016a6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f002 fdc7 	bl	8004240 <USB_ReadInterrupts>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016bc:	f040 80b7 	bne.w	800182e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2110      	movs	r1, #16
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fd8e 	bl	80031fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016e4:	e046      	b.n	8001774 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f2:	461a      	mov	r2, r3
 80016f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	015a      	lsls	r2, r3, #5
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	4413      	add	r3, r2
 8001702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170a:	0151      	lsls	r1, r2, #5
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	440a      	add	r2, r1
 8001710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001714:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001718:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	4413      	add	r3, r2
 8001722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001726:	461a      	mov	r2, r3
 8001728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800172c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800173e:	0151      	lsls	r1, r2, #5
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	440a      	add	r2, r1
 8001744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001748:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800174c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	015a      	lsls	r2, r3, #5
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	4413      	add	r3, r2
 8001756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175e:	0151      	lsls	r1, r2, #5
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	440a      	add	r2, r1
 8001764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001768:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800176c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	3301      	adds	r3, #1
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177a:	429a      	cmp	r2, r3
 800177c:	d3b3      	bcc.n	80016e6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001790:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	2b00      	cmp	r3, #0
 8001798:	d016      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017aa:	f043 030b 	orr.w	r3, r3, #11
 80017ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c0:	f043 030b 	orr.w	r3, r3, #11
 80017c4:	6453      	str	r3, [r2, #68]	; 0x44
 80017c6:	e015      	b.n	80017f4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ee:	f043 030b 	orr.w	r3, r3, #11
 80017f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001802:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001806:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001818:	461a      	mov	r2, r3
 800181a:	f002 fdd5 	bl	80043c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800182c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f002 fd04 	bl	8004240 <USB_ReadInterrupts>
 8001838:	4603      	mov	r3, r0
 800183a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800183e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001842:	d124      	bne.n	800188e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f002 fd9a 	bl	8004382 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f001 fd4f 	bl	80032f6 <USB_GetDevSpeed>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681c      	ldr	r4, [r3, #0]
 8001864:	f001 f9e8 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8001868:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4620      	mov	r0, r4
 8001874:	f001 fa4e 	bl	8002d14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f005 f8ae 	bl	80069da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800188c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f002 fcd4 	bl	8004240 <USB_ReadInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d10a      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f005 f88b 	bl	80069be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f002 0208 	and.w	r2, r2, #8
 80018b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 fcbf 	bl	8004240 <USB_ReadInterrupts>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c8:	2b80      	cmp	r3, #128	; 0x80
 80018ca:	d122      	bne.n	8001912 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018d8:	2301      	movs	r3, #1
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
 80018dc:	e014      	b.n	8001908 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d105      	bne.n	8001902 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4619      	mov	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 fb27 	bl	8001f50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	3301      	adds	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190e:	429a      	cmp	r2, r3
 8001910:	d3e5      	bcc.n	80018de <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fc92 	bl	8004240 <USB_ReadInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001926:	d13b      	bne.n	80019a0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001928:	2301      	movs	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	e02b      	b.n	8001986 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3340      	adds	r3, #64	; 0x40
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d115      	bne.n	8001980 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001954:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001956:	2b00      	cmp	r3, #0
 8001958:	da12      	bge.n	8001980 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	333f      	adds	r3, #63	; 0x3f
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4619      	mov	r1, r3
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fae8 	bl	8001f50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3301      	adds	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198c:	429a      	cmp	r2, r3
 800198e:	d3ce      	bcc.n	800192e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800199e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fc4b 	bl	8004240 <USB_ReadInterrupts>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019b4:	d155      	bne.n	8001a62 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b6:	2301      	movs	r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	e045      	b.n	8001a48 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	015a      	lsls	r2, r3, #5
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d12e      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da2b      	bge.n	8001a42 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d121      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10a      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6053      	str	r3, [r2, #4]
            break;
 8001a40:	e007      	b.n	8001a52 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3b4      	bcc.n	80019bc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fbea 	bl	8004240 <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a76:	d10a      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f005 f825 	bl	8006ac8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fbd4 	bl	8004240 <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d115      	bne.n	8001ace <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f005 f815 	bl	8006ae4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	e000      	b.n	8001ace <HAL_PCD_IRQHandler+0x938>
      return;
 8001acc:	bf00      	nop
    }
  }
}
 8001ace:	3734      	adds	r7, #52	; 0x34
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_PCD_SetAddress+0x1a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e013      	b.n	8001b16 <HAL_PCD_SetAddress+0x42>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	78fa      	ldrb	r2, [r7, #3]
 8001afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fb32 	bl	8004170 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	4608      	mov	r0, r1
 8001b28:	4611      	mov	r1, r2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	70fb      	strb	r3, [r7, #3]
 8001b30:	460b      	mov	r3, r1
 8001b32:	803b      	strh	r3, [r7, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	da0f      	bge.n	8001b64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	f003 020f 	and.w	r2, r3, #15
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	3338      	adds	r3, #56	; 0x38
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	3304      	adds	r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	705a      	strb	r2, [r3, #1]
 8001b62:	e00f      	b.n	8001b84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	f003 020f 	and.w	r2, r3, #15
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b90:	883a      	ldrh	r2, [r7, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	78ba      	ldrb	r2, [r7, #2]
 8001b9a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bae:	78bb      	ldrb	r3, [r7, #2]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d102      	bne.n	8001bba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_PCD_EP_Open+0xaa>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e00e      	b.n	8001be6 <HAL_PCD_EP_Open+0xc8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fbb2 	bl	8003340 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001be4:	7afb      	ldrb	r3, [r7, #11]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da0f      	bge.n	8001c22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f003 020f 	and.w	r2, r3, #15
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3338      	adds	r3, #56	; 0x38
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	3304      	adds	r3, #4
 8001c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	705a      	strb	r2, [r3, #1]
 8001c20:	e00f      	b.n	8001c42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	3304      	adds	r3, #4
 8001c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_PCD_EP_Close+0x6e>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e00e      	b.n	8001c7a <HAL_PCD_EP_Close+0x8c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 fbf0 	bl	8003450 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	7afb      	ldrb	r3, [r7, #11]
 8001c94:	f003 020f 	and.w	r2, r3, #15
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3304      	adds	r3, #4
 8001caa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d102      	bne.n	8001cde <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6979      	ldr	r1, [r7, #20]
 8001cf6:	f001 fecf 	bl	8003a98 <USB_EP0StartXfer>
 8001cfa:	e008      	b.n	8001d0e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	6979      	ldr	r1, [r7, #20]
 8001d0a:	f001 fc7d 	bl	8003608 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 020f 	and.w	r2, r3, #15
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	4413      	add	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	460b      	mov	r3, r1
 8001d56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	f003 020f 	and.w	r2, r3, #15
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	3338      	adds	r3, #56	; 0x38
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2201      	movs	r2, #1
 8001d86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d88:	7afb      	ldrb	r3, [r7, #11]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d102      	bne.n	8001da2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	6979      	ldr	r1, [r7, #20]
 8001dba:	f001 fe6d 	bl	8003a98 <USB_EP0StartXfer>
 8001dbe:	e008      	b.n	8001dd2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6979      	ldr	r1, [r7, #20]
 8001dce:	f001 fc1b 	bl	8003608 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d901      	bls.n	8001dfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e050      	b.n	8001e9c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da0f      	bge.n	8001e22 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 020f 	and.w	r2, r3, #15
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	3338      	adds	r3, #56	; 0x38
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	705a      	strb	r2, [r3, #1]
 8001e20:	e00d      	b.n	8001e3e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	3304      	adds	r3, #4
 8001e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_PCD_EP_SetStall+0x82>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e01e      	b.n	8001e9c <HAL_PCD_EP_SetStall+0xc0>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 f8ab 	bl	8003fc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	b2d9      	uxtb	r1, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f002 fa9b 	bl	80043c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 020f 	and.w	r2, r3, #15
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d901      	bls.n	8001ec2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e042      	b.n	8001f48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da0f      	bge.n	8001eea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 020f 	and.w	r2, r3, #15
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	3338      	adds	r3, #56	; 0x38
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	705a      	strb	r2, [r3, #1]
 8001ee8:	e00f      	b.n	8001f0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_PCD_EP_ClrStall+0x86>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e00e      	b.n	8001f48 <HAL_PCD_EP_ClrStall+0xa4>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68f9      	ldr	r1, [r7, #12]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 f8b3 	bl	80040a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	da0c      	bge.n	8001f7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	3338      	adds	r3, #56	; 0x38
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	3304      	adds	r3, #4
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e00c      	b.n	8001f98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	f003 020f 	and.w	r2, r3, #15
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	3304      	adds	r3, #4
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68f9      	ldr	r1, [r7, #12]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f001 fed2 	bl	8003d48 <USB_EPStopXfer>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b08a      	sub	sp, #40	; 0x28
 8001fb6:	af02      	add	r7, sp, #8
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	3338      	adds	r3, #56	; 0x38
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a1a      	ldr	r2, [r3, #32]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d901      	bls.n	8001fea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06c      	b.n	80020c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d902      	bls.n	8002006 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3303      	adds	r3, #3
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800200e:	e02b      	b.n	8002068 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	429a      	cmp	r2, r3
 8002024:	d902      	bls.n	800202c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3303      	adds	r3, #3
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6919      	ldr	r1, [r3, #16]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002044:	b2db      	uxtb	r3, r3
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4603      	mov	r3, r0
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f001 ff26 	bl	8003e9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	441a      	add	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a1a      	ldr	r2, [r3, #32]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	441a      	add	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	b29b      	uxth	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	429a      	cmp	r2, r3
 800207c:	d809      	bhi.n	8002092 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002086:	429a      	cmp	r2, r3
 8002088:	d203      	bcs.n	8002092 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1be      	bne.n	8002010 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	429a      	cmp	r2, r3
 800209c:	d811      	bhi.n	80020c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	2201      	movs	r2, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	6939      	ldr	r1, [r7, #16]
 80020ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020be:	4013      	ands	r3, r2
 80020c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	333c      	adds	r3, #60	; 0x3c
 80020e4:	3304      	adds	r3, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d17b      	bne.n	80021fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d015      	beq.n	8002138 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a61      	ldr	r2, [pc, #388]	; (8002294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	f240 80b9 	bls.w	8002288 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80b3 	beq.w	8002288 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800212e:	461a      	mov	r2, r3
 8002130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002134:	6093      	str	r3, [r2, #8]
 8002136:	e0a7      	b.n	8002288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214e:	461a      	mov	r2, r3
 8002150:	2320      	movs	r3, #32
 8002152:	6093      	str	r3, [r2, #8]
 8002154:	e098      	b.n	8002288 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 8093 	bne.w	8002288 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	4a4b      	ldr	r2, [pc, #300]	; (8002294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d90f      	bls.n	800218a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	4413      	add	r3, r2
 800217c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002180:	461a      	mov	r2, r3
 8002182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002186:	6093      	str	r3, [r2, #8]
 8002188:	e07e      	b.n	8002288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	0159      	lsls	r1, r3, #5
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	440b      	add	r3, r1
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d114      	bne.n	80021ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d4:	461a      	mov	r2, r3
 80021d6:	2101      	movs	r1, #1
 80021d8:	f002 f8f6 	bl	80043c8 <USB_EP0_OutStart>
 80021dc:	e006      	b.n	80021ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	441a      	add	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f004 fbae 	bl	8006954 <HAL_PCD_DataOutStageCallback>
 80021f8:	e046      	b.n	8002288 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4a26      	ldr	r2, [pc, #152]	; (8002298 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d124      	bne.n	800224c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	4413      	add	r3, r2
 8002214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002218:	461a      	mov	r2, r3
 800221a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221e:	6093      	str	r3, [r2, #8]
 8002220:	e032      	b.n	8002288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	2320      	movs	r3, #32
 800223c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	4619      	mov	r1, r3
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f004 fb85 	bl	8006954 <HAL_PCD_DataOutStageCallback>
 800224a:	e01d      	b.n	8002288 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d114      	bne.n	800227c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d108      	bne.n	800227c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002274:	461a      	mov	r2, r3
 8002276:	2100      	movs	r1, #0
 8002278:	f002 f8a6 	bl	80043c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f004 fb66 	bl	8006954 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	4f54300a 	.word	0x4f54300a
 8002298:	4f54310a 	.word	0x4f54310a

0800229c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	333c      	adds	r3, #60	; 0x3c
 80022b4:	3304      	adds	r3, #4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d90e      	bls.n	80022f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d009      	beq.n	80022f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e8:	461a      	mov	r2, r3
 80022ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f004 fb1d 	bl	8006930 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <PCD_EP_OutSetupPacket_int+0x88>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d90c      	bls.n	8002318 <PCD_EP_OutSetupPacket_int+0x7c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d108      	bne.n	8002318 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002310:	461a      	mov	r2, r3
 8002312:	2101      	movs	r1, #1
 8002314:	f002 f858 	bl	80043c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	4f54300a 	.word	0x4f54300a

08002328 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	70fb      	strb	r3, [r7, #3]
 8002334:	4613      	mov	r3, r2
 8002336:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d107      	bne.n	8002356 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002346:	883b      	ldrh	r3, [r7, #0]
 8002348:	0419      	lsls	r1, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	430a      	orrs	r2, r1
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
 8002354:	e028      	b.n	80023a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	4413      	add	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e00d      	b.n	8002386 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	3340      	adds	r3, #64	; 0x40
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4413      	add	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	3301      	adds	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	3b01      	subs	r3, #1
 800238c:	429a      	cmp	r2, r3
 800238e:	d3ec      	bcc.n	800236a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002390:	883b      	ldrh	r3, [r7, #0]
 8002392:	0418      	lsls	r0, r3, #16
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	3b01      	subs	r3, #1
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	4302      	orrs	r2, r0
 80023a0:	3340      	adds	r3, #64	; 0x40
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e267      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d075      	beq.n	80024fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800240e:	4b88      	ldr	r3, [pc, #544]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b04      	cmp	r3, #4
 8002418:	d00c      	beq.n	8002434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241a:	4b85      	ldr	r3, [pc, #532]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002422:	2b08      	cmp	r3, #8
 8002424:	d112      	bne.n	800244c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002426:	4b82      	ldr	r3, [pc, #520]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002432:	d10b      	bne.n	800244c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	4b7e      	ldr	r3, [pc, #504]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d05b      	beq.n	80024f8 <HAL_RCC_OscConfig+0x108>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d157      	bne.n	80024f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e242      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d106      	bne.n	8002464 <HAL_RCC_OscConfig+0x74>
 8002456:	4b76      	ldr	r3, [pc, #472]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a75      	ldr	r2, [pc, #468]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xb0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x98>
 800246e:	4b70      	ldr	r3, [pc, #448]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6f      	ldr	r2, [pc, #444]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b6d      	ldr	r3, [pc, #436]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6c      	ldr	r2, [pc, #432]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xb0>
 8002488:	4b69      	ldr	r3, [pc, #420]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a68      	ldr	r2, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b66      	ldr	r3, [pc, #408]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a65      	ldr	r2, [pc, #404]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7fe fa2c 	bl	8000904 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe fa28 	bl	8000904 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e207      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b5b      	ldr	r3, [pc, #364]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xc0>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fa18 	bl	8000904 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fa14 	bl	8000904 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1f3      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	4b51      	ldr	r3, [pc, #324]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0xe8>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d063      	beq.n	80025ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002506:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251a:	2b08      	cmp	r3, #8
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x152>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1c7      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4937      	ldr	r1, [pc, #220]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e03a      	b.n	80025ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_RCC_OscConfig+0x244>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe f9cd 	bl	8000904 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256e:	f7fe f9c9 	bl	8000904 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1a8      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b28      	ldr	r3, [pc, #160]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4925      	ldr	r1, [pc, #148]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCC_OscConfig+0x244>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe f9ac 	bl	8000904 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b0:	f7fe f9a8 	bl	8000904 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e187      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_RCC_OscConfig+0x248>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe f98c 	bl	8000904 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f0:	f7fe f988 	bl	8000904 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e167      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_OscConfig+0x240>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x200>
 800260e:	e01b      	b.n	8002648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_OscConfig+0x248>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7fe f975 	bl	8000904 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	e00e      	b.n	800263c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261e:	f7fe f971 	bl	8000904 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d907      	bls.n	800263c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e150      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002630:	40023800 	.word	0x40023800
 8002634:	42470000 	.word	0x42470000
 8002638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b88      	ldr	r3, [pc, #544]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 800263e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ea      	bne.n	800261e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8097 	beq.w	8002784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b81      	ldr	r3, [pc, #516]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b7d      	ldr	r3, [pc, #500]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a7c      	ldr	r2, [pc, #496]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b7a      	ldr	r3, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002686:	4b77      	ldr	r3, [pc, #476]	; (8002864 <HAL_RCC_OscConfig+0x474>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002692:	4b74      	ldr	r3, [pc, #464]	; (8002864 <HAL_RCC_OscConfig+0x474>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a73      	ldr	r2, [pc, #460]	; (8002864 <HAL_RCC_OscConfig+0x474>)
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269e:	f7fe f931 	bl	8000904 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a6:	f7fe f92d 	bl	8000904 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e10c      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b8:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCC_OscConfig+0x474>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x2ea>
 80026cc:	4b64      	ldr	r3, [pc, #400]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a63      	ldr	r2, [pc, #396]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	e01c      	b.n	8002714 <HAL_RCC_OscConfig+0x324>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x30c>
 80026e2:	4b5f      	ldr	r3, [pc, #380]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a5e      	ldr	r2, [pc, #376]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
 80026ee:	4b5c      	ldr	r3, [pc, #368]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a5b      	ldr	r2, [pc, #364]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x324>
 80026fc:	4b58      	ldr	r3, [pc, #352]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a57      	ldr	r2, [pc, #348]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	4b55      	ldr	r3, [pc, #340]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a54      	ldr	r2, [pc, #336]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 800270e:	f023 0304 	bic.w	r3, r3, #4
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d015      	beq.n	8002748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7fe f8f2 	bl	8000904 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	e00a      	b.n	800273a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002724:	f7fe f8ee 	bl	8000904 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0cb      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ee      	beq.n	8002724 <HAL_RCC_OscConfig+0x334>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002748:	f7fe f8dc 	bl	8000904 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe f8d8 	bl	8000904 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0b5      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002766:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1ee      	bne.n	8002750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002778:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	4a38      	ldr	r2, [pc, #224]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 800277e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a1 	beq.w	80028d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800278e:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d05c      	beq.n	8002854 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d141      	bne.n	8002826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b31      	ldr	r3, [pc, #196]	; (8002868 <HAL_RCC_OscConfig+0x478>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe f8ac 	bl	8000904 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe f8a8 	bl	8000904 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e087      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	4b27      	ldr	r3, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	491b      	ldr	r1, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x478>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe f881 	bl	8000904 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002806:	f7fe f87d 	bl	8000904 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e05c      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x416>
 8002824:	e054      	b.n	80028d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <HAL_RCC_OscConfig+0x478>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe f86a 	bl	8000904 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe f866 	bl	8000904 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e045      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	4b06      	ldr	r3, [pc, #24]	; (8002860 <HAL_RCC_OscConfig+0x470>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x444>
 8002852:	e03d      	b.n	80028d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d107      	bne.n	800286c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e038      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
 8002860:	40023800 	.word	0x40023800
 8002864:	40007000 	.word	0x40007000
 8002868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x4ec>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d028      	beq.n	80028cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d121      	bne.n	80028cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d11a      	bne.n	80028cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	3b01      	subs	r3, #1
 80028b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800

080028e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0cc      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f4:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d90c      	bls.n	800291c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0b8      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002934:	4b59      	ldr	r3, [pc, #356]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a58      	ldr	r2, [pc, #352]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800293e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002958:	4b50      	ldr	r3, [pc, #320]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	494d      	ldr	r1, [pc, #308]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d044      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297e:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d119      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e07f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d003      	beq.n	800299e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299a:	2b03      	cmp	r3, #3
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e067      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4934      	ldr	r1, [pc, #208]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d0:	f7fd ff98 	bl	8000904 <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7fd ff94 	bl	8000904 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e04f      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1eb      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d20c      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e032      	b.n	8002a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4916      	ldr	r1, [pc, #88]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	490e      	ldr	r1, [pc, #56]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a66:	f000 f821 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	490a      	ldr	r1, [pc, #40]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	5ccb      	ldrb	r3, [r1, r3]
 8002a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7e:	4a09      	ldr	r2, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fef8 	bl	800087c <HAL_InitTick>

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023c00 	.word	0x40023c00
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	08006f54 	.word	0x08006f54
 8002aa4:	20000040 	.word	0x20000040
 8002aa8:	20000044 	.word	0x20000044

08002aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab0:	b090      	sub	sp, #64	; 0x40
 8002ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab8:	2300      	movs	r3, #0
 8002aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002abc:	2300      	movs	r3, #0
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac4:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d00d      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x40>
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	f200 80a1 	bhi.w	8002c18 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ade:	e09b      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ae2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ae4:	e09b      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae6:	4b53      	ldr	r3, [pc, #332]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aea:	e098      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002af6:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d028      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b02:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	2200      	movs	r2, #0
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b14:	2100      	movs	r1, #0
 8002b16:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b18:	fb03 f201 	mul.w	r2, r3, r1
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	fb00 f303 	mul.w	r3, r0, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	4a43      	ldr	r2, [pc, #268]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b26:	fba0 1202 	umull	r1, r2, r0, r2
 8002b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b2c:	460a      	mov	r2, r1
 8002b2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b32:	4413      	add	r3, r2
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	2200      	movs	r2, #0
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	61fa      	str	r2, [r7, #28]
 8002b3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b46:	f7fd fb4f 	bl	80001e8 <__aeabi_uldivmod>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4613      	mov	r3, r2
 8002b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b52:	e053      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b54:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	617a      	str	r2, [r7, #20]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b66:	f04f 0b00 	mov.w	fp, #0
 8002b6a:	4652      	mov	r2, sl
 8002b6c:	465b      	mov	r3, fp
 8002b6e:	f04f 0000 	mov.w	r0, #0
 8002b72:	f04f 0100 	mov.w	r1, #0
 8002b76:	0159      	lsls	r1, r3, #5
 8002b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7c:	0150      	lsls	r0, r2, #5
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	ebb2 080a 	subs.w	r8, r2, sl
 8002b86:	eb63 090b 	sbc.w	r9, r3, fp
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b9e:	ebb2 0408 	subs.w	r4, r2, r8
 8002ba2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	00eb      	lsls	r3, r5, #3
 8002bb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bb4:	00e2      	lsls	r2, r4, #3
 8002bb6:	4614      	mov	r4, r2
 8002bb8:	461d      	mov	r5, r3
 8002bba:	eb14 030a 	adds.w	r3, r4, sl
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	eb45 030b 	adc.w	r3, r5, fp
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	028b      	lsls	r3, r1, #10
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bdc:	4621      	mov	r1, r4
 8002bde:	028a      	lsls	r2, r1, #10
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	2200      	movs	r2, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	60fa      	str	r2, [r7, #12]
 8002bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bf0:	f7fd fafa 	bl	80001e8 <__aeabi_uldivmod>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	3301      	adds	r3, #1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c16:	e002      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3740      	adds	r7, #64	; 0x40
 8002c24:	46bd      	mov	sp, r7
 8002c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	00f42400 	.word	0x00f42400
 8002c34:	017d7840 	.word	0x017d7840

08002c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000040 	.word	0x20000040

08002c50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c50:	b084      	sub	sp, #16
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	f107 001c 	add.w	r0, r7, #28
 8002c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d122      	bne.n	8002cae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f001 fbee 	bl	8004484 <USB_CoreReset>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	73fb      	strb	r3, [r7, #15]
 8002cac:	e01a      	b.n	8002ce4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f001 fbe2 	bl	8004484 <USB_CoreReset>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002cd6:	e005      	b.n	8002ce4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10b      	bne.n	8002d02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f043 0206 	orr.w	r2, r3, #6
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d0e:	b004      	add	sp, #16
 8002d10:	4770      	bx	lr
	...

08002d14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d165      	bne.n	8002df4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4a41      	ldr	r2, [pc, #260]	; (8002e30 <USB_SetTurnaroundTime+0x11c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d906      	bls.n	8002d3e <USB_SetTurnaroundTime+0x2a>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <USB_SetTurnaroundTime+0x120>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d202      	bcs.n	8002d3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d38:	230f      	movs	r3, #15
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e062      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <USB_SetTurnaroundTime+0x120>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d306      	bcc.n	8002d54 <USB_SetTurnaroundTime+0x40>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <USB_SetTurnaroundTime+0x124>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d202      	bcs.n	8002d54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d4e:	230e      	movs	r3, #14
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e057      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a38      	ldr	r2, [pc, #224]	; (8002e38 <USB_SetTurnaroundTime+0x124>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d306      	bcc.n	8002d6a <USB_SetTurnaroundTime+0x56>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <USB_SetTurnaroundTime+0x128>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d202      	bcs.n	8002d6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d64:	230d      	movs	r3, #13
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e04c      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4a33      	ldr	r2, [pc, #204]	; (8002e3c <USB_SetTurnaroundTime+0x128>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d306      	bcc.n	8002d80 <USB_SetTurnaroundTime+0x6c>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4a32      	ldr	r2, [pc, #200]	; (8002e40 <USB_SetTurnaroundTime+0x12c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d802      	bhi.n	8002d80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e041      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4a2f      	ldr	r2, [pc, #188]	; (8002e40 <USB_SetTurnaroundTime+0x12c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d906      	bls.n	8002d96 <USB_SetTurnaroundTime+0x82>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4a2e      	ldr	r2, [pc, #184]	; (8002e44 <USB_SetTurnaroundTime+0x130>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d802      	bhi.n	8002d96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d90:	230b      	movs	r3, #11
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e036      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <USB_SetTurnaroundTime+0x130>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d906      	bls.n	8002dac <USB_SetTurnaroundTime+0x98>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <USB_SetTurnaroundTime+0x134>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d802      	bhi.n	8002dac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002da6:	230a      	movs	r3, #10
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e02b      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <USB_SetTurnaroundTime+0x134>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d906      	bls.n	8002dc2 <USB_SetTurnaroundTime+0xae>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <USB_SetTurnaroundTime+0x138>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d202      	bcs.n	8002dc2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002dbc:	2309      	movs	r3, #9
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	e020      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a21      	ldr	r2, [pc, #132]	; (8002e4c <USB_SetTurnaroundTime+0x138>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d306      	bcc.n	8002dd8 <USB_SetTurnaroundTime+0xc4>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	; (8002e50 <USB_SetTurnaroundTime+0x13c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d802      	bhi.n	8002dd8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e015      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <USB_SetTurnaroundTime+0x13c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d906      	bls.n	8002dee <USB_SetTurnaroundTime+0xda>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <USB_SetTurnaroundTime+0x140>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d202      	bcs.n	8002dee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002de8:	2307      	movs	r3, #7
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e00a      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002dee:	2306      	movs	r3, #6
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e007      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002dfa:	2309      	movs	r3, #9
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e001      	b.n	8002e04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e00:	2309      	movs	r3, #9
 8002e02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	029b      	lsls	r3, r3, #10
 8002e18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	00d8acbf 	.word	0x00d8acbf
 8002e34:	00e4e1c0 	.word	0x00e4e1c0
 8002e38:	00f42400 	.word	0x00f42400
 8002e3c:	01067380 	.word	0x01067380
 8002e40:	011a499f 	.word	0x011a499f
 8002e44:	01312cff 	.word	0x01312cff
 8002e48:	014ca43f 	.word	0x014ca43f
 8002e4c:	016e3600 	.word	0x016e3600
 8002e50:	01a6ab1f 	.word	0x01a6ab1f
 8002e54:	01e84800 	.word	0x01e84800

08002e58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f043 0201 	orr.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d115      	bne.n	8002eea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f7fd fd26 	bl	800091c <HAL_Delay>
      ms++;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f001 fa45 	bl	8004366 <USB_GetMode>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d01e      	beq.n	8002f20 <USB_SetCurrentMode+0x84>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b31      	cmp	r3, #49	; 0x31
 8002ee6:	d9f0      	bls.n	8002eca <USB_SetCurrentMode+0x2e>
 8002ee8:	e01a      	b.n	8002f20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d115      	bne.n	8002f1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7fd fd0d 	bl	800091c <HAL_Delay>
      ms++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f001 fa2c 	bl	8004366 <USB_GetMode>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <USB_SetCurrentMode+0x84>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b31      	cmp	r3, #49	; 0x31
 8002f18:	d9f0      	bls.n	8002efc <USB_SetCurrentMode+0x60>
 8002f1a:	e001      	b.n	8002f20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e005      	b.n	8002f2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b32      	cmp	r3, #50	; 0x32
 8002f24:	d101      	bne.n	8002f2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f34:	b084      	sub	sp, #16
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	e009      	b.n	8002f68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	3340      	adds	r3, #64	; 0x40
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	3301      	adds	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b0e      	cmp	r3, #14
 8002f6c:	d9f2      	bls.n	8002f54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11c      	bne.n	8002fae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
 8002fac:	e00b      	b.n	8002fc6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd8:	4619      	mov	r1, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	680b      	ldr	r3, [r1, #0]
 8002fe4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d10c      	bne.n	8003006 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d104      	bne.n	8002ffc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f965 	bl	80032c4 <USB_SetDevSpeed>
 8002ffa:	e008      	b.n	800300e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f960 	bl	80032c4 <USB_SetDevSpeed>
 8003004:	e003      	b.n	800300e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003006:	2103      	movs	r1, #3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f95b 	bl	80032c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800300e:	2110      	movs	r1, #16
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f8f3 	bl	80031fc <USB_FlushTxFifo>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f91f 	bl	8003264 <USB_FlushRxFifo>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	461a      	mov	r2, r3
 8003038:	2300      	movs	r3, #0
 800303a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003042:	461a      	mov	r2, r3
 8003044:	2300      	movs	r3, #0
 8003046:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800304e:	461a      	mov	r2, r3
 8003050:	2300      	movs	r3, #0
 8003052:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	e043      	b.n	80030e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800306c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003070:	d118      	bne.n	80030a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003084:	461a      	mov	r2, r3
 8003086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	e013      	b.n	80030b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309a:	461a      	mov	r2, r3
 800309c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e008      	b.n	80030b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b0:	461a      	mov	r2, r3
 80030b2:	2300      	movs	r3, #0
 80030b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d4:	461a      	mov	r2, r3
 80030d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	3301      	adds	r3, #1
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3b7      	bcc.n	800305a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e043      	b.n	8003178 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003106:	d118      	bne.n	800313a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311a:	461a      	mov	r2, r3
 800311c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e013      	b.n	800314c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003130:	461a      	mov	r2, r3
 8003132:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e008      	b.n	800314c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003146:	461a      	mov	r2, r3
 8003148:	2300      	movs	r3, #0
 800314a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003158:	461a      	mov	r2, r3
 800315a:	2300      	movs	r3, #0
 800315c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316a:	461a      	mov	r2, r3
 800316c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003170:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	3301      	adds	r3, #1
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	429a      	cmp	r2, r3
 800317e:	d3b7      	bcc.n	80030f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800318e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003192:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f043 0210 	orr.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <USB_DevInit+0x2c4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f043 0208 	orr.w	r2, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d107      	bne.n	80031e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031f4:	b004      	add	sp, #16
 80031f6:	4770      	bx	lr
 80031f8:	803c3800 	.word	0x803c3800

080031fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3301      	adds	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a13      	ldr	r2, [pc, #76]	; (8003260 <USB_FlushTxFifo+0x64>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e01b      	b.n	8003254 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	daf2      	bge.n	800320a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	019b      	lsls	r3, r3, #6
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3301      	adds	r3, #1
 8003238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <USB_FlushTxFifo+0x64>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e006      	b.n	8003254 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b20      	cmp	r3, #32
 8003250:	d0f0      	beq.n	8003234 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	00030d40 	.word	0x00030d40

08003264 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <USB_FlushRxFifo+0x5c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e018      	b.n	80032b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	daf2      	bge.n	8003270 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2210      	movs	r2, #16
 8003292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	3301      	adds	r3, #1
 8003298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <USB_FlushRxFifo+0x5c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e006      	b.n	80032b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d0f0      	beq.n	8003294 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	00030d40 	.word	0x00030d40

080032c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	68f9      	ldr	r1, [r7, #12]
 80032e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b087      	sub	sp, #28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0306 	and.w	r3, r3, #6
 800330e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]
 800331a:	e00a      	b.n	8003332 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d002      	beq.n	8003328 <USB_GetDevSpeed+0x32>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b06      	cmp	r3, #6
 8003326:	d102      	bne.n	800332e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003328:	2302      	movs	r3, #2
 800332a:	75fb      	strb	r3, [r7, #23]
 800332c:	e001      	b.n	8003332 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800332e:	230f      	movs	r3, #15
 8003330:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d13a      	bne.n	80033d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	b29b      	uxth	r3, r3
 8003374:	68f9      	ldr	r1, [r7, #12]
 8003376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800337a:	4313      	orrs	r3, r2
 800337c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d155      	bne.n	8003440 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	791b      	ldrb	r3, [r3, #4]
 80033ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	059b      	lsls	r3, r3, #22
 80033b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033b8:	4313      	orrs	r3, r2
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	0151      	lsls	r1, r2, #5
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	440a      	add	r2, r1
 80033c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	e036      	b.n	8003440 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	68f9      	ldr	r1, [r7, #12]
 80033ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d11a      	bne.n	8003440 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	791b      	ldrb	r3, [r3, #4]
 8003424:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003426:	430b      	orrs	r3, r1
 8003428:	4313      	orrs	r3, r2
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	0151      	lsls	r1, r2, #5
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	440a      	add	r2, r1
 8003432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800343e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d161      	bne.n	8003530 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800347e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003482:	d11f      	bne.n	80034c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	0151      	lsls	r1, r2, #5
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	440a      	add	r2, r1
 800349a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800349e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	0151      	lsls	r1, r2, #5
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	440a      	add	r2, r1
 80034ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	b29b      	uxth	r3, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	68f9      	ldr	r1, [r7, #12]
 80034e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034e4:	4013      	ands	r3, r2
 80034e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	b29b      	uxth	r3, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003508:	4013      	ands	r3, r2
 800350a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	0159      	lsls	r1, r3, #5
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	440b      	add	r3, r1
 8003522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003526:	4619      	mov	r1, r3
 8003528:	4b35      	ldr	r3, [pc, #212]	; (8003600 <USB_DeactivateEndpoint+0x1b0>)
 800352a:	4013      	ands	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
 800352e:	e060      	b.n	80035f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003546:	d11f      	bne.n	8003588 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	0151      	lsls	r1, r2, #5
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	440a      	add	r2, r1
 800355e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003562:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003566:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	0151      	lsls	r1, r2, #5
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	440a      	add	r2, r1
 800357e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003586:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	041b      	lsls	r3, r3, #16
 80035a0:	43db      	mvns	r3, r3
 80035a2:	68f9      	ldr	r1, [r7, #12]
 80035a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035a8:	4013      	ands	r3, r2
 80035aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	43db      	mvns	r3, r3
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035cc:	4013      	ands	r3, r2
 80035ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	0159      	lsls	r1, r3, #5
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	4619      	mov	r1, r3
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <USB_DeactivateEndpoint+0x1b4>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	ec337800 	.word	0xec337800
 8003604:	eff37800 	.word	0xeff37800

08003608 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	785b      	ldrb	r3, [r3, #1]
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 815c 	bne.w	80038e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d132      	bne.n	8003698 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	0151      	lsls	r1, r2, #5
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	440a      	add	r2, r1
 8003648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800364c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003650:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003654:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	0151      	lsls	r1, r2, #5
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	440a      	add	r2, r1
 800366c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003674:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	0151      	lsls	r1, r2, #5
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	440a      	add	r2, r1
 800368c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003690:	0cdb      	lsrs	r3, r3, #19
 8003692:	04db      	lsls	r3, r3, #19
 8003694:	6113      	str	r3, [r2, #16]
 8003696:	e074      	b.n	8003782 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	0151      	lsls	r1, r2, #5
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	440a      	add	r2, r1
 80036ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b2:	0cdb      	lsrs	r3, r3, #19
 80036b4:	04db      	lsls	r3, r3, #19
 80036b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	0151      	lsls	r1, r2, #5
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	440a      	add	r2, r1
 80036ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6999      	ldr	r1, [r3, #24]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	440b      	add	r3, r1
 80036f4:	1e59      	subs	r1, r3, #1
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80036fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003700:	4b9d      	ldr	r3, [pc, #628]	; (8003978 <USB_EPStartXfer+0x370>)
 8003702:	400b      	ands	r3, r1
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	0148      	lsls	r0, r1, #5
 8003708:	69f9      	ldr	r1, [r7, #28]
 800370a:	4401      	add	r1, r0
 800370c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003710:	4313      	orrs	r3, r2
 8003712:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372a:	69b9      	ldr	r1, [r7, #24]
 800372c:	0148      	lsls	r0, r1, #5
 800372e:	69f9      	ldr	r1, [r7, #28]
 8003730:	4401      	add	r1, r0
 8003732:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003736:	4313      	orrs	r3, r2
 8003738:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	791b      	ldrb	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d11f      	bne.n	8003782 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	0151      	lsls	r1, r2, #5
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	440a      	add	r2, r1
 8003758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800375c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003760:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	0151      	lsls	r1, r2, #5
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	440a      	add	r2, r1
 8003778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800377c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003780:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d14b      	bne.n	8003820 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d009      	beq.n	80037a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379c:	461a      	mov	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	791b      	ldrb	r3, [r3, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d128      	bne.n	80037fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d110      	bne.n	80037de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	0151      	lsls	r1, r2, #5
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	440a      	add	r2, r1
 80037d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e00f      	b.n	80037fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	0151      	lsls	r1, r2, #5
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	440a      	add	r2, r1
 80037f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	440a      	add	r2, r1
 8003814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003818:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e133      	b.n	8003a88 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	440a      	add	r2, r1
 8003836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800383e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	791b      	ldrb	r3, [r3, #4]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d015      	beq.n	8003874 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 811b 	beq.w	8003a88 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f303 	lsl.w	r3, r1, r3
 8003868:	69f9      	ldr	r1, [r7, #28]
 800386a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800386e:	4313      	orrs	r3, r2
 8003870:	634b      	str	r3, [r1, #52]	; 0x34
 8003872:	e109      	b.n	8003a88 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	2b00      	cmp	r3, #0
 8003882:	d110      	bne.n	80038a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	0151      	lsls	r1, r2, #5
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	440a      	add	r2, r1
 800389a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800389e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e00f      	b.n	80038c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6919      	ldr	r1, [r3, #16]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	b298      	uxth	r0, r3
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4603      	mov	r3, r0
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fade 	bl	8003e9c <USB_WritePacket>
 80038e0:	e0d2      	b.n	8003a88 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038fc:	0cdb      	lsrs	r3, r3, #19
 80038fe:	04db      	lsls	r3, r3, #19
 8003900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	440a      	add	r2, r1
 8003918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003920:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003924:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d126      	bne.n	800397c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003944:	69b9      	ldr	r1, [r7, #24]
 8003946:	0148      	lsls	r0, r1, #5
 8003948:	69f9      	ldr	r1, [r7, #28]
 800394a:	4401      	add	r1, r0
 800394c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003950:	4313      	orrs	r3, r2
 8003952:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003972:	6113      	str	r3, [r2, #16]
 8003974:	e03a      	b.n	80039ec <USB_EPStartXfer+0x3e4>
 8003976:	bf00      	nop
 8003978:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4413      	add	r3, r2
 8003986:	1e5a      	subs	r2, r3, #1
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	8afa      	ldrh	r2, [r7, #22]
 8003998:	fb03 f202 	mul.w	r2, r3, r2
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	8afb      	ldrh	r3, [r7, #22]
 80039b0:	04d9      	lsls	r1, r3, #19
 80039b2:	4b38      	ldr	r3, [pc, #224]	; (8003a94 <USB_EPStartXfer+0x48c>)
 80039b4:	400b      	ands	r3, r1
 80039b6:	69b9      	ldr	r1, [r7, #24]
 80039b8:	0148      	lsls	r0, r1, #5
 80039ba:	69f9      	ldr	r1, [r7, #28]
 80039bc:	4401      	add	r1, r0
 80039be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039c2:	4313      	orrs	r3, r2
 80039c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039dc:	69b9      	ldr	r1, [r7, #24]
 80039de:	0148      	lsls	r0, r1, #5
 80039e0:	69f9      	ldr	r1, [r7, #28]
 80039e2:	4401      	add	r1, r0
 80039e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039e8:	4313      	orrs	r3, r2
 80039ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10d      	bne.n	8003a0e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	6919      	ldr	r1, [r3, #16]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0a:	460a      	mov	r2, r1
 8003a0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	791b      	ldrb	r3, [r3, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d128      	bne.n	8003a68 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d110      	bne.n	8003a48 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	0151      	lsls	r1, r2, #5
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	440a      	add	r2, r1
 8003a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e00f      	b.n	8003a68 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	1ff80000 	.word	0x1ff80000

08003a98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	f040 80ce 	bne.w	8003c56 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d132      	bne.n	8003b28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	0151      	lsls	r1, r2, #5
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	440a      	add	r2, r1
 8003ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003adc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ae0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ae4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	0151      	lsls	r1, r2, #5
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	440a      	add	r2, r1
 8003afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	0151      	lsls	r1, r2, #5
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	440a      	add	r2, r1
 8003b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b20:	0cdb      	lsrs	r3, r3, #19
 8003b22:	04db      	lsls	r3, r3, #19
 8003b24:	6113      	str	r3, [r2, #16]
 8003b26:	e04e      	b.n	8003bc6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	015a      	lsls	r2, r3, #5
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	0151      	lsls	r1, r2, #5
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b42:	0cdb      	lsrs	r3, r3, #19
 8003b44:	04db      	lsls	r3, r3, #19
 8003b46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	0151      	lsls	r1, r2, #5
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	440a      	add	r2, r1
 8003b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d903      	bls.n	8003b80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	0151      	lsls	r1, r2, #5
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	440a      	add	r2, r1
 8003b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb6:	6939      	ldr	r1, [r7, #16]
 8003bb8:	0148      	lsls	r0, r1, #5
 8003bba:	6979      	ldr	r1, [r7, #20]
 8003bbc:	4401      	add	r1, r0
 8003bbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d11e      	bne.n	8003c0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	0151      	lsls	r1, r2, #5
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	440a      	add	r2, r1
 8003bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	e097      	b.n	8003d3a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	0151      	lsls	r1, r2, #5
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	440a      	add	r2, r1
 8003c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8083 	beq.w	8003d3a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4a:	6979      	ldr	r1, [r7, #20]
 8003c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c50:	4313      	orrs	r3, r2
 8003c52:	634b      	str	r3, [r1, #52]	; 0x34
 8003c54:	e071      	b.n	8003d3a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c70:	0cdb      	lsrs	r3, r3, #19
 8003c72:	04db      	lsls	r3, r3, #19
 8003c74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ccc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce8:	6939      	ldr	r1, [r7, #16]
 8003cea:	0148      	lsls	r0, r1, #5
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	4401      	add	r1, r0
 8003cf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10d      	bne.n	8003d1a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6919      	ldr	r1, [r3, #16]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d16:	460a      	mov	r2, r1
 8003d18:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d14a      	bne.n	8003dfc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d7e:	f040 8086 	bne.w	8003e8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	0151      	lsls	r1, r2, #5
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	440a      	add	r2, r1
 8003d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003da4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	0151      	lsls	r1, r2, #5
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	440a      	add	r2, r1
 8003dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d902      	bls.n	8003de0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8003dde:	e056      	b.n	8003e8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df8:	d0e7      	beq.n	8003dca <USB_EPStopXfer+0x82>
 8003dfa:	e048      	b.n	8003e8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e14:	d13b      	bne.n	8003e8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	7812      	ldrb	r2, [r2, #0]
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	7812      	ldrb	r2, [r2, #0]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3301      	adds	r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d902      	bls.n	8003e74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	75fb      	strb	r3, [r7, #23]
          break;
 8003e72:	e00c      	b.n	8003e8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8c:	d0e7      	beq.n	8003e5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	460b      	mov	r3, r1
 8003eac:	71fb      	strb	r3, [r7, #7]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003eba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d123      	bne.n	8003f0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ec2:	88bb      	ldrh	r3, [r7, #4]
 8003ec4:	3303      	adds	r3, #3
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e018      	b.n	8003f02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	031a      	lsls	r2, r3, #12
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003edc:	461a      	mov	r2, r3
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3301      	adds	r3, #1
 8003eee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d3e2      	bcc.n	8003ed0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3724      	adds	r7, #36	; 0x24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b08b      	sub	sp, #44	; 0x2c
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	e014      	b.n	8003f6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	3301      	adds	r3, #1
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	3301      	adds	r3, #1
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	3301      	adds	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	3301      	adds	r3, #1
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	623b      	str	r3, [r7, #32]
 8003f6e:	6a3a      	ldr	r2, [r7, #32]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d3e6      	bcc.n	8003f44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f76:	8bfb      	ldrh	r3, [r7, #30]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01e      	beq.n	8003fba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f86:	461a      	mov	r2, r3
 8003f88:	f107 0310 	add.w	r3, r7, #16
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	701a      	strb	r2, [r3, #0]
      i++;
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	3301      	adds	r3, #1
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003fae:	8bfb      	ldrh	r3, [r7, #30]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fb4:	8bfb      	ldrh	r3, [r7, #30]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ea      	bne.n	8003f90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	372c      	adds	r7, #44	; 0x2c
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d12c      	bne.n	800403e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	db12      	blt.n	800401c <USB_EPSetStall+0x54>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00f      	beq.n	800401c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800401a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	e02b      	b.n	8004096 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	db12      	blt.n	8004076 <USB_EPSetStall+0xae>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00f      	beq.n	8004076 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	0151      	lsls	r1, r2, #5
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	440a      	add	r2, r1
 800406c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004070:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004074:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	0151      	lsls	r1, r2, #5
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	440a      	add	r2, r1
 800408c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004090:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d128      	bne.n	8004112 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	791b      	ldrb	r3, [r3, #4]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d003      	beq.n	80040f0 <USB_EPClearStall+0x4c>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	791b      	ldrb	r3, [r3, #4]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d138      	bne.n	8004162 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	440a      	add	r2, r1
 8004106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	e027      	b.n	8004162 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800412c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004130:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	791b      	ldrb	r3, [r3, #4]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d003      	beq.n	8004142 <USB_EPClearStall+0x9e>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	791b      	ldrb	r3, [r3, #4]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d10f      	bne.n	8004162 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004160:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800418e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004192:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ea:	f023 0302 	bic.w	r3, r3, #2
 80041ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004218:	f023 0303 	bic.w	r3, r3, #3
 800421c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422c:	f043 0302 	orr.w	r3, r3, #2
 8004230:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4013      	ands	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004258:	68fb      	ldr	r3, [r7, #12]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	0c1b      	lsrs	r3, r3, #16
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	4013      	ands	r3, r2
 80042bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	b29b      	uxth	r3, r3
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042fc:	68bb      	ldr	r3, [r7, #8]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800430a:	b480      	push	{r7}
 800430c:	b087      	sub	sp, #28
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	fa22 f303 	lsr.w	r3, r2, r3
 800433a:	01db      	lsls	r3, r3, #7
 800433c:	b2db      	uxtb	r3, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4013      	ands	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004358:	68bb      	ldr	r3, [r7, #8]
}
 800435a:	4618      	mov	r0, r3
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0301 	and.w	r3, r3, #1
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004382:	b480      	push	{r7}
 8004384:	b085      	sub	sp, #20
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043a0:	f023 0307 	bic.w	r3, r3, #7
 80043a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	460b      	mov	r3, r1
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	333c      	adds	r3, #60	; 0x3c
 80043de:	3304      	adds	r3, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4a26      	ldr	r2, [pc, #152]	; (8004480 <USB_EP0_OutStart+0xb8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d90a      	bls.n	8004402 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043fc:	d101      	bne.n	8004402 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e037      	b.n	8004472 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	2300      	movs	r3, #0
 800440c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004430:	f043 0318 	orr.w	r3, r3, #24
 8004434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004444:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004448:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800444a:	7afb      	ldrb	r3, [r7, #11]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10f      	bne.n	8004470 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004456:	461a      	mov	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800446e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	4f54300a 	.word	0x4f54300a

08004484 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <USB_CoreReset+0x64>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e01b      	b.n	80044da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	daf2      	bge.n	8004490 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3301      	adds	r3, #1
 80044be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <USB_CoreReset+0x64>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e006      	b.n	80044da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d0f0      	beq.n	80044ba <USB_CoreReset+0x36>

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	00030d40 	.word	0x00030d40

080044ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80044f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80044fc:	f002 fc8a 	bl	8006e14 <USBD_static_malloc>
 8004500:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	32b0      	adds	r2, #176	; 0xb0
 8004512:	2100      	movs	r1, #0
 8004514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004518:	2302      	movs	r3, #2
 800451a:	e0d4      	b.n	80046c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800451c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004520:	2100      	movs	r1, #0
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f002 fcde 	bl	8006ee4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	32b0      	adds	r2, #176	; 0xb0
 8004532:	68f9      	ldr	r1, [r7, #12]
 8004534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	32b0      	adds	r2, #176	; 0xb0
 8004542:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	7c1b      	ldrb	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d138      	bne.n	80045c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004554:	4b5e      	ldr	r3, [pc, #376]	; (80046d0 <USBD_CDC_Init+0x1e4>)
 8004556:	7819      	ldrb	r1, [r3, #0]
 8004558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800455c:	2202      	movs	r2, #2
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f002 fb35 	bl	8006bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004564:	4b5a      	ldr	r3, [pc, #360]	; (80046d0 <USBD_CDC_Init+0x1e4>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	3324      	adds	r3, #36	; 0x24
 800457a:	2201      	movs	r2, #1
 800457c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800457e:	4b55      	ldr	r3, [pc, #340]	; (80046d4 <USBD_CDC_Init+0x1e8>)
 8004580:	7819      	ldrb	r1, [r3, #0]
 8004582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004586:	2202      	movs	r2, #2
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f002 fb20 	bl	8006bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800458e:	4b51      	ldr	r3, [pc, #324]	; (80046d4 <USBD_CDC_Init+0x1e8>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f003 020f 	and.w	r2, r3, #15
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045a6:	2201      	movs	r2, #1
 80045a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80045aa:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <USBD_CDC_Init+0x1ec>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	f003 020f 	and.w	r2, r3, #15
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3326      	adds	r3, #38	; 0x26
 80045c0:	2210      	movs	r2, #16
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e035      	b.n	8004632 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045c6:	4b42      	ldr	r3, [pc, #264]	; (80046d0 <USBD_CDC_Init+0x1e4>)
 80045c8:	7819      	ldrb	r1, [r3, #0]
 80045ca:	2340      	movs	r3, #64	; 0x40
 80045cc:	2202      	movs	r2, #2
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f002 fafd 	bl	8006bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80045d4:	4b3e      	ldr	r3, [pc, #248]	; (80046d0 <USBD_CDC_Init+0x1e4>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 020f 	and.w	r2, r3, #15
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	3324      	adds	r3, #36	; 0x24
 80045ea:	2201      	movs	r2, #1
 80045ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80045ee:	4b39      	ldr	r3, [pc, #228]	; (80046d4 <USBD_CDC_Init+0x1e8>)
 80045f0:	7819      	ldrb	r1, [r3, #0]
 80045f2:	2340      	movs	r3, #64	; 0x40
 80045f4:	2202      	movs	r2, #2
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f002 fae9 	bl	8006bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80045fc:	4b35      	ldr	r3, [pc, #212]	; (80046d4 <USBD_CDC_Init+0x1e8>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004614:	2201      	movs	r2, #1
 8004616:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004618:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <USBD_CDC_Init+0x1ec>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f003 020f 	and.w	r2, r3, #15
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	3326      	adds	r3, #38	; 0x26
 800462e:	2210      	movs	r2, #16
 8004630:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004632:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <USBD_CDC_Init+0x1ec>)
 8004634:	7819      	ldrb	r1, [r3, #0]
 8004636:	2308      	movs	r3, #8
 8004638:	2203      	movs	r2, #3
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f002 fac7 	bl	8006bce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004640:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <USBD_CDC_Init+0x1ec>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	f003 020f 	and.w	r2, r3, #15
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	3324      	adds	r3, #36	; 0x24
 8004656:	2201      	movs	r2, #1
 8004658:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	33b0      	adds	r3, #176	; 0xb0
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004690:	2302      	movs	r3, #2
 8004692:	e018      	b.n	80046c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	7c1b      	ldrb	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <USBD_CDC_Init+0x1e8>)
 800469e:	7819      	ldrb	r1, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f002 fb7e 	bl	8006dac <USBD_LL_PrepareReceive>
 80046b0:	e008      	b.n	80046c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <USBD_CDC_Init+0x1e8>)
 80046b4:	7819      	ldrb	r1, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046bc:	2340      	movs	r3, #64	; 0x40
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f002 fb74 	bl	8006dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	200000d3 	.word	0x200000d3
 80046d4:	200000d4 	.word	0x200000d4
 80046d8:	200000d5 	.word	0x200000d5

080046dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80046e8:	4b3a      	ldr	r3, [pc, #232]	; (80047d4 <USBD_CDC_DeInit+0xf8>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f002 fa93 	bl	8006c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80046f4:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <USBD_CDC_DeInit+0xf8>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f003 020f 	and.w	r2, r3, #15
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	440b      	add	r3, r1
 8004708:	3324      	adds	r3, #36	; 0x24
 800470a:	2200      	movs	r2, #0
 800470c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800470e:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <USBD_CDC_DeInit+0xfc>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f002 fa80 	bl	8006c1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800471a:	4b2f      	ldr	r3, [pc, #188]	; (80047d8 <USBD_CDC_DeInit+0xfc>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	f003 020f 	and.w	r2, r3, #15
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004732:	2200      	movs	r2, #0
 8004734:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <USBD_CDC_DeInit+0x100>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f002 fa6c 	bl	8006c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004742:	4b26      	ldr	r3, [pc, #152]	; (80047dc <USBD_CDC_DeInit+0x100>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	3324      	adds	r3, #36	; 0x24
 8004758:	2200      	movs	r2, #0
 800475a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800475c:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <USBD_CDC_DeInit+0x100>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	f003 020f 	and.w	r2, r3, #15
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	3326      	adds	r3, #38	; 0x26
 8004772:	2200      	movs	r2, #0
 8004774:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	32b0      	adds	r2, #176	; 0xb0
 8004780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01f      	beq.n	80047c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	33b0      	adds	r3, #176	; 0xb0
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	32b0      	adds	r2, #176	; 0xb0
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f002 fb40 	bl	8006e30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	32b0      	adds	r2, #176	; 0xb0
 80047ba:	2100      	movs	r1, #0
 80047bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	200000d3 	.word	0x200000d3
 80047d8:	200000d4 	.word	0x200000d4
 80047dc:	200000d5 	.word	0x200000d5

080047e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	32b0      	adds	r2, #176	; 0xb0
 80047f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800480c:	2303      	movs	r3, #3
 800480e:	e0bf      	b.n	8004990 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004818:	2b00      	cmp	r3, #0
 800481a:	d050      	beq.n	80048be <USBD_CDC_Setup+0xde>
 800481c:	2b20      	cmp	r3, #32
 800481e:	f040 80af 	bne.w	8004980 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	88db      	ldrh	r3, [r3, #6]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d03a      	beq.n	80048a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	b25b      	sxtb	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	da1b      	bge.n	800486c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	33b0      	adds	r3, #176	; 0xb0
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800484a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	88d2      	ldrh	r2, [r2, #6]
 8004850:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	88db      	ldrh	r3, [r3, #6]
 8004856:	2b07      	cmp	r3, #7
 8004858:	bf28      	it	cs
 800485a:	2307      	movcs	r3, #7
 800485c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	89fa      	ldrh	r2, [r7, #14]
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f001 fd89 	bl	800637c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800486a:	e090      	b.n	800498e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	785a      	ldrb	r2, [r3, #1]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	88db      	ldrh	r3, [r3, #6]
 800487a:	2b3f      	cmp	r3, #63	; 0x3f
 800487c:	d803      	bhi.n	8004886 <USBD_CDC_Setup+0xa6>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	88db      	ldrh	r3, [r3, #6]
 8004882:	b2da      	uxtb	r2, r3
 8004884:	e000      	b.n	8004888 <USBD_CDC_Setup+0xa8>
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800488e:	6939      	ldr	r1, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004896:	461a      	mov	r2, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f001 fd9b 	bl	80063d4 <USBD_CtlPrepareRx>
      break;
 800489e:	e076      	b.n	800498e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	33b0      	adds	r3, #176	; 0xb0
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	7850      	ldrb	r0, [r2, #1]
 80048b6:	2200      	movs	r2, #0
 80048b8:	6839      	ldr	r1, [r7, #0]
 80048ba:	4798      	blx	r3
      break;
 80048bc:	e067      	b.n	800498e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	785b      	ldrb	r3, [r3, #1]
 80048c2:	2b0b      	cmp	r3, #11
 80048c4:	d851      	bhi.n	800496a <USBD_CDC_Setup+0x18a>
 80048c6:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <USBD_CDC_Setup+0xec>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	08004979 	.word	0x08004979
 80048d4:	0800496b 	.word	0x0800496b
 80048d8:	0800496b 	.word	0x0800496b
 80048dc:	0800496b 	.word	0x0800496b
 80048e0:	0800496b 	.word	0x0800496b
 80048e4:	0800496b 	.word	0x0800496b
 80048e8:	0800496b 	.word	0x0800496b
 80048ec:	0800496b 	.word	0x0800496b
 80048f0:	0800496b 	.word	0x0800496b
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004951 	.word	0x08004951
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b03      	cmp	r3, #3
 8004906:	d107      	bne.n	8004918 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004908:	f107 030a 	add.w	r3, r7, #10
 800490c:	2202      	movs	r2, #2
 800490e:	4619      	mov	r1, r3
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f001 fd33 	bl	800637c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004916:	e032      	b.n	800497e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 fcbd 	bl	800629a <USBD_CtlError>
            ret = USBD_FAIL;
 8004920:	2303      	movs	r3, #3
 8004922:	75fb      	strb	r3, [r7, #23]
          break;
 8004924:	e02b      	b.n	800497e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004932:	f107 030d 	add.w	r3, r7, #13
 8004936:	2201      	movs	r2, #1
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f001 fd1e 	bl	800637c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004940:	e01d      	b.n	800497e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 fca8 	bl	800629a <USBD_CtlError>
            ret = USBD_FAIL;
 800494a:	2303      	movs	r3, #3
 800494c:	75fb      	strb	r3, [r7, #23]
          break;
 800494e:	e016      	b.n	800497e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b03      	cmp	r3, #3
 800495a:	d00f      	beq.n	800497c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f001 fc9b 	bl	800629a <USBD_CtlError>
            ret = USBD_FAIL;
 8004964:	2303      	movs	r3, #3
 8004966:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004968:	e008      	b.n	800497c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 fc94 	bl	800629a <USBD_CtlError>
          ret = USBD_FAIL;
 8004972:	2303      	movs	r3, #3
 8004974:	75fb      	strb	r3, [r7, #23]
          break;
 8004976:	e002      	b.n	800497e <USBD_CDC_Setup+0x19e>
          break;
 8004978:	bf00      	nop
 800497a:	e008      	b.n	800498e <USBD_CDC_Setup+0x1ae>
          break;
 800497c:	bf00      	nop
      }
      break;
 800497e:	e006      	b.n	800498e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 fc89 	bl	800629a <USBD_CtlError>
      ret = USBD_FAIL;
 8004988:	2303      	movs	r3, #3
 800498a:	75fb      	strb	r3, [r7, #23]
      break;
 800498c:	bf00      	nop
  }

  return (uint8_t)ret;
 800498e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80049aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	32b0      	adds	r2, #176	; 0xb0
 80049b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80049be:	2303      	movs	r3, #3
 80049c0:	e065      	b.n	8004a8e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	32b0      	adds	r2, #176	; 0xb0
 80049cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	f003 020f 	and.w	r2, r3, #15
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	3318      	adds	r3, #24
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02f      	beq.n	8004a4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	f003 020f 	and.w	r2, r3, #15
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	3318      	adds	r3, #24
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 010f 	and.w	r1, r3, #15
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	440b      	add	r3, r1
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4403      	add	r3, r0
 8004a14:	3348      	adds	r3, #72	; 0x48
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d112      	bne.n	8004a4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	f003 020f 	and.w	r2, r3, #15
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3318      	adds	r3, #24
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a3e:	78f9      	ldrb	r1, [r7, #3]
 8004a40:	2300      	movs	r3, #0
 8004a42:	2200      	movs	r2, #0
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f002 f990 	bl	8006d6a <USBD_LL_Transmit>
 8004a4a:	e01f      	b.n	8004a8c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	33b0      	adds	r3, #176	; 0xb0
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d010      	beq.n	8004a8c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	33b0      	adds	r3, #176	; 0xb0
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b084      	sub	sp, #16
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	32b0      	adds	r2, #176	; 0xb0
 8004aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	32b0      	adds	r2, #176	; 0xb0
 8004abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e01a      	b.n	8004afe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f002 f98e 	bl	8006dee <USBD_LL_GetRxDataSize>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	33b0      	adds	r3, #176	; 0xb0
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004af8:	4611      	mov	r1, r2
 8004afa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	32b0      	adds	r2, #176	; 0xb0
 8004b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e025      	b.n	8004b74 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	33b0      	adds	r3, #176	; 0xb0
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01a      	beq.n	8004b72 <USBD_CDC_EP0_RxReady+0x6c>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b42:	2bff      	cmp	r3, #255	; 0xff
 8004b44:	d015      	beq.n	8004b72 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	33b0      	adds	r3, #176	; 0xb0
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004b5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b66:	b292      	uxth	r2, r2
 8004b68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	22ff      	movs	r2, #255	; 0xff
 8004b6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b84:	2182      	movs	r1, #130	; 0x82
 8004b86:	4818      	ldr	r0, [pc, #96]	; (8004be8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b88:	f000 fd4f 	bl	800562a <USBD_GetEpDesc>
 8004b8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4815      	ldr	r0, [pc, #84]	; (8004be8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b92:	f000 fd4a 	bl	800562a <USBD_GetEpDesc>
 8004b96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b98:	2181      	movs	r1, #129	; 0x81
 8004b9a:	4813      	ldr	r0, [pc, #76]	; (8004be8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b9c:	f000 fd45 	bl	800562a <USBD_GetEpDesc>
 8004ba0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2210      	movs	r2, #16
 8004bac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bbc:	711a      	strb	r2, [r3, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd0:	711a      	strb	r2, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2243      	movs	r2, #67	; 0x43
 8004bda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004bdc:	4b02      	ldr	r3, [pc, #8]	; (8004be8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000090 	.word	0x20000090

08004bec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bf4:	2182      	movs	r1, #130	; 0x82
 8004bf6:	4818      	ldr	r0, [pc, #96]	; (8004c58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004bf8:	f000 fd17 	bl	800562a <USBD_GetEpDesc>
 8004bfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4815      	ldr	r0, [pc, #84]	; (8004c58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c02:	f000 fd12 	bl	800562a <USBD_GetEpDesc>
 8004c06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c08:	2181      	movs	r1, #129	; 0x81
 8004c0a:	4813      	ldr	r0, [pc, #76]	; (8004c58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c0c:	f000 fd0d 	bl	800562a <USBD_GetEpDesc>
 8004c10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d006      	beq.n	8004c32 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2200      	movs	r2, #0
 8004c28:	711a      	strb	r2, [r3, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f042 0202 	orr.w	r2, r2, #2
 8004c30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d006      	beq.n	8004c46 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	711a      	strb	r2, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f042 0202 	orr.w	r2, r2, #2
 8004c44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2243      	movs	r2, #67	; 0x43
 8004c4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c4c:	4b02      	ldr	r3, [pc, #8]	; (8004c58 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000090 	.word	0x20000090

08004c5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c64:	2182      	movs	r1, #130	; 0x82
 8004c66:	4818      	ldr	r0, [pc, #96]	; (8004cc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c68:	f000 fcdf 	bl	800562a <USBD_GetEpDesc>
 8004c6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4815      	ldr	r0, [pc, #84]	; (8004cc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c72:	f000 fcda 	bl	800562a <USBD_GetEpDesc>
 8004c76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c78:	2181      	movs	r1, #129	; 0x81
 8004c7a:	4813      	ldr	r0, [pc, #76]	; (8004cc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c7c:	f000 fcd5 	bl	800562a <USBD_GetEpDesc>
 8004c80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d006      	beq.n	8004ca2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c9c:	711a      	strb	r2, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb0:	711a      	strb	r2, [r3, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2243      	movs	r2, #67	; 0x43
 8004cba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cbc:	4b02      	ldr	r3, [pc, #8]	; (8004cc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000090 	.word	0x20000090

08004ccc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	220a      	movs	r2, #10
 8004cd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004cda:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	2000004c 	.word	0x2000004c

08004cec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e009      	b.n	8004d14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	33b0      	adds	r3, #176	; 0xb0
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	32b0      	adds	r2, #176	; 0xb0
 8004d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e008      	b.n	8004d58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	32b0      	adds	r2, #176	; 0xb0
 8004d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e004      	b.n	8004d92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	32b0      	adds	r2, #176	; 0xb0
 8004db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	32b0      	adds	r2, #176	; 0xb0
 8004dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e025      	b.n	8004e1e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11f      	bne.n	8004e1c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004de4:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <USBD_CDC_TransmitPacket+0x88>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f003 020f 	and.w	r2, r3, #15
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4403      	add	r3, r0
 8004dfe:	3318      	adds	r3, #24
 8004e00:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e02:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <USBD_CDC_TransmitPacket+0x88>)
 8004e04:	7819      	ldrb	r1, [r3, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 ffa9 	bl	8006d6a <USBD_LL_Transmit>

    ret = USBD_OK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	200000d3 	.word	0x200000d3

08004e2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	32b0      	adds	r2, #176	; 0xb0
 8004e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	32b0      	adds	r2, #176	; 0xb0
 8004e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e018      	b.n	8004e8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	7c1b      	ldrb	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <USBD_CDC_ReceivePacket+0x68>)
 8004e64:	7819      	ldrb	r1, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f001 ff9b 	bl	8006dac <USBD_LL_PrepareReceive>
 8004e76:	e008      	b.n	8004e8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <USBD_CDC_ReceivePacket+0x68>)
 8004e7a:	7819      	ldrb	r1, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e82:	2340      	movs	r3, #64	; 0x40
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f001 ff91 	bl	8006dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	200000d4 	.word	0x200000d4

08004e98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e01f      	b.n	8004ef0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	79fa      	ldrb	r2, [r7, #7]
 8004ee2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f001 fe0b 	bl	8006b00 <USBD_LL_Init>
 8004eea:	4603      	mov	r3, r0
 8004eec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e025      	b.n	8004f5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	32ae      	adds	r2, #174	; 0xae
 8004f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00f      	beq.n	8004f4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	32ae      	adds	r2, #174	; 0xae
 8004f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	f107 020e 	add.w	r2, r7, #14
 8004f40:	4610      	mov	r0, r2
 8004f42:	4798      	blx	r3
 8004f44:	4602      	mov	r2, r0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 fe13 	bl	8006b98 <USBD_LL_Start>
 8004f72:	4603      	mov	r3, r0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	4798      	blx	r3
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	78fa      	ldrb	r2, [r7, #3]
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f001 f908 	bl	8006226 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005024:	461a      	mov	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2b02      	cmp	r3, #2
 8005038:	d01a      	beq.n	8005070 <USBD_LL_SetupStage+0x72>
 800503a:	2b02      	cmp	r3, #2
 800503c:	d822      	bhi.n	8005084 <USBD_LL_SetupStage+0x86>
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <USBD_LL_SetupStage+0x4a>
 8005042:	2b01      	cmp	r3, #1
 8005044:	d00a      	beq.n	800505c <USBD_LL_SetupStage+0x5e>
 8005046:	e01d      	b.n	8005084 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fb5f 	bl	8005714 <USBD_StdDevReq>
 8005056:	4603      	mov	r3, r0
 8005058:	73fb      	strb	r3, [r7, #15]
      break;
 800505a:	e020      	b.n	800509e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005062:	4619      	mov	r1, r3
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fbc7 	bl	80057f8 <USBD_StdItfReq>
 800506a:	4603      	mov	r3, r0
 800506c:	73fb      	strb	r3, [r7, #15]
      break;
 800506e:	e016      	b.n	800509e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005076:	4619      	mov	r1, r3
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fc29 	bl	80058d0 <USBD_StdEPReq>
 800507e:	4603      	mov	r3, r0
 8005080:	73fb      	strb	r3, [r7, #15]
      break;
 8005082:	e00c      	b.n	800509e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800508a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800508e:	b2db      	uxtb	r3, r3
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fde0 	bl	8006c58 <USBD_LL_StallEP>
 8005098:	4603      	mov	r3, r0
 800509a:	73fb      	strb	r3, [r7, #15]
      break;
 800509c:	bf00      	nop
  }

  return ret;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	460b      	mov	r3, r1
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80050ba:	7afb      	ldrb	r3, [r7, #11]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d16e      	bne.n	800519e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	f040 8098 	bne.w	8005204 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d913      	bls.n	8005108 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4293      	cmp	r3, r2
 80050f8:	bf28      	it	cs
 80050fa:	4613      	movcs	r3, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f001 f984 	bl	800640e <USBD_CtlContinueRx>
 8005106:	e07d      	b.n	8005204 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2b02      	cmp	r3, #2
 8005114:	d014      	beq.n	8005140 <USBD_LL_DataOutStage+0x98>
 8005116:	2b02      	cmp	r3, #2
 8005118:	d81d      	bhi.n	8005156 <USBD_LL_DataOutStage+0xae>
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <USBD_LL_DataOutStage+0x7c>
 800511e:	2b01      	cmp	r3, #1
 8005120:	d003      	beq.n	800512a <USBD_LL_DataOutStage+0x82>
 8005122:	e018      	b.n	8005156 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	75bb      	strb	r3, [r7, #22]
            break;
 8005128:	e018      	b.n	800515c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005130:	b2db      	uxtb	r3, r3
 8005132:	4619      	mov	r1, r3
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fa5e 	bl	80055f6 <USBD_CoreFindIF>
 800513a:	4603      	mov	r3, r0
 800513c:	75bb      	strb	r3, [r7, #22]
            break;
 800513e:	e00d      	b.n	800515c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005146:	b2db      	uxtb	r3, r3
 8005148:	4619      	mov	r1, r3
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fa60 	bl	8005610 <USBD_CoreFindEP>
 8005150:	4603      	mov	r3, r0
 8005152:	75bb      	strb	r3, [r7, #22]
            break;
 8005154:	e002      	b.n	800515c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	75bb      	strb	r3, [r7, #22]
            break;
 800515a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800515c:	7dbb      	ldrb	r3, [r7, #22]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d119      	bne.n	8005196 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b03      	cmp	r3, #3
 800516c:	d113      	bne.n	8005196 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800516e:	7dba      	ldrb	r2, [r7, #22]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	32ae      	adds	r2, #174	; 0xae
 8005174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800517e:	7dba      	ldrb	r2, [r7, #22]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005186:	7dba      	ldrb	r2, [r7, #22]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	32ae      	adds	r2, #174	; 0xae
 800518c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f001 f94a 	bl	8006430 <USBD_CtlSendStatus>
 800519c:	e032      	b.n	8005204 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800519e:	7afb      	ldrb	r3, [r7, #11]
 80051a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	4619      	mov	r1, r3
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fa31 	bl	8005610 <USBD_CoreFindEP>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051b2:	7dbb      	ldrb	r3, [r7, #22]
 80051b4:	2bff      	cmp	r3, #255	; 0xff
 80051b6:	d025      	beq.n	8005204 <USBD_LL_DataOutStage+0x15c>
 80051b8:	7dbb      	ldrb	r3, [r7, #22]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d122      	bne.n	8005204 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d117      	bne.n	80051fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80051ca:	7dba      	ldrb	r2, [r7, #22]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	32ae      	adds	r2, #174	; 0xae
 80051d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00f      	beq.n	80051fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80051da:	7dba      	ldrb	r2, [r7, #22]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80051e2:	7dba      	ldrb	r2, [r7, #22]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	32ae      	adds	r2, #174	; 0xae
 80051e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	7afa      	ldrb	r2, [r7, #11]
 80051f0:	4611      	mov	r1, r2
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	4798      	blx	r3
 80051f6:	4603      	mov	r3, r0
 80051f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005200:	7dfb      	ldrb	r3, [r7, #23]
 8005202:	e000      	b.n	8005206 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	460b      	mov	r3, r1
 8005218:	607a      	str	r2, [r7, #4]
 800521a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800521c:	7afb      	ldrb	r3, [r7, #11]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d16f      	bne.n	8005302 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3314      	adds	r3, #20
 8005226:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800522e:	2b02      	cmp	r3, #2
 8005230:	d15a      	bne.n	80052e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	429a      	cmp	r2, r3
 800523c:	d914      	bls.n	8005268 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	461a      	mov	r2, r3
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f001 f8ac 	bl	80063b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800525a:	2300      	movs	r3, #0
 800525c:	2200      	movs	r2, #0
 800525e:	2100      	movs	r1, #0
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f001 fda3 	bl	8006dac <USBD_LL_PrepareReceive>
 8005266:	e03f      	b.n	80052e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	429a      	cmp	r2, r3
 8005272:	d11c      	bne.n	80052ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800527c:	429a      	cmp	r2, r3
 800527e:	d316      	bcc.n	80052ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800528a:	429a      	cmp	r2, r3
 800528c:	d20f      	bcs.n	80052ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800528e:	2200      	movs	r2, #0
 8005290:	2100      	movs	r1, #0
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f001 f88d 	bl	80063b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052a0:	2300      	movs	r3, #0
 80052a2:	2200      	movs	r2, #0
 80052a4:	2100      	movs	r1, #0
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f001 fd80 	bl	8006dac <USBD_LL_PrepareReceive>
 80052ac:	e01c      	b.n	80052e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d10f      	bne.n	80052da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80052da:	2180      	movs	r1, #128	; 0x80
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f001 fcbb 	bl	8006c58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f001 f8b7 	bl	8006456 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d03a      	beq.n	8005368 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff fe42 	bl	8004f7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005300:	e032      	b.n	8005368 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005302:	7afb      	ldrb	r3, [r7, #11]
 8005304:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005308:	b2db      	uxtb	r3, r3
 800530a:	4619      	mov	r1, r3
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f97f 	bl	8005610 <USBD_CoreFindEP>
 8005312:	4603      	mov	r3, r0
 8005314:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2bff      	cmp	r3, #255	; 0xff
 800531a:	d025      	beq.n	8005368 <USBD_LL_DataInStage+0x15a>
 800531c:	7dfb      	ldrb	r3, [r7, #23]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d122      	bne.n	8005368 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b03      	cmp	r3, #3
 800532c:	d11c      	bne.n	8005368 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800532e:	7dfa      	ldrb	r2, [r7, #23]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	32ae      	adds	r2, #174	; 0xae
 8005334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d014      	beq.n	8005368 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800533e:	7dfa      	ldrb	r2, [r7, #23]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005346:	7dfa      	ldrb	r2, [r7, #23]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	32ae      	adds	r2, #174	; 0xae
 800534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	7afa      	ldrb	r2, [r7, #11]
 8005354:	4611      	mov	r1, r2
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	4798      	blx	r3
 800535a:	4603      	mov	r3, r0
 800535c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800535e:	7dbb      	ldrb	r3, [r7, #22]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005364:	7dbb      	ldrb	r3, [r7, #22]
 8005366:	e000      	b.n	800536a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d014      	beq.n	80053d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00e      	beq.n	80053d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6852      	ldr	r2, [r2, #4]
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	4611      	mov	r1, r2
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	4798      	blx	r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80053d4:	2303      	movs	r3, #3
 80053d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053d8:	2340      	movs	r3, #64	; 0x40
 80053da:	2200      	movs	r2, #0
 80053dc:	2100      	movs	r1, #0
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f001 fbf5 	bl	8006bce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2240      	movs	r2, #64	; 0x40
 80053f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053f4:	2340      	movs	r3, #64	; 0x40
 80053f6:	2200      	movs	r2, #0
 80053f8:	2180      	movs	r1, #128	; 0x80
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fbe7 	bl	8006bce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2240      	movs	r2, #64	; 0x40
 800540a:	621a      	str	r2, [r3, #32]

  return ret;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	460b      	mov	r3, r1
 8005420:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	78fa      	ldrb	r2, [r7, #3]
 8005426:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005444:	b2da      	uxtb	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2204      	movs	r2, #4
 8005450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b04      	cmp	r3, #4
 8005474:	d106      	bne.n	8005484 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d110      	bne.n	80054c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	32ae      	adds	r2, #174	; 0xae
 80054e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e01c      	b.n	800552e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d115      	bne.n	800552c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	32ae      	adds	r2, #174	; 0xae
 800550a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	32ae      	adds	r2, #174	; 0xae
 800551e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	4611      	mov	r1, r2
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	32ae      	adds	r2, #174	; 0xae
 800554c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005554:	2303      	movs	r3, #3
 8005556:	e01c      	b.n	8005592 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b03      	cmp	r3, #3
 8005562:	d115      	bne.n	8005590 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	32ae      	adds	r2, #174	; 0xae
 800556e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	32ae      	adds	r2, #174	; 0xae
 8005582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	4611      	mov	r1, r2
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00e      	beq.n	80055ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6852      	ldr	r2, [r2, #4]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	4611      	mov	r1, r2
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80055e8:	2303      	movs	r3, #3
 80055ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	460b      	mov	r3, r1
 8005600:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005602:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800561c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b086      	sub	sp, #24
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	885b      	ldrh	r3, [r3, #2]
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b29b      	uxth	r3, r3
 800564e:	429a      	cmp	r2, r3
 8005650:	d920      	bls.n	8005694 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800565a:	e013      	b.n	8005684 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800565c:	f107 030a 	add.w	r3, r7, #10
 8005660:	4619      	mov	r1, r3
 8005662:	6978      	ldr	r0, [r7, #20]
 8005664:	f000 f81b 	bl	800569e <USBD_GetNextDesc>
 8005668:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	2b05      	cmp	r3, #5
 8005670:	d108      	bne.n	8005684 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	789b      	ldrb	r3, [r3, #2]
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	429a      	cmp	r2, r3
 800567e:	d008      	beq.n	8005692 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	885b      	ldrh	r3, [r3, #2]
 8005688:	b29a      	uxth	r2, r3
 800568a:	897b      	ldrh	r3, [r7, #10]
 800568c:	429a      	cmp	r2, r3
 800568e:	d8e5      	bhi.n	800565c <USBD_GetEpDesc+0x32>
 8005690:	e000      	b.n	8005694 <USBD_GetEpDesc+0x6a>
          break;
 8005692:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005694:	693b      	ldr	r3, [r7, #16]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	881a      	ldrh	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	4413      	add	r3, r2
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4413      	add	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80056ca:	68fb      	ldr	r3, [r7, #12]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	3301      	adds	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80056f6:	8a3b      	ldrh	r3, [r7, #16]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	b21a      	sxth	r2, r3
 80056fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005700:	4313      	orrs	r3, r2
 8005702:	b21b      	sxth	r3, r3
 8005704:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005706:	89fb      	ldrh	r3, [r7, #14]
}
 8005708:	4618      	mov	r0, r3
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800572a:	2b40      	cmp	r3, #64	; 0x40
 800572c:	d005      	beq.n	800573a <USBD_StdDevReq+0x26>
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d857      	bhi.n	80057e2 <USBD_StdDevReq+0xce>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00f      	beq.n	8005756 <USBD_StdDevReq+0x42>
 8005736:	2b20      	cmp	r3, #32
 8005738:	d153      	bne.n	80057e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	32ae      	adds	r2, #174	; 0xae
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4798      	blx	r3
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e04a      	b.n	80057ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b09      	cmp	r3, #9
 800575c:	d83b      	bhi.n	80057d6 <USBD_StdDevReq+0xc2>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <USBD_StdDevReq+0x50>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	080057b9 	.word	0x080057b9
 8005768:	080057cd 	.word	0x080057cd
 800576c:	080057d7 	.word	0x080057d7
 8005770:	080057c3 	.word	0x080057c3
 8005774:	080057d7 	.word	0x080057d7
 8005778:	08005797 	.word	0x08005797
 800577c:	0800578d 	.word	0x0800578d
 8005780:	080057d7 	.word	0x080057d7
 8005784:	080057af 	.word	0x080057af
 8005788:	080057a1 	.word	0x080057a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fa3c 	bl	8005c0c <USBD_GetDescriptor>
          break;
 8005794:	e024      	b.n	80057e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fba1 	bl	8005ee0 <USBD_SetAddress>
          break;
 800579e:	e01f      	b.n	80057e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fbe0 	bl	8005f68 <USBD_SetConfig>
 80057a8:	4603      	mov	r3, r0
 80057aa:	73fb      	strb	r3, [r7, #15]
          break;
 80057ac:	e018      	b.n	80057e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fc83 	bl	80060bc <USBD_GetConfig>
          break;
 80057b6:	e013      	b.n	80057e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fcb4 	bl	8006128 <USBD_GetStatus>
          break;
 80057c0:	e00e      	b.n	80057e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057c2:	6839      	ldr	r1, [r7, #0]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fce3 	bl	8006190 <USBD_SetFeature>
          break;
 80057ca:	e009      	b.n	80057e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fd07 	bl	80061e2 <USBD_ClrFeature>
          break;
 80057d4:	e004      	b.n	80057e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fd5e 	bl	800629a <USBD_CtlError>
          break;
 80057de:	bf00      	nop
      }
      break;
 80057e0:	e004      	b.n	80057ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fd58 	bl	800629a <USBD_CtlError>
      break;
 80057ea:	bf00      	nop
  }

  return ret;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop

080057f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d005      	beq.n	800581e <USBD_StdItfReq+0x26>
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d852      	bhi.n	80058bc <USBD_StdItfReq+0xc4>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <USBD_StdItfReq+0x26>
 800581a:	2b20      	cmp	r3, #32
 800581c:	d14e      	bne.n	80058bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005824:	b2db      	uxtb	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	2b02      	cmp	r3, #2
 800582a:	d840      	bhi.n	80058ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	889b      	ldrh	r3, [r3, #4]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d836      	bhi.n	80058a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	889b      	ldrh	r3, [r3, #4]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff fed9 	bl	80055f6 <USBD_CoreFindIF>
 8005844:	4603      	mov	r3, r0
 8005846:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	2bff      	cmp	r3, #255	; 0xff
 800584c:	d01d      	beq.n	800588a <USBD_StdItfReq+0x92>
 800584e:	7bbb      	ldrb	r3, [r7, #14]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11a      	bne.n	800588a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005854:	7bba      	ldrb	r2, [r7, #14]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	32ae      	adds	r2, #174	; 0xae
 800585a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00f      	beq.n	8005884 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005864:	7bba      	ldrb	r2, [r7, #14]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800586c:	7bba      	ldrb	r2, [r7, #14]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	32ae      	adds	r2, #174	; 0xae
 8005872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
 800587e:	4603      	mov	r3, r0
 8005880:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005882:	e004      	b.n	800588e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005884:	2303      	movs	r3, #3
 8005886:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005888:	e001      	b.n	800588e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800588a:	2303      	movs	r3, #3
 800588c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	88db      	ldrh	r3, [r3, #6]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d110      	bne.n	80058b8 <USBD_StdItfReq+0xc0>
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10d      	bne.n	80058b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fdc7 	bl	8006430 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058a2:	e009      	b.n	80058b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fcf7 	bl	800629a <USBD_CtlError>
          break;
 80058ac:	e004      	b.n	80058b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fcf2 	bl	800629a <USBD_CtlError>
          break;
 80058b6:	e000      	b.n	80058ba <USBD_StdItfReq+0xc2>
          break;
 80058b8:	bf00      	nop
      }
      break;
 80058ba:	e004      	b.n	80058c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fceb 	bl	800629a <USBD_CtlError>
      break;
 80058c4:	bf00      	nop
  }

  return ret;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	889b      	ldrh	r3, [r3, #4]
 80058e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058ec:	2b40      	cmp	r3, #64	; 0x40
 80058ee:	d007      	beq.n	8005900 <USBD_StdEPReq+0x30>
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	f200 817f 	bhi.w	8005bf4 <USBD_StdEPReq+0x324>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d02a      	beq.n	8005950 <USBD_StdEPReq+0x80>
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	f040 817a 	bne.w	8005bf4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fe83 	bl	8005610 <USBD_CoreFindEP>
 800590a:	4603      	mov	r3, r0
 800590c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800590e:	7b7b      	ldrb	r3, [r7, #13]
 8005910:	2bff      	cmp	r3, #255	; 0xff
 8005912:	f000 8174 	beq.w	8005bfe <USBD_StdEPReq+0x32e>
 8005916:	7b7b      	ldrb	r3, [r7, #13]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f040 8170 	bne.w	8005bfe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800591e:	7b7a      	ldrb	r2, [r7, #13]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005926:	7b7a      	ldrb	r2, [r7, #13]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	32ae      	adds	r2, #174	; 0xae
 800592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 8163 	beq.w	8005bfe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005938:	7b7a      	ldrb	r2, [r7, #13]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	32ae      	adds	r2, #174	; 0xae
 800593e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
 800594a:	4603      	mov	r3, r0
 800594c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800594e:	e156      	b.n	8005bfe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	785b      	ldrb	r3, [r3, #1]
 8005954:	2b03      	cmp	r3, #3
 8005956:	d008      	beq.n	800596a <USBD_StdEPReq+0x9a>
 8005958:	2b03      	cmp	r3, #3
 800595a:	f300 8145 	bgt.w	8005be8 <USBD_StdEPReq+0x318>
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 809b 	beq.w	8005a9a <USBD_StdEPReq+0x1ca>
 8005964:	2b01      	cmp	r3, #1
 8005966:	d03c      	beq.n	80059e2 <USBD_StdEPReq+0x112>
 8005968:	e13e      	b.n	8005be8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d002      	beq.n	800597c <USBD_StdEPReq+0xac>
 8005976:	2b03      	cmp	r3, #3
 8005978:	d016      	beq.n	80059a8 <USBD_StdEPReq+0xd8>
 800597a:	e02c      	b.n	80059d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <USBD_StdEPReq+0xce>
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d00a      	beq.n	800599e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005988:	7bbb      	ldrb	r3, [r7, #14]
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 f963 	bl	8006c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005992:	2180      	movs	r1, #128	; 0x80
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f001 f95f 	bl	8006c58 <USBD_LL_StallEP>
 800599a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800599c:	e020      	b.n	80059e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fc7a 	bl	800629a <USBD_CtlError>
              break;
 80059a6:	e01b      	b.n	80059e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	885b      	ldrh	r3, [r3, #2]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10e      	bne.n	80059ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <USBD_StdEPReq+0xfe>
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	2b80      	cmp	r3, #128	; 0x80
 80059ba:	d008      	beq.n	80059ce <USBD_StdEPReq+0xfe>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	88db      	ldrh	r3, [r3, #6]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80059c4:	7bbb      	ldrb	r3, [r7, #14]
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f945 	bl	8006c58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fd2e 	bl	8006430 <USBD_CtlSendStatus>

              break;
 80059d4:	e004      	b.n	80059e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fc5e 	bl	800629a <USBD_CtlError>
              break;
 80059de:	bf00      	nop
          }
          break;
 80059e0:	e107      	b.n	8005bf2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d002      	beq.n	80059f4 <USBD_StdEPReq+0x124>
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d016      	beq.n	8005a20 <USBD_StdEPReq+0x150>
 80059f2:	e04b      	b.n	8005a8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <USBD_StdEPReq+0x146>
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d00a      	beq.n	8005a16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a00:	7bbb      	ldrb	r3, [r7, #14]
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 f927 	bl	8006c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 f923 	bl	8006c58 <USBD_LL_StallEP>
 8005a12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a14:	e040      	b.n	8005a98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fc3e 	bl	800629a <USBD_CtlError>
              break;
 8005a1e:	e03b      	b.n	8005a98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	885b      	ldrh	r3, [r3, #2]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d136      	bne.n	8005a96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a28:	7bbb      	ldrb	r3, [r7, #14]
 8005a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a32:	7bbb      	ldrb	r3, [r7, #14]
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 f92d 	bl	8006c96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fcf7 	bl	8006430 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff fde2 	bl	8005610 <USBD_CoreFindEP>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a50:	7b7b      	ldrb	r3, [r7, #13]
 8005a52:	2bff      	cmp	r3, #255	; 0xff
 8005a54:	d01f      	beq.n	8005a96 <USBD_StdEPReq+0x1c6>
 8005a56:	7b7b      	ldrb	r3, [r7, #13]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d11c      	bne.n	8005a96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005a5c:	7b7a      	ldrb	r2, [r7, #13]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005a64:	7b7a      	ldrb	r2, [r7, #13]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	32ae      	adds	r2, #174	; 0xae
 8005a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d010      	beq.n	8005a96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a74:	7b7a      	ldrb	r2, [r7, #13]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	32ae      	adds	r2, #174	; 0xae
 8005a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005a8a:	e004      	b.n	8005a96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fc03 	bl	800629a <USBD_CtlError>
              break;
 8005a94:	e000      	b.n	8005a98 <USBD_StdEPReq+0x1c8>
              break;
 8005a96:	bf00      	nop
          }
          break;
 8005a98:	e0ab      	b.n	8005bf2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d002      	beq.n	8005aac <USBD_StdEPReq+0x1dc>
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d032      	beq.n	8005b10 <USBD_StdEPReq+0x240>
 8005aaa:	e097      	b.n	8005bdc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <USBD_StdEPReq+0x1f2>
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	2b80      	cmp	r3, #128	; 0x80
 8005ab6:	d004      	beq.n	8005ac2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fbed 	bl	800629a <USBD_CtlError>
                break;
 8005ac0:	e091      	b.n	8005be6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da0b      	bge.n	8005ae2 <USBD_StdEPReq+0x212>
 8005aca:	7bbb      	ldrb	r3, [r7, #14]
 8005acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	3310      	adds	r3, #16
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	3304      	adds	r3, #4
 8005ae0:	e00b      	b.n	8005afa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ae2:	7bbb      	ldrb	r3, [r7, #14]
 8005ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	4413      	add	r3, r2
 8005af8:	3304      	adds	r3, #4
 8005afa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2202      	movs	r2, #2
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc37 	bl	800637c <USBD_CtlSendData>
              break;
 8005b0e:	e06a      	b.n	8005be6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da11      	bge.n	8005b3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	f003 020f 	and.w	r2, r3, #15
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	3324      	adds	r3, #36	; 0x24
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d117      	bne.n	8005b62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fbb0 	bl	800629a <USBD_CtlError>
                  break;
 8005b3a:	e054      	b.n	8005be6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b3c:	7bbb      	ldrb	r3, [r7, #14]
 8005b3e:	f003 020f 	and.w	r2, r3, #15
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fb9d 	bl	800629a <USBD_CtlError>
                  break;
 8005b60:	e041      	b.n	8005be6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	da0b      	bge.n	8005b82 <USBD_StdEPReq+0x2b2>
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	3310      	adds	r3, #16
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3304      	adds	r3, #4
 8005b80:	e00b      	b.n	8005b9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b82:	7bbb      	ldrb	r3, [r7, #14]
 8005b84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	3304      	adds	r3, #4
 8005b9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b9c:	7bbb      	ldrb	r3, [r7, #14]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <USBD_StdEPReq+0x2d8>
 8005ba2:	7bbb      	ldrb	r3, [r7, #14]
 8005ba4:	2b80      	cmp	r3, #128	; 0x80
 8005ba6:	d103      	bne.n	8005bb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e00e      	b.n	8005bce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 f88d 	bl	8006cd4 <USBD_LL_IsStallEP>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fbd1 	bl	800637c <USBD_CtlSendData>
              break;
 8005bda:	e004      	b.n	8005be6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fb5b 	bl	800629a <USBD_CtlError>
              break;
 8005be4:	bf00      	nop
          }
          break;
 8005be6:	e004      	b.n	8005bf2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fb55 	bl	800629a <USBD_CtlError>
          break;
 8005bf0:	bf00      	nop
      }
      break;
 8005bf2:	e005      	b.n	8005c00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fb4f 	bl	800629a <USBD_CtlError>
      break;
 8005bfc:	e000      	b.n	8005c00 <USBD_StdEPReq+0x330>
      break;
 8005bfe:	bf00      	nop
  }

  return ret;
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	885b      	ldrh	r3, [r3, #2]
 8005c26:	0a1b      	lsrs	r3, r3, #8
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	2b06      	cmp	r3, #6
 8005c2e:	f200 8128 	bhi.w	8005e82 <USBD_GetDescriptor+0x276>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <USBD_GetDescriptor+0x2c>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c55 	.word	0x08005c55
 8005c3c:	08005c6d 	.word	0x08005c6d
 8005c40:	08005cad 	.word	0x08005cad
 8005c44:	08005e83 	.word	0x08005e83
 8005c48:	08005e83 	.word	0x08005e83
 8005c4c:	08005e23 	.word	0x08005e23
 8005c50:	08005e4f 	.word	0x08005e4f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	7c12      	ldrb	r2, [r2, #16]
 8005c60:	f107 0108 	add.w	r1, r7, #8
 8005c64:	4610      	mov	r0, r2
 8005c66:	4798      	blx	r3
 8005c68:	60f8      	str	r0, [r7, #12]
      break;
 8005c6a:	e112      	b.n	8005e92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	7c1b      	ldrb	r3, [r3, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10d      	bne.n	8005c90 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	f107 0208 	add.w	r2, r7, #8
 8005c80:	4610      	mov	r0, r2
 8005c82:	4798      	blx	r3
 8005c84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c8e:	e100      	b.n	8005e92 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	f107 0208 	add.w	r2, r7, #8
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4798      	blx	r3
 8005ca0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
      break;
 8005caa:	e0f2      	b.n	8005e92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	885b      	ldrh	r3, [r3, #2]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	f200 80ac 	bhi.w	8005e10 <USBD_GetDescriptor+0x204>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <USBD_GetDescriptor+0xb4>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd9 	.word	0x08005cd9
 8005cc4:	08005d0d 	.word	0x08005d0d
 8005cc8:	08005d41 	.word	0x08005d41
 8005ccc:	08005d75 	.word	0x08005d75
 8005cd0:	08005da9 	.word	0x08005da9
 8005cd4:	08005ddd 	.word	0x08005ddd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	7c12      	ldrb	r2, [r2, #16]
 8005cf0:	f107 0108 	add.w	r1, r7, #8
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
 8005cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cfa:	e091      	b.n	8005e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 facb 	bl	800629a <USBD_CtlError>
            err++;
 8005d04:	7afb      	ldrb	r3, [r7, #11]
 8005d06:	3301      	adds	r3, #1
 8005d08:	72fb      	strb	r3, [r7, #11]
          break;
 8005d0a:	e089      	b.n	8005e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	7c12      	ldrb	r2, [r2, #16]
 8005d24:	f107 0108 	add.w	r1, r7, #8
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4798      	blx	r3
 8005d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d2e:	e077      	b.n	8005e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fab1 	bl	800629a <USBD_CtlError>
            err++;
 8005d38:	7afb      	ldrb	r3, [r7, #11]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d3e:	e06f      	b.n	8005e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	7c12      	ldrb	r2, [r2, #16]
 8005d58:	f107 0108 	add.w	r1, r7, #8
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4798      	blx	r3
 8005d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d62:	e05d      	b.n	8005e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa97 	bl	800629a <USBD_CtlError>
            err++;
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	72fb      	strb	r3, [r7, #11]
          break;
 8005d72:	e055      	b.n	8005e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	7c12      	ldrb	r2, [r2, #16]
 8005d8c:	f107 0108 	add.w	r1, r7, #8
 8005d90:	4610      	mov	r0, r2
 8005d92:	4798      	blx	r3
 8005d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d96:	e043      	b.n	8005e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa7d 	bl	800629a <USBD_CtlError>
            err++;
 8005da0:	7afb      	ldrb	r3, [r7, #11]
 8005da2:	3301      	adds	r3, #1
 8005da4:	72fb      	strb	r3, [r7, #11]
          break;
 8005da6:	e03b      	b.n	8005e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	7c12      	ldrb	r2, [r2, #16]
 8005dc0:	f107 0108 	add.w	r1, r7, #8
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4798      	blx	r3
 8005dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dca:	e029      	b.n	8005e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa63 	bl	800629a <USBD_CtlError>
            err++;
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dda:	e021      	b.n	8005e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	7c12      	ldrb	r2, [r2, #16]
 8005df4:	f107 0108 	add.w	r1, r7, #8
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4798      	blx	r3
 8005dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dfe:	e00f      	b.n	8005e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa49 	bl	800629a <USBD_CtlError>
            err++;
 8005e08:	7afb      	ldrb	r3, [r7, #11]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e0e:	e007      	b.n	8005e20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa41 	bl	800629a <USBD_CtlError>
          err++;
 8005e18:	7afb      	ldrb	r3, [r7, #11]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e1e:	bf00      	nop
      }
      break;
 8005e20:	e037      	b.n	8005e92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7c1b      	ldrb	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	f107 0208 	add.w	r2, r7, #8
 8005e36:	4610      	mov	r0, r2
 8005e38:	4798      	blx	r3
 8005e3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e3c:	e029      	b.n	8005e92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fa2a 	bl	800629a <USBD_CtlError>
        err++;
 8005e46:	7afb      	ldrb	r3, [r7, #11]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e4c:	e021      	b.n	8005e92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	7c1b      	ldrb	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10d      	bne.n	8005e72 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	f107 0208 	add.w	r2, r7, #8
 8005e62:	4610      	mov	r0, r2
 8005e64:	4798      	blx	r3
 8005e66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	2207      	movs	r2, #7
 8005e6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e70:	e00f      	b.n	8005e92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fa10 	bl	800629a <USBD_CtlError>
        err++;
 8005e7a:	7afb      	ldrb	r3, [r7, #11]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e80:	e007      	b.n	8005e92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fa08 	bl	800629a <USBD_CtlError>
      err++;
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e90:	bf00      	nop
  }

  if (err != 0U)
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11e      	bne.n	8005ed6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	88db      	ldrh	r3, [r3, #6]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d016      	beq.n	8005ece <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005ea0:	893b      	ldrh	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	88da      	ldrh	r2, [r3, #6]
 8005eaa:	893b      	ldrh	r3, [r7, #8]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	bf28      	it	cs
 8005eb0:	4613      	movcs	r3, r2
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005eb6:	893b      	ldrh	r3, [r7, #8]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fa5d 	bl	800637c <USBD_CtlSendData>
 8005ec2:	e009      	b.n	8005ed8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9e7 	bl	800629a <USBD_CtlError>
 8005ecc:	e004      	b.n	8005ed8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 faae 	bl	8006430 <USBD_CtlSendStatus>
 8005ed4:	e000      	b.n	8005ed8 <USBD_GetDescriptor+0x2cc>
    return;
 8005ed6:	bf00      	nop
  }
}
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop

08005ee0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	889b      	ldrh	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d131      	bne.n	8005f56 <USBD_SetAddress+0x76>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	88db      	ldrh	r3, [r3, #6]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d12d      	bne.n	8005f56 <USBD_SetAddress+0x76>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	885b      	ldrh	r3, [r3, #2]
 8005efe:	2b7f      	cmp	r3, #127	; 0x7f
 8005f00:	d829      	bhi.n	8005f56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	885b      	ldrh	r3, [r3, #2]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d104      	bne.n	8005f24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f1a:	6839      	ldr	r1, [r7, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f9bc 	bl	800629a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f22:	e01d      	b.n	8005f60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7bfa      	ldrb	r2, [r7, #15]
 8005f28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fefb 	bl	8006d2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa7a 	bl	8006430 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4a:	e009      	b.n	8005f60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f54:	e004      	b.n	8005f60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f99e 	bl	800629a <USBD_CtlError>
  }
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	885b      	ldrh	r3, [r3, #2]
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	4b4e      	ldr	r3, [pc, #312]	; (80060b8 <USBD_SetConfig+0x150>)
 8005f7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f80:	4b4d      	ldr	r3, [pc, #308]	; (80060b8 <USBD_SetConfig+0x150>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d905      	bls.n	8005f94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f985 	bl	800629a <USBD_CtlError>
    return USBD_FAIL;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e08c      	b.n	80060ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d002      	beq.n	8005fa6 <USBD_SetConfig+0x3e>
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d029      	beq.n	8005ff8 <USBD_SetConfig+0x90>
 8005fa4:	e075      	b.n	8006092 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005fa6:	4b44      	ldr	r3, [pc, #272]	; (80060b8 <USBD_SetConfig+0x150>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d020      	beq.n	8005ff0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005fae:	4b42      	ldr	r3, [pc, #264]	; (80060b8 <USBD_SetConfig+0x150>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fb8:	4b3f      	ldr	r3, [pc, #252]	; (80060b8 <USBD_SetConfig+0x150>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fe ffe7 	bl	8004f92 <USBD_SetClassConfig>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d008      	beq.n	8005fe0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f962 	bl	800629a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005fde:	e065      	b.n	80060ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fa25 	bl	8006430 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2203      	movs	r2, #3
 8005fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005fee:	e05d      	b.n	80060ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fa1d 	bl	8006430 <USBD_CtlSendStatus>
      break;
 8005ff6:	e059      	b.n	80060ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ff8:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <USBD_SetConfig+0x150>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d112      	bne.n	8006026 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006008:	4b2b      	ldr	r3, [pc, #172]	; (80060b8 <USBD_SetConfig+0x150>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006012:	4b29      	ldr	r3, [pc, #164]	; (80060b8 <USBD_SetConfig+0x150>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7fe ffd6 	bl	8004fca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fa06 	bl	8006430 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006024:	e042      	b.n	80060ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006026:	4b24      	ldr	r3, [pc, #144]	; (80060b8 <USBD_SetConfig+0x150>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d02a      	beq.n	800608a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7fe ffc4 	bl	8004fca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006042:	4b1d      	ldr	r3, [pc, #116]	; (80060b8 <USBD_SetConfig+0x150>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800604c:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <USBD_SetConfig+0x150>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fe ff9d 	bl	8004f92 <USBD_SetClassConfig>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00f      	beq.n	8006082 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f918 	bl	800629a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fe ffa9 	bl	8004fca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006080:	e014      	b.n	80060ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9d4 	bl	8006430 <USBD_CtlSendStatus>
      break;
 8006088:	e010      	b.n	80060ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9d0 	bl	8006430 <USBD_CtlSendStatus>
      break;
 8006090:	e00c      	b.n	80060ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f900 	bl	800629a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800609a:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <USBD_SetConfig+0x150>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7fe ff92 	bl	8004fca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060a6:	2303      	movs	r3, #3
 80060a8:	73fb      	strb	r3, [r7, #15]
      break;
 80060aa:	bf00      	nop
  }

  return ret;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200001bc 	.word	0x200001bc

080060bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	88db      	ldrh	r3, [r3, #6]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d004      	beq.n	80060d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f8e2 	bl	800629a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80060d6:	e023      	b.n	8006120 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	dc02      	bgt.n	80060ea <USBD_GetConfig+0x2e>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dc03      	bgt.n	80060f0 <USBD_GetConfig+0x34>
 80060e8:	e015      	b.n	8006116 <USBD_GetConfig+0x5a>
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d00b      	beq.n	8006106 <USBD_GetConfig+0x4a>
 80060ee:	e012      	b.n	8006116 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3308      	adds	r3, #8
 80060fa:	2201      	movs	r2, #1
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f93c 	bl	800637c <USBD_CtlSendData>
        break;
 8006104:	e00c      	b.n	8006120 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3304      	adds	r3, #4
 800610a:	2201      	movs	r2, #1
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f934 	bl	800637c <USBD_CtlSendData>
        break;
 8006114:	e004      	b.n	8006120 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f8be 	bl	800629a <USBD_CtlError>
        break;
 800611e:	bf00      	nop
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006138:	b2db      	uxtb	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	2b02      	cmp	r3, #2
 800613e:	d81e      	bhi.n	800617e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	88db      	ldrh	r3, [r3, #6]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d004      	beq.n	8006152 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f8a5 	bl	800629a <USBD_CtlError>
        break;
 8006150:	e01a      	b.n	8006188 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f043 0202 	orr.w	r2, r3, #2
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	330c      	adds	r3, #12
 8006172:	2202      	movs	r2, #2
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f900 	bl	800637c <USBD_CtlSendData>
      break;
 800617c:	e004      	b.n	8006188 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f88a 	bl	800629a <USBD_CtlError>
      break;
 8006186:	bf00      	nop
  }
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	885b      	ldrh	r3, [r3, #2]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d107      	bne.n	80061b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f940 	bl	8006430 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80061b0:	e013      	b.n	80061da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	885b      	ldrh	r3, [r3, #2]
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d10b      	bne.n	80061d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	889b      	ldrh	r3, [r3, #4]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f930 	bl	8006430 <USBD_CtlSendStatus>
}
 80061d0:	e003      	b.n	80061da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f860 	bl	800629a <USBD_CtlError>
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d80b      	bhi.n	8006212 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	885b      	ldrh	r3, [r3, #2]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d10c      	bne.n	800621c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f910 	bl	8006430 <USBD_CtlSendStatus>
      }
      break;
 8006210:	e004      	b.n	800621c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f840 	bl	800629a <USBD_CtlError>
      break;
 800621a:	e000      	b.n	800621e <USBD_ClrFeature+0x3c>
      break;
 800621c:	bf00      	nop
  }
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3301      	adds	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fa41 	bl	80056d8 <SWAPBYTE>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fa34 	bl	80056d8 <SWAPBYTE>
 8006270:	4603      	mov	r3, r0
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3301      	adds	r3, #1
 800627c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fa27 	bl	80056d8 <SWAPBYTE>
 800628a:	4603      	mov	r3, r0
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	80da      	strh	r2, [r3, #6]
}
 8006292:	bf00      	nop
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062a4:	2180      	movs	r1, #128	; 0x80
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fcd6 	bl	8006c58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062ac:	2100      	movs	r1, #0
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fcd2 	bl	8006c58 <USBD_LL_StallEP>
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d036      	beq.n	8006340 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80062d6:	6938      	ldr	r0, [r7, #16]
 80062d8:	f000 f836 	bl	8006348 <USBD_GetLen>
 80062dc:	4603      	mov	r3, r0
 80062de:	3301      	adds	r3, #1
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	4413      	add	r3, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	7812      	ldrb	r2, [r2, #0]
 80062f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	3301      	adds	r3, #1
 80062fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	2203      	movs	r2, #3
 8006304:	701a      	strb	r2, [r3, #0]
  idx++;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	3301      	adds	r3, #1
 800630a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800630c:	e013      	b.n	8006336 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	4413      	add	r3, r2
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	7812      	ldrb	r2, [r2, #0]
 8006318:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	3301      	adds	r3, #1
 800631e:	613b      	str	r3, [r7, #16]
    idx++;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	3301      	adds	r3, #1
 8006324:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006326:	7dfb      	ldrb	r3, [r7, #23]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	4413      	add	r3, r2
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	3301      	adds	r3, #1
 8006334:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e7      	bne.n	800630e <USBD_GetString+0x52>
 800633e:	e000      	b.n	8006342 <USBD_GetString+0x86>
    return;
 8006340:	bf00      	nop
  }
}
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006358:	e005      	b.n	8006366 <USBD_GetLen+0x1e>
  {
    len++;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	3301      	adds	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	3301      	adds	r3, #1
 8006364:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f5      	bne.n	800635a <USBD_GetLen+0x12>
  }

  return len;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2202      	movs	r2, #2
 800638c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	2100      	movs	r1, #0
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fce1 	bl	8006d6a <USBD_LL_Transmit>

  return USBD_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	2100      	movs	r1, #0
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fcd0 	bl	8006d6a <USBD_LL_Transmit>

  return USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2203      	movs	r2, #3
 80063e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	2100      	movs	r1, #0
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fcd4 	bl	8006dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	2100      	movs	r1, #0
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fcc3 	bl	8006dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2204      	movs	r2, #4
 800643c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006440:	2300      	movs	r3, #0
 8006442:	2200      	movs	r2, #0
 8006444:	2100      	movs	r1, #0
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fc8f 	bl	8006d6a <USBD_LL_Transmit>

  return USBD_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3708      	adds	r7, #8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2205      	movs	r2, #5
 8006462:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006466:	2300      	movs	r3, #0
 8006468:	2200      	movs	r2, #0
 800646a:	2100      	movs	r1, #0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fc9d 	bl	8006dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006480:	2200      	movs	r2, #0
 8006482:	4912      	ldr	r1, [pc, #72]	; (80064cc <MX_USB_DEVICE_Init+0x50>)
 8006484:	4812      	ldr	r0, [pc, #72]	; (80064d0 <MX_USB_DEVICE_Init+0x54>)
 8006486:	f7fe fd07 	bl	8004e98 <USBD_Init>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006490:	f7fa f910 	bl	80006b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006494:	490f      	ldr	r1, [pc, #60]	; (80064d4 <MX_USB_DEVICE_Init+0x58>)
 8006496:	480e      	ldr	r0, [pc, #56]	; (80064d0 <MX_USB_DEVICE_Init+0x54>)
 8006498:	f7fe fd2e 	bl	8004ef8 <USBD_RegisterClass>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80064a2:	f7fa f907 	bl	80006b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80064a6:	490c      	ldr	r1, [pc, #48]	; (80064d8 <MX_USB_DEVICE_Init+0x5c>)
 80064a8:	4809      	ldr	r0, [pc, #36]	; (80064d0 <MX_USB_DEVICE_Init+0x54>)
 80064aa:	f7fe fc1f 	bl	8004cec <USBD_CDC_RegisterInterface>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80064b4:	f7fa f8fe 	bl	80006b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80064b8:	4805      	ldr	r0, [pc, #20]	; (80064d0 <MX_USB_DEVICE_Init+0x54>)
 80064ba:	f7fe fd53 	bl	8004f64 <USBD_Start>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80064c4:	f7fa f8f6 	bl	80006b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80064c8:	bf00      	nop
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	200000ec 	.word	0x200000ec
 80064d0:	200001c0 	.word	0x200001c0
 80064d4:	20000058 	.word	0x20000058
 80064d8:	200000d8 	.word	0x200000d8

080064dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80064e0:	2200      	movs	r2, #0
 80064e2:	4905      	ldr	r1, [pc, #20]	; (80064f8 <CDC_Init_FS+0x1c>)
 80064e4:	4805      	ldr	r0, [pc, #20]	; (80064fc <CDC_Init_FS+0x20>)
 80064e6:	f7fe fc1b 	bl	8004d20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80064ea:	4905      	ldr	r1, [pc, #20]	; (8006500 <CDC_Init_FS+0x24>)
 80064ec:	4803      	ldr	r0, [pc, #12]	; (80064fc <CDC_Init_FS+0x20>)
 80064ee:	f7fe fc39 	bl	8004d64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80064f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	2000089c 	.word	0x2000089c
 80064fc:	200001c0 	.word	0x200001c0
 8006500:	2000049c 	.word	0x2000049c

08006504 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006508:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800650a:	4618      	mov	r0, r3
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
 8006520:	4613      	mov	r3, r2
 8006522:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	2b23      	cmp	r3, #35	; 0x23
 8006528:	d84a      	bhi.n	80065c0 <CDC_Control_FS+0xac>
 800652a:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <CDC_Control_FS+0x1c>)
 800652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006530:	080065c1 	.word	0x080065c1
 8006534:	080065c1 	.word	0x080065c1
 8006538:	080065c1 	.word	0x080065c1
 800653c:	080065c1 	.word	0x080065c1
 8006540:	080065c1 	.word	0x080065c1
 8006544:	080065c1 	.word	0x080065c1
 8006548:	080065c1 	.word	0x080065c1
 800654c:	080065c1 	.word	0x080065c1
 8006550:	080065c1 	.word	0x080065c1
 8006554:	080065c1 	.word	0x080065c1
 8006558:	080065c1 	.word	0x080065c1
 800655c:	080065c1 	.word	0x080065c1
 8006560:	080065c1 	.word	0x080065c1
 8006564:	080065c1 	.word	0x080065c1
 8006568:	080065c1 	.word	0x080065c1
 800656c:	080065c1 	.word	0x080065c1
 8006570:	080065c1 	.word	0x080065c1
 8006574:	080065c1 	.word	0x080065c1
 8006578:	080065c1 	.word	0x080065c1
 800657c:	080065c1 	.word	0x080065c1
 8006580:	080065c1 	.word	0x080065c1
 8006584:	080065c1 	.word	0x080065c1
 8006588:	080065c1 	.word	0x080065c1
 800658c:	080065c1 	.word	0x080065c1
 8006590:	080065c1 	.word	0x080065c1
 8006594:	080065c1 	.word	0x080065c1
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065c1 	.word	0x080065c1
 80065a4:	080065c1 	.word	0x080065c1
 80065a8:	080065c1 	.word	0x080065c1
 80065ac:	080065c1 	.word	0x080065c1
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065c1 	.word	0x080065c1
 80065b8:	080065c1 	.word	0x080065c1
 80065bc:	080065c1 	.word	0x080065c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80065c0:	bf00      	nop
  }

  return (USBD_OK);
 80065c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4805      	ldr	r0, [pc, #20]	; (80065f4 <CDC_Receive_FS+0x24>)
 80065de:	f7fe fbc1 	bl	8004d64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065e2:	4804      	ldr	r0, [pc, #16]	; (80065f4 <CDC_Receive_FS+0x24>)
 80065e4:	f7fe fc22 	bl	8004e2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80065e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	200001c0 	.word	0x200001c0

080065f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006608:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <CDC_Transmit_FS+0x48>)
 800660a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800660e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800661a:	2301      	movs	r3, #1
 800661c:	e00b      	b.n	8006636 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800661e:	887b      	ldrh	r3, [r7, #2]
 8006620:	461a      	mov	r2, r3
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4806      	ldr	r0, [pc, #24]	; (8006640 <CDC_Transmit_FS+0x48>)
 8006626:	f7fe fb7b 	bl	8004d20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800662a:	4805      	ldr	r0, [pc, #20]	; (8006640 <CDC_Transmit_FS+0x48>)
 800662c:	f7fe fbb8 	bl	8004da0 <USBD_CDC_TransmitPacket>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200001c0 	.word	0x200001c0

08006644 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	4613      	mov	r3, r2
 8006650:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800665a:	4618      	mov	r0, r3
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	6039      	str	r1, [r7, #0]
 8006672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2212      	movs	r2, #18
 8006678:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800667a:	4b03      	ldr	r3, [pc, #12]	; (8006688 <USBD_FS_DeviceDescriptor+0x20>)
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	20000108 	.word	0x20000108

0800668c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	6039      	str	r1, [r7, #0]
 8006696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2204      	movs	r2, #4
 800669c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800669e:	4b03      	ldr	r3, [pc, #12]	; (80066ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	2000011c 	.word	0x2000011c

080066b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	4907      	ldr	r1, [pc, #28]	; (80066e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80066c6:	4808      	ldr	r0, [pc, #32]	; (80066e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80066c8:	f7ff fdf8 	bl	80062bc <USBD_GetString>
 80066cc:	e004      	b.n	80066d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4904      	ldr	r1, [pc, #16]	; (80066e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80066d2:	4805      	ldr	r0, [pc, #20]	; (80066e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80066d4:	f7ff fdf2 	bl	80062bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80066d8:	4b02      	ldr	r3, [pc, #8]	; (80066e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000c9c 	.word	0x20000c9c
 80066e8:	08006f0c 	.word	0x08006f0c

080066ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4603      	mov	r3, r0
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	4904      	ldr	r1, [pc, #16]	; (800670c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80066fc:	4804      	ldr	r0, [pc, #16]	; (8006710 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80066fe:	f7ff fddd 	bl	80062bc <USBD_GetString>
  return USBD_StrDesc;
 8006702:	4b02      	ldr	r3, [pc, #8]	; (800670c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006704:	4618      	mov	r0, r3
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	20000c9c 	.word	0x20000c9c
 8006710:	08006f24 	.word	0x08006f24

08006714 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	221a      	movs	r2, #26
 8006724:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006726:	f000 f843 	bl	80067b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800672a:	4b02      	ldr	r3, [pc, #8]	; (8006734 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000120 	.word	0x20000120

08006738 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	4603      	mov	r3, r0
 8006740:	6039      	str	r1, [r7, #0]
 8006742:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d105      	bne.n	8006756 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	4907      	ldr	r1, [pc, #28]	; (800676c <USBD_FS_ConfigStrDescriptor+0x34>)
 800674e:	4808      	ldr	r0, [pc, #32]	; (8006770 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006750:	f7ff fdb4 	bl	80062bc <USBD_GetString>
 8006754:	e004      	b.n	8006760 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	4904      	ldr	r1, [pc, #16]	; (800676c <USBD_FS_ConfigStrDescriptor+0x34>)
 800675a:	4805      	ldr	r0, [pc, #20]	; (8006770 <USBD_FS_ConfigStrDescriptor+0x38>)
 800675c:	f7ff fdae 	bl	80062bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006760:	4b02      	ldr	r3, [pc, #8]	; (800676c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	20000c9c 	.word	0x20000c9c
 8006770:	08006f38 	.word	0x08006f38

08006774 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	4603      	mov	r3, r0
 800677c:	6039      	str	r1, [r7, #0]
 800677e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d105      	bne.n	8006792 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	4907      	ldr	r1, [pc, #28]	; (80067a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800678a:	4808      	ldr	r0, [pc, #32]	; (80067ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800678c:	f7ff fd96 	bl	80062bc <USBD_GetString>
 8006790:	e004      	b.n	800679c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	4904      	ldr	r1, [pc, #16]	; (80067a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006796:	4805      	ldr	r0, [pc, #20]	; (80067ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006798:	f7ff fd90 	bl	80062bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800679c:	4b02      	ldr	r3, [pc, #8]	; (80067a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000c9c 	.word	0x20000c9c
 80067ac:	08006f44 	.word	0x08006f44

080067b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067b6:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <Get_SerialNum+0x44>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067bc:	4b0e      	ldr	r3, [pc, #56]	; (80067f8 <Get_SerialNum+0x48>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067c2:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <Get_SerialNum+0x4c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4413      	add	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067d6:	2208      	movs	r2, #8
 80067d8:	4909      	ldr	r1, [pc, #36]	; (8006800 <Get_SerialNum+0x50>)
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f814 	bl	8006808 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067e0:	2204      	movs	r2, #4
 80067e2:	4908      	ldr	r1, [pc, #32]	; (8006804 <Get_SerialNum+0x54>)
 80067e4:	68b8      	ldr	r0, [r7, #8]
 80067e6:	f000 f80f 	bl	8006808 <IntToUnicode>
  }
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	1fff7a10 	.word	0x1fff7a10
 80067f8:	1fff7a14 	.word	0x1fff7a14
 80067fc:	1fff7a18 	.word	0x1fff7a18
 8006800:	20000122 	.word	0x20000122
 8006804:	20000132 	.word	0x20000132

08006808 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]
 800681e:	e027      	b.n	8006870 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	0f1b      	lsrs	r3, r3, #28
 8006824:	2b09      	cmp	r3, #9
 8006826:	d80b      	bhi.n	8006840 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	0f1b      	lsrs	r3, r3, #28
 800682c:	b2da      	uxtb	r2, r3
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	4619      	mov	r1, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	440b      	add	r3, r1
 8006838:	3230      	adds	r2, #48	; 0x30
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	e00a      	b.n	8006856 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	0f1b      	lsrs	r3, r3, #28
 8006844:	b2da      	uxtb	r2, r3
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4619      	mov	r1, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	440b      	add	r3, r1
 8006850:	3237      	adds	r2, #55	; 0x37
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	3301      	adds	r3, #1
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	4413      	add	r3, r2
 8006866:	2200      	movs	r2, #0
 8006868:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	3301      	adds	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
 8006870:	7dfa      	ldrb	r2, [r7, #23]
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	429a      	cmp	r2, r3
 8006876:	d3d3      	bcc.n	8006820 <IntToUnicode+0x18>
  }
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	371c      	adds	r7, #28
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
	...

08006888 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006890:	f107 0314 	add.w	r3, r7, #20
 8006894:	2200      	movs	r2, #0
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	605a      	str	r2, [r3, #4]
 800689a:	609a      	str	r2, [r3, #8]
 800689c:	60da      	str	r2, [r3, #12]
 800689e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068a8:	d13a      	bne.n	8006920 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	4b1e      	ldr	r3, [pc, #120]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	6313      	str	r3, [r2, #48]	; 0x30
 80068ba:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80068c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80068ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068cc:	2302      	movs	r3, #2
 80068ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d0:	2300      	movs	r3, #0
 80068d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d4:	2303      	movs	r3, #3
 80068d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80068d8:	230a      	movs	r3, #10
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068dc:	f107 0314 	add.w	r3, r7, #20
 80068e0:	4619      	mov	r1, r3
 80068e2:	4812      	ldr	r0, [pc, #72]	; (800692c <HAL_PCD_MspInit+0xa4>)
 80068e4:	f7fa f950 	bl	8000b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80068e8:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ec:	4a0e      	ldr	r2, [pc, #56]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f2:	6353      	str	r3, [r2, #52]	; 0x34
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fc:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 80068fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006902:	6453      	str	r3, [r2, #68]	; 0x44
 8006904:	4b08      	ldr	r3, [pc, #32]	; (8006928 <HAL_PCD_MspInit+0xa0>)
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006910:	2200      	movs	r2, #0
 8006912:	2100      	movs	r1, #0
 8006914:	2043      	movs	r0, #67	; 0x43
 8006916:	f7fa f900 	bl	8000b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800691a:	2043      	movs	r0, #67	; 0x43
 800691c:	f7fa f919 	bl	8000b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006920:	bf00      	nop
 8006922:	3728      	adds	r7, #40	; 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40023800 	.word	0x40023800
 800692c:	40020000 	.word	0x40020000

08006930 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006944:	4619      	mov	r1, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f7fe fb59 	bl	8004ffe <USBD_LL_SetupStage>
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	4619      	mov	r1, r3
 800697e:	f7fe fb93 	bl	80050a8 <USBD_LL_DataOutStage>
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	334c      	adds	r3, #76	; 0x4c
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	4619      	mov	r1, r3
 80069b2:	f7fe fc2c 	bl	800520e <USBD_LL_DataInStage>
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fe fd60 	bl	8005492 <USBD_LL_SOF>
}
 80069d2:	bf00      	nop
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80069e2:	2301      	movs	r3, #1
 80069e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d001      	beq.n	80069f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80069ee:	f7f9 fe61 	bl	80006b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069f8:	7bfa      	ldrb	r2, [r7, #15]
 80069fa:	4611      	mov	r1, r2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe fd0a 	bl	8005416 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fcb2 	bl	8005372 <USBD_LL_Reset>
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fd05 	bl	8005436 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <HAL_PCD_SuspendCallback+0x48>)
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	4a03      	ldr	r2, [pc, #12]	; (8006a60 <HAL_PCD_SuspendCallback+0x48>)
 8006a52:	f043 0306 	orr.w	r3, r3, #6
 8006a56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	e000ed00 	.word	0xe000ed00

08006a64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fcf5 	bl	8005462 <USBD_LL_Resume>
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a92:	78fa      	ldrb	r2, [r7, #3]
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe fd4d 	bl	8005536 <USBD_LL_IsoOUTIncomplete>
}
 8006a9c:	bf00      	nop
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fd09 	bl	80054d2 <USBD_LL_IsoINIncomplete>
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fd5f 	bl	800559a <USBD_LL_DevConnected>
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fd5c 	bl	80055b0 <USBD_LL_DevDisconnected>
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d13c      	bne.n	8006b8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b10:	4a20      	ldr	r2, [pc, #128]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a1e      	ldr	r2, [pc, #120]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b1c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b20:	4b1c      	ldr	r3, [pc, #112]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b28:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b2e:	4b19      	ldr	r3, [pc, #100]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b30:	2202      	movs	r2, #2
 8006b32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b34:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b3a:	4b16      	ldr	r3, [pc, #88]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b40:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b4c:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b58:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b5e:	480d      	ldr	r0, [pc, #52]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b60:	f7fa f9c9 	bl	8000ef6 <HAL_PCD_Init>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006b6a:	f7f9 fda3 	bl	80006b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b6e:	2180      	movs	r1, #128	; 0x80
 8006b70:	4808      	ldr	r0, [pc, #32]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b72:	f7fb fc20 	bl	80023b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b76:	2240      	movs	r2, #64	; 0x40
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4806      	ldr	r0, [pc, #24]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b7c:	f7fb fbd4 	bl	8002328 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b80:	2280      	movs	r2, #128	; 0x80
 8006b82:	2101      	movs	r1, #1
 8006b84:	4803      	ldr	r0, [pc, #12]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b86:	f7fb fbcf 	bl	8002328 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000e9c 	.word	0x20000e9c

08006b98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fa fabe 	bl	8001130 <HAL_PCD_Start>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f942 	bl	8006e44 <USBD_Get_USB_Status>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	4608      	mov	r0, r1
 8006bd8:	4611      	mov	r1, r2
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4603      	mov	r3, r0
 8006bde:	70fb      	strb	r3, [r7, #3]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70bb      	strb	r3, [r7, #2]
 8006be4:	4613      	mov	r3, r2
 8006be6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006bf6:	78bb      	ldrb	r3, [r7, #2]
 8006bf8:	883a      	ldrh	r2, [r7, #0]
 8006bfa:	78f9      	ldrb	r1, [r7, #3]
 8006bfc:	f7fa ff8f 	bl	8001b1e <HAL_PCD_EP_Open>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f91c 	bl	8006e44 <USBD_Get_USB_Status>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c34:	78fa      	ldrb	r2, [r7, #3]
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fa ffd8 	bl	8001bee <HAL_PCD_EP_Close>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 f8fd 	bl	8006e44 <USBD_Get_USB_Status>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	4611      	mov	r1, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fb f8b0 	bl	8001ddc <HAL_PCD_EP_SetStall>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f8de 	bl	8006e44 <USBD_Get_USB_Status>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fb f8f5 	bl	8001ea4 <HAL_PCD_EP_ClrStall>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 f8bf 	bl	8006e44 <USBD_Get_USB_Status>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ce6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da0b      	bge.n	8006d08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	333e      	adds	r3, #62	; 0x3e
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	e00b      	b.n	8006d20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006d1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fa fec2 	bl	8001ad4 <HAL_PCD_SetAddress>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 f874 	bl	8006e44 <USBD_Get_USB_Status>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	460b      	mov	r3, r1
 8006d78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006d88:	7af9      	ldrb	r1, [r7, #11]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	f7fa ffdb 	bl	8001d48 <HAL_PCD_EP_Transmit>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f853 	bl	8006e44 <USBD_Get_USB_Status>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006da2:	7dbb      	ldrb	r3, [r7, #22]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	460b      	mov	r3, r1
 8006dba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006dca:	7af9      	ldrb	r1, [r7, #11]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	f7fa ff57 	bl	8001c82 <HAL_PCD_EP_Receive>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f832 	bl	8006e44 <USBD_Get_USB_Status>
 8006de0:	4603      	mov	r3, r0
 8006de2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006de4:	7dbb      	ldrb	r3, [r7, #22]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e00:	78fa      	ldrb	r2, [r7, #3]
 8006e02:	4611      	mov	r1, r2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fa ff87 	bl	8001d18 <HAL_PCD_EP_GetRxCount>
 8006e0a:	4603      	mov	r3, r0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <USBD_static_malloc+0x18>)
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	200013a8 	.word	0x200013a8

08006e30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]

}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d817      	bhi.n	8006e88 <USBD_Get_USB_Status+0x44>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <USBD_Get_USB_Status+0x1c>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e77 	.word	0x08006e77
 8006e68:	08006e7d 	.word	0x08006e7d
 8006e6c:	08006e83 	.word	0x08006e83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
    break;
 8006e74:	e00b      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e76:	2303      	movs	r3, #3
 8006e78:	73fb      	strb	r3, [r7, #15]
    break;
 8006e7a:	e008      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e80:	e005      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e82:	2303      	movs	r3, #3
 8006e84:	73fb      	strb	r3, [r7, #15]
    break;
 8006e86:	e002      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8c:	bf00      	nop
  }
  return usb_status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <__libc_init_array>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	4d0d      	ldr	r5, [pc, #52]	; (8006ed4 <__libc_init_array+0x38>)
 8006ea0:	4c0d      	ldr	r4, [pc, #52]	; (8006ed8 <__libc_init_array+0x3c>)
 8006ea2:	1b64      	subs	r4, r4, r5
 8006ea4:	10a4      	asrs	r4, r4, #2
 8006ea6:	2600      	movs	r6, #0
 8006ea8:	42a6      	cmp	r6, r4
 8006eaa:	d109      	bne.n	8006ec0 <__libc_init_array+0x24>
 8006eac:	4d0b      	ldr	r5, [pc, #44]	; (8006edc <__libc_init_array+0x40>)
 8006eae:	4c0c      	ldr	r4, [pc, #48]	; (8006ee0 <__libc_init_array+0x44>)
 8006eb0:	f000 f820 	bl	8006ef4 <_init>
 8006eb4:	1b64      	subs	r4, r4, r5
 8006eb6:	10a4      	asrs	r4, r4, #2
 8006eb8:	2600      	movs	r6, #0
 8006eba:	42a6      	cmp	r6, r4
 8006ebc:	d105      	bne.n	8006eca <__libc_init_array+0x2e>
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec4:	4798      	blx	r3
 8006ec6:	3601      	adds	r6, #1
 8006ec8:	e7ee      	b.n	8006ea8 <__libc_init_array+0xc>
 8006eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ece:	4798      	blx	r3
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	e7f2      	b.n	8006eba <__libc_init_array+0x1e>
 8006ed4:	08006f6c 	.word	0x08006f6c
 8006ed8:	08006f6c 	.word	0x08006f6c
 8006edc:	08006f6c 	.word	0x08006f6c
 8006ee0:	08006f70 	.word	0x08006f70

08006ee4 <memset>:
 8006ee4:	4402      	add	r2, r0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d100      	bne.n	8006eee <memset+0xa>
 8006eec:	4770      	bx	lr
 8006eee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef2:	e7f9      	b.n	8006ee8 <memset+0x4>

08006ef4 <_init>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr

08006f00 <_fini>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr
