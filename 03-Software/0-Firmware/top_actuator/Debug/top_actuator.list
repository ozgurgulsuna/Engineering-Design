
top_actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e04  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008f9c  08008f9c  00018f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ff4  08008ff4  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ffc  08008ffc  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ffc  08008ffc  00018ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08009004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001574  20000148  0800914c  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016bc  0800914c  000216bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f4e  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304b  00000000  00000000  000340c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00037118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  000381c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f65  00000000  00000000  00039138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001412d  00000000  00000000  0005209d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee87  00000000  00000000  000661ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5051  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004754  00000000  00000000  000f50a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000148 	.word	0x20000148
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008f84 	.word	0x08008f84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000014c 	.word	0x2000014c
 80001d4:	08008f84 	.word	0x08008f84

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	; 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__gedf2>:
 80007b8:	f04f 3cff 	mov.w	ip, #4294967295
 80007bc:	e006      	b.n	80007cc <__cmpdf2+0x4>
 80007be:	bf00      	nop

080007c0 <__ledf2>:
 80007c0:	f04f 0c01 	mov.w	ip, #1
 80007c4:	e002      	b.n	80007cc <__cmpdf2+0x4>
 80007c6:	bf00      	nop

080007c8 <__cmpdf2>:
 80007c8:	f04f 0c01 	mov.w	ip, #1
 80007cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e2:	d01b      	beq.n	800081c <__cmpdf2+0x54>
 80007e4:	b001      	add	sp, #4
 80007e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ea:	bf0c      	ite	eq
 80007ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f0:	ea91 0f03 	teqne	r1, r3
 80007f4:	bf02      	ittt	eq
 80007f6:	ea90 0f02 	teqeq	r0, r2
 80007fa:	2000      	moveq	r0, #0
 80007fc:	4770      	bxeq	lr
 80007fe:	f110 0f00 	cmn.w	r0, #0
 8000802:	ea91 0f03 	teq	r1, r3
 8000806:	bf58      	it	pl
 8000808:	4299      	cmppl	r1, r3
 800080a:	bf08      	it	eq
 800080c:	4290      	cmpeq	r0, r2
 800080e:	bf2c      	ite	cs
 8000810:	17d8      	asrcs	r0, r3, #31
 8000812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000816:	f040 0001 	orr.w	r0, r0, #1
 800081a:	4770      	bx	lr
 800081c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000824:	d102      	bne.n	800082c <__cmpdf2+0x64>
 8000826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082a:	d107      	bne.n	800083c <__cmpdf2+0x74>
 800082c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000834:	d1d6      	bne.n	80007e4 <__cmpdf2+0x1c>
 8000836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083a:	d0d3      	beq.n	80007e4 <__cmpdf2+0x1c>
 800083c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_cdrcmple>:
 8000844:	4684      	mov	ip, r0
 8000846:	4610      	mov	r0, r2
 8000848:	4662      	mov	r2, ip
 800084a:	468c      	mov	ip, r1
 800084c:	4619      	mov	r1, r3
 800084e:	4663      	mov	r3, ip
 8000850:	e000      	b.n	8000854 <__aeabi_cdcmpeq>
 8000852:	bf00      	nop

08000854 <__aeabi_cdcmpeq>:
 8000854:	b501      	push	{r0, lr}
 8000856:	f7ff ffb7 	bl	80007c8 <__cmpdf2>
 800085a:	2800      	cmp	r0, #0
 800085c:	bf48      	it	mi
 800085e:	f110 0f00 	cmnmi.w	r0, #0
 8000862:	bd01      	pop	{r0, pc}

08000864 <__aeabi_dcmpeq>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff fff4 	bl	8000854 <__aeabi_cdcmpeq>
 800086c:	bf0c      	ite	eq
 800086e:	2001      	moveq	r0, #1
 8000870:	2000      	movne	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmplt>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffea 	bl	8000854 <__aeabi_cdcmpeq>
 8000880:	bf34      	ite	cc
 8000882:	2001      	movcc	r0, #1
 8000884:	2000      	movcs	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmple>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffe0 	bl	8000854 <__aeabi_cdcmpeq>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpge>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffce 	bl	8000844 <__aeabi_cdrcmple>
 80008a8:	bf94      	ite	ls
 80008aa:	2001      	movls	r0, #1
 80008ac:	2000      	movhi	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmpgt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffc4 	bl	8000844 <__aeabi_cdrcmple>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_d2iz>:
 80008c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008d0:	d215      	bcs.n	80008fe <__aeabi_d2iz+0x36>
 80008d2:	d511      	bpl.n	80008f8 <__aeabi_d2iz+0x30>
 80008d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008dc:	d912      	bls.n	8000904 <__aeabi_d2iz+0x3c>
 80008de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ee:	fa23 f002 	lsr.w	r0, r3, r2
 80008f2:	bf18      	it	ne
 80008f4:	4240      	negne	r0, r0
 80008f6:	4770      	bx	lr
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	4770      	bx	lr
 80008fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000902:	d105      	bne.n	8000910 <__aeabi_d2iz+0x48>
 8000904:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000908:	bf08      	it	eq
 800090a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_uldivmod>:
 8000918:	b953      	cbnz	r3, 8000930 <__aeabi_uldivmod+0x18>
 800091a:	b94a      	cbnz	r2, 8000930 <__aeabi_uldivmod+0x18>
 800091c:	2900      	cmp	r1, #0
 800091e:	bf08      	it	eq
 8000920:	2800      	cmpeq	r0, #0
 8000922:	bf1c      	itt	ne
 8000924:	f04f 31ff 	movne.w	r1, #4294967295
 8000928:	f04f 30ff 	movne.w	r0, #4294967295
 800092c:	f000 b974 	b.w	8000c18 <__aeabi_idiv0>
 8000930:	f1ad 0c08 	sub.w	ip, sp, #8
 8000934:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000938:	f000 f806 	bl	8000948 <__udivmoddi4>
 800093c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000944:	b004      	add	sp, #16
 8000946:	4770      	bx	lr

08000948 <__udivmoddi4>:
 8000948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800094c:	9d08      	ldr	r5, [sp, #32]
 800094e:	4604      	mov	r4, r0
 8000950:	468e      	mov	lr, r1
 8000952:	2b00      	cmp	r3, #0
 8000954:	d14d      	bne.n	80009f2 <__udivmoddi4+0xaa>
 8000956:	428a      	cmp	r2, r1
 8000958:	4694      	mov	ip, r2
 800095a:	d969      	bls.n	8000a30 <__udivmoddi4+0xe8>
 800095c:	fab2 f282 	clz	r2, r2
 8000960:	b152      	cbz	r2, 8000978 <__udivmoddi4+0x30>
 8000962:	fa01 f302 	lsl.w	r3, r1, r2
 8000966:	f1c2 0120 	rsb	r1, r2, #32
 800096a:	fa20 f101 	lsr.w	r1, r0, r1
 800096e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000972:	ea41 0e03 	orr.w	lr, r1, r3
 8000976:	4094      	lsls	r4, r2
 8000978:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800097c:	0c21      	lsrs	r1, r4, #16
 800097e:	fbbe f6f8 	udiv	r6, lr, r8
 8000982:	fa1f f78c 	uxth.w	r7, ip
 8000986:	fb08 e316 	mls	r3, r8, r6, lr
 800098a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800098e:	fb06 f107 	mul.w	r1, r6, r7
 8000992:	4299      	cmp	r1, r3
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x64>
 8000996:	eb1c 0303 	adds.w	r3, ip, r3
 800099a:	f106 30ff 	add.w	r0, r6, #4294967295
 800099e:	f080 811f 	bcs.w	8000be0 <__udivmoddi4+0x298>
 80009a2:	4299      	cmp	r1, r3
 80009a4:	f240 811c 	bls.w	8000be0 <__udivmoddi4+0x298>
 80009a8:	3e02      	subs	r6, #2
 80009aa:	4463      	add	r3, ip
 80009ac:	1a5b      	subs	r3, r3, r1
 80009ae:	b2a4      	uxth	r4, r4
 80009b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009b4:	fb08 3310 	mls	r3, r8, r0, r3
 80009b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009bc:	fb00 f707 	mul.w	r7, r0, r7
 80009c0:	42a7      	cmp	r7, r4
 80009c2:	d90a      	bls.n	80009da <__udivmoddi4+0x92>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80009cc:	f080 810a 	bcs.w	8000be4 <__udivmoddi4+0x29c>
 80009d0:	42a7      	cmp	r7, r4
 80009d2:	f240 8107 	bls.w	8000be4 <__udivmoddi4+0x29c>
 80009d6:	4464      	add	r4, ip
 80009d8:	3802      	subs	r0, #2
 80009da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009de:	1be4      	subs	r4, r4, r7
 80009e0:	2600      	movs	r6, #0
 80009e2:	b11d      	cbz	r5, 80009ec <__udivmoddi4+0xa4>
 80009e4:	40d4      	lsrs	r4, r2
 80009e6:	2300      	movs	r3, #0
 80009e8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0xc2>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80ef 	beq.w	8000bda <__udivmoddi4+0x292>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x160>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0xd4>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80f9 	bhi.w	8000c0e <__udivmoddi4+0x2c6>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	469e      	mov	lr, r3
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0e0      	beq.n	80009ec <__udivmoddi4+0xa4>
 8000a2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a2e:	e7dd      	b.n	80009ec <__udivmoddi4+0xa4>
 8000a30:	b902      	cbnz	r2, 8000a34 <__udivmoddi4+0xec>
 8000a32:	deff      	udf	#255	; 0xff
 8000a34:	fab2 f282 	clz	r2, r2
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	f040 8092 	bne.w	8000b62 <__udivmoddi4+0x21a>
 8000a3e:	eba1 010c 	sub.w	r1, r1, ip
 8000a42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	0c20      	lsrs	r0, r4, #16
 8000a4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a52:	fb07 1113 	mls	r1, r7, r3, r1
 8000a56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a5a:	fb0e f003 	mul.w	r0, lr, r3
 8000a5e:	4288      	cmp	r0, r1
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x12c>
 8000a62:	eb1c 0101 	adds.w	r1, ip, r1
 8000a66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a6a:	d202      	bcs.n	8000a72 <__udivmoddi4+0x12a>
 8000a6c:	4288      	cmp	r0, r1
 8000a6e:	f200 80cb 	bhi.w	8000c08 <__udivmoddi4+0x2c0>
 8000a72:	4643      	mov	r3, r8
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000a80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a84:	fb0e fe00 	mul.w	lr, lr, r0
 8000a88:	45a6      	cmp	lr, r4
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x156>
 8000a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a94:	d202      	bcs.n	8000a9c <__udivmoddi4+0x154>
 8000a96:	45a6      	cmp	lr, r4
 8000a98:	f200 80bb 	bhi.w	8000c12 <__udivmoddi4+0x2ca>
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aa6:	e79c      	b.n	80009e2 <__udivmoddi4+0x9a>
 8000aa8:	f1c6 0720 	rsb	r7, r6, #32
 8000aac:	40b3      	lsls	r3, r6
 8000aae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ab2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab6:	fa20 f407 	lsr.w	r4, r0, r7
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	40f9      	lsrs	r1, r7
 8000ac2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac6:	fa00 f306 	lsl.w	r3, r0, r6
 8000aca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ace:	0c20      	lsrs	r0, r4, #16
 8000ad0:	fa1f fe8c 	uxth.w	lr, ip
 8000ad4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ad8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000adc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ae0:	4288      	cmp	r0, r1
 8000ae2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae6:	d90b      	bls.n	8000b00 <__udivmoddi4+0x1b8>
 8000ae8:	eb1c 0101 	adds.w	r1, ip, r1
 8000aec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000af0:	f080 8088 	bcs.w	8000c04 <__udivmoddi4+0x2bc>
 8000af4:	4288      	cmp	r0, r1
 8000af6:	f240 8085 	bls.w	8000c04 <__udivmoddi4+0x2bc>
 8000afa:	f1a8 0802 	sub.w	r8, r8, #2
 8000afe:	4461      	add	r1, ip
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b08:	fb09 1110 	mls	r1, r9, r0, r1
 8000b0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b14:	458e      	cmp	lr, r1
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x1e2>
 8000b18:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b20:	d26c      	bcs.n	8000bfc <__udivmoddi4+0x2b4>
 8000b22:	458e      	cmp	lr, r1
 8000b24:	d96a      	bls.n	8000bfc <__udivmoddi4+0x2b4>
 8000b26:	3802      	subs	r0, #2
 8000b28:	4461      	add	r1, ip
 8000b2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000b32:	eba1 010e 	sub.w	r1, r1, lr
 8000b36:	42a1      	cmp	r1, r4
 8000b38:	46c8      	mov	r8, r9
 8000b3a:	46a6      	mov	lr, r4
 8000b3c:	d356      	bcc.n	8000bec <__udivmoddi4+0x2a4>
 8000b3e:	d053      	beq.n	8000be8 <__udivmoddi4+0x2a0>
 8000b40:	b15d      	cbz	r5, 8000b5a <__udivmoddi4+0x212>
 8000b42:	ebb3 0208 	subs.w	r2, r3, r8
 8000b46:	eb61 010e 	sbc.w	r1, r1, lr
 8000b4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000b4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000b52:	40f1      	lsrs	r1, r6
 8000b54:	431f      	orrs	r7, r3
 8000b56:	e9c5 7100 	strd	r7, r1, [r5]
 8000b5a:	2600      	movs	r6, #0
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	f1c2 0320 	rsb	r3, r2, #32
 8000b66:	40d8      	lsrs	r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4301      	orrs	r1, r0
 8000b74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b78:	fa1f fe8c 	uxth.w	lr, ip
 8000b7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b80:	fb07 3610 	mls	r6, r7, r0, r3
 8000b84:	0c0b      	lsrs	r3, r1, #16
 8000b86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	fa04 f402 	lsl.w	r4, r4, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x260>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9e:	d22f      	bcs.n	8000c00 <__udivmoddi4+0x2b8>
 8000ba0:	429e      	cmp	r6, r3
 8000ba2:	d92d      	bls.n	8000c00 <__udivmoddi4+0x2b8>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1b9b      	subs	r3, r3, r6
 8000baa:	b289      	uxth	r1, r1
 8000bac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x28a>
 8000bc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bc8:	d216      	bcs.n	8000bf8 <__udivmoddi4+0x2b0>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d914      	bls.n	8000bf8 <__udivmoddi4+0x2b0>
 8000bce:	3e02      	subs	r6, #2
 8000bd0:	4461      	add	r1, ip
 8000bd2:	1ac9      	subs	r1, r1, r3
 8000bd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bd8:	e738      	b.n	8000a4c <__udivmoddi4+0x104>
 8000bda:	462e      	mov	r6, r5
 8000bdc:	4628      	mov	r0, r5
 8000bde:	e705      	b.n	80009ec <__udivmoddi4+0xa4>
 8000be0:	4606      	mov	r6, r0
 8000be2:	e6e3      	b.n	80009ac <__udivmoddi4+0x64>
 8000be4:	4618      	mov	r0, r3
 8000be6:	e6f8      	b.n	80009da <__udivmoddi4+0x92>
 8000be8:	454b      	cmp	r3, r9
 8000bea:	d2a9      	bcs.n	8000b40 <__udivmoddi4+0x1f8>
 8000bec:	ebb9 0802 	subs.w	r8, r9, r2
 8000bf0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	e7a3      	b.n	8000b40 <__udivmoddi4+0x1f8>
 8000bf8:	4646      	mov	r6, r8
 8000bfa:	e7ea      	b.n	8000bd2 <__udivmoddi4+0x28a>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	e794      	b.n	8000b2a <__udivmoddi4+0x1e2>
 8000c00:	4640      	mov	r0, r8
 8000c02:	e7d1      	b.n	8000ba8 <__udivmoddi4+0x260>
 8000c04:	46d0      	mov	r8, sl
 8000c06:	e77b      	b.n	8000b00 <__udivmoddi4+0x1b8>
 8000c08:	3b02      	subs	r3, #2
 8000c0a:	4461      	add	r1, ip
 8000c0c:	e732      	b.n	8000a74 <__udivmoddi4+0x12c>
 8000c0e:	4630      	mov	r0, r6
 8000c10:	e709      	b.n	8000a26 <__udivmoddi4+0xde>
 8000c12:	4464      	add	r4, ip
 8000c14:	3802      	subs	r0, #2
 8000c16:	e742      	b.n	8000a9e <__udivmoddi4+0x156>

08000c18 <__aeabi_idiv0>:
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 fdf6 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f846 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 f9a8 	bl	8000f7c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c2c:	f007 fc6e 	bl	800850c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000c30:	f000 f8aa 	bl	8000d88 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000c34:	f000 f954 	bl	8000ee0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000c38:	4817      	ldr	r0, [pc, #92]	; (8000c98 <main+0x7c>)
 8000c3a:	f003 f881 	bl	8003d40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000c3e:	4817      	ldr	r0, [pc, #92]	; (8000c9c <main+0x80>)
 8000c40:	f003 f87e 	bl	8003d40 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c44:	2100      	movs	r1, #0
 8000c46:	4815      	ldr	r0, [pc, #84]	; (8000c9c <main+0x80>)
 8000c48:	f003 f936 	bl	8003eb8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4813      	ldr	r0, [pc, #76]	; (8000c9c <main+0x80>)
 8000c50:	f003 f932 	bl	8003eb8 <HAL_TIM_PWM_Start>

  // Store the frequency of PID loop
  PID_freq = HAL_RCC_GetSysClockFreq()/htim4.Init.Period;
 8000c54:	f002 ff52 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <main+0x7c>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <main+0x84>)
 8000c64:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10000);
 8000c66:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c6a:	f000 fe43 	bl	80018f4 <HAL_Delay>
	  CDC_Transmit_FS(usb_out,sizeof(usb_out));
 8000c6e:	2120      	movs	r1, #32
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <main+0x88>)
 8000c72:	f007 fd09 	bl	8008688 <CDC_Transmit_FS>
	  if((move_x == 0) && (move_y == -5)){
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <main+0x8c>)
 8000c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d1f2      	bne.n	8000c66 <main+0x4a>
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <main+0x90>)
 8000c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c86:	f113 0f05 	cmn.w	r3, #5
 8000c8a:	d1ec      	bne.n	8000c66 <main+0x4a>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <main+0x94>)
 8000c92:	f001 f91a 	bl	8001eca <HAL_GPIO_TogglePin>
	  HAL_Delay(10000);
 8000c96:	e7e6      	b.n	8000c66 <main+0x4a>
 8000c98:	200001ac 	.word	0x200001ac
 8000c9c:	20000164 	.word	0x20000164
 8000ca0:	200001f4 	.word	0x200001f4
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	200001f8 	.word	0x200001f8
 8000cac:	200001fa 	.word	0x200001fa
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b094      	sub	sp, #80	; 0x50
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	2230      	movs	r2, #48	; 0x30
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f008 f956 	bl	8008f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <SystemClock_Config+0xcc>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <SystemClock_Config+0xcc>)
 8000ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <SystemClock_Config+0xcc>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <SystemClock_Config+0xd0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d00:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <SystemClock_Config+0xd0>)
 8000d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <SystemClock_Config+0xd0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d14:	2301      	movs	r3, #1
 8000d16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d28:	2319      	movs	r3, #25
 8000d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000d2c:	23c0      	movs	r3, #192	; 0xc0
 8000d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d30:	2304      	movs	r3, #4
 8000d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d34:	2304      	movs	r3, #4
 8000d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d38:	f107 0320 	add.w	r3, r7, #32
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 fb7f 	bl	8003440 <HAL_RCC_OscConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d48:	f000 f9b8 	bl	80010bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d50:	2302      	movs	r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	2101      	movs	r1, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fde1 	bl	8003930 <HAL_RCC_ClockConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d74:	f000 f9a2 	bl	80010bc <Error_Handler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3750      	adds	r7, #80	; 0x50
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000

08000d88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b096      	sub	sp, #88	; 0x58
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f008 f8d7 	bl	8008f74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc6:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000dc8:	4a44      	ldr	r2, [pc, #272]	; (8000edc <MX_TIM1_Init+0x154>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dcc:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8000dd8:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000dda:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de6:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dec:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df2:	4839      	ldr	r0, [pc, #228]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000df4:	f002 ff54 	bl	8003ca0 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dfe:	f000 f95d 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4832      	ldr	r0, [pc, #200]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000e10:	f003 facc 	bl	80043ac <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e1a:	f000 f94f 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e1e:	482e      	ldr	r0, [pc, #184]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000e20:	f002 fff0 	bl	8003e04 <HAL_TIM_PWM_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e2a:	f000 f947 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000e3e:	f003 fe7b 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e48:	f000 f938 	bl	80010bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4c:	2360      	movs	r3, #96	; 0x60
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000e72:	f003 f9d9 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e7c:	f000 f91e 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	2204      	movs	r2, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4813      	ldr	r0, [pc, #76]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000e8a:	f003 f9cd 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e94:	f000 f912 	bl	80010bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000ebc:	f003 feaa 	bl	8004c14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000ec6:	f000 f8f9 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eca:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <MX_TIM1_Init+0x150>)
 8000ecc:	f000 f962 	bl	8001194 <HAL_TIM_MspPostInit>

}
 8000ed0:	bf00      	nop
 8000ed2:	3758      	adds	r7, #88	; 0x58
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000164 	.word	0x20000164
 8000edc:	40010000 	.word	0x40010000

08000ee0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000efe:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <MX_TIM4_Init+0x98>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f10:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000f14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f22:	4814      	ldr	r0, [pc, #80]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f24:	f002 febc 	bl	8003ca0 <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f2e:	f000 f8c5 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f40:	f003 fa34 	bl	80043ac <HAL_TIM_ConfigClockSource>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f4a:	f000 f8b7 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_TIM4_Init+0x94>)
 8000f5c:	f003 fdec 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f66:	f000 f8a9 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001ac 	.word	0x200001ac
 8000f78:	40000800 	.word	0x40000800

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b45      	ldr	r3, [pc, #276]	; (80010ac <MX_GPIO_Init+0x130>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a44      	ldr	r2, [pc, #272]	; (80010ac <MX_GPIO_Init+0x130>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b42      	ldr	r3, [pc, #264]	; (80010ac <MX_GPIO_Init+0x130>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <MX_GPIO_Init+0x130>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a3d      	ldr	r2, [pc, #244]	; (80010ac <MX_GPIO_Init+0x130>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <MX_GPIO_Init+0x130>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b37      	ldr	r3, [pc, #220]	; (80010ac <MX_GPIO_Init+0x130>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a36      	ldr	r2, [pc, #216]	; (80010ac <MX_GPIO_Init+0x130>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b34      	ldr	r3, [pc, #208]	; (80010ac <MX_GPIO_Init+0x130>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_GPIO_Init+0x130>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <MX_GPIO_Init+0x130>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <MX_GPIO_Init+0x130>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001008:	4829      	ldr	r0, [pc, #164]	; (80010b0 <MX_GPIO_Init+0x134>)
 800100a:	f000 ff45 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2178      	movs	r1, #120	; 0x78
 8001012:	4828      	ldr	r0, [pc, #160]	; (80010b4 <MX_GPIO_Init+0x138>)
 8001014:	f000 ff40 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ERROR_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	481f      	ldr	r0, [pc, #124]	; (80010b0 <MX_GPIO_Init+0x134>)
 8001032:	f000 fd95 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_A_Pin ENC2_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC2_A_Pin;
 8001036:	2305      	movs	r3, #5
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	481b      	ldr	r0, [pc, #108]	; (80010b8 <MX_GPIO_Init+0x13c>)
 800104c:	f000 fd88 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|ENC2_B_Pin;
 8001050:	230a      	movs	r3, #10
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4815      	ldr	r0, [pc, #84]	; (80010b8 <MX_GPIO_Init+0x13c>)
 8001064:	f000 fd7c 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_B_Pin IN2_A_Pin IN2_B_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin;
 8001068:	2378      	movs	r3, #120	; 0x78
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_GPIO_Init+0x138>)
 8001080:	f000 fd6e 	bl	8001b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2006      	movs	r0, #6
 800108a:	f000 fd32 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800108e:	2006      	movs	r0, #6
 8001090:	f000 fd4b 	bl	8001b2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2008      	movs	r0, #8
 800109a:	f000 fd2a 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800109e:	2008      	movs	r0, #8
 80010a0:	f000 fd43 	bl	8001b2a <HAL_NVIC_EnableIRQ>

}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020000 	.word	0x40020000

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <Error_Handler+0x8>
	...

080010c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_MspInit+0x4c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_MspInit+0x4c>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_MspInit+0x4c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_MspInit+0x4c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_MspInit+0x4c>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_MspInit+0x4c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <HAL_TIM_Base_MspInit+0x70>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10e      	bne.n	8001148 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001146:	e01a      	b.n	800117e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <HAL_TIM_Base_MspInit+0x78>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d115      	bne.n	800117e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_TIM_Base_MspInit+0x74>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	201e      	movs	r0, #30
 8001174:	f000 fcbd 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001178:	201e      	movs	r0, #30
 800117a:	f000 fcd6 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010000 	.word	0x40010000
 800118c:	40023800 	.word	0x40023800
 8001190:	40000800 	.word	0x40000800

08001194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a12      	ldr	r2, [pc, #72]	; (80011fc <HAL_TIM_MspPostInit+0x68>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d11e      	bne.n	80011f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_TIM_MspPostInit+0x70>)
 80011f0:	f000 fcb6 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40010000 	.word	0x40010000
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 fb2e 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	/* Check the direction of the first motor */
	if(HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 8001260:	2102      	movs	r1, #2
 8001262:	4811      	ldr	r0, [pc, #68]	; (80012a8 <EXTI0_IRQHandler+0x4c>)
 8001264:	f000 fe00 	bl	8001e68 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <EXTI0_IRQHandler+0x1e>
		/* Update the position of the first motor */
		enc1_pos ++;
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <EXTI0_IRQHandler+0x50>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <EXTI0_IRQHandler+0x50>)
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e004      	b.n	8001284 <EXTI0_IRQHandler+0x28>
	}else{
		enc1_pos --;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <EXTI0_IRQHandler+0x50>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3b01      	subs	r3, #1
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <EXTI0_IRQHandler+0x50>)
 8001282:	6013      	str	r3, [r2, #0]
	}
	enc1_pos_cm = (float)enc1_pos/(float)(GEAR_RATIO);
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <EXTI0_IRQHandler+0x50>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012b0 <EXTI0_IRQHandler+0x54>
 8001294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <EXTI0_IRQHandler+0x58>)
 800129a:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fe2e 	bl	8001f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40020000 	.word	0x40020000
 80012ac:	20000268 	.word	0x20000268
 80012b0:	42200000 	.word	0x42200000
 80012b4:	20000270 	.word	0x20000270

080012b8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	/* Check the direction of the second motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC2_B_Pin)){
 80012bc:	2108      	movs	r1, #8
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <EXTI2_IRQHandler+0x4c>)
 80012c0:	f000 fdd2 	bl	8001e68 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <EXTI2_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc2_pos ++;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <EXTI2_IRQHandler+0x50>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <EXTI2_IRQHandler+0x50>)
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e004      	b.n	80012e0 <EXTI2_IRQHandler+0x28>
		}else{
			enc2_pos --;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <EXTI2_IRQHandler+0x50>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3b01      	subs	r3, #1
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <EXTI2_IRQHandler+0x50>)
 80012de:	6013      	str	r3, [r2, #0]
		}
		enc2_pos_cm = (float)enc2_pos/(float)(GEAR_RATIO);
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <EXTI2_IRQHandler+0x50>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ec:	eddf 6a07 	vldr	s13, [pc, #28]	; 800130c <EXTI2_IRQHandler+0x54>
 80012f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <EXTI2_IRQHandler+0x58>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 80012fa:	2004      	movs	r0, #4
 80012fc:	f000 fe00 	bl	8001f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020000 	.word	0x40020000
 8001308:	2000026c 	.word	0x2000026c
 800130c:	42200000 	.word	0x42200000
 8001310:	20000274 	.word	0x20000274
 8001314:	00000000 	.word	0x00000000

08001318 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(error_code == 0 && external_shutdown == 0){
 800131e:	4bbc      	ldr	r3, [pc, #752]	; (8001610 <TIM4_IRQHandler+0x2f8>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f040 81a8 	bne.w	8001678 <TIM4_IRQHandler+0x360>
 8001328:	4bba      	ldr	r3, [pc, #744]	; (8001614 <TIM4_IRQHandler+0x2fc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f040 81a3 	bne.w	8001678 <TIM4_IRQHandler+0x360>

	/* Determine PID errors */
	float pos_error1 = mot1_set_pos - enc1_pos_cm;
 8001332:	4bb9      	ldr	r3, [pc, #740]	; (8001618 <TIM4_IRQHandler+0x300>)
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	4bb8      	ldr	r3, [pc, #736]	; (800161c <TIM4_IRQHandler+0x304>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001342:	edc7 7a03 	vstr	s15, [r7, #12]
	float pos_error2 = mot2_set_pos - enc2_pos_cm;
 8001346:	4bb6      	ldr	r3, [pc, #728]	; (8001620 <TIM4_IRQHandler+0x308>)
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	4bb5      	ldr	r3, [pc, #724]	; (8001624 <TIM4_IRQHandler+0x30c>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001356:	edc7 7a02 	vstr	s15, [r7, #8]

	float der_error1=(pos_error1-pre_pos_error1)*PID_freq;
 800135a:	4bb3      	ldr	r3, [pc, #716]	; (8001628 <TIM4_IRQHandler+0x310>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ed97 7a03 	vldr	s14, [r7, #12]
 8001364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001368:	4bb0      	ldr	r3, [pc, #704]	; (800162c <TIM4_IRQHandler+0x314>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001378:	edc7 7a01 	vstr	s15, [r7, #4]
	float der_error2=(pos_error2-pre_pos_error2)*PID_freq;
 800137c:	4bac      	ldr	r3, [pc, #688]	; (8001630 <TIM4_IRQHandler+0x318>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ed97 7a02 	vldr	s14, [r7, #8]
 8001386:	ee37 7a67 	vsub.f32	s14, s14, s15
 800138a:	4ba8      	ldr	r3, [pc, #672]	; (800162c <TIM4_IRQHandler+0x314>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800139a:	edc7 7a00 	vstr	s15, [r7]

	int_error1+=pos_error1/PID_freq;
 800139e:	4ba3      	ldr	r3, [pc, #652]	; (800162c <TIM4_IRQHandler+0x314>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013aa:	edd7 6a03 	vldr	s13, [r7, #12]
 80013ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013b2:	4ba0      	ldr	r3, [pc, #640]	; (8001634 <TIM4_IRQHandler+0x31c>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013bc:	4b9d      	ldr	r3, [pc, #628]	; (8001634 <TIM4_IRQHandler+0x31c>)
 80013be:	edc3 7a00 	vstr	s15, [r3]
	int_error2+=pos_error2/PID_freq;
 80013c2:	4b9a      	ldr	r3, [pc, #616]	; (800162c <TIM4_IRQHandler+0x314>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ce:	edd7 6a02 	vldr	s13, [r7, #8]
 80013d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013d6:	4b98      	ldr	r3, [pc, #608]	; (8001638 <TIM4_IRQHandler+0x320>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e0:	4b95      	ldr	r3, [pc, #596]	; (8001638 <TIM4_IRQHandler+0x320>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]

	pre_pos_error1=pos_error1;
 80013e6:	4a90      	ldr	r2, [pc, #576]	; (8001628 <TIM4_IRQHandler+0x310>)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6013      	str	r3, [r2, #0]
	pre_pos_error2=pos_error2;
 80013ec:	4a90      	ldr	r2, [pc, #576]	; (8001630 <TIM4_IRQHandler+0x318>)
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	6013      	str	r3, [r2, #0]

	/* Set the duty (only proportional implemented for now) */
	duty1 = (int)(kp1*pos_error1+kd1*der_error1+ki1*int_error1);
 80013f2:	4b92      	ldr	r3, [pc, #584]	; (800163c <TIM4_IRQHandler+0x324>)
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	4b8f      	ldr	r3, [pc, #572]	; (8001640 <TIM4_IRQHandler+0x328>)
 8001402:	edd3 6a00 	vldr	s13, [r3]
 8001406:	edd7 7a01 	vldr	s15, [r7, #4]
 800140a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001412:	4b8c      	ldr	r3, [pc, #560]	; (8001644 <TIM4_IRQHandler+0x32c>)
 8001414:	edd3 6a00 	vldr	s13, [r3]
 8001418:	4b86      	ldr	r3, [pc, #536]	; (8001634 <TIM4_IRQHandler+0x31c>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800142a:	ee17 2a90 	vmov	r2, s15
 800142e:	4b86      	ldr	r3, [pc, #536]	; (8001648 <TIM4_IRQHandler+0x330>)
 8001430:	601a      	str	r2, [r3, #0]
	duty2 = (int)(kp2*pos_error2+kd2*der_error2+ki2*int_error2);
 8001432:	4b86      	ldr	r3, [pc, #536]	; (800164c <TIM4_IRQHandler+0x334>)
 8001434:	ed93 7a00 	vldr	s14, [r3]
 8001438:	edd7 7a02 	vldr	s15, [r7, #8]
 800143c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001440:	4b83      	ldr	r3, [pc, #524]	; (8001650 <TIM4_IRQHandler+0x338>)
 8001442:	edd3 6a00 	vldr	s13, [r3]
 8001446:	edd7 7a00 	vldr	s15, [r7]
 800144a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001452:	4b80      	ldr	r3, [pc, #512]	; (8001654 <TIM4_IRQHandler+0x33c>)
 8001454:	edd3 6a00 	vldr	s13, [r3]
 8001458:	4b77      	ldr	r3, [pc, #476]	; (8001638 <TIM4_IRQHandler+0x320>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146a:	ee17 2a90 	vmov	r2, s15
 800146e:	4b7a      	ldr	r3, [pc, #488]	; (8001658 <TIM4_IRQHandler+0x340>)
 8001470:	601a      	str	r2, [r3, #0]

	/* Set the direction */
	if(duty1 > 0){
 8001472:	4b75      	ldr	r3, [pc, #468]	; (8001648 <TIM4_IRQHandler+0x330>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	dd0e      	ble.n	8001498 <TIM4_IRQHandler+0x180>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, HIGH);
 800147a:	4b78      	ldr	r3, [pc, #480]	; (800165c <TIM4_IRQHandler+0x344>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	2108      	movs	r1, #8
 8001482:	4877      	ldr	r0, [pc, #476]	; (8001660 <TIM4_IRQHandler+0x348>)
 8001484:	f000 fd08 	bl	8001e98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 8001488:	4b76      	ldr	r3, [pc, #472]	; (8001664 <TIM4_IRQHandler+0x34c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	2110      	movs	r1, #16
 8001490:	4873      	ldr	r0, [pc, #460]	; (8001660 <TIM4_IRQHandler+0x348>)
 8001492:	f000 fd01 	bl	8001e98 <HAL_GPIO_WritePin>
 8001496:	e012      	b.n	80014be <TIM4_IRQHandler+0x1a6>
	}
	else{
			duty1 = -duty1;
 8001498:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <TIM4_IRQHandler+0x330>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	425b      	negs	r3, r3
 800149e:	4a6a      	ldr	r2, [pc, #424]	; (8001648 <TIM4_IRQHandler+0x330>)
 80014a0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, HIGH);
 80014a2:	4b6e      	ldr	r3, [pc, #440]	; (800165c <TIM4_IRQHandler+0x344>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	2110      	movs	r1, #16
 80014aa:	486d      	ldr	r0, [pc, #436]	; (8001660 <TIM4_IRQHandler+0x348>)
 80014ac:	f000 fcf4 	bl	8001e98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 80014b0:	4b6c      	ldr	r3, [pc, #432]	; (8001664 <TIM4_IRQHandler+0x34c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	2108      	movs	r1, #8
 80014b8:	4869      	ldr	r0, [pc, #420]	; (8001660 <TIM4_IRQHandler+0x348>)
 80014ba:	f000 fced 	bl	8001e98 <HAL_GPIO_WritePin>
	}
	if(duty2 > 0){
 80014be:	4b66      	ldr	r3, [pc, #408]	; (8001658 <TIM4_IRQHandler+0x340>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	dd0e      	ble.n	80014e4 <TIM4_IRQHandler+0x1cc>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, HIGH);
 80014c6:	4b65      	ldr	r3, [pc, #404]	; (800165c <TIM4_IRQHandler+0x344>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	2120      	movs	r1, #32
 80014ce:	4864      	ldr	r0, [pc, #400]	; (8001660 <TIM4_IRQHandler+0x348>)
 80014d0:	f000 fce2 	bl	8001e98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, LOW);
 80014d4:	4b63      	ldr	r3, [pc, #396]	; (8001664 <TIM4_IRQHandler+0x34c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	2140      	movs	r1, #64	; 0x40
 80014dc:	4860      	ldr	r0, [pc, #384]	; (8001660 <TIM4_IRQHandler+0x348>)
 80014de:	f000 fcdb 	bl	8001e98 <HAL_GPIO_WritePin>
 80014e2:	e012      	b.n	800150a <TIM4_IRQHandler+0x1f2>
	}
	else{
			duty2 = -duty2;
 80014e4:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <TIM4_IRQHandler+0x340>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	425b      	negs	r3, r3
 80014ea:	4a5b      	ldr	r2, [pc, #364]	; (8001658 <TIM4_IRQHandler+0x340>)
 80014ec:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, HIGH);
 80014ee:	4b5b      	ldr	r3, [pc, #364]	; (800165c <TIM4_IRQHandler+0x344>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	2140      	movs	r1, #64	; 0x40
 80014f6:	485a      	ldr	r0, [pc, #360]	; (8001660 <TIM4_IRQHandler+0x348>)
 80014f8:	f000 fcce 	bl	8001e98 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, LOW);
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <TIM4_IRQHandler+0x34c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	2120      	movs	r1, #32
 8001504:	4856      	ldr	r0, [pc, #344]	; (8001660 <TIM4_IRQHandler+0x348>)
 8001506:	f000 fcc7 	bl	8001e98 <HAL_GPIO_WritePin>
	}

	/* Limit the duty */
	if(duty1 > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <TIM4_IRQHandler+0x330>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f8e8 	bl	80006e4 <__aeabi_i2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <TIM4_IRQHandler+0x350>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f8d0 	bl	80006c4 <__aeabi_ui2d>
 8001524:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <TIM4_IRQHandler+0x2f0>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7fe fe5f 	bl	80001ec <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4620      	mov	r0, r4
 8001534:	4629      	mov	r1, r5
 8001536:	f7ff f9bd 	bl	80008b4 <__aeabi_dcmpgt>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <TIM4_IRQHandler+0x250>
			duty1 = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001540:	4b49      	ldr	r3, [pc, #292]	; (8001668 <TIM4_IRQHandler+0x350>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	3301      	adds	r3, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f8bc 	bl	80006c4 <__aeabi_ui2d>
 800154c:	a32e      	add	r3, pc, #184	; (adr r3, 8001608 <TIM4_IRQHandler+0x2f0>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7fe fe4b 	bl	80001ec <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff f9b3 	bl	80008c8 <__aeabi_d2iz>
 8001562:	4603      	mov	r3, r0
 8001564:	4a38      	ldr	r2, [pc, #224]	; (8001648 <TIM4_IRQHandler+0x330>)
 8001566:	6013      	str	r3, [r2, #0]
		}
	if(duty2 > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <TIM4_IRQHandler+0x340>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f8b9 	bl	80006e4 <__aeabi_i2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <TIM4_IRQHandler+0x350>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	3301      	adds	r3, #1
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff f8a1 	bl	80006c4 <__aeabi_ui2d>
 8001582:	a321      	add	r3, pc, #132	; (adr r3, 8001608 <TIM4_IRQHandler+0x2f0>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7fe fe30 	bl	80001ec <__aeabi_dmul>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4620      	mov	r0, r4
 8001592:	4629      	mov	r1, r5
 8001594:	f7ff f98e 	bl	80008b4 <__aeabi_dcmpgt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d013      	beq.n	80015c6 <TIM4_IRQHandler+0x2ae>
			duty2 = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <TIM4_IRQHandler+0x350>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff f88d 	bl	80006c4 <__aeabi_ui2d>
 80015aa:	a317      	add	r3, pc, #92	; (adr r3, 8001608 <TIM4_IRQHandler+0x2f0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7fe fe1c 	bl	80001ec <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff f984 	bl	80008c8 <__aeabi_d2iz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a25      	ldr	r2, [pc, #148]	; (8001658 <TIM4_IRQHandler+0x340>)
 80015c4:	6013      	str	r3, [r2, #0]
		}

	TIM1->CCR1 = duty1;
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <TIM4_IRQHandler+0x330>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <TIM4_IRQHandler+0x354>)
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = duty2;
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <TIM4_IRQHandler+0x340>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <TIM4_IRQHandler+0x354>)
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38

	// Send acknowledge if the system reaches steady state
	if (ack_to_be_sent == 1 && pos_error1 == 0){
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <TIM4_IRQHandler+0x358>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d10e      	bne.n	80015fc <TIM4_IRQHandler+0x2e4>
 80015de:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	d107      	bne.n	80015fc <TIM4_IRQHandler+0x2e4>
		steady_state_counter++;
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <TIM4_IRQHandler+0x35c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <TIM4_IRQHandler+0x35c>)
 80015f6:	701a      	strb	r2, [r3, #0]
		if(steady_state_counter == 1){
			//forward_kinematics();
		}

		if (steady_state_counter == 255){
 80015f8:	bf00      	nop
	if(error_code == 0 && external_shutdown == 0){
 80015fa:	e051      	b.n	80016a0 <TIM4_IRQHandler+0x388>
			// forward_kinematics(); X_curr should be updated above, as soon as pos_error1 = 0 !!!
		}
	}
	else {
		steady_state_counter = 0;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <TIM4_IRQHandler+0x35c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
	if(error_code == 0 && external_shutdown == 0){
 8001602:	e04d      	b.n	80016a0 <TIM4_IRQHandler+0x388>
 8001604:	f3af 8000 	nop.w
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	20000204 	.word	0x20000204
 8001614:	20000205 	.word	0x20000205
 8001618:	20000278 	.word	0x20000278
 800161c:	20000270 	.word	0x20000270
 8001620:	2000027c 	.word	0x2000027c
 8001624:	20000274 	.word	0x20000274
 8001628:	20000280 	.word	0x20000280
 800162c:	200001f4 	.word	0x200001f4
 8001630:	20000284 	.word	0x20000284
 8001634:	20000288 	.word	0x20000288
 8001638:	2000028c 	.word	0x2000028c
 800163c:	20000040 	.word	0x20000040
 8001640:	20000294 	.word	0x20000294
 8001644:	20000290 	.word	0x20000290
 8001648:	200002a0 	.word	0x200002a0
 800164c:	20000044 	.word	0x20000044
 8001650:	2000029c 	.word	0x2000029c
 8001654:	20000298 	.word	0x20000298
 8001658:	200002a4 	.word	0x200002a4
 800165c:	20000048 	.word	0x20000048
 8001660:	40020400 	.word	0x40020400
 8001664:	200002a8 	.word	0x200002a8
 8001668:	20000164 	.word	0x20000164
 800166c:	40010000 	.word	0x40010000
 8001670:	20000206 	.word	0x20000206
 8001674:	20000207 	.word	0x20000207
	}

	}
	else{
		TIM1->CCR1 = 0;
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <TIM4_IRQHandler+0x398>)
 800167a:	2200      	movs	r2, #0
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <TIM4_IRQHandler+0x398>)
 8001680:	2200      	movs	r2, #0
 8001682:	639a      	str	r2, [r3, #56]	; 0x38
		memcpy(&usb_out, &error_message, sizeof(usb_out));
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <TIM4_IRQHandler+0x39c>)
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <TIM4_IRQHandler+0x3a0>)
 8001688:	4614      	mov	r4, r2
 800168a:	461d      	mov	r5, r3
 800168c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001690:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 8001698:	2120      	movs	r1, #32
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <TIM4_IRQHandler+0x39c>)
 800169c:	f006 fff4 	bl	8008688 <CDC_Transmit_FS>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016a0:	4806      	ldr	r0, [pc, #24]	; (80016bc <TIM4_IRQHandler+0x3a4>)
 80016a2:	f002 fcb9 	bl	8004018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bdb0      	pop	{r4, r5, r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010000 	.word	0x40010000
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000020 	.word	0x20000020
 80016bc:	200001ac 	.word	0x200001ac

080016c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

	CDC_Receive_FS(usb_temp,sizeof(usb_temp));
 80016c4:	2120      	movs	r1, #32
 80016c6:	482a      	ldr	r0, [pc, #168]	; (8001770 <OTG_FS_IRQHandler+0xb0>)
 80016c8:	f006 ffca 	bl	8008660 <CDC_Receive_FS>

	if(strcmp((char *)usb_temp, (char *)empty_string) != 0){
 80016cc:	4929      	ldr	r1, [pc, #164]	; (8001774 <OTG_FS_IRQHandler+0xb4>)
 80016ce:	4828      	ldr	r0, [pc, #160]	; (8001770 <OTG_FS_IRQHandler+0xb0>)
 80016d0:	f7fe fd82 	bl	80001d8 <strcmp>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d040      	beq.n	800175c <OTG_FS_IRQHandler+0x9c>
		// Store the data in usb_in array if a non-empty message received
		memcpy(&usb_in, &usb_temp, sizeof(usb_in));
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <OTG_FS_IRQHandler+0xb8>)
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <OTG_FS_IRQHandler+0xb0>)
 80016de:	4614      	mov	r4, r2
 80016e0:	461d      	mov	r5, r3
 80016e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		/* Parsing USB Message*/
		if(usb_in[0] == 'm'){
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <OTG_FS_IRQHandler+0xb8>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b6d      	cmp	r3, #109	; 0x6d
 80016f4:	d12b      	bne.n	800174e <OTG_FS_IRQHandler+0x8e>
			// Since STM32 byte size is 16 bits, there isn't a real uint8_t type
			// We manually do big endian storage, and manually decode them below here
			move_x = usb_in[1]*256 + usb_in[2];
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <OTG_FS_IRQHandler+0xb8>)
 80016f8:	785b      	ldrb	r3, [r3, #1]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <OTG_FS_IRQHandler+0xb8>)
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	b29b      	uxth	r3, r3
 8001706:	4413      	add	r3, r2
 8001708:	b29b      	uxth	r3, r3
 800170a:	b21a      	sxth	r2, r3
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <OTG_FS_IRQHandler+0xbc>)
 800170e:	801a      	strh	r2, [r3, #0]
			move_y = usb_in[3]*256 + usb_in[4];
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <OTG_FS_IRQHandler+0xb8>)
 8001712:	78db      	ldrb	r3, [r3, #3]
 8001714:	b29b      	uxth	r3, r3
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <OTG_FS_IRQHandler+0xb8>)
 800171c:	791b      	ldrb	r3, [r3, #4]
 800171e:	b29b      	uxth	r3, r3
 8001720:	4413      	add	r3, r2
 8001722:	b29b      	uxth	r3, r3
 8001724:	b21a      	sxth	r2, r3
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <OTG_FS_IRQHandler+0xc0>)
 8001728:	801a      	strh	r2, [r3, #0]
			usb_in[4] = move_y%256;
			usb_in[5] = '\n';
			CDC_Transmit_FS(usb_in,sizeof(usb_in));
			*/

			Y_ref = Y_curr + move_y;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <OTG_FS_IRQHandler+0xc0>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <OTG_FS_IRQHandler+0xc4>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <OTG_FS_IRQHandler+0xc8>)
 8001744:	edc3 7a00 	vstr	s15, [r3]

			ack_to_be_sent = 1;
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <OTG_FS_IRQHandler+0xcc>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]

		}

		if(usb_in[0] == 's'){
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <OTG_FS_IRQHandler+0xb8>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b73      	cmp	r3, #115	; 0x73
 8001754:	d102      	bne.n	800175c <OTG_FS_IRQHandler+0x9c>
			external_shutdown = 1;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <OTG_FS_IRQHandler+0xd0>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
		}

	}

	// Clear usb_temp array
	memset(usb_temp, 0, sizeof(usb_temp));
 800175c:	2220      	movs	r2, #32
 800175e:	2100      	movs	r1, #0
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <OTG_FS_IRQHandler+0xb0>)
 8001762:	f007 fc07 	bl	8008f74 <memset>

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001766:	480b      	ldr	r0, [pc, #44]	; (8001794 <OTG_FS_IRQHandler+0xd4>)
 8001768:	f000 fd3d 	bl	80021e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bdb0      	pop	{r4, r5, r7, pc}
 8001770:	20000228 	.word	0x20000228
 8001774:	20000248 	.word	0x20000248
 8001778:	20000208 	.word	0x20000208
 800177c:	200001f8 	.word	0x200001f8
 8001780:	200001fa 	.word	0x200001fa
 8001784:	20000200 	.word	0x20000200
 8001788:	200001fc 	.word	0x200001fc
 800178c:	20000206 	.word	0x20000206
 8001790:	20000205 	.word	0x20000205
 8001794:	20000f90 	.word	0x20000f90

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c2:	490e      	ldr	r1, [pc, #56]	; (80017fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d8:	4c0b      	ldr	r4, [pc, #44]	; (8001808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e6:	f7ff ffd7 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f007 fb9f 	bl	8008f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fa15 	bl	8000c1c <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8001800:	08009004 	.word	0x08009004
  ldr r2, =_sbss
 8001804:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8001808:	200016bc 	.word	0x200016bc

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 f94f 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f000 f808 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fc40 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f967 	bl	8001b46 <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f92f 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	2000004c 	.word	0x2000004c
 80018ac:	20000054 	.word	0x20000054
 80018b0:	20000050 	.word	0x20000050

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000054 	.word	0x20000054
 80018d8:	200002ac 	.word	0x200002ac

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200002ac 	.word	0x200002ac

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000054 	.word	0x20000054

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	db0b      	blt.n	80019ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	f003 021f 	and.w	r2, r3, #31
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <__NVIC_EnableIRQ+0x38>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	2001      	movs	r0, #1
 80019c2:	fa00 f202 	lsl.w	r2, r0, r2
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff29 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff3e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff31 	bl	80019a0 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e159      	b.n	8001e30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	f040 8148 	bne.w	8001e2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d005      	beq.n	8001bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d130      	bne.n	8001c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be8:	2201      	movs	r2, #1
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	091b      	lsrs	r3, r3, #4
 8001bfe:	f003 0201 	and.w	r2, r3, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d017      	beq.n	8001c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d123      	bne.n	8001ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	08da      	lsrs	r2, r3, #3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3208      	adds	r2, #8
 8001c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	220f      	movs	r2, #15
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	08da      	lsrs	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3208      	adds	r2, #8
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0203 	and.w	r2, r3, #3
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80a2 	beq.w	8001e2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a56      	ldr	r2, [pc, #344]	; (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d02:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a49      	ldr	r2, [pc, #292]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x202>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a48      	ldr	r2, [pc, #288]	; (8001e54 <HAL_GPIO_Init+0x2f4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x1fe>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a47      	ldr	r2, [pc, #284]	; (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <HAL_GPIO_Init+0x2fc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x1f6>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a45      	ldr	r2, [pc, #276]	; (8001e60 <HAL_GPIO_Init+0x300>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x1f2>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e008      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e006      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e004      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d62:	2300      	movs	r3, #0
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	f002 0203 	and.w	r2, r2, #3
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	4093      	lsls	r3, r2
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d74:	4935      	ldr	r1, [pc, #212]	; (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	089b      	lsrs	r3, r3, #2
 8001d7a:	3302      	adds	r3, #2
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da6:	4a2f      	ldr	r2, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd0:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e24:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <HAL_GPIO_Init+0x304>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b0f      	cmp	r3, #15
 8001e34:	f67f aea2 	bls.w	8001b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40020400 	.word	0x40020400
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001edc:	887a      	ldrh	r2, [r7, #2]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	041a      	lsls	r2, r3, #16
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	887b      	ldrh	r3, [r7, #2]
 8001eea:	400b      	ands	r3, r1
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	619a      	str	r2, [r3, #24]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d006      	beq.n	8001f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f806 	bl	8001f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f48:	b08f      	sub	sp, #60	; 0x3c
 8001f4a:	af0a      	add	r7, sp, #40	; 0x28
 8001f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e10f      	b.n	8002178 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f006 fcd0 	bl	8008918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 ffb7 	bl	8004f0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	687e      	ldr	r6, [r7, #4]
 8001fa4:	466d      	mov	r5, sp
 8001fa6:	f106 0410 	add.w	r4, r6, #16
 8001faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fba:	1d33      	adds	r3, r6, #4
 8001fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f002 fe8e 	bl	8004ce0 <USB_CoreInit>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0d0      	b.n	8002178 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 ffa5 	bl	8004f2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e04a      	b.n	800207e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	333d      	adds	r3, #61	; 0x3d
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	333c      	adds	r3, #60	; 0x3c
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	b298      	uxth	r0, r3
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3344      	adds	r3, #68	; 0x44
 8002024:	4602      	mov	r2, r0
 8002026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3340      	adds	r3, #64	; 0x40
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3348      	adds	r3, #72	; 0x48
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	334c      	adds	r3, #76	; 0x4c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3354      	adds	r3, #84	; 0x54
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	3301      	adds	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d3af      	bcc.n	8001fe8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e044      	b.n	8002118 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	3301      	adds	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3b5      	bcc.n	800208e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	687e      	ldr	r6, [r7, #4]
 800212a:	466d      	mov	r5, sp
 800212c:	f106 0410 	add.w	r4, r6, #16
 8002130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002140:	1d33      	adds	r3, r6, #4
 8002142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002144:	6838      	ldr	r0, [r7, #0]
 8002146:	f002 ff3d 	bl	8004fc4 <USB_DevInit>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e00d      	b.n	8002178 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f004 f88c 	bl	800628e <USB_DevDisconnect>

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002180 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_PCD_Start+0x1c>
 8002198:	2302      	movs	r3, #2
 800219a:	e020      	b.n	80021de <HAL_PCD_Start+0x5e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d109      	bne.n	80021c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d005      	beq.n	80021c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 fe8f 	bl	8004ee8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 f83c 	bl	800624c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021e6:	b590      	push	{r4, r7, lr}
 80021e8:	b08d      	sub	sp, #52	; 0x34
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 f8fa 	bl	80063f6 <USB_GetMode>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 848a 	bne.w	8002b1e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f004 f85e 	bl	80062d0 <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8480 	beq.w	8002b1c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f004 f84b 	bl	80062d0 <USB_ReadInterrupts>
 800223a:	4603      	mov	r3, r0
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d107      	bne.n	8002254 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f002 0202 	and.w	r2, r2, #2
 8002252:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f004 f839 	bl	80062d0 <USB_ReadInterrupts>
 800225e:	4603      	mov	r3, r0
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b10      	cmp	r3, #16
 8002266:	d161      	bne.n	800232c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0210 	bic.w	r2, r2, #16
 8002276:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	f003 020f 	and.w	r2, r3, #15
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	3304      	adds	r3, #4
 8002296:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	0c5b      	lsrs	r3, r3, #17
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d124      	bne.n	80022ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d035      	beq.n	800231c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	091b      	lsrs	r3, r3, #4
 80022b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	6a38      	ldr	r0, [r7, #32]
 80022c4:	f003 fe70 	bl	8005fa8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d4:	441a      	add	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	6a1a      	ldr	r2, [r3, #32]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e6:	441a      	add	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	621a      	str	r2, [r3, #32]
 80022ec:	e016      	b.n	800231c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	0c5b      	lsrs	r3, r3, #17
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d110      	bne.n	800231c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002300:	2208      	movs	r2, #8
 8002302:	4619      	mov	r1, r3
 8002304:	6a38      	ldr	r0, [r7, #32]
 8002306:	f003 fe4f 	bl	8005fa8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	6a1a      	ldr	r2, [r3, #32]
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002316:	441a      	add	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0210 	orr.w	r2, r2, #16
 800232a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f003 ffcd 	bl	80062d0 <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800233c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002340:	f040 80a7 	bne.w	8002492 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f003 ffd2 	bl	80062f6 <USB_ReadDevAllOutEpInterrupt>
 8002352:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002354:	e099      	b.n	800248a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 808e 	beq.w	800247e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fff6 	bl	800635e <USB_ReadDevOutEPInterrupt>
 8002372:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238a:	461a      	mov	r2, r3
 800238c:	2301      	movs	r3, #1
 800238e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fec2 	bl	800311c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ae:	461a      	mov	r2, r3
 80023b0:	2308      	movs	r3, #8
 80023b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 ff98 	bl	80032ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d2:	461a      	mov	r2, r3
 80023d4:	2310      	movs	r3, #16
 80023d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d030      	beq.n	8002444 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b80      	cmp	r3, #128	; 0x80
 80023ec:	d109      	bne.n	8002402 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002400:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	4413      	add	r3, r2
 8002414:	3304      	adds	r3, #4
 8002416:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	78db      	ldrb	r3, [r3, #3]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d108      	bne.n	8002432 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2200      	movs	r2, #0
 8002424:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	b2db      	uxtb	r3, r3
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f006 fb6f 	bl	8008b10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243e:	461a      	mov	r2, r3
 8002440:	2302      	movs	r3, #2
 8002442:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d008      	beq.n	8002460 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245a:	461a      	mov	r2, r3
 800245c:	2320      	movs	r3, #32
 800245e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002476:	461a      	mov	r2, r3
 8002478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	3301      	adds	r3, #1
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	f47f af62 	bne.w	8002356 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f003 ff1a 	bl	80062d0 <USB_ReadInterrupts>
 800249c:	4603      	mov	r3, r0
 800249e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024a6:	f040 80db 	bne.w	8002660 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 ff3b 	bl	800632a <USB_ReadDevAllInEpInterrupt>
 80024b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80024ba:	e0cd      	b.n	8002658 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80c2 	beq.w	800264c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 ff61 	bl	800639a <USB_ReadDevInEPInterrupt>
 80024d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d057      	beq.n	8002594 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	2201      	movs	r2, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69f9      	ldr	r1, [r7, #28]
 8002500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002504:	4013      	ands	r3, r2
 8002506:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002514:	461a      	mov	r2, r3
 8002516:	2301      	movs	r3, #1
 8002518:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d132      	bne.n	8002588 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	334c      	adds	r3, #76	; 0x4c
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4403      	add	r3, r0
 8002542:	3348      	adds	r3, #72	; 0x48
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4419      	add	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4403      	add	r3, r0
 8002556:	334c      	adds	r3, #76	; 0x4c
 8002558:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d113      	bne.n	8002588 <HAL_PCD_IRQHandler+0x3a2>
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3354      	adds	r3, #84	; 0x54
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d108      	bne.n	8002588 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002580:	461a      	mov	r2, r3
 8002582:	2101      	movs	r1, #1
 8002584:	f003 ff68 	bl	8006458 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	b2db      	uxtb	r3, r3
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f006 fa43 	bl	8008a1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025aa:	461a      	mov	r2, r3
 80025ac:	2308      	movs	r3, #8
 80025ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025c6:	461a      	mov	r2, r3
 80025c8:	2310      	movs	r3, #16
 80025ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025e2:	461a      	mov	r2, r3
 80025e4:	2340      	movs	r3, #64	; 0x40
 80025e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d023      	beq.n	800263a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f4:	6a38      	ldr	r0, [r7, #32]
 80025f6:	f002 fe49 	bl	800528c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	3338      	adds	r3, #56	; 0x38
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	3304      	adds	r3, #4
 800260c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	78db      	ldrb	r3, [r3, #3]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2200      	movs	r2, #0
 800261a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f006 fa86 	bl	8008b34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002634:	461a      	mov	r2, r3
 8002636:	2302      	movs	r3, #2
 8002638:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fcdb 	bl	8003002 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	3301      	adds	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	f47f af2e 	bne.w	80024bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 fe33 	bl	80062d0 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002674:	d122      	bne.n	80026bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800269c:	2100      	movs	r1, #0
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fec2 	bl	8003428 <HAL_PCDEx_LPM_Callback>
 80026a4:	e002      	b.n	80026ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f006 fa24 	bl	8008af4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 fe05 	bl	80062d0 <USB_ReadInterrupts>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d0:	d112      	bne.n	80026f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f006 f9e0 	bl	8008aa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 fde7 	bl	80062d0 <USB_ReadInterrupts>
 8002702:	4603      	mov	r3, r0
 8002704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270c:	f040 80b7 	bne.w	800287e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2110      	movs	r1, #16
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fdae 	bl	800528c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002734:	e046      	b.n	80027c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002742:	461a      	mov	r2, r3
 8002744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002748:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275a:	0151      	lsls	r1, r2, #5
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	440a      	add	r2, r1
 8002760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002764:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002768:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002776:	461a      	mov	r2, r3
 8002778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800277c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	4413      	add	r3, r2
 8002786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278e:	0151      	lsls	r1, r2, #5
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	440a      	add	r2, r1
 8002794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800279c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ae:	0151      	lsls	r1, r2, #5
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	440a      	add	r2, r1
 80027b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	3301      	adds	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d3b3      	bcc.n	8002736 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fa:	f043 030b 	orr.w	r3, r3, #11
 80027fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002810:	f043 030b 	orr.w	r3, r3, #11
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	e015      	b.n	8002844 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800282a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800282e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283e:	f043 030b 	orr.w	r3, r3, #11
 8002842:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002852:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002856:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002868:	461a      	mov	r2, r3
 800286a:	f003 fdf5 	bl	8006458 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800287c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f003 fd24 	bl	80062d0 <USB_ReadInterrupts>
 8002888:	4603      	mov	r3, r0
 800288a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	d124      	bne.n	80028de <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f003 fdba 	bl	8006412 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fd6f 	bl	8005386 <USB_GetDevSpeed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681c      	ldr	r4, [r3, #0]
 80028b4:	f001 f9e8 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 80028b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f002 fa6e 	bl	8004da4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f006 f8ce 	bl	8008a6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695a      	ldr	r2, [r3, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fcf4 	bl	80062d0 <USB_ReadInterrupts>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d10a      	bne.n	8002908 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f006 f8ab 	bl	8008a4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f002 0208 	and.w	r2, r2, #8
 8002906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fcdf 	bl	80062d0 <USB_ReadInterrupts>
 8002912:	4603      	mov	r3, r0
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d122      	bne.n	8002962 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002928:	2301      	movs	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e014      	b.n	8002958 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002932:	4613      	mov	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d105      	bne.n	8002952 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	b2db      	uxtb	r3, r3
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fb27 	bl	8002fa0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	3301      	adds	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295e:	429a      	cmp	r2, r3
 8002960:	d3e5      	bcc.n	800292e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f003 fcb2 	bl	80062d0 <USB_ReadInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002976:	d13b      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002978:	2301      	movs	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	e02b      	b.n	80029d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3340      	adds	r3, #64	; 0x40
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d115      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	da12      	bge.n	80029d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	333f      	adds	r3, #63	; 0x3f
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fae8 	bl	8002fa0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	3301      	adds	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	429a      	cmp	r2, r3
 80029de:	d3ce      	bcc.n	800297e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fc6b 	bl	80062d0 <USB_ReadInterrupts>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a04:	d155      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a06:	2301      	movs	r3, #1
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	e045      	b.n	8002a98 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d12e      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	da2b      	bge.n	8002a92 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d121      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8e:	6053      	str	r3, [r2, #4]
            break;
 8002a90:	e007      	b.n	8002aa2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3301      	adds	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d3b4      	bcc.n	8002a0c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 fc0a 	bl	80062d0 <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d10a      	bne.n	8002ade <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f006 f845 	bl	8008b58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 fbf4 	bl	80062d0 <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d115      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f006 f835 	bl	8008b74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e000      	b.n	8002b1e <HAL_PCD_IRQHandler+0x938>
      return;
 8002b1c:	bf00      	nop
    }
  }
}
 8002b1e:	3734      	adds	r7, #52	; 0x34
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd90      	pop	{r4, r7, pc}

08002b24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_PCD_SetAddress+0x1a>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e013      	b.n	8002b66 <HAL_PCD_SetAddress+0x42>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fb52 	bl	8006200 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	4608      	mov	r0, r1
 8002b78:	4611      	mov	r1, r2
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	70fb      	strb	r3, [r7, #3]
 8002b80:	460b      	mov	r3, r1
 8002b82:	803b      	strh	r3, [r7, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	da0f      	bge.n	8002bb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	f003 020f 	and.w	r2, r3, #15
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	3338      	adds	r3, #56	; 0x38
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	705a      	strb	r2, [r3, #1]
 8002bb2:	e00f      	b.n	8002bd4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002be0:	883a      	ldrh	r2, [r7, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	78ba      	ldrb	r2, [r7, #2]
 8002bea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	785b      	ldrb	r3, [r3, #1]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bfe:	78bb      	ldrb	r3, [r7, #2]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d102      	bne.n	8002c0a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_EP_Open+0xaa>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e00e      	b.n	8002c36 <HAL_PCD_EP_Open+0xc8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 fbd2 	bl	80053d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002c34:	7afb      	ldrb	r3, [r7, #11]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	da0f      	bge.n	8002c72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 020f 	and.w	r2, r3, #15
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	3338      	adds	r3, #56	; 0x38
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	705a      	strb	r2, [r3, #1]
 8002c70:	e00f      	b.n	8002c92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	3304      	adds	r3, #4
 8002c8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_EP_Close+0x6e>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e00e      	b.n	8002cca <HAL_PCD_EP_Close+0x8c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68f9      	ldr	r1, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 fc10 	bl	80054e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2200      	movs	r2, #0
 8002d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	6979      	ldr	r1, [r7, #20]
 8002d46:	f002 feef 	bl	8005b28 <USB_EP0StartXfer>
 8002d4a:	e008      	b.n	8002d5e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	6979      	ldr	r1, [r7, #20]
 8002d5a:	f002 fc9d 	bl	8005698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	f003 020f 	and.w	r2, r3, #15
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d8a:	681b      	ldr	r3, [r3, #0]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	460b      	mov	r3, r1
 8002da6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da8:	7afb      	ldrb	r3, [r7, #11]
 8002daa:	f003 020f 	and.w	r2, r3, #15
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	3338      	adds	r3, #56	; 0x38
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd8:	7afb      	ldrb	r3, [r7, #11]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002df2:	7afb      	ldrb	r3, [r7, #11]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	6979      	ldr	r1, [r7, #20]
 8002e0a:	f002 fe8d 	bl	8005b28 <USB_EP0StartXfer>
 8002e0e:	e008      	b.n	8002e22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6979      	ldr	r1, [r7, #20]
 8002e1e:	f002 fc3b 	bl	8005698 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	f003 020f 	and.w	r2, r3, #15
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d901      	bls.n	8002e4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e050      	b.n	8002eec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da0f      	bge.n	8002e72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	f003 020f 	and.w	r2, r3, #15
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	3338      	adds	r3, #56	; 0x38
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	3304      	adds	r3, #4
 8002e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	705a      	strb	r2, [r3, #1]
 8002e70:	e00d      	b.n	8002e8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_PCD_EP_SetStall+0x82>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e01e      	b.n	8002eec <HAL_PCD_EP_SetStall+0xc0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68f9      	ldr	r1, [r7, #12]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 f8cb 	bl	8006058 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10a      	bne.n	8002ee2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	b2d9      	uxtb	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002edc:	461a      	mov	r2, r3
 8002ede:	f003 fabb 	bl	8006458 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d901      	bls.n	8002f12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e042      	b.n	8002f98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da0f      	bge.n	8002f3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	3338      	adds	r3, #56	; 0x38
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
 8002f38:	e00f      	b.n	8002f5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 020f 	and.w	r2, r3, #15
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_PCD_EP_ClrStall+0x86>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e00e      	b.n	8002f98 <HAL_PCD_EP_ClrStall+0xa4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 f8d3 	bl	8006134 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	da0c      	bge.n	8002fce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	f003 020f 	and.w	r2, r3, #15
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	3338      	adds	r3, #56	; 0x38
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3304      	adds	r3, #4
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e00c      	b.n	8002fe8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	f003 020f 	and.w	r2, r3, #15
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68f9      	ldr	r1, [r7, #12]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 fef2 	bl	8005dd8 <USB_EPStopXfer>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b08a      	sub	sp, #40	; 0x28
 8003006:	af02      	add	r7, sp, #8
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	3338      	adds	r3, #56	; 0x38
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	3304      	adds	r3, #4
 8003028:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1a      	ldr	r2, [r3, #32]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	429a      	cmp	r2, r3
 8003034:	d901      	bls.n	800303a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06c      	b.n	8003114 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	429a      	cmp	r2, r3
 800304e:	d902      	bls.n	8003056 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3303      	adds	r3, #3
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800305e:	e02b      	b.n	80030b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	429a      	cmp	r2, r3
 8003074:	d902      	bls.n	800307c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	3303      	adds	r3, #3
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6919      	ldr	r1, [r3, #16]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003094:	b2db      	uxtb	r3, r3
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	4603      	mov	r3, r0
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f002 ff46 	bl	8005f2c <USB_WritePacket>

    ep->xfer_buff  += len;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	441a      	add	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	441a      	add	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d809      	bhi.n	80030e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1a      	ldr	r2, [r3, #32]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d203      	bcs.n	80030e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1be      	bne.n	8003060 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d811      	bhi.n	8003112 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	2201      	movs	r2, #1
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	43db      	mvns	r3, r3
 8003108:	6939      	ldr	r1, [r7, #16]
 800310a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800310e:	4013      	ands	r3, r2
 8003110:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	333c      	adds	r3, #60	; 0x3c
 8003134:	3304      	adds	r3, #4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d17b      	bne.n	800324a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d015      	beq.n	8003188 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	4a61      	ldr	r2, [pc, #388]	; (80032e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	f240 80b9 	bls.w	80032d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80b3 	beq.w	80032d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317e:	461a      	mov	r2, r3
 8003180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003184:	6093      	str	r3, [r2, #8]
 8003186:	e0a7      	b.n	80032d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	461a      	mov	r2, r3
 80031a0:	2320      	movs	r3, #32
 80031a2:	6093      	str	r3, [r2, #8]
 80031a4:	e098      	b.n	80032d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 8093 	bne.w	80032d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	4a4b      	ldr	r2, [pc, #300]	; (80032e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d90f      	bls.n	80031da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d0:	461a      	mov	r2, r3
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	6093      	str	r3, [r2, #8]
 80031d8:	e07e      	b.n	80032d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	0159      	lsls	r1, r3, #5
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	440b      	add	r3, r1
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d114      	bne.n	800323c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003224:	461a      	mov	r2, r3
 8003226:	2101      	movs	r1, #1
 8003228:	f003 f916 	bl	8006458 <USB_EP0_OutStart>
 800322c:	e006      	b.n	800323c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	441a      	add	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	4619      	mov	r1, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f005 fbce 	bl	80089e4 <HAL_PCD_DataOutStageCallback>
 8003248:	e046      	b.n	80032d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d124      	bne.n	800329c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800326e:	6093      	str	r3, [r2, #8]
 8003270:	e032      	b.n	80032d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	2320      	movs	r3, #32
 800328c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f005 fba5 	bl	80089e4 <HAL_PCD_DataOutStageCallback>
 800329a:	e01d      	b.n	80032d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d114      	bne.n	80032cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d108      	bne.n	80032cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032c4:	461a      	mov	r2, r3
 80032c6:	2100      	movs	r1, #0
 80032c8:	f003 f8c6 	bl	8006458 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f005 fb86 	bl	80089e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	4f54300a 	.word	0x4f54300a
 80032e8:	4f54310a 	.word	0x4f54310a

080032ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	333c      	adds	r3, #60	; 0x3c
 8003304:	3304      	adds	r3, #4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a15      	ldr	r2, [pc, #84]	; (8003374 <PCD_EP_OutSetupPacket_int+0x88>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d90e      	bls.n	8003340 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f005 fb3d 	bl	80089c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <PCD_EP_OutSetupPacket_int+0x88>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d90c      	bls.n	8003368 <PCD_EP_OutSetupPacket_int+0x7c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d108      	bne.n	8003368 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003360:	461a      	mov	r2, r3
 8003362:	2101      	movs	r1, #1
 8003364:	f003 f878 	bl	8006458 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	4f54300a 	.word	0x4f54300a

08003378 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
 8003384:	4613      	mov	r3, r2
 8003386:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003396:	883b      	ldrh	r3, [r7, #0]
 8003398:	0419      	lsls	r1, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
 80033a4:	e028      	b.n	80033f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ac:	0c1b      	lsrs	r3, r3, #16
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	4413      	add	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
 80033b8:	e00d      	b.n	80033d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	3340      	adds	r3, #64	; 0x40
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4413      	add	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	3301      	adds	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	3b01      	subs	r3, #1
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3ec      	bcc.n	80033ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033e0:	883b      	ldrh	r3, [r7, #0]
 80033e2:	0418      	lsls	r0, r3, #16
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6819      	ldr	r1, [r3, #0]
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	4302      	orrs	r2, r0
 80033f0:	3340      	adds	r3, #64	; 0x40
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	887a      	ldrh	r2, [r7, #2]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e267      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d075      	beq.n	800354a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800345e:	4b88      	ldr	r3, [pc, #544]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b04      	cmp	r3, #4
 8003468:	d00c      	beq.n	8003484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800346a:	4b85      	ldr	r3, [pc, #532]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003472:	2b08      	cmp	r3, #8
 8003474:	d112      	bne.n	800349c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003476:	4b82      	ldr	r3, [pc, #520]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003482:	d10b      	bne.n	800349c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	4b7e      	ldr	r3, [pc, #504]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d05b      	beq.n	8003548 <HAL_RCC_OscConfig+0x108>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d157      	bne.n	8003548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e242      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a4:	d106      	bne.n	80034b4 <HAL_RCC_OscConfig+0x74>
 80034a6:	4b76      	ldr	r3, [pc, #472]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a75      	ldr	r2, [pc, #468]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e01d      	b.n	80034f0 <HAL_RCC_OscConfig+0xb0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCC_OscConfig+0x98>
 80034be:	4b70      	ldr	r3, [pc, #448]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a6f      	ldr	r2, [pc, #444]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b6d      	ldr	r3, [pc, #436]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a6c      	ldr	r2, [pc, #432]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_OscConfig+0xb0>
 80034d8:	4b69      	ldr	r3, [pc, #420]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a68      	ldr	r2, [pc, #416]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b66      	ldr	r3, [pc, #408]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a65      	ldr	r2, [pc, #404]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80034ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe f9f0 	bl	80018dc <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003500:	f7fe f9ec 	bl	80018dc <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e207      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b5b      	ldr	r3, [pc, #364]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0xc0>
 800351e:	e014      	b.n	800354a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe f9dc 	bl	80018dc <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003528:	f7fe f9d8 	bl	80018dc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e1f3      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800353a:	4b51      	ldr	r3, [pc, #324]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0xe8>
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d063      	beq.n	800361e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003556:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800356a:	2b08      	cmp	r3, #8
 800356c:	d11c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356e:	4b44      	ldr	r3, [pc, #272]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d116      	bne.n	80035a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357a:	4b41      	ldr	r3, [pc, #260]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_RCC_OscConfig+0x152>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e1c7      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003592:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4937      	ldr	r1, [pc, #220]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	e03a      	b.n	800361e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d020      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b0:	4b34      	ldr	r3, [pc, #208]	; (8003684 <HAL_RCC_OscConfig+0x244>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fe f991 	bl	80018dc <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035be:	f7fe f98d 	bl	80018dc <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e1a8      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b28      	ldr	r3, [pc, #160]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4925      	ldr	r1, [pc, #148]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]
 80035f0:	e015      	b.n	800361e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_RCC_OscConfig+0x244>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe f970 	bl	80018dc <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003600:	f7fe f96c 	bl	80018dc <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e187      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d036      	beq.n	8003698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d016      	beq.n	8003660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_RCC_OscConfig+0x248>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fe f950 	bl	80018dc <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003640:	f7fe f94c 	bl	80018dc <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e167      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_OscConfig+0x240>)
 8003654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x200>
 800365e:	e01b      	b.n	8003698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_RCC_OscConfig+0x248>)
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003666:	f7fe f939 	bl	80018dc <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800366c:	e00e      	b.n	800368c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800366e:	f7fe f935 	bl	80018dc <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d907      	bls.n	800368c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e150      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
 8003680:	40023800 	.word	0x40023800
 8003684:	42470000 	.word	0x42470000
 8003688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800368c:	4b88      	ldr	r3, [pc, #544]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 800368e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ea      	bne.n	800366e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8097 	beq.w	80037d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036aa:	4b81      	ldr	r3, [pc, #516]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	4b7d      	ldr	r3, [pc, #500]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4a7c      	ldr	r2, [pc, #496]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c4:	6413      	str	r3, [r2, #64]	; 0x40
 80036c6:	4b7a      	ldr	r3, [pc, #488]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d6:	4b77      	ldr	r3, [pc, #476]	; (80038b4 <HAL_RCC_OscConfig+0x474>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d118      	bne.n	8003714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036e2:	4b74      	ldr	r3, [pc, #464]	; (80038b4 <HAL_RCC_OscConfig+0x474>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a73      	ldr	r2, [pc, #460]	; (80038b4 <HAL_RCC_OscConfig+0x474>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ee:	f7fe f8f5 	bl	80018dc <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f6:	f7fe f8f1 	bl	80018dc <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e10c      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003708:	4b6a      	ldr	r3, [pc, #424]	; (80038b4 <HAL_RCC_OscConfig+0x474>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x2ea>
 800371c:	4b64      	ldr	r3, [pc, #400]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a63      	ldr	r2, [pc, #396]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
 8003728:	e01c      	b.n	8003764 <HAL_RCC_OscConfig+0x324>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b05      	cmp	r3, #5
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0x30c>
 8003732:	4b5f      	ldr	r3, [pc, #380]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a5e      	ldr	r2, [pc, #376]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 8003738:	f043 0304 	orr.w	r3, r3, #4
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
 800373e:	4b5c      	ldr	r3, [pc, #368]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a5b      	ldr	r2, [pc, #364]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	6713      	str	r3, [r2, #112]	; 0x70
 800374a:	e00b      	b.n	8003764 <HAL_RCC_OscConfig+0x324>
 800374c:	4b58      	ldr	r3, [pc, #352]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	4a57      	ldr	r2, [pc, #348]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	6713      	str	r3, [r2, #112]	; 0x70
 8003758:	4b55      	ldr	r3, [pc, #340]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375c:	4a54      	ldr	r2, [pc, #336]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 800375e:	f023 0304 	bic.w	r3, r3, #4
 8003762:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d015      	beq.n	8003798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fe f8b6 	bl	80018dc <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003772:	e00a      	b.n	800378a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003774:	f7fe f8b2 	bl	80018dc <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e0cb      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378a:	4b49      	ldr	r3, [pc, #292]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ee      	beq.n	8003774 <HAL_RCC_OscConfig+0x334>
 8003796:	e014      	b.n	80037c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003798:	f7fe f8a0 	bl	80018dc <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fe f89c 	bl	80018dc <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e0b5      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b6:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ee      	bne.n	80037a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b39      	ldr	r3, [pc, #228]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	4a38      	ldr	r2, [pc, #224]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80a1 	beq.w	8003920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037de:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d05c      	beq.n	80038a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d141      	bne.n	8003876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f2:	4b31      	ldr	r3, [pc, #196]	; (80038b8 <HAL_RCC_OscConfig+0x478>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7fe f870 	bl	80018dc <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003800:	f7fe f86c 	bl	80018dc <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e087      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1f0      	bne.n	8003800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	019b      	lsls	r3, r3, #6
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	3b01      	subs	r3, #1
 8003838:	041b      	lsls	r3, r3, #16
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	491b      	ldr	r1, [pc, #108]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCC_OscConfig+0x478>)
 800384a:	2201      	movs	r2, #1
 800384c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384e:	f7fe f845 	bl	80018dc <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003856:	f7fe f841 	bl	80018dc <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e05c      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x416>
 8003874:	e054      	b.n	8003920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_RCC_OscConfig+0x478>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7fe f82e 	bl	80018dc <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003884:	f7fe f82a 	bl	80018dc <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e045      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_RCC_OscConfig+0x470>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x444>
 80038a2:	e03d      	b.n	8003920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e038      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40007000 	.word	0x40007000
 80038b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038bc:	4b1b      	ldr	r3, [pc, #108]	; (800392c <HAL_RCC_OscConfig+0x4ec>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d028      	beq.n	800391c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d121      	bne.n	800391c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d11a      	bne.n	800391c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ec:	4013      	ands	r3, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d111      	bne.n	800391c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	3b01      	subs	r3, #1
 8003906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800

08003930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0cc      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003944:	4b68      	ldr	r3, [pc, #416]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d90c      	bls.n	800396c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b65      	ldr	r3, [pc, #404]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0b8      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003984:	4b59      	ldr	r3, [pc, #356]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a58      	ldr	r2, [pc, #352]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800398e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800399c:	4b53      	ldr	r3, [pc, #332]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a52      	ldr	r2, [pc, #328]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a8:	4b50      	ldr	r3, [pc, #320]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	494d      	ldr	r1, [pc, #308]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d044      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d119      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d107      	bne.n	80039fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e06f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e067      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a0e:	4b37      	ldr	r3, [pc, #220]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f023 0203 	bic.w	r2, r3, #3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4934      	ldr	r1, [pc, #208]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a20:	f7fd ff5c 	bl	80018dc <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f7fd ff58 	bl	80018dc <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e04f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3e:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 020c 	and.w	r2, r3, #12
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d1eb      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d20c      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e032      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4916      	ldr	r1, [pc, #88]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	490e      	ldr	r1, [pc, #56]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ab6:	f000 f821 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490a      	ldr	r1, [pc, #40]	; (8003af0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd febc 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023c00 	.word	0x40023c00
 8003aec:	40023800 	.word	0x40023800
 8003af0:	08008fe4 	.word	0x08008fe4
 8003af4:	2000004c 	.word	0x2000004c
 8003af8:	20000050 	.word	0x20000050

08003afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b00:	b090      	sub	sp, #64	; 0x40
 8003b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	637b      	str	r3, [r7, #52]	; 0x34
 8003b08:	2300      	movs	r3, #0
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d00d      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x40>
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	f200 80a1 	bhi.w	8003c68 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x34>
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b2e:	e09b      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b30:	4b53      	ldr	r3, [pc, #332]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b34:	e09b      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b36:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b3a:	e098      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b3c:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b46:	4b4d      	ldr	r3, [pc, #308]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d028      	beq.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b52:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	2200      	movs	r2, #0
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b64:	2100      	movs	r1, #0
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b68:	fb03 f201 	mul.w	r2, r3, r1
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	fb00 f303 	mul.w	r3, r0, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	4a43      	ldr	r2, [pc, #268]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b76:	fba0 1202 	umull	r1, r2, r0, r2
 8003b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b82:	4413      	add	r3, r2
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b88:	2200      	movs	r2, #0
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	61fa      	str	r2, [r7, #28]
 8003b8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b96:	f7fc febf 	bl	8000918 <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba2:	e053      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba4:	4b35      	ldr	r3, [pc, #212]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	099b      	lsrs	r3, r3, #6
 8003baa:	2200      	movs	r2, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	617a      	str	r2, [r7, #20]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bb6:	f04f 0b00 	mov.w	fp, #0
 8003bba:	4652      	mov	r2, sl
 8003bbc:	465b      	mov	r3, fp
 8003bbe:	f04f 0000 	mov.w	r0, #0
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	0159      	lsls	r1, r3, #5
 8003bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bcc:	0150      	lsls	r0, r2, #5
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	ebb2 080a 	subs.w	r8, r2, sl
 8003bd6:	eb63 090b 	sbc.w	r9, r3, fp
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003be6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bee:	ebb2 0408 	subs.w	r4, r2, r8
 8003bf2:	eb63 0509 	sbc.w	r5, r3, r9
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	00eb      	lsls	r3, r5, #3
 8003c00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c04:	00e2      	lsls	r2, r4, #3
 8003c06:	4614      	mov	r4, r2
 8003c08:	461d      	mov	r5, r3
 8003c0a:	eb14 030a 	adds.w	r3, r4, sl
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	eb45 030b 	adc.w	r3, r5, fp
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c22:	4629      	mov	r1, r5
 8003c24:	028b      	lsls	r3, r1, #10
 8003c26:	4621      	mov	r1, r4
 8003c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	028a      	lsls	r2, r1, #10
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	2200      	movs	r2, #0
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	60fa      	str	r2, [r7, #12]
 8003c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c40:	f7fc fe6a 	bl	8000918 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	3301      	adds	r3, #1
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c66:	e002      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3740      	adds	r7, #64	; 0x40
 8003c74:	46bd      	mov	sp, r7
 8003c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	00f42400 	.word	0x00f42400
 8003c84:	017d7840 	.word	0x017d7840

08003c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	2000004c 	.word	0x2000004c

08003ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e041      	b.n	8003d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fa26 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 fc5e 	bl	80045a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d001      	beq.n	8003d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e044      	b.n	8003de2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d018      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x6c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d013      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x6c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00e      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x6c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d009      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x6c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <HAL_TIM_Base_Start_IT+0xbc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x6c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a16      	ldr	r2, [pc, #88]	; (8003e00 <HAL_TIM_Base_Start_IT+0xc0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d111      	bne.n	8003dd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d010      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dce:	e007      	b.n	8003de0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40000c00 	.word	0x40000c00
 8003e00:	40014000 	.word	0x40014000

08003e04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e041      	b.n	8003e9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f839 	bl	8003ea2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f000 fbac 	bl	80045a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <HAL_TIM_PWM_Start+0x24>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	bf14      	ite	ne
 8003ed4:	2301      	movne	r3, #1
 8003ed6:	2300      	moveq	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	e022      	b.n	8003f22 <HAL_TIM_PWM_Start+0x6a>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d109      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0x3e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	bf14      	ite	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	e015      	b.n	8003f22 <HAL_TIM_PWM_Start+0x6a>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d109      	bne.n	8003f10 <HAL_TIM_PWM_Start+0x58>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	bf14      	ite	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	2300      	moveq	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e008      	b.n	8003f22 <HAL_TIM_PWM_Start+0x6a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e068      	b.n	8003ffc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <HAL_TIM_PWM_Start+0x82>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f38:	e013      	b.n	8003f62 <HAL_TIM_PWM_Start+0xaa>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d104      	bne.n	8003f4a <HAL_TIM_PWM_Start+0x92>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f48:	e00b      	b.n	8003f62 <HAL_TIM_PWM_Start+0xaa>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d104      	bne.n	8003f5a <HAL_TIM_PWM_Start+0xa2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f58:	e003      	b.n	8003f62 <HAL_TIM_PWM_Start+0xaa>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2201      	movs	r2, #1
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fdbe 	bl	8004aec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a23      	ldr	r2, [pc, #140]	; (8004004 <HAL_TIM_PWM_Start+0x14c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d107      	bne.n	8003f8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1d      	ldr	r2, [pc, #116]	; (8004004 <HAL_TIM_PWM_Start+0x14c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d018      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0x10e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9c:	d013      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0x10e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a19      	ldr	r2, [pc, #100]	; (8004008 <HAL_TIM_PWM_Start+0x150>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0x10e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a17      	ldr	r2, [pc, #92]	; (800400c <HAL_TIM_PWM_Start+0x154>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d009      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0x10e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	; (8004010 <HAL_TIM_PWM_Start+0x158>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0x10e>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <HAL_TIM_PWM_Start+0x15c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d111      	bne.n	8003fea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b06      	cmp	r3, #6
 8003fd6:	d010      	beq.n	8003ffa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	e007      	b.n	8003ffa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40014000 	.word	0x40014000

08004018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d122      	bne.n	8004074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d11b      	bne.n	8004074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0202 	mvn.w	r2, #2
 8004044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa81 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa73 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fa84 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b04      	cmp	r3, #4
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0204 	mvn.w	r2, #4
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa57 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa49 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa5a 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0208 	mvn.w	r2, #8
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2204      	movs	r2, #4
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa2d 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa1f 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fa30 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b10      	cmp	r3, #16
 8004128:	d122      	bne.n	8004170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b10      	cmp	r3, #16
 8004136:	d11b      	bne.n	8004170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0210 	mvn.w	r2, #16
 8004140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2208      	movs	r2, #8
 8004146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa03 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 800415c:	e005      	b.n	800416a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9f5 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fa06 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d10e      	bne.n	800419c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0201 	mvn.w	r2, #1
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9cf 	bl	800453a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d10e      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fd82 	bl	8004ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9cb 	bl	800458a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b20      	cmp	r3, #32
 800420e:	d107      	bne.n	8004220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0220 	mvn.w	r2, #32
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fd4c 	bl	8004cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004242:	2302      	movs	r3, #2
 8004244:	e0ae      	b.n	80043a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b0c      	cmp	r3, #12
 8004252:	f200 809f 	bhi.w	8004394 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004256:	a201      	add	r2, pc, #4	; (adr r2, 800425c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425c:	08004291 	.word	0x08004291
 8004260:	08004395 	.word	0x08004395
 8004264:	08004395 	.word	0x08004395
 8004268:	08004395 	.word	0x08004395
 800426c:	080042d1 	.word	0x080042d1
 8004270:	08004395 	.word	0x08004395
 8004274:	08004395 	.word	0x08004395
 8004278:	08004395 	.word	0x08004395
 800427c:	08004313 	.word	0x08004313
 8004280:	08004395 	.word	0x08004395
 8004284:	08004395 	.word	0x08004395
 8004288:	08004395 	.word	0x08004395
 800428c:	08004353 	.word	0x08004353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fa02 	bl	80046a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699a      	ldr	r2, [r3, #24]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0208 	orr.w	r2, r2, #8
 80042aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0204 	bic.w	r2, r2, #4
 80042ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6999      	ldr	r1, [r3, #24]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	619a      	str	r2, [r3, #24]
      break;
 80042ce:	e064      	b.n	800439a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fa48 	bl	800476c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6999      	ldr	r1, [r3, #24]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	021a      	lsls	r2, r3, #8
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	619a      	str	r2, [r3, #24]
      break;
 8004310:	e043      	b.n	800439a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fa93 	bl	8004844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0208 	orr.w	r2, r2, #8
 800432c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0204 	bic.w	r2, r2, #4
 800433c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69d9      	ldr	r1, [r3, #28]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	61da      	str	r2, [r3, #28]
      break;
 8004350:	e023      	b.n	800439a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fadd 	bl	8004918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69d9      	ldr	r1, [r3, #28]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	021a      	lsls	r2, r3, #8
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	61da      	str	r2, [r3, #28]
      break;
 8004392:	e002      	b.n	800439a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	75fb      	strb	r3, [r7, #23]
      break;
 8004398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIM_ConfigClockSource+0x1c>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e0b4      	b.n	8004532 <HAL_TIM_ConfigClockSource+0x186>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004400:	d03e      	beq.n	8004480 <HAL_TIM_ConfigClockSource+0xd4>
 8004402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004406:	f200 8087 	bhi.w	8004518 <HAL_TIM_ConfigClockSource+0x16c>
 800440a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440e:	f000 8086 	beq.w	800451e <HAL_TIM_ConfigClockSource+0x172>
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004416:	d87f      	bhi.n	8004518 <HAL_TIM_ConfigClockSource+0x16c>
 8004418:	2b70      	cmp	r3, #112	; 0x70
 800441a:	d01a      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0xa6>
 800441c:	2b70      	cmp	r3, #112	; 0x70
 800441e:	d87b      	bhi.n	8004518 <HAL_TIM_ConfigClockSource+0x16c>
 8004420:	2b60      	cmp	r3, #96	; 0x60
 8004422:	d050      	beq.n	80044c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004424:	2b60      	cmp	r3, #96	; 0x60
 8004426:	d877      	bhi.n	8004518 <HAL_TIM_ConfigClockSource+0x16c>
 8004428:	2b50      	cmp	r3, #80	; 0x50
 800442a:	d03c      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0xfa>
 800442c:	2b50      	cmp	r3, #80	; 0x50
 800442e:	d873      	bhi.n	8004518 <HAL_TIM_ConfigClockSource+0x16c>
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d058      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004434:	2b40      	cmp	r3, #64	; 0x40
 8004436:	d86f      	bhi.n	8004518 <HAL_TIM_ConfigClockSource+0x16c>
 8004438:	2b30      	cmp	r3, #48	; 0x30
 800443a:	d064      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x15a>
 800443c:	2b30      	cmp	r3, #48	; 0x30
 800443e:	d86b      	bhi.n	8004518 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b20      	cmp	r3, #32
 8004442:	d060      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x15a>
 8004444:	2b20      	cmp	r3, #32
 8004446:	d867      	bhi.n	8004518 <HAL_TIM_ConfigClockSource+0x16c>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d05c      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x15a>
 800444c:	2b10      	cmp	r3, #16
 800444e:	d05a      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x15a>
 8004450:	e062      	b.n	8004518 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6899      	ldr	r1, [r3, #8]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f000 fb23 	bl	8004aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	609a      	str	r2, [r3, #8]
      break;
 800447e:	e04f      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6899      	ldr	r1, [r3, #8]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f000 fb0c 	bl	8004aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044a2:	609a      	str	r2, [r3, #8]
      break;
 80044a4:	e03c      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6859      	ldr	r1, [r3, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f000 fa80 	bl	80049b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2150      	movs	r1, #80	; 0x50
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fad9 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 80044c4:	e02c      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f000 fa9f 	bl	8004a16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2160      	movs	r1, #96	; 0x60
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fac9 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 80044e4:	e01c      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f000 fa60 	bl	80049b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2140      	movs	r1, #64	; 0x40
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fab9 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004504:	e00c      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f000 fab0 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004516:	e003      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      break;
 800451c:	e000      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800451e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a34      	ldr	r2, [pc, #208]	; (8004684 <TIM_Base_SetConfig+0xe4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00f      	beq.n	80045d8 <TIM_Base_SetConfig+0x38>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045be:	d00b      	beq.n	80045d8 <TIM_Base_SetConfig+0x38>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a31      	ldr	r2, [pc, #196]	; (8004688 <TIM_Base_SetConfig+0xe8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d007      	beq.n	80045d8 <TIM_Base_SetConfig+0x38>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a30      	ldr	r2, [pc, #192]	; (800468c <TIM_Base_SetConfig+0xec>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_Base_SetConfig+0x38>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a2f      	ldr	r2, [pc, #188]	; (8004690 <TIM_Base_SetConfig+0xf0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d108      	bne.n	80045ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a25      	ldr	r2, [pc, #148]	; (8004684 <TIM_Base_SetConfig+0xe4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01b      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f8:	d017      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a22      	ldr	r2, [pc, #136]	; (8004688 <TIM_Base_SetConfig+0xe8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a21      	ldr	r2, [pc, #132]	; (800468c <TIM_Base_SetConfig+0xec>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00f      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a20      	ldr	r2, [pc, #128]	; (8004690 <TIM_Base_SetConfig+0xf0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00b      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <TIM_Base_SetConfig+0xf4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a1e      	ldr	r2, [pc, #120]	; (8004698 <TIM_Base_SetConfig+0xf8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_Base_SetConfig+0x8a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1d      	ldr	r2, [pc, #116]	; (800469c <TIM_Base_SetConfig+0xfc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d108      	bne.n	800463c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <TIM_Base_SetConfig+0xe4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d103      	bne.n	8004670 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	615a      	str	r2, [r3, #20]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40010000 	.word	0x40010000
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40014000 	.word	0x40014000
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800

080046a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0201 	bic.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f023 0302 	bic.w	r3, r3, #2
 80046e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <TIM_OC1_SetConfig+0xc8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d10c      	bne.n	8004716 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0308 	bic.w	r3, r3, #8
 8004702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <TIM_OC1_SetConfig+0xc8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d111      	bne.n	8004742 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800472c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40010000 	.word	0x40010000

0800476c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	f023 0210 	bic.w	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0320 	bic.w	r3, r3, #32
 80047b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1e      	ldr	r2, [pc, #120]	; (8004840 <TIM_OC2_SetConfig+0xd4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d10d      	bne.n	80047e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <TIM_OC2_SetConfig+0xd4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d113      	bne.n	8004818 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000

08004844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800488c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <TIM_OC3_SetConfig+0xd0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10d      	bne.n	80048be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <TIM_OC3_SetConfig+0xd0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d113      	bne.n	80048ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	621a      	str	r2, [r3, #32]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40010000 	.word	0x40010000

08004918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	031b      	lsls	r3, r3, #12
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <TIM_OC4_SetConfig+0x9c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d109      	bne.n	800498c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	019b      	lsls	r3, r3, #6
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40010000 	.word	0x40010000

080049b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 030a 	bic.w	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0210 	bic.w	r2, r3, #16
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f043 0307 	orr.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2201      	movs	r2, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1a      	ldr	r2, [r3, #32]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	fa01 f303 	lsl.w	r3, r1, r3
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e050      	b.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1c      	ldr	r2, [pc, #112]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d018      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d013      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10c      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40010000 	.word	0x40010000
 8004c04:	40000400 	.word	0x40000400
 8004c08:	40000800 	.word	0x40000800
 8004c0c:	40000c00 	.word	0x40000c00
 8004c10:	40014000 	.word	0x40014000

08004c14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e03d      	b.n	8004cac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	f107 001c 	add.w	r0, r7, #28
 8004cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d122      	bne.n	8004d3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d105      	bne.n	8004d32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f001 fbee 	bl	8006514 <USB_CoreReset>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	73fb      	strb	r3, [r7, #15]
 8004d3c:	e01a      	b.n	8004d74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f001 fbe2 	bl	8006514 <USB_CoreReset>
 8004d50:	4603      	mov	r3, r0
 8004d52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
 8004d66:	e005      	b.n	8004d74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d10b      	bne.n	8004d92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f043 0206 	orr.w	r2, r3, #6
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d9e:	b004      	add	sp, #16
 8004da0:	4770      	bx	lr
	...

08004da4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d165      	bne.n	8004e84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a41      	ldr	r2, [pc, #260]	; (8004ec0 <USB_SetTurnaroundTime+0x11c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d906      	bls.n	8004dce <USB_SetTurnaroundTime+0x2a>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a40      	ldr	r2, [pc, #256]	; (8004ec4 <USB_SetTurnaroundTime+0x120>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d202      	bcs.n	8004dce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004dc8:	230f      	movs	r3, #15
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e062      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4a3c      	ldr	r2, [pc, #240]	; (8004ec4 <USB_SetTurnaroundTime+0x120>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d306      	bcc.n	8004de4 <USB_SetTurnaroundTime+0x40>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4a3b      	ldr	r2, [pc, #236]	; (8004ec8 <USB_SetTurnaroundTime+0x124>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d202      	bcs.n	8004de4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004dde:	230e      	movs	r3, #14
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e057      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4a38      	ldr	r2, [pc, #224]	; (8004ec8 <USB_SetTurnaroundTime+0x124>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d306      	bcc.n	8004dfa <USB_SetTurnaroundTime+0x56>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a37      	ldr	r2, [pc, #220]	; (8004ecc <USB_SetTurnaroundTime+0x128>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d202      	bcs.n	8004dfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004df4:	230d      	movs	r3, #13
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e04c      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4a33      	ldr	r2, [pc, #204]	; (8004ecc <USB_SetTurnaroundTime+0x128>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d306      	bcc.n	8004e10 <USB_SetTurnaroundTime+0x6c>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a32      	ldr	r2, [pc, #200]	; (8004ed0 <USB_SetTurnaroundTime+0x12c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d802      	bhi.n	8004e10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e0a:	230c      	movs	r3, #12
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	e041      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a2f      	ldr	r2, [pc, #188]	; (8004ed0 <USB_SetTurnaroundTime+0x12c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d906      	bls.n	8004e26 <USB_SetTurnaroundTime+0x82>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a2e      	ldr	r2, [pc, #184]	; (8004ed4 <USB_SetTurnaroundTime+0x130>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d802      	bhi.n	8004e26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e20:	230b      	movs	r3, #11
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e036      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4a2a      	ldr	r2, [pc, #168]	; (8004ed4 <USB_SetTurnaroundTime+0x130>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d906      	bls.n	8004e3c <USB_SetTurnaroundTime+0x98>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a29      	ldr	r2, [pc, #164]	; (8004ed8 <USB_SetTurnaroundTime+0x134>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d802      	bhi.n	8004e3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e36:	230a      	movs	r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e02b      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a26      	ldr	r2, [pc, #152]	; (8004ed8 <USB_SetTurnaroundTime+0x134>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d906      	bls.n	8004e52 <USB_SetTurnaroundTime+0xae>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a25      	ldr	r2, [pc, #148]	; (8004edc <USB_SetTurnaroundTime+0x138>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d202      	bcs.n	8004e52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e4c:	2309      	movs	r3, #9
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e020      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a21      	ldr	r2, [pc, #132]	; (8004edc <USB_SetTurnaroundTime+0x138>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d306      	bcc.n	8004e68 <USB_SetTurnaroundTime+0xc4>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4a20      	ldr	r2, [pc, #128]	; (8004ee0 <USB_SetTurnaroundTime+0x13c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d802      	bhi.n	8004e68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e62:	2308      	movs	r3, #8
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e015      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ee0 <USB_SetTurnaroundTime+0x13c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d906      	bls.n	8004e7e <USB_SetTurnaroundTime+0xda>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <USB_SetTurnaroundTime+0x140>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d202      	bcs.n	8004e7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e78:	2307      	movs	r3, #7
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e00a      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e7e:	2306      	movs	r3, #6
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e007      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e8a:	2309      	movs	r3, #9
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e001      	b.n	8004e94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e90:	2309      	movs	r3, #9
 8004e92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	029b      	lsls	r3, r3, #10
 8004ea8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004eac:	431a      	orrs	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	00d8acbf 	.word	0x00d8acbf
 8004ec4:	00e4e1c0 	.word	0x00e4e1c0
 8004ec8:	00f42400 	.word	0x00f42400
 8004ecc:	01067380 	.word	0x01067380
 8004ed0:	011a499f 	.word	0x011a499f
 8004ed4:	01312cff 	.word	0x01312cff
 8004ed8:	014ca43f 	.word	0x014ca43f
 8004edc:	016e3600 	.word	0x016e3600
 8004ee0:	01a6ab1f 	.word	0x01a6ab1f
 8004ee4:	01e84800 	.word	0x01e84800

08004ee8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f043 0201 	orr.w	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f023 0201 	bic.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d115      	bne.n	8004f7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f5a:	2001      	movs	r0, #1
 8004f5c:	f7fc fcca 	bl	80018f4 <HAL_Delay>
      ms++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 fa45 	bl	80063f6 <USB_GetMode>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d01e      	beq.n	8004fb0 <USB_SetCurrentMode+0x84>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b31      	cmp	r3, #49	; 0x31
 8004f76:	d9f0      	bls.n	8004f5a <USB_SetCurrentMode+0x2e>
 8004f78:	e01a      	b.n	8004fb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d115      	bne.n	8004fac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f7fc fcb1 	bl	80018f4 <HAL_Delay>
      ms++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3301      	adds	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f001 fa2c 	bl	80063f6 <USB_GetMode>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <USB_SetCurrentMode+0x84>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b31      	cmp	r3, #49	; 0x31
 8004fa8:	d9f0      	bls.n	8004f8c <USB_SetCurrentMode+0x60>
 8004faa:	e001      	b.n	8004fb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e005      	b.n	8004fbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2b32      	cmp	r3, #50	; 0x32
 8004fb4:	d101      	bne.n	8004fba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b086      	sub	sp, #24
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	e009      	b.n	8004ff8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	3340      	adds	r3, #64	; 0x40
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	2200      	movs	r2, #0
 8004ff0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b0e      	cmp	r3, #14
 8004ffc:	d9f2      	bls.n	8004fe4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11c      	bne.n	800503e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005012:	f043 0302 	orr.w	r3, r3, #2
 8005016:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
 800503c:	e00b      	b.n	8005056 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800505c:	461a      	mov	r2, r3
 800505e:	2300      	movs	r3, #0
 8005060:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005068:	4619      	mov	r1, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005070:	461a      	mov	r2, r3
 8005072:	680b      	ldr	r3, [r1, #0]
 8005074:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	2b01      	cmp	r3, #1
 800507a:	d10c      	bne.n	8005096 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005082:	2100      	movs	r1, #0
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f965 	bl	8005354 <USB_SetDevSpeed>
 800508a:	e008      	b.n	800509e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800508c:	2101      	movs	r1, #1
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f960 	bl	8005354 <USB_SetDevSpeed>
 8005094:	e003      	b.n	800509e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005096:	2103      	movs	r1, #3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f95b 	bl	8005354 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800509e:	2110      	movs	r1, #16
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f8f3 	bl	800528c <USB_FlushTxFifo>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f91f 	bl	80052f4 <USB_FlushRxFifo>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c6:	461a      	mov	r2, r3
 80050c8:	2300      	movs	r3, #0
 80050ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d2:	461a      	mov	r2, r3
 80050d4:	2300      	movs	r3, #0
 80050d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	461a      	mov	r2, r3
 80050e0:	2300      	movs	r3, #0
 80050e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	e043      	b.n	8005172 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005100:	d118      	bne.n	8005134 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005114:	461a      	mov	r2, r3
 8005116:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	e013      	b.n	8005146 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512a:	461a      	mov	r2, r3
 800512c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e008      	b.n	8005146 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	461a      	mov	r2, r3
 8005142:	2300      	movs	r3, #0
 8005144:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005152:	461a      	mov	r2, r3
 8005154:	2300      	movs	r3, #0
 8005156:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	461a      	mov	r2, r3
 8005166:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800516a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	3301      	adds	r3, #1
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	429a      	cmp	r2, r3
 8005178:	d3b7      	bcc.n	80050ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	e043      	b.n	8005208 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005196:	d118      	bne.n	80051ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	461a      	mov	r2, r3
 80051ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	e013      	b.n	80051dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c0:	461a      	mov	r2, r3
 80051c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	e008      	b.n	80051dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d6:	461a      	mov	r2, r3
 80051d8:	2300      	movs	r3, #0
 80051da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e8:	461a      	mov	r2, r3
 80051ea:	2300      	movs	r3, #0
 80051ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fa:	461a      	mov	r2, r3
 80051fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005200:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	3301      	adds	r3, #1
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	429a      	cmp	r2, r3
 800520e:	d3b7      	bcc.n	8005180 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005222:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005230:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	f043 0210 	orr.w	r2, r3, #16
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <USB_DevInit+0x2c4>)
 800524a:	4313      	orrs	r3, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f043 0208 	orr.w	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005264:	2b01      	cmp	r3, #1
 8005266:	d107      	bne.n	8005278 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005284:	b004      	add	sp, #16
 8005286:	4770      	bx	lr
 8005288:	803c3800 	.word	0x803c3800

0800528c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3301      	adds	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <USB_FlushTxFifo+0x64>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e01b      	b.n	80052e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	daf2      	bge.n	800529a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	019b      	lsls	r3, r3, #6
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3301      	adds	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4a08      	ldr	r2, [pc, #32]	; (80052f0 <USB_FlushTxFifo+0x64>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e006      	b.n	80052e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b20      	cmp	r3, #32
 80052e0:	d0f0      	beq.n	80052c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	00030d40 	.word	0x00030d40

080052f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a11      	ldr	r2, [pc, #68]	; (8005350 <USB_FlushRxFifo+0x5c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e018      	b.n	8005344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	daf2      	bge.n	8005300 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2210      	movs	r2, #16
 8005322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a08      	ldr	r2, [pc, #32]	; (8005350 <USB_FlushRxFifo+0x5c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e006      	b.n	8005344 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	2b10      	cmp	r3, #16
 8005340:	d0f0      	beq.n	8005324 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	00030d40 	.word	0x00030d40

08005354 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005374:	4313      	orrs	r3, r2
 8005376:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005386:	b480      	push	{r7}
 8005388:	b087      	sub	sp, #28
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0306 	and.w	r3, r3, #6
 800539e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053a6:	2300      	movs	r3, #0
 80053a8:	75fb      	strb	r3, [r7, #23]
 80053aa:	e00a      	b.n	80053c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d002      	beq.n	80053b8 <USB_GetDevSpeed+0x32>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d102      	bne.n	80053be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053b8:	2302      	movs	r3, #2
 80053ba:	75fb      	strb	r3, [r7, #23]
 80053bc:	e001      	b.n	80053c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053be:	230f      	movs	r3, #15
 80053c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	785b      	ldrb	r3, [r3, #1]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d13a      	bne.n	8005462 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	2101      	movs	r1, #1
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	b29b      	uxth	r3, r3
 8005404:	68f9      	ldr	r1, [r7, #12]
 8005406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800540a:	4313      	orrs	r3, r2
 800540c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d155      	bne.n	80054d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	791b      	ldrb	r3, [r3, #4]
 800543e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005440:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	059b      	lsls	r3, r3, #22
 8005446:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005448:	4313      	orrs	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	0151      	lsls	r1, r2, #5
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	440a      	add	r2, r1
 8005452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e036      	b.n	80054d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	2101      	movs	r1, #1
 8005474:	fa01 f303 	lsl.w	r3, r1, r3
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005480:	4313      	orrs	r3, r2
 8005482:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d11a      	bne.n	80054d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	791b      	ldrb	r3, [r3, #4]
 80054b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054b6:	430b      	orrs	r3, r1
 80054b8:	4313      	orrs	r3, r2
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d161      	bne.n	80055c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800550e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005512:	d11f      	bne.n	8005554 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005532:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005552:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	2101      	movs	r1, #1
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	b29b      	uxth	r3, r3
 800556c:	43db      	mvns	r3, r3
 800556e:	68f9      	ldr	r1, [r7, #12]
 8005570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005574:	4013      	ands	r3, r2
 8005576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	2101      	movs	r1, #1
 800558a:	fa01 f303 	lsl.w	r3, r1, r3
 800558e:	b29b      	uxth	r3, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005598:	4013      	ands	r3, r2
 800559a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	0159      	lsls	r1, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	440b      	add	r3, r1
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	4619      	mov	r1, r3
 80055b8:	4b35      	ldr	r3, [pc, #212]	; (8005690 <USB_DeactivateEndpoint+0x1b0>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]
 80055be:	e060      	b.n	8005682 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055d6:	d11f      	bne.n	8005618 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005616:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	041b      	lsls	r3, r3, #16
 8005630:	43db      	mvns	r3, r3
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005638:	4013      	ands	r3, r2
 800563a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005642:	69da      	ldr	r2, [r3, #28]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	2101      	movs	r1, #1
 800564e:	fa01 f303 	lsl.w	r3, r1, r3
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	43db      	mvns	r3, r3
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565c:	4013      	ands	r3, r2
 800565e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	0159      	lsls	r1, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	440b      	add	r3, r1
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	4619      	mov	r1, r3
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <USB_DeactivateEndpoint+0x1b4>)
 800567e:	4013      	ands	r3, r2
 8005680:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	ec337800 	.word	0xec337800
 8005694:	eff37800 	.word	0xeff37800

08005698 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	f040 815c 	bne.w	8005972 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d132      	bne.n	8005728 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	69ba      	ldr	r2, [r7, #24]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005720:	0cdb      	lsrs	r3, r3, #19
 8005722:	04db      	lsls	r3, r3, #19
 8005724:	6113      	str	r3, [r2, #16]
 8005726:	e074      	b.n	8005812 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005742:	0cdb      	lsrs	r3, r3, #19
 8005744:	04db      	lsls	r3, r3, #19
 8005746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005762:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005766:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800576a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6999      	ldr	r1, [r3, #24]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	440b      	add	r3, r1
 8005784:	1e59      	subs	r1, r3, #1
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	fbb1 f3f3 	udiv	r3, r1, r3
 800578e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005790:	4b9d      	ldr	r3, [pc, #628]	; (8005a08 <USB_EPStartXfer+0x370>)
 8005792:	400b      	ands	r3, r1
 8005794:	69b9      	ldr	r1, [r7, #24]
 8005796:	0148      	lsls	r0, r1, #5
 8005798:	69f9      	ldr	r1, [r7, #28]
 800579a:	4401      	add	r1, r0
 800579c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057a0:	4313      	orrs	r3, r2
 80057a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ba:	69b9      	ldr	r1, [r7, #24]
 80057bc:	0148      	lsls	r0, r1, #5
 80057be:	69f9      	ldr	r1, [r7, #28]
 80057c0:	4401      	add	r1, r0
 80057c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057c6:	4313      	orrs	r3, r2
 80057c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	791b      	ldrb	r3, [r3, #4]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d11f      	bne.n	8005812 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	0151      	lsls	r1, r2, #5
 80057e4:	69fa      	ldr	r2, [r7, #28]
 80057e6:	440a      	add	r2, r1
 80057e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800580c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005810:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d14b      	bne.n	80058b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d009      	beq.n	8005834 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	461a      	mov	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	791b      	ldrb	r3, [r3, #4]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d128      	bne.n	800588e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d110      	bne.n	800586e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005866:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	e00f      	b.n	800588e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e133      	b.n	8005b18 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	791b      	ldrb	r3, [r3, #4]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d015      	beq.n	8005904 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 811b 	beq.w	8005b18 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	2101      	movs	r1, #1
 80058f4:	fa01 f303 	lsl.w	r3, r1, r3
 80058f8:	69f9      	ldr	r1, [r7, #28]
 80058fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058fe:	4313      	orrs	r3, r2
 8005900:	634b      	str	r3, [r1, #52]	; 0x34
 8005902:	e109      	b.n	8005b18 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d110      	bne.n	8005936 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	69fa      	ldr	r2, [r7, #28]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	e00f      	b.n	8005956 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	0151      	lsls	r1, r2, #5
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	440a      	add	r2, r1
 800594c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005954:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6919      	ldr	r1, [r3, #16]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781a      	ldrb	r2, [r3, #0]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	b298      	uxth	r0, r3
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	4603      	mov	r3, r0
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fade 	bl	8005f2c <USB_WritePacket>
 8005970:	e0d2      	b.n	8005b18 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598c:	0cdb      	lsrs	r3, r3, #19
 800598e:	04db      	lsls	r3, r3, #19
 8005990:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d126      	bne.n	8005a0c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059d4:	69b9      	ldr	r1, [r7, #24]
 80059d6:	0148      	lsls	r0, r1, #5
 80059d8:	69f9      	ldr	r1, [r7, #28]
 80059da:	4401      	add	r1, r0
 80059dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059e0:	4313      	orrs	r3, r2
 80059e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a02:	6113      	str	r3, [r2, #16]
 8005a04:	e03a      	b.n	8005a7c <USB_EPStartXfer+0x3e4>
 8005a06:	bf00      	nop
 8005a08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	1e5a      	subs	r2, r3, #1
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	8afa      	ldrh	r2, [r7, #22]
 8005a28:	fb03 f202 	mul.w	r2, r3, r2
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	8afb      	ldrh	r3, [r7, #22]
 8005a40:	04d9      	lsls	r1, r3, #19
 8005a42:	4b38      	ldr	r3, [pc, #224]	; (8005b24 <USB_EPStartXfer+0x48c>)
 8005a44:	400b      	ands	r3, r1
 8005a46:	69b9      	ldr	r1, [r7, #24]
 8005a48:	0148      	lsls	r0, r1, #5
 8005a4a:	69f9      	ldr	r1, [r7, #28]
 8005a4c:	4401      	add	r1, r0
 8005a4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a52:	4313      	orrs	r3, r2
 8005a54:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6c:	69b9      	ldr	r1, [r7, #24]
 8005a6e:	0148      	lsls	r0, r1, #5
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	4401      	add	r1, r0
 8005a74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d10d      	bne.n	8005a9e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	6919      	ldr	r1, [r3, #16]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	460a      	mov	r2, r1
 8005a9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	791b      	ldrb	r3, [r3, #4]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d128      	bne.n	8005af8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d110      	bne.n	8005ad8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	e00f      	b.n	8005af8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	1ff80000 	.word	0x1ff80000

08005b28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	f040 80ce 	bne.w	8005ce6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d132      	bne.n	8005bb8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb0:	0cdb      	lsrs	r3, r3, #19
 8005bb2:	04db      	lsls	r3, r3, #19
 8005bb4:	6113      	str	r3, [r2, #16]
 8005bb6:	e04e      	b.n	8005c56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd2:	0cdb      	lsrs	r3, r3, #19
 8005bd4:	04db      	lsls	r3, r3, #19
 8005bd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bfa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	699a      	ldr	r2, [r3, #24]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d903      	bls.n	8005c10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c46:	6939      	ldr	r1, [r7, #16]
 8005c48:	0148      	lsls	r0, r1, #5
 8005c4a:	6979      	ldr	r1, [r7, #20]
 8005c4c:	4401      	add	r1, r0
 8005c4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c52:	4313      	orrs	r3, r2
 8005c54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d11e      	bne.n	8005c9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d009      	beq.n	8005c78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	461a      	mov	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e097      	b.n	8005dca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8083 	beq.w	8005dca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f003 030f 	and.w	r3, r3, #15
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cda:	6979      	ldr	r1, [r7, #20]
 8005cdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	634b      	str	r3, [r1, #52]	; 0x34
 8005ce4:	e071      	b.n	8005dca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d00:	0cdb      	lsrs	r3, r3, #19
 8005d02:	04db      	lsls	r3, r3, #19
 8005d04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d78:	6939      	ldr	r1, [r7, #16]
 8005d7a:	0148      	lsls	r0, r1, #5
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	4401      	add	r1, r0
 8005d80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d84:	4313      	orrs	r3, r2
 8005d86:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d10d      	bne.n	8005daa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6919      	ldr	r1, [r3, #16]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	460a      	mov	r2, r1
 8005da8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d14a      	bne.n	8005e8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e0e:	f040 8086 	bne.w	8005f1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d902      	bls.n	8005e70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e6e:	e056      	b.n	8005f1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e88:	d0e7      	beq.n	8005e5a <USB_EPStopXfer+0x82>
 8005e8a:	e048      	b.n	8005f1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ea4:	d13b      	bne.n	8005f1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	7812      	ldrb	r2, [r2, #0]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ec8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	7812      	ldrb	r2, [r2, #0]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d902      	bls.n	8005f04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	75fb      	strb	r3, [r7, #23]
          break;
 8005f02:	e00c      	b.n	8005f1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f1c:	d0e7      	beq.n	8005eee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b089      	sub	sp, #36	; 0x24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	4611      	mov	r1, r2
 8005f38:	461a      	mov	r2, r3
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	71fb      	strb	r3, [r7, #7]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d123      	bne.n	8005f9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f52:	88bb      	ldrh	r3, [r7, #4]
 8005f54:	3303      	adds	r3, #3
 8005f56:	089b      	lsrs	r3, r3, #2
 8005f58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	e018      	b.n	8005f92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	031a      	lsls	r2, r3, #12
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	3301      	adds	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	3301      	adds	r3, #1
 8005f84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d3e2      	bcc.n	8005f60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3724      	adds	r7, #36	; 0x24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b08b      	sub	sp, #44	; 0x2c
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	089b      	lsrs	r3, r3, #2
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	f003 0303 	and.w	r3, r3, #3
 8005fcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fce:	2300      	movs	r3, #0
 8005fd0:	623b      	str	r3, [r7, #32]
 8005fd2:	e014      	b.n	8005ffe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	3301      	adds	r3, #1
 8005fea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	3301      	adds	r3, #1
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	623b      	str	r3, [r7, #32]
 8005ffe:	6a3a      	ldr	r2, [r7, #32]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	429a      	cmp	r2, r3
 8006004:	d3e6      	bcc.n	8005fd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006006:	8bfb      	ldrh	r3, [r7, #30]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01e      	beq.n	800604a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006016:	461a      	mov	r2, r3
 8006018:	f107 0310 	add.w	r3, r7, #16
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	fa22 f303 	lsr.w	r3, r2, r3
 800602c:	b2da      	uxtb	r2, r3
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	701a      	strb	r2, [r3, #0]
      i++;
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	3301      	adds	r3, #1
 8006036:	623b      	str	r3, [r7, #32]
      pDest++;
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	3301      	adds	r3, #1
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800603e:	8bfb      	ldrh	r3, [r7, #30]
 8006040:	3b01      	subs	r3, #1
 8006042:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006044:	8bfb      	ldrh	r3, [r7, #30]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1ea      	bne.n	8006020 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800604c:	4618      	mov	r0, r3
 800604e:	372c      	adds	r7, #44	; 0x2c
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d12c      	bne.n	80060ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	db12      	blt.n	80060ac <USB_EPSetStall+0x54>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00f      	beq.n	80060ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	e02b      	b.n	8006126 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	db12      	blt.n	8006106 <USB_EPSetStall+0xae>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00f      	beq.n	8006106 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	0151      	lsls	r1, r2, #5
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	440a      	add	r2, r1
 80060fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006100:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006104:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	440a      	add	r2, r1
 800611c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006120:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006124:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d128      	bne.n	80061a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800616e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	791b      	ldrb	r3, [r3, #4]
 8006174:	2b03      	cmp	r3, #3
 8006176:	d003      	beq.n	8006180 <USB_EPClearStall+0x4c>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	791b      	ldrb	r3, [r3, #4]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d138      	bne.n	80061f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800619a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	e027      	b.n	80061f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	791b      	ldrb	r3, [r3, #4]
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d003      	beq.n	80061d2 <USB_EPClearStall+0x9e>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	791b      	ldrb	r3, [r3, #4]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d10f      	bne.n	80061f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	0151      	lsls	r1, r2, #5
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	440a      	add	r2, r1
 80061e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800621e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006222:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	011b      	lsls	r3, r3, #4
 8006230:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006234:	68f9      	ldr	r1, [r7, #12]
 8006236:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627a:	f023 0302 	bic.w	r3, r3, #2
 800627e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062a8:	f023 0303 	bic.w	r3, r3, #3
 80062ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062bc:	f043 0302 	orr.w	r3, r3, #2
 80062c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062e8:	68fb      	ldr	r3, [r7, #12]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	4013      	ands	r3, r2
 8006318:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	0c1b      	lsrs	r3, r3, #16
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	4013      	ands	r3, r2
 800634c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	b29b      	uxth	r3, r3
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	460b      	mov	r3, r1
 8006368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	4013      	ands	r3, r2
 800638a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800638c:	68bb      	ldr	r3, [r7, #8]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800639a:	b480      	push	{r7}
 800639c:	b087      	sub	sp, #28
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ca:	01db      	lsls	r3, r3, #7
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4013      	ands	r3, r2
 80063e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063e8:	68bb      	ldr	r3, [r7, #8]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f003 0301 	and.w	r3, r3, #1
}
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006430:	f023 0307 	bic.w	r3, r3, #7
 8006434:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006448:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	460b      	mov	r3, r1
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	333c      	adds	r3, #60	; 0x3c
 800646e:	3304      	adds	r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4a26      	ldr	r2, [pc, #152]	; (8006510 <USB_EP0_OutStart+0xb8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d90a      	bls.n	8006492 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800648c:	d101      	bne.n	8006492 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e037      	b.n	8006502 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	2300      	movs	r3, #0
 800649c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c0:	f043 0318 	orr.w	r3, r3, #24
 80064c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064da:	7afb      	ldrb	r3, [r7, #11]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d10f      	bne.n	8006500 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	461a      	mov	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	4f54300a 	.word	0x4f54300a

08006514 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3301      	adds	r3, #1
 8006524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a13      	ldr	r2, [pc, #76]	; (8006578 <USB_CoreReset+0x64>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e01b      	b.n	800656a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	daf2      	bge.n	8006520 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f043 0201 	orr.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3301      	adds	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4a09      	ldr	r2, [pc, #36]	; (8006578 <USB_CoreReset+0x64>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d901      	bls.n	800655c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e006      	b.n	800656a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d0f0      	beq.n	800654a <USB_CoreReset+0x36>

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	00030d40 	.word	0x00030d40

0800657c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006588:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800658c:	f002 fc8a 	bl	8008ea4 <USBD_static_malloc>
 8006590:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	32b0      	adds	r2, #176	; 0xb0
 80065a2:	2100      	movs	r1, #0
 80065a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80065a8:	2302      	movs	r3, #2
 80065aa:	e0d4      	b.n	8006756 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80065ac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80065b0:	2100      	movs	r1, #0
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f002 fcde 	bl	8008f74 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	32b0      	adds	r2, #176	; 0xb0
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	32b0      	adds	r2, #176	; 0xb0
 80065d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7c1b      	ldrb	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d138      	bne.n	8006656 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065e4:	4b5e      	ldr	r3, [pc, #376]	; (8006760 <USBD_CDC_Init+0x1e4>)
 80065e6:	7819      	ldrb	r1, [r3, #0]
 80065e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065ec:	2202      	movs	r2, #2
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f002 fb35 	bl	8008c5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065f4:	4b5a      	ldr	r3, [pc, #360]	; (8006760 <USBD_CDC_Init+0x1e4>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f003 020f 	and.w	r2, r3, #15
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	3324      	adds	r3, #36	; 0x24
 800660a:	2201      	movs	r2, #1
 800660c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800660e:	4b55      	ldr	r3, [pc, #340]	; (8006764 <USBD_CDC_Init+0x1e8>)
 8006610:	7819      	ldrb	r1, [r3, #0]
 8006612:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006616:	2202      	movs	r2, #2
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f002 fb20 	bl	8008c5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800661e:	4b51      	ldr	r3, [pc, #324]	; (8006764 <USBD_CDC_Init+0x1e8>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	f003 020f 	and.w	r2, r3, #15
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006636:	2201      	movs	r2, #1
 8006638:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800663a:	4b4b      	ldr	r3, [pc, #300]	; (8006768 <USBD_CDC_Init+0x1ec>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	f003 020f 	and.w	r2, r3, #15
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	3326      	adds	r3, #38	; 0x26
 8006650:	2210      	movs	r2, #16
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	e035      	b.n	80066c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006656:	4b42      	ldr	r3, [pc, #264]	; (8006760 <USBD_CDC_Init+0x1e4>)
 8006658:	7819      	ldrb	r1, [r3, #0]
 800665a:	2340      	movs	r3, #64	; 0x40
 800665c:	2202      	movs	r2, #2
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f002 fafd 	bl	8008c5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006664:	4b3e      	ldr	r3, [pc, #248]	; (8006760 <USBD_CDC_Init+0x1e4>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f003 020f 	and.w	r2, r3, #15
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	3324      	adds	r3, #36	; 0x24
 800667a:	2201      	movs	r2, #1
 800667c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800667e:	4b39      	ldr	r3, [pc, #228]	; (8006764 <USBD_CDC_Init+0x1e8>)
 8006680:	7819      	ldrb	r1, [r3, #0]
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	2202      	movs	r2, #2
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f002 fae9 	bl	8008c5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800668c:	4b35      	ldr	r3, [pc, #212]	; (8006764 <USBD_CDC_Init+0x1e8>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 020f 	and.w	r2, r3, #15
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066a4:	2201      	movs	r2, #1
 80066a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80066a8:	4b2f      	ldr	r3, [pc, #188]	; (8006768 <USBD_CDC_Init+0x1ec>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f003 020f 	and.w	r2, r3, #15
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	3326      	adds	r3, #38	; 0x26
 80066be:	2210      	movs	r2, #16
 80066c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066c2:	4b29      	ldr	r3, [pc, #164]	; (8006768 <USBD_CDC_Init+0x1ec>)
 80066c4:	7819      	ldrb	r1, [r3, #0]
 80066c6:	2308      	movs	r3, #8
 80066c8:	2203      	movs	r2, #3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f002 fac7 	bl	8008c5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066d0:	4b25      	ldr	r3, [pc, #148]	; (8006768 <USBD_CDC_Init+0x1ec>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f003 020f 	and.w	r2, r3, #15
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	3324      	adds	r3, #36	; 0x24
 80066e6:	2201      	movs	r2, #1
 80066e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	33b0      	adds	r3, #176	; 0xb0
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006720:	2302      	movs	r3, #2
 8006722:	e018      	b.n	8006756 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	7c1b      	ldrb	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800672c:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <USBD_CDC_Init+0x1e8>)
 800672e:	7819      	ldrb	r1, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006736:	f44f 7300 	mov.w	r3, #512	; 0x200
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f002 fb7e 	bl	8008e3c <USBD_LL_PrepareReceive>
 8006740:	e008      	b.n	8006754 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006742:	4b08      	ldr	r3, [pc, #32]	; (8006764 <USBD_CDC_Init+0x1e8>)
 8006744:	7819      	ldrb	r1, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800674c:	2340      	movs	r3, #64	; 0x40
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f002 fb74 	bl	8008e3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	200000df 	.word	0x200000df
 8006764:	200000e0 	.word	0x200000e0
 8006768:	200000e1 	.word	0x200000e1

0800676c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006778:	4b3a      	ldr	r3, [pc, #232]	; (8006864 <USBD_CDC_DeInit+0xf8>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f002 fa93 	bl	8008caa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006784:	4b37      	ldr	r3, [pc, #220]	; (8006864 <USBD_CDC_DeInit+0xf8>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f003 020f 	and.w	r2, r3, #15
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	3324      	adds	r3, #36	; 0x24
 800679a:	2200      	movs	r2, #0
 800679c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800679e:	4b32      	ldr	r3, [pc, #200]	; (8006868 <USBD_CDC_DeInit+0xfc>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f002 fa80 	bl	8008caa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80067aa:	4b2f      	ldr	r3, [pc, #188]	; (8006868 <USBD_CDC_DeInit+0xfc>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 020f 	and.w	r2, r3, #15
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067c2:	2200      	movs	r2, #0
 80067c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80067c6:	4b29      	ldr	r3, [pc, #164]	; (800686c <USBD_CDC_DeInit+0x100>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f002 fa6c 	bl	8008caa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067d2:	4b26      	ldr	r3, [pc, #152]	; (800686c <USBD_CDC_DeInit+0x100>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	f003 020f 	and.w	r2, r3, #15
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	4613      	mov	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	440b      	add	r3, r1
 80067e6:	3324      	adds	r3, #36	; 0x24
 80067e8:	2200      	movs	r2, #0
 80067ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067ec:	4b1f      	ldr	r3, [pc, #124]	; (800686c <USBD_CDC_DeInit+0x100>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	f003 020f 	and.w	r2, r3, #15
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	440b      	add	r3, r1
 8006800:	3326      	adds	r3, #38	; 0x26
 8006802:	2200      	movs	r2, #0
 8006804:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	32b0      	adds	r2, #176	; 0xb0
 8006810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01f      	beq.n	8006858 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	33b0      	adds	r3, #176	; 0xb0
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	32b0      	adds	r2, #176	; 0xb0
 8006836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800683a:	4618      	mov	r0, r3
 800683c:	f002 fb40 	bl	8008ec0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	32b0      	adds	r2, #176	; 0xb0
 800684a:	2100      	movs	r1, #0
 800684c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	200000df 	.word	0x200000df
 8006868:	200000e0 	.word	0x200000e0
 800686c:	200000e1 	.word	0x200000e1

08006870 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	32b0      	adds	r2, #176	; 0xb0
 8006884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006888:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800689c:	2303      	movs	r3, #3
 800689e:	e0bf      	b.n	8006a20 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d050      	beq.n	800694e <USBD_CDC_Setup+0xde>
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	f040 80af 	bne.w	8006a10 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	88db      	ldrh	r3, [r3, #6]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d03a      	beq.n	8006930 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	b25b      	sxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da1b      	bge.n	80068fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	33b0      	adds	r3, #176	; 0xb0
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	88d2      	ldrh	r2, [r2, #6]
 80068e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	88db      	ldrh	r3, [r3, #6]
 80068e6:	2b07      	cmp	r3, #7
 80068e8:	bf28      	it	cs
 80068ea:	2307      	movcs	r3, #7
 80068ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	89fa      	ldrh	r2, [r7, #14]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fd89 	bl	800840c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068fa:	e090      	b.n	8006a1e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	785a      	ldrb	r2, [r3, #1]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	88db      	ldrh	r3, [r3, #6]
 800690a:	2b3f      	cmp	r3, #63	; 0x3f
 800690c:	d803      	bhi.n	8006916 <USBD_CDC_Setup+0xa6>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	88db      	ldrh	r3, [r3, #6]
 8006912:	b2da      	uxtb	r2, r3
 8006914:	e000      	b.n	8006918 <USBD_CDC_Setup+0xa8>
 8006916:	2240      	movs	r2, #64	; 0x40
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800691e:	6939      	ldr	r1, [r7, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006926:	461a      	mov	r2, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fd9b 	bl	8008464 <USBD_CtlPrepareRx>
      break;
 800692e:	e076      	b.n	8006a1e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	33b0      	adds	r3, #176	; 0xb0
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	7850      	ldrb	r0, [r2, #1]
 8006946:	2200      	movs	r2, #0
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	4798      	blx	r3
      break;
 800694c:	e067      	b.n	8006a1e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	2b0b      	cmp	r3, #11
 8006954:	d851      	bhi.n	80069fa <USBD_CDC_Setup+0x18a>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <USBD_CDC_Setup+0xec>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	0800698d 	.word	0x0800698d
 8006960:	08006a09 	.word	0x08006a09
 8006964:	080069fb 	.word	0x080069fb
 8006968:	080069fb 	.word	0x080069fb
 800696c:	080069fb 	.word	0x080069fb
 8006970:	080069fb 	.word	0x080069fb
 8006974:	080069fb 	.word	0x080069fb
 8006978:	080069fb 	.word	0x080069fb
 800697c:	080069fb 	.word	0x080069fb
 8006980:	080069fb 	.word	0x080069fb
 8006984:	080069b7 	.word	0x080069b7
 8006988:	080069e1 	.word	0x080069e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b03      	cmp	r3, #3
 8006996:	d107      	bne.n	80069a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006998:	f107 030a 	add.w	r3, r7, #10
 800699c:	2202      	movs	r2, #2
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fd33 	bl	800840c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069a6:	e032      	b.n	8006a0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 fcbd 	bl	800832a <USBD_CtlError>
            ret = USBD_FAIL;
 80069b0:	2303      	movs	r3, #3
 80069b2:	75fb      	strb	r3, [r7, #23]
          break;
 80069b4:	e02b      	b.n	8006a0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d107      	bne.n	80069d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069c2:	f107 030d 	add.w	r3, r7, #13
 80069c6:	2201      	movs	r2, #1
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fd1e 	bl	800840c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069d0:	e01d      	b.n	8006a0e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fca8 	bl	800832a <USBD_CtlError>
            ret = USBD_FAIL;
 80069da:	2303      	movs	r3, #3
 80069dc:	75fb      	strb	r3, [r7, #23]
          break;
 80069de:	e016      	b.n	8006a0e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d00f      	beq.n	8006a0c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fc9b 	bl	800832a <USBD_CtlError>
            ret = USBD_FAIL;
 80069f4:	2303      	movs	r3, #3
 80069f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069f8:	e008      	b.n	8006a0c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fc94 	bl	800832a <USBD_CtlError>
          ret = USBD_FAIL;
 8006a02:	2303      	movs	r3, #3
 8006a04:	75fb      	strb	r3, [r7, #23]
          break;
 8006a06:	e002      	b.n	8006a0e <USBD_CDC_Setup+0x19e>
          break;
 8006a08:	bf00      	nop
 8006a0a:	e008      	b.n	8006a1e <USBD_CDC_Setup+0x1ae>
          break;
 8006a0c:	bf00      	nop
      }
      break;
 8006a0e:	e006      	b.n	8006a1e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fc89 	bl	800832a <USBD_CtlError>
      ret = USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	32b0      	adds	r2, #176	; 0xb0
 8006a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e065      	b.n	8006b1e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	32b0      	adds	r2, #176	; 0xb0
 8006a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	3318      	adds	r3, #24
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02f      	beq.n	8006adc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	f003 020f 	and.w	r2, r3, #15
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	3318      	adds	r3, #24
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	f003 010f 	and.w	r1, r3, #15
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	440b      	add	r3, r1
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4403      	add	r3, r0
 8006aa4:	3348      	adds	r3, #72	; 0x48
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006aac:	fb01 f303 	mul.w	r3, r1, r3
 8006ab0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d112      	bne.n	8006adc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	f003 020f 	and.w	r2, r3, #15
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3318      	adds	r3, #24
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ace:	78f9      	ldrb	r1, [r7, #3]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f002 f990 	bl	8008dfa <USBD_LL_Transmit>
 8006ada:	e01f      	b.n	8006b1c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	33b0      	adds	r3, #176	; 0xb0
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d010      	beq.n	8006b1c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	33b0      	adds	r3, #176	; 0xb0
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b18:	78fa      	ldrb	r2, [r7, #3]
 8006b1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	32b0      	adds	r2, #176	; 0xb0
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	32b0      	adds	r2, #176	; 0xb0
 8006b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e01a      	b.n	8006b8e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f002 f98e 	bl	8008e7e <USBD_LL_GetRxDataSize>
 8006b62:	4602      	mov	r2, r0
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	33b0      	adds	r3, #176	; 0xb0
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	32b0      	adds	r2, #176	; 0xb0
 8006ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e025      	b.n	8006c04 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	33b0      	adds	r3, #176	; 0xb0
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01a      	beq.n	8006c02 <USBD_CDC_EP0_RxReady+0x6c>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bd2:	2bff      	cmp	r3, #255	; 0xff
 8006bd4:	d015      	beq.n	8006c02 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	33b0      	adds	r3, #176	; 0xb0
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006bee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bf6:	b292      	uxth	r2, r2
 8006bf8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	22ff      	movs	r2, #255	; 0xff
 8006bfe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c14:	2182      	movs	r1, #130	; 0x82
 8006c16:	4818      	ldr	r0, [pc, #96]	; (8006c78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c18:	f000 fd4f 	bl	80076ba <USBD_GetEpDesc>
 8006c1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c1e:	2101      	movs	r1, #1
 8006c20:	4815      	ldr	r0, [pc, #84]	; (8006c78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c22:	f000 fd4a 	bl	80076ba <USBD_GetEpDesc>
 8006c26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c28:	2181      	movs	r1, #129	; 0x81
 8006c2a:	4813      	ldr	r0, [pc, #76]	; (8006c78 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c2c:	f000 fd45 	bl	80076ba <USBD_GetEpDesc>
 8006c30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2210      	movs	r2, #16
 8006c3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d006      	beq.n	8006c52 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c4c:	711a      	strb	r2, [r3, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d006      	beq.n	8006c66 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c60:	711a      	strb	r2, [r3, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2243      	movs	r2, #67	; 0x43
 8006c6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c6c:	4b02      	ldr	r3, [pc, #8]	; (8006c78 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	2000009c 	.word	0x2000009c

08006c7c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c84:	2182      	movs	r1, #130	; 0x82
 8006c86:	4818      	ldr	r0, [pc, #96]	; (8006ce8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c88:	f000 fd17 	bl	80076ba <USBD_GetEpDesc>
 8006c8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4815      	ldr	r0, [pc, #84]	; (8006ce8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c92:	f000 fd12 	bl	80076ba <USBD_GetEpDesc>
 8006c96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c98:	2181      	movs	r1, #129	; 0x81
 8006c9a:	4813      	ldr	r0, [pc, #76]	; (8006ce8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c9c:	f000 fd0d 	bl	80076ba <USBD_GetEpDesc>
 8006ca0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2210      	movs	r2, #16
 8006cac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d006      	beq.n	8006cc2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	711a      	strb	r2, [r3, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f042 0202 	orr.w	r2, r2, #2
 8006cc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d006      	beq.n	8006cd6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	711a      	strb	r2, [r3, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f042 0202 	orr.w	r2, r2, #2
 8006cd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2243      	movs	r2, #67	; 0x43
 8006cda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cdc:	4b02      	ldr	r3, [pc, #8]	; (8006ce8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	2000009c 	.word	0x2000009c

08006cec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cf4:	2182      	movs	r1, #130	; 0x82
 8006cf6:	4818      	ldr	r0, [pc, #96]	; (8006d58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cf8:	f000 fcdf 	bl	80076ba <USBD_GetEpDesc>
 8006cfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cfe:	2101      	movs	r1, #1
 8006d00:	4815      	ldr	r0, [pc, #84]	; (8006d58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d02:	f000 fcda 	bl	80076ba <USBD_GetEpDesc>
 8006d06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d08:	2181      	movs	r1, #129	; 0x81
 8006d0a:	4813      	ldr	r0, [pc, #76]	; (8006d58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d0c:	f000 fcd5 	bl	80076ba <USBD_GetEpDesc>
 8006d10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d006      	beq.n	8006d32 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d2c:	711a      	strb	r2, [r3, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d006      	beq.n	8006d46 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d40:	711a      	strb	r2, [r3, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2243      	movs	r2, #67	; 0x43
 8006d4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	2000009c 	.word	0x2000009c

08006d5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	220a      	movs	r2, #10
 8006d68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d6a:	4b03      	ldr	r3, [pc, #12]	; (8006d78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	20000058 	.word	0x20000058

08006d7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e009      	b.n	8006da4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	33b0      	adds	r3, #176	; 0xb0
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	32b0      	adds	r2, #176	; 0xb0
 8006dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e008      	b.n	8006de8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	371c      	adds	r7, #28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	32b0      	adds	r2, #176	; 0xb0
 8006e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e004      	b.n	8006e22 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	32b0      	adds	r2, #176	; 0xb0
 8006e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e46:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32b0      	adds	r2, #176	; 0xb0
 8006e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e025      	b.n	8006eae <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11f      	bne.n	8006eac <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e74:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <USBD_CDC_TransmitPacket+0x88>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f003 020f 	and.w	r2, r3, #15
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4403      	add	r3, r0
 8006e8e:	3318      	adds	r3, #24
 8006e90:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <USBD_CDC_TransmitPacket+0x88>)
 8006e94:	7819      	ldrb	r1, [r3, #0]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 ffa9 	bl	8008dfa <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	200000df 	.word	0x200000df

08006ebc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32b0      	adds	r2, #176	; 0xb0
 8006ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	32b0      	adds	r2, #176	; 0xb0
 8006ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e018      	b.n	8006f1c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	7c1b      	ldrb	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ef2:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <USBD_CDC_ReceivePacket+0x68>)
 8006ef4:	7819      	ldrb	r1, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 ff9b 	bl	8008e3c <USBD_LL_PrepareReceive>
 8006f06:	e008      	b.n	8006f1a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <USBD_CDC_ReceivePacket+0x68>)
 8006f0a:	7819      	ldrb	r1, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f12:	2340      	movs	r3, #64	; 0x40
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 ff91 	bl	8008e3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	200000e0 	.word	0x200000e0

08006f28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e01f      	b.n	8006f80 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	79fa      	ldrb	r2, [r7, #7]
 8006f72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f001 fe0b 	bl	8008b90 <USBD_LL_Init>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e025      	b.n	8006fec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32ae      	adds	r2, #174	; 0xae
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00f      	beq.n	8006fdc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	32ae      	adds	r2, #174	; 0xae
 8006fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	f107 020e 	add.w	r2, r7, #14
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 fe13 	bl	8008c28 <USBD_LL_Start>
 8007002:	4603      	mov	r3, r0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007014:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007016:	4618      	mov	r0, r3
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007038:	2b00      	cmp	r3, #0
 800703a:	d009      	beq.n	8007050 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	78fa      	ldrb	r2, [r7, #3]
 8007046:	4611      	mov	r1, r2
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	4798      	blx	r3
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b084      	sub	sp, #16
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	78fa      	ldrb	r2, [r7, #3]
 8007074:	4611      	mov	r1, r2
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 f908 	bl	80082b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070b4:	461a      	mov	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d01a      	beq.n	8007100 <USBD_LL_SetupStage+0x72>
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d822      	bhi.n	8007114 <USBD_LL_SetupStage+0x86>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <USBD_LL_SetupStage+0x4a>
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d00a      	beq.n	80070ec <USBD_LL_SetupStage+0x5e>
 80070d6:	e01d      	b.n	8007114 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fb5f 	bl	80077a4 <USBD_StdDevReq>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ea:	e020      	b.n	800712e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fbc7 	bl	8007888 <USBD_StdItfReq>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]
      break;
 80070fe:	e016      	b.n	800712e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fc29 	bl	8007960 <USBD_StdEPReq>
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
      break;
 8007112:	e00c      	b.n	800712e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800711a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800711e:	b2db      	uxtb	r3, r3
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fde0 	bl	8008ce8 <USBD_LL_StallEP>
 8007128:	4603      	mov	r3, r0
 800712a:	73fb      	strb	r3, [r7, #15]
      break;
 800712c:	bf00      	nop
  }

  return ret;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	460b      	mov	r3, r1
 8007142:	607a      	str	r2, [r7, #4]
 8007144:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d16e      	bne.n	800722e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007156:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800715e:	2b03      	cmp	r3, #3
 8007160:	f040 8098 	bne.w	8007294 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	429a      	cmp	r2, r3
 800716e:	d913      	bls.n	8007198 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	689a      	ldr	r2, [r3, #8]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	1ad2      	subs	r2, r2, r3
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	4293      	cmp	r3, r2
 8007188:	bf28      	it	cs
 800718a:	4613      	movcs	r3, r2
 800718c:	461a      	mov	r2, r3
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f001 f984 	bl	800849e <USBD_CtlContinueRx>
 8007196:	e07d      	b.n	8007294 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800719e:	f003 031f 	and.w	r3, r3, #31
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d014      	beq.n	80071d0 <USBD_LL_DataOutStage+0x98>
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d81d      	bhi.n	80071e6 <USBD_LL_DataOutStage+0xae>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <USBD_LL_DataOutStage+0x7c>
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d003      	beq.n	80071ba <USBD_LL_DataOutStage+0x82>
 80071b2:	e018      	b.n	80071e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	75bb      	strb	r3, [r7, #22]
            break;
 80071b8:	e018      	b.n	80071ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	4619      	mov	r1, r3
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 fa5e 	bl	8007686 <USBD_CoreFindIF>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75bb      	strb	r3, [r7, #22]
            break;
 80071ce:	e00d      	b.n	80071ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	4619      	mov	r1, r3
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 fa60 	bl	80076a0 <USBD_CoreFindEP>
 80071e0:	4603      	mov	r3, r0
 80071e2:	75bb      	strb	r3, [r7, #22]
            break;
 80071e4:	e002      	b.n	80071ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	75bb      	strb	r3, [r7, #22]
            break;
 80071ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071ec:	7dbb      	ldrb	r3, [r7, #22]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d119      	bne.n	8007226 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d113      	bne.n	8007226 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071fe:	7dba      	ldrb	r2, [r7, #22]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	32ae      	adds	r2, #174	; 0xae
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00b      	beq.n	8007226 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800720e:	7dba      	ldrb	r2, [r7, #22]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007216:	7dba      	ldrb	r2, [r7, #22]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	32ae      	adds	r2, #174	; 0xae
 800721c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f001 f94a 	bl	80084c0 <USBD_CtlSendStatus>
 800722c:	e032      	b.n	8007294 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007234:	b2db      	uxtb	r3, r3
 8007236:	4619      	mov	r1, r3
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fa31 	bl	80076a0 <USBD_CoreFindEP>
 800723e:	4603      	mov	r3, r0
 8007240:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007242:	7dbb      	ldrb	r3, [r7, #22]
 8007244:	2bff      	cmp	r3, #255	; 0xff
 8007246:	d025      	beq.n	8007294 <USBD_LL_DataOutStage+0x15c>
 8007248:	7dbb      	ldrb	r3, [r7, #22]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d122      	bne.n	8007294 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b03      	cmp	r3, #3
 8007258:	d117      	bne.n	800728a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800725a:	7dba      	ldrb	r2, [r7, #22]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	32ae      	adds	r2, #174	; 0xae
 8007260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00f      	beq.n	800728a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800726a:	7dba      	ldrb	r2, [r7, #22]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007272:	7dba      	ldrb	r2, [r7, #22]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	32ae      	adds	r2, #174	; 0xae
 8007278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	7afa      	ldrb	r2, [r7, #11]
 8007280:	4611      	mov	r1, r2
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	4798      	blx	r3
 8007286:	4603      	mov	r3, r0
 8007288:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	e000      	b.n	8007296 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	460b      	mov	r3, r1
 80072a8:	607a      	str	r2, [r7, #4]
 80072aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d16f      	bne.n	8007392 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3314      	adds	r3, #20
 80072b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d15a      	bne.n	8007378 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d914      	bls.n	80072f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	689a      	ldr	r2, [r3, #8]
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	1ad2      	subs	r2, r2, r3
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	461a      	mov	r2, r3
 80072e2:	6879      	ldr	r1, [r7, #4]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f001 f8ac 	bl	8008442 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072ea:	2300      	movs	r3, #0
 80072ec:	2200      	movs	r2, #0
 80072ee:	2100      	movs	r1, #0
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f001 fda3 	bl	8008e3c <USBD_LL_PrepareReceive>
 80072f6:	e03f      	b.n	8007378 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	429a      	cmp	r2, r3
 8007302:	d11c      	bne.n	800733e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800730c:	429a      	cmp	r2, r3
 800730e:	d316      	bcc.n	800733e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800731a:	429a      	cmp	r2, r3
 800731c:	d20f      	bcs.n	800733e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800731e:	2200      	movs	r2, #0
 8007320:	2100      	movs	r1, #0
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f001 f88d 	bl	8008442 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007330:	2300      	movs	r3, #0
 8007332:	2200      	movs	r2, #0
 8007334:	2100      	movs	r1, #0
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f001 fd80 	bl	8008e3c <USBD_LL_PrepareReceive>
 800733c:	e01c      	b.n	8007378 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b03      	cmp	r3, #3
 8007348:	d10f      	bne.n	800736a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800736a:	2180      	movs	r1, #128	; 0x80
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f001 fcbb 	bl	8008ce8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f001 f8b7 	bl	80084e6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d03a      	beq.n	80073f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7ff fe42 	bl	800700c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007390:	e032      	b.n	80073f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007392:	7afb      	ldrb	r3, [r7, #11]
 8007394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007398:	b2db      	uxtb	r3, r3
 800739a:	4619      	mov	r1, r3
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f97f 	bl	80076a0 <USBD_CoreFindEP>
 80073a2:	4603      	mov	r3, r0
 80073a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	2bff      	cmp	r3, #255	; 0xff
 80073aa:	d025      	beq.n	80073f8 <USBD_LL_DataInStage+0x15a>
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d122      	bne.n	80073f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d11c      	bne.n	80073f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073be:	7dfa      	ldrb	r2, [r7, #23]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	32ae      	adds	r2, #174	; 0xae
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d014      	beq.n	80073f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073ce:	7dfa      	ldrb	r2, [r7, #23]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073d6:	7dfa      	ldrb	r2, [r7, #23]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	32ae      	adds	r2, #174	; 0xae
 80073dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	7afa      	ldrb	r2, [r7, #11]
 80073e4:	4611      	mov	r1, r2
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	4798      	blx	r3
 80073ea:	4603      	mov	r3, r0
 80073ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073ee:	7dbb      	ldrb	r3, [r7, #22]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073f4:	7dbb      	ldrb	r3, [r7, #22]
 80073f6:	e000      	b.n	80073fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b084      	sub	sp, #16
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d014      	beq.n	8007468 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6852      	ldr	r2, [r2, #4]
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	4611      	mov	r1, r2
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007464:	2303      	movs	r3, #3
 8007466:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	2200      	movs	r2, #0
 800746c:	2100      	movs	r1, #0
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 fbf5 	bl	8008c5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2240      	movs	r2, #64	; 0x40
 8007480:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007484:	2340      	movs	r3, #64	; 0x40
 8007486:	2200      	movs	r2, #0
 8007488:	2180      	movs	r1, #128	; 0x80
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fbe7 	bl	8008c5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2240      	movs	r2, #64	; 0x40
 800749a:	621a      	str	r2, [r3, #32]

  return ret;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	78fa      	ldrb	r2, [r7, #3]
 80074b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2204      	movs	r2, #4
 80074e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b04      	cmp	r3, #4
 8007504:	d106      	bne.n	8007514 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800750c:	b2da      	uxtb	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b03      	cmp	r3, #3
 8007534:	d110      	bne.n	8007558 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	32ae      	adds	r2, #174	; 0xae
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	e01c      	b.n	80075be <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b03      	cmp	r3, #3
 800758e:	d115      	bne.n	80075bc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	32ae      	adds	r2, #174	; 0xae
 800759a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	32ae      	adds	r2, #174	; 0xae
 80075ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	4611      	mov	r1, r2
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	32ae      	adds	r2, #174	; 0xae
 80075dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e01c      	b.n	8007622 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d115      	bne.n	8007620 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32ae      	adds	r2, #174	; 0xae
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	; 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	4611      	mov	r1, r2
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6852      	ldr	r2, [r2, #4]
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	4611      	mov	r1, r2
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	4798      	blx	r3
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007692:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	429a      	cmp	r2, r3
 80076e0:	d920      	bls.n	8007724 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076ea:	e013      	b.n	8007714 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076ec:	f107 030a 	add.w	r3, r7, #10
 80076f0:	4619      	mov	r1, r3
 80076f2:	6978      	ldr	r0, [r7, #20]
 80076f4:	f000 f81b 	bl	800772e <USBD_GetNextDesc>
 80076f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	2b05      	cmp	r3, #5
 8007700:	d108      	bne.n	8007714 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	789b      	ldrb	r3, [r3, #2]
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	429a      	cmp	r2, r3
 800770e:	d008      	beq.n	8007722 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	885b      	ldrh	r3, [r3, #2]
 8007718:	b29a      	uxth	r2, r3
 800771a:	897b      	ldrh	r3, [r7, #10]
 800771c:	429a      	cmp	r2, r3
 800771e:	d8e5      	bhi.n	80076ec <USBD_GetEpDesc+0x32>
 8007720:	e000      	b.n	8007724 <USBD_GetEpDesc+0x6a>
          break;
 8007722:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007724:	693b      	ldr	r3, [r7, #16]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	881a      	ldrh	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	4413      	add	r3, r2
 8007748:	b29a      	uxth	r2, r3
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4413      	add	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800775a:	68fb      	ldr	r3, [r7, #12]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	3301      	adds	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007786:	8a3b      	ldrh	r3, [r7, #16]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	b21a      	sxth	r2, r3
 800778c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007790:	4313      	orrs	r3, r2
 8007792:	b21b      	sxth	r3, r3
 8007794:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007796:	89fb      	ldrh	r3, [r7, #14]
}
 8007798:	4618      	mov	r0, r3
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d005      	beq.n	80077ca <USBD_StdDevReq+0x26>
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d857      	bhi.n	8007872 <USBD_StdDevReq+0xce>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00f      	beq.n	80077e6 <USBD_StdDevReq+0x42>
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d153      	bne.n	8007872 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	32ae      	adds	r2, #174	; 0xae
 80077d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
      break;
 80077e4:	e04a      	b.n	800787c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b09      	cmp	r3, #9
 80077ec:	d83b      	bhi.n	8007866 <USBD_StdDevReq+0xc2>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <USBD_StdDevReq+0x50>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007849 	.word	0x08007849
 80077f8:	0800785d 	.word	0x0800785d
 80077fc:	08007867 	.word	0x08007867
 8007800:	08007853 	.word	0x08007853
 8007804:	08007867 	.word	0x08007867
 8007808:	08007827 	.word	0x08007827
 800780c:	0800781d 	.word	0x0800781d
 8007810:	08007867 	.word	0x08007867
 8007814:	0800783f 	.word	0x0800783f
 8007818:	08007831 	.word	0x08007831
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa3c 	bl	8007c9c <USBD_GetDescriptor>
          break;
 8007824:	e024      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fba1 	bl	8007f70 <USBD_SetAddress>
          break;
 800782e:	e01f      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fbe0 	bl	8007ff8 <USBD_SetConfig>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]
          break;
 800783c:	e018      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fc83 	bl	800814c <USBD_GetConfig>
          break;
 8007846:	e013      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fcb4 	bl	80081b8 <USBD_GetStatus>
          break;
 8007850:	e00e      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fce3 	bl	8008220 <USBD_SetFeature>
          break;
 800785a:	e009      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fd07 	bl	8008272 <USBD_ClrFeature>
          break;
 8007864:	e004      	b.n	8007870 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fd5e 	bl	800832a <USBD_CtlError>
          break;
 800786e:	bf00      	nop
      }
      break;
 8007870:	e004      	b.n	800787c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fd58 	bl	800832a <USBD_CtlError>
      break;
 800787a:	bf00      	nop
  }

  return ret;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop

08007888 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d005      	beq.n	80078ae <USBD_StdItfReq+0x26>
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d852      	bhi.n	800794c <USBD_StdItfReq+0xc4>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <USBD_StdItfReq+0x26>
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d14e      	bne.n	800794c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d840      	bhi.n	800793e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	889b      	ldrh	r3, [r3, #4]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d836      	bhi.n	8007934 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	889b      	ldrh	r3, [r3, #4]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff fed9 	bl	8007686 <USBD_CoreFindIF>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2bff      	cmp	r3, #255	; 0xff
 80078dc:	d01d      	beq.n	800791a <USBD_StdItfReq+0x92>
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d11a      	bne.n	800791a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078e4:	7bba      	ldrb	r2, [r7, #14]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32ae      	adds	r2, #174	; 0xae
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00f      	beq.n	8007914 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078f4:	7bba      	ldrb	r2, [r7, #14]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078fc:	7bba      	ldrb	r2, [r7, #14]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	32ae      	adds	r2, #174	; 0xae
 8007902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007912:	e004      	b.n	800791e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007918:	e001      	b.n	800791e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800791a:	2303      	movs	r3, #3
 800791c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	88db      	ldrh	r3, [r3, #6]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d110      	bne.n	8007948 <USBD_StdItfReq+0xc0>
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fdc7 	bl	80084c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007932:	e009      	b.n	8007948 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fcf7 	bl	800832a <USBD_CtlError>
          break;
 800793c:	e004      	b.n	8007948 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fcf2 	bl	800832a <USBD_CtlError>
          break;
 8007946:	e000      	b.n	800794a <USBD_StdItfReq+0xc2>
          break;
 8007948:	bf00      	nop
      }
      break;
 800794a:	e004      	b.n	8007956 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fceb 	bl	800832a <USBD_CtlError>
      break;
 8007954:	bf00      	nop
  }

  return ret;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	889b      	ldrh	r3, [r3, #4]
 8007972:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d007      	beq.n	8007990 <USBD_StdEPReq+0x30>
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	f200 817f 	bhi.w	8007c84 <USBD_StdEPReq+0x324>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d02a      	beq.n	80079e0 <USBD_StdEPReq+0x80>
 800798a:	2b20      	cmp	r3, #32
 800798c:	f040 817a 	bne.w	8007c84 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff fe83 	bl	80076a0 <USBD_CoreFindEP>
 800799a:	4603      	mov	r3, r0
 800799c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800799e:	7b7b      	ldrb	r3, [r7, #13]
 80079a0:	2bff      	cmp	r3, #255	; 0xff
 80079a2:	f000 8174 	beq.w	8007c8e <USBD_StdEPReq+0x32e>
 80079a6:	7b7b      	ldrb	r3, [r7, #13]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f040 8170 	bne.w	8007c8e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079ae:	7b7a      	ldrb	r2, [r7, #13]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079b6:	7b7a      	ldrb	r2, [r7, #13]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	32ae      	adds	r2, #174	; 0xae
 80079bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8163 	beq.w	8007c8e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079c8:	7b7a      	ldrb	r2, [r7, #13]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	32ae      	adds	r2, #174	; 0xae
 80079ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079de:	e156      	b.n	8007c8e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d008      	beq.n	80079fa <USBD_StdEPReq+0x9a>
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	f300 8145 	bgt.w	8007c78 <USBD_StdEPReq+0x318>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 809b 	beq.w	8007b2a <USBD_StdEPReq+0x1ca>
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d03c      	beq.n	8007a72 <USBD_StdEPReq+0x112>
 80079f8:	e13e      	b.n	8007c78 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d002      	beq.n	8007a0c <USBD_StdEPReq+0xac>
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d016      	beq.n	8007a38 <USBD_StdEPReq+0xd8>
 8007a0a:	e02c      	b.n	8007a66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00d      	beq.n	8007a2e <USBD_StdEPReq+0xce>
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b80      	cmp	r3, #128	; 0x80
 8007a16:	d00a      	beq.n	8007a2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 f963 	bl	8008ce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a22:	2180      	movs	r1, #128	; 0x80
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 f95f 	bl	8008ce8 <USBD_LL_StallEP>
 8007a2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a2c:	e020      	b.n	8007a70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc7a 	bl	800832a <USBD_CtlError>
              break;
 8007a36:	e01b      	b.n	8007a70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	885b      	ldrh	r3, [r3, #2]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10e      	bne.n	8007a5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <USBD_StdEPReq+0xfe>
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b80      	cmp	r3, #128	; 0x80
 8007a4a:	d008      	beq.n	8007a5e <USBD_StdEPReq+0xfe>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	88db      	ldrh	r3, [r3, #6]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f945 	bl	8008ce8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fd2e 	bl	80084c0 <USBD_CtlSendStatus>

              break;
 8007a64:	e004      	b.n	8007a70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fc5e 	bl	800832a <USBD_CtlError>
              break;
 8007a6e:	bf00      	nop
          }
          break;
 8007a70:	e107      	b.n	8007c82 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d002      	beq.n	8007a84 <USBD_StdEPReq+0x124>
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d016      	beq.n	8007ab0 <USBD_StdEPReq+0x150>
 8007a82:	e04b      	b.n	8007b1c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <USBD_StdEPReq+0x146>
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b80      	cmp	r3, #128	; 0x80
 8007a8e:	d00a      	beq.n	8007aa6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 f927 	bl	8008ce8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a9a:	2180      	movs	r1, #128	; 0x80
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f923 	bl	8008ce8 <USBD_LL_StallEP>
 8007aa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007aa4:	e040      	b.n	8007b28 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fc3e 	bl	800832a <USBD_CtlError>
              break;
 8007aae:	e03b      	b.n	8007b28 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	885b      	ldrh	r3, [r3, #2]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d136      	bne.n	8007b26 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 f92d 	bl	8008d26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fcf7 	bl	80084c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fde2 	bl	80076a0 <USBD_CoreFindEP>
 8007adc:	4603      	mov	r3, r0
 8007ade:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ae0:	7b7b      	ldrb	r3, [r7, #13]
 8007ae2:	2bff      	cmp	r3, #255	; 0xff
 8007ae4:	d01f      	beq.n	8007b26 <USBD_StdEPReq+0x1c6>
 8007ae6:	7b7b      	ldrb	r3, [r7, #13]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11c      	bne.n	8007b26 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007aec:	7b7a      	ldrb	r2, [r7, #13]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007af4:	7b7a      	ldrb	r2, [r7, #13]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	32ae      	adds	r2, #174	; 0xae
 8007afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d010      	beq.n	8007b26 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b04:	7b7a      	ldrb	r2, [r7, #13]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	32ae      	adds	r2, #174	; 0xae
 8007b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b1a:	e004      	b.n	8007b26 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fc03 	bl	800832a <USBD_CtlError>
              break;
 8007b24:	e000      	b.n	8007b28 <USBD_StdEPReq+0x1c8>
              break;
 8007b26:	bf00      	nop
          }
          break;
 8007b28:	e0ab      	b.n	8007c82 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d002      	beq.n	8007b3c <USBD_StdEPReq+0x1dc>
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d032      	beq.n	8007ba0 <USBD_StdEPReq+0x240>
 8007b3a:	e097      	b.n	8007c6c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <USBD_StdEPReq+0x1f2>
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b80      	cmp	r3, #128	; 0x80
 8007b46:	d004      	beq.n	8007b52 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fbed 	bl	800832a <USBD_CtlError>
                break;
 8007b50:	e091      	b.n	8007c76 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	da0b      	bge.n	8007b72 <USBD_StdEPReq+0x212>
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	3310      	adds	r3, #16
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3304      	adds	r3, #4
 8007b70:	e00b      	b.n	8007b8a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	3304      	adds	r3, #4
 8007b8a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2202      	movs	r2, #2
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fc37 	bl	800840c <USBD_CtlSendData>
              break;
 8007b9e:	e06a      	b.n	8007c76 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da11      	bge.n	8007bcc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	3324      	adds	r3, #36	; 0x24
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d117      	bne.n	8007bf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fbb0 	bl	800832a <USBD_CtlError>
                  break;
 8007bca:	e054      	b.n	8007c76 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	f003 020f 	and.w	r2, r3, #15
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fb9d 	bl	800832a <USBD_CtlError>
                  break;
 8007bf0:	e041      	b.n	8007c76 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	da0b      	bge.n	8007c12 <USBD_StdEPReq+0x2b2>
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	3310      	adds	r3, #16
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3304      	adds	r3, #4
 8007c10:	e00b      	b.n	8007c2a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4413      	add	r3, r2
 8007c28:	3304      	adds	r3, #4
 8007c2a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <USBD_StdEPReq+0x2d8>
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b80      	cmp	r3, #128	; 0x80
 8007c36:	d103      	bne.n	8007c40 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e00e      	b.n	8007c5e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f88d 	bl	8008d64 <USBD_LL_IsStallEP>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2201      	movs	r2, #1
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	e002      	b.n	8007c5e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2202      	movs	r2, #2
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fbd1 	bl	800840c <USBD_CtlSendData>
              break;
 8007c6a:	e004      	b.n	8007c76 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb5b 	bl	800832a <USBD_CtlError>
              break;
 8007c74:	bf00      	nop
          }
          break;
 8007c76:	e004      	b.n	8007c82 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fb55 	bl	800832a <USBD_CtlError>
          break;
 8007c80:	bf00      	nop
      }
      break;
 8007c82:	e005      	b.n	8007c90 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fb4f 	bl	800832a <USBD_CtlError>
      break;
 8007c8c:	e000      	b.n	8007c90 <USBD_StdEPReq+0x330>
      break;
 8007c8e:	bf00      	nop
  }

  return ret;
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	2b06      	cmp	r3, #6
 8007cbe:	f200 8128 	bhi.w	8007f12 <USBD_GetDescriptor+0x276>
 8007cc2:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <USBD_GetDescriptor+0x2c>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007ce5 	.word	0x08007ce5
 8007ccc:	08007cfd 	.word	0x08007cfd
 8007cd0:	08007d3d 	.word	0x08007d3d
 8007cd4:	08007f13 	.word	0x08007f13
 8007cd8:	08007f13 	.word	0x08007f13
 8007cdc:	08007eb3 	.word	0x08007eb3
 8007ce0:	08007edf 	.word	0x08007edf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	7c12      	ldrb	r2, [r2, #16]
 8007cf0:	f107 0108 	add.w	r1, r7, #8
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4798      	blx	r3
 8007cf8:	60f8      	str	r0, [r7, #12]
      break;
 8007cfa:	e112      	b.n	8007f22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	7c1b      	ldrb	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10d      	bne.n	8007d20 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0c:	f107 0208 	add.w	r2, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d1e:	e100      	b.n	8007f22 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	f107 0208 	add.w	r2, r7, #8
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	2202      	movs	r2, #2
 8007d38:	701a      	strb	r2, [r3, #0]
      break;
 8007d3a:	e0f2      	b.n	8007f22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	885b      	ldrh	r3, [r3, #2]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	f200 80ac 	bhi.w	8007ea0 <USBD_GetDescriptor+0x204>
 8007d48:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <USBD_GetDescriptor+0xb4>)
 8007d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4e:	bf00      	nop
 8007d50:	08007d69 	.word	0x08007d69
 8007d54:	08007d9d 	.word	0x08007d9d
 8007d58:	08007dd1 	.word	0x08007dd1
 8007d5c:	08007e05 	.word	0x08007e05
 8007d60:	08007e39 	.word	0x08007e39
 8007d64:	08007e6d 	.word	0x08007e6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	7c12      	ldrb	r2, [r2, #16]
 8007d80:	f107 0108 	add.w	r1, r7, #8
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
 8007d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d8a:	e091      	b.n	8007eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 facb 	bl	800832a <USBD_CtlError>
            err++;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	3301      	adds	r3, #1
 8007d98:	72fb      	strb	r3, [r7, #11]
          break;
 8007d9a:	e089      	b.n	8007eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	7c12      	ldrb	r2, [r2, #16]
 8007db4:	f107 0108 	add.w	r1, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dbe:	e077      	b.n	8007eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fab1 	bl	800832a <USBD_CtlError>
            err++;
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dce:	e06f      	b.n	8007eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00b      	beq.n	8007df4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	7c12      	ldrb	r2, [r2, #16]
 8007de8:	f107 0108 	add.w	r1, r7, #8
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
 8007df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007df2:	e05d      	b.n	8007eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa97 	bl	800832a <USBD_CtlError>
            err++;
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	72fb      	strb	r3, [r7, #11]
          break;
 8007e02:	e055      	b.n	8007eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	7c12      	ldrb	r2, [r2, #16]
 8007e1c:	f107 0108 	add.w	r1, r7, #8
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e26:	e043      	b.n	8007eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fa7d 	bl	800832a <USBD_CtlError>
            err++;
 8007e30:	7afb      	ldrb	r3, [r7, #11]
 8007e32:	3301      	adds	r3, #1
 8007e34:	72fb      	strb	r3, [r7, #11]
          break;
 8007e36:	e03b      	b.n	8007eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	7c12      	ldrb	r2, [r2, #16]
 8007e50:	f107 0108 	add.w	r1, r7, #8
 8007e54:	4610      	mov	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5a:	e029      	b.n	8007eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa63 	bl	800832a <USBD_CtlError>
            err++;
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	3301      	adds	r3, #1
 8007e68:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6a:	e021      	b.n	8007eb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	7c12      	ldrb	r2, [r2, #16]
 8007e84:	f107 0108 	add.w	r1, r7, #8
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4798      	blx	r3
 8007e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e8e:	e00f      	b.n	8007eb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa49 	bl	800832a <USBD_CtlError>
            err++;
 8007e98:	7afb      	ldrb	r3, [r7, #11]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e9e:	e007      	b.n	8007eb0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fa41 	bl	800832a <USBD_CtlError>
          err++;
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007eae:	bf00      	nop
      }
      break;
 8007eb0:	e037      	b.n	8007f22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	7c1b      	ldrb	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec2:	f107 0208 	add.w	r2, r7, #8
 8007ec6:	4610      	mov	r0, r2
 8007ec8:	4798      	blx	r3
 8007eca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ecc:	e029      	b.n	8007f22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fa2a 	bl	800832a <USBD_CtlError>
        err++;
 8007ed6:	7afb      	ldrb	r3, [r7, #11]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	72fb      	strb	r3, [r7, #11]
      break;
 8007edc:	e021      	b.n	8007f22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	7c1b      	ldrb	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10d      	bne.n	8007f02 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eee:	f107 0208 	add.w	r2, r7, #8
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4798      	blx	r3
 8007ef6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3301      	adds	r3, #1
 8007efc:	2207      	movs	r2, #7
 8007efe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f00:	e00f      	b.n	8007f22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fa10 	bl	800832a <USBD_CtlError>
        err++;
 8007f0a:	7afb      	ldrb	r3, [r7, #11]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f10:	e007      	b.n	8007f22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fa08 	bl	800832a <USBD_CtlError>
      err++;
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f20:	bf00      	nop
  }

  if (err != 0U)
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d11e      	bne.n	8007f66 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	88db      	ldrh	r3, [r3, #6]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d016      	beq.n	8007f5e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f30:	893b      	ldrh	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00e      	beq.n	8007f54 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	88da      	ldrh	r2, [r3, #6]
 8007f3a:	893b      	ldrh	r3, [r7, #8]
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	bf28      	it	cs
 8007f40:	4613      	movcs	r3, r2
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f46:	893b      	ldrh	r3, [r7, #8]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fa5d 	bl	800840c <USBD_CtlSendData>
 8007f52:	e009      	b.n	8007f68 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f9e7 	bl	800832a <USBD_CtlError>
 8007f5c:	e004      	b.n	8007f68 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 faae 	bl	80084c0 <USBD_CtlSendStatus>
 8007f64:	e000      	b.n	8007f68 <USBD_GetDescriptor+0x2cc>
    return;
 8007f66:	bf00      	nop
  }
}
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop

08007f70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	889b      	ldrh	r3, [r3, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d131      	bne.n	8007fe6 <USBD_SetAddress+0x76>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	88db      	ldrh	r3, [r3, #6]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d12d      	bne.n	8007fe6 <USBD_SetAddress+0x76>
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	885b      	ldrh	r3, [r3, #2]
 8007f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f90:	d829      	bhi.n	8007fe6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	885b      	ldrh	r3, [r3, #2]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d104      	bne.n	8007fb4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f9bc 	bl	800832a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb2:	e01d      	b.n	8007ff0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	7bfa      	ldrb	r2, [r7, #15]
 8007fb8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fefb 	bl	8008dbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fa7a 	bl	80084c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d004      	beq.n	8007fdc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fda:	e009      	b.n	8007ff0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe4:	e004      	b.n	8007ff0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f99e 	bl	800832a <USBD_CtlError>
  }
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	885b      	ldrh	r3, [r3, #2]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	4b4e      	ldr	r3, [pc, #312]	; (8008148 <USBD_SetConfig+0x150>)
 800800e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008010:	4b4d      	ldr	r3, [pc, #308]	; (8008148 <USBD_SetConfig+0x150>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d905      	bls.n	8008024 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f985 	bl	800832a <USBD_CtlError>
    return USBD_FAIL;
 8008020:	2303      	movs	r3, #3
 8008022:	e08c      	b.n	800813e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d002      	beq.n	8008036 <USBD_SetConfig+0x3e>
 8008030:	2b03      	cmp	r3, #3
 8008032:	d029      	beq.n	8008088 <USBD_SetConfig+0x90>
 8008034:	e075      	b.n	8008122 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008036:	4b44      	ldr	r3, [pc, #272]	; (8008148 <USBD_SetConfig+0x150>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d020      	beq.n	8008080 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800803e:	4b42      	ldr	r3, [pc, #264]	; (8008148 <USBD_SetConfig+0x150>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008048:	4b3f      	ldr	r3, [pc, #252]	; (8008148 <USBD_SetConfig+0x150>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fe ffe7 	bl	8007022 <USBD_SetClassConfig>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d008      	beq.n	8008070 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f962 	bl	800832a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2202      	movs	r2, #2
 800806a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800806e:	e065      	b.n	800813c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa25 	bl	80084c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2203      	movs	r2, #3
 800807a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800807e:	e05d      	b.n	800813c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fa1d 	bl	80084c0 <USBD_CtlSendStatus>
      break;
 8008086:	e059      	b.n	800813c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008088:	4b2f      	ldr	r3, [pc, #188]	; (8008148 <USBD_SetConfig+0x150>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d112      	bne.n	80080b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008098:	4b2b      	ldr	r3, [pc, #172]	; (8008148 <USBD_SetConfig+0x150>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080a2:	4b29      	ldr	r3, [pc, #164]	; (8008148 <USBD_SetConfig+0x150>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7fe ffd6 	bl	800705a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fa06 	bl	80084c0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080b4:	e042      	b.n	800813c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080b6:	4b24      	ldr	r3, [pc, #144]	; (8008148 <USBD_SetConfig+0x150>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d02a      	beq.n	800811a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7fe ffc4 	bl	800705a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080d2:	4b1d      	ldr	r3, [pc, #116]	; (8008148 <USBD_SetConfig+0x150>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080dc:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <USBD_SetConfig+0x150>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fe ff9d 	bl	8007022 <USBD_SetClassConfig>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00f      	beq.n	8008112 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f918 	bl	800832a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fe ffa9 	bl	800705a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008110:	e014      	b.n	800813c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f9d4 	bl	80084c0 <USBD_CtlSendStatus>
      break;
 8008118:	e010      	b.n	800813c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9d0 	bl	80084c0 <USBD_CtlSendStatus>
      break;
 8008120:	e00c      	b.n	800813c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f900 	bl	800832a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800812a:	4b07      	ldr	r3, [pc, #28]	; (8008148 <USBD_SetConfig+0x150>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7fe ff92 	bl	800705a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008136:	2303      	movs	r3, #3
 8008138:	73fb      	strb	r3, [r7, #15]
      break;
 800813a:	bf00      	nop
  }

  return ret;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	200002b0 	.word	0x200002b0

0800814c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	88db      	ldrh	r3, [r3, #6]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d004      	beq.n	8008168 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f8e2 	bl	800832a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008166:	e023      	b.n	80081b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b02      	cmp	r3, #2
 8008172:	dc02      	bgt.n	800817a <USBD_GetConfig+0x2e>
 8008174:	2b00      	cmp	r3, #0
 8008176:	dc03      	bgt.n	8008180 <USBD_GetConfig+0x34>
 8008178:	e015      	b.n	80081a6 <USBD_GetConfig+0x5a>
 800817a:	2b03      	cmp	r3, #3
 800817c:	d00b      	beq.n	8008196 <USBD_GetConfig+0x4a>
 800817e:	e012      	b.n	80081a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3308      	adds	r3, #8
 800818a:	2201      	movs	r2, #1
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f93c 	bl	800840c <USBD_CtlSendData>
        break;
 8008194:	e00c      	b.n	80081b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3304      	adds	r3, #4
 800819a:	2201      	movs	r2, #1
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f934 	bl	800840c <USBD_CtlSendData>
        break;
 80081a4:	e004      	b.n	80081b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f8be 	bl	800832a <USBD_CtlError>
        break;
 80081ae:	bf00      	nop
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	3b01      	subs	r3, #1
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d81e      	bhi.n	800820e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	88db      	ldrh	r3, [r3, #6]
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d004      	beq.n	80081e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f8a5 	bl	800832a <USBD_CtlError>
        break;
 80081e0:	e01a      	b.n	8008218 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d005      	beq.n	80081fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f043 0202 	orr.w	r2, r3, #2
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	330c      	adds	r3, #12
 8008202:	2202      	movs	r2, #2
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f900 	bl	800840c <USBD_CtlSendData>
      break;
 800820c:	e004      	b.n	8008218 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f88a 	bl	800832a <USBD_CtlError>
      break;
 8008216:	bf00      	nop
  }
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d107      	bne.n	8008242 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f940 	bl	80084c0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008240:	e013      	b.n	800826a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	885b      	ldrh	r3, [r3, #2]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d10b      	bne.n	8008262 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	889b      	ldrh	r3, [r3, #4]
 800824e:	0a1b      	lsrs	r3, r3, #8
 8008250:	b29b      	uxth	r3, r3
 8008252:	b2da      	uxtb	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f930 	bl	80084c0 <USBD_CtlSendStatus>
}
 8008260:	e003      	b.n	800826a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f860 	bl	800832a <USBD_CtlError>
}
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008282:	b2db      	uxtb	r3, r3
 8008284:	3b01      	subs	r3, #1
 8008286:	2b02      	cmp	r3, #2
 8008288:	d80b      	bhi.n	80082a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d10c      	bne.n	80082ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f910 	bl	80084c0 <USBD_CtlSendStatus>
      }
      break;
 80082a0:	e004      	b.n	80082ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f840 	bl	800832a <USBD_CtlError>
      break;
 80082aa:	e000      	b.n	80082ae <USBD_ClrFeature+0x3c>
      break;
 80082ac:	bf00      	nop
  }
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	781a      	ldrb	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3301      	adds	r3, #1
 80082d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	781a      	ldrb	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f7ff fa41 	bl	8007768 <SWAPBYTE>
 80082e6:	4603      	mov	r3, r0
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fa34 	bl	8007768 <SWAPBYTE>
 8008300:	4603      	mov	r3, r0
 8008302:	461a      	mov	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3301      	adds	r3, #1
 8008312:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7ff fa27 	bl	8007768 <SWAPBYTE>
 800831a:	4603      	mov	r3, r0
 800831c:	461a      	mov	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	80da      	strh	r2, [r3, #6]
}
 8008322:	bf00      	nop
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b082      	sub	sp, #8
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fcd6 	bl	8008ce8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800833c:	2100      	movs	r1, #0
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fcd2 	bl	8008ce8 <USBD_LL_StallEP>
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d036      	beq.n	80083d0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008366:	6938      	ldr	r0, [r7, #16]
 8008368:	f000 f836 	bl	80083d8 <USBD_GetLen>
 800836c:	4603      	mov	r3, r0
 800836e:	3301      	adds	r3, #1
 8008370:	b29b      	uxth	r3, r3
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	b29a      	uxth	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	4413      	add	r3, r2
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	7812      	ldrb	r2, [r2, #0]
 8008384:	701a      	strb	r2, [r3, #0]
  idx++;
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	3301      	adds	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4413      	add	r3, r2
 8008392:	2203      	movs	r2, #3
 8008394:	701a      	strb	r2, [r3, #0]
  idx++;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	3301      	adds	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800839c:	e013      	b.n	80083c6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	4413      	add	r3, r2
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	7812      	ldrb	r2, [r2, #0]
 80083a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	3301      	adds	r3, #1
 80083ae:	613b      	str	r3, [r7, #16]
    idx++;
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	3301      	adds	r3, #1
 80083b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	4413      	add	r3, r2
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
    idx++;
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
 80083c2:	3301      	adds	r3, #1
 80083c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e7      	bne.n	800839e <USBD_GetString+0x52>
 80083ce:	e000      	b.n	80083d2 <USBD_GetString+0x86>
    return;
 80083d0:	bf00      	nop
  }
}
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083e8:	e005      	b.n	80083f6 <USBD_GetLen+0x1e>
  {
    len++;
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	3301      	adds	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1f5      	bne.n	80083ea <USBD_GetLen+0x12>
  }

  return len;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2202      	movs	r2, #2
 800841c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	2100      	movs	r1, #0
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 fce1 	bl	8008dfa <USBD_LL_Transmit>

  return USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	2100      	movs	r1, #0
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 fcd0 	bl	8008dfa <USBD_LL_Transmit>

  return USBD_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2203      	movs	r2, #3
 8008474:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	2100      	movs	r1, #0
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 fcd4 	bl	8008e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	2100      	movs	r1, #0
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 fcc3 	bl	8008e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2204      	movs	r2, #4
 80084cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084d0:	2300      	movs	r3, #0
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fc8f 	bl	8008dfa <USBD_LL_Transmit>

  return USBD_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2205      	movs	r2, #5
 80084f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084f6:	2300      	movs	r3, #0
 80084f8:	2200      	movs	r2, #0
 80084fa:	2100      	movs	r1, #0
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fc9d 	bl	8008e3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008510:	2200      	movs	r2, #0
 8008512:	4912      	ldr	r1, [pc, #72]	; (800855c <MX_USB_DEVICE_Init+0x50>)
 8008514:	4812      	ldr	r0, [pc, #72]	; (8008560 <MX_USB_DEVICE_Init+0x54>)
 8008516:	f7fe fd07 	bl	8006f28 <USBD_Init>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008520:	f7f8 fdcc 	bl	80010bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008524:	490f      	ldr	r1, [pc, #60]	; (8008564 <MX_USB_DEVICE_Init+0x58>)
 8008526:	480e      	ldr	r0, [pc, #56]	; (8008560 <MX_USB_DEVICE_Init+0x54>)
 8008528:	f7fe fd2e 	bl	8006f88 <USBD_RegisterClass>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008532:	f7f8 fdc3 	bl	80010bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008536:	490c      	ldr	r1, [pc, #48]	; (8008568 <MX_USB_DEVICE_Init+0x5c>)
 8008538:	4809      	ldr	r0, [pc, #36]	; (8008560 <MX_USB_DEVICE_Init+0x54>)
 800853a:	f7fe fc1f 	bl	8006d7c <USBD_CDC_RegisterInterface>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008544:	f7f8 fdba 	bl	80010bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008548:	4805      	ldr	r0, [pc, #20]	; (8008560 <MX_USB_DEVICE_Init+0x54>)
 800854a:	f7fe fd53 	bl	8006ff4 <USBD_Start>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008554:	f7f8 fdb2 	bl	80010bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008558:	bf00      	nop
 800855a:	bd80      	pop	{r7, pc}
 800855c:	200000f8 	.word	0x200000f8
 8008560:	200002b4 	.word	0x200002b4
 8008564:	20000064 	.word	0x20000064
 8008568:	200000e4 	.word	0x200000e4

0800856c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008570:	2200      	movs	r2, #0
 8008572:	4905      	ldr	r1, [pc, #20]	; (8008588 <CDC_Init_FS+0x1c>)
 8008574:	4805      	ldr	r0, [pc, #20]	; (800858c <CDC_Init_FS+0x20>)
 8008576:	f7fe fc1b 	bl	8006db0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800857a:	4905      	ldr	r1, [pc, #20]	; (8008590 <CDC_Init_FS+0x24>)
 800857c:	4803      	ldr	r0, [pc, #12]	; (800858c <CDC_Init_FS+0x20>)
 800857e:	f7fe fc39 	bl	8006df4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008582:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008584:	4618      	mov	r0, r3
 8008586:	bd80      	pop	{r7, pc}
 8008588:	20000990 	.word	0x20000990
 800858c:	200002b4 	.word	0x200002b4
 8008590:	20000590 	.word	0x20000590

08008594 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008594:	b480      	push	{r7}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008598:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800859a:	4618      	mov	r0, r3
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	71fb      	strb	r3, [r7, #7]
 80085b0:	4613      	mov	r3, r2
 80085b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	2b23      	cmp	r3, #35	; 0x23
 80085b8:	d84a      	bhi.n	8008650 <CDC_Control_FS+0xac>
 80085ba:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <CDC_Control_FS+0x1c>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	08008651 	.word	0x08008651
 80085c4:	08008651 	.word	0x08008651
 80085c8:	08008651 	.word	0x08008651
 80085cc:	08008651 	.word	0x08008651
 80085d0:	08008651 	.word	0x08008651
 80085d4:	08008651 	.word	0x08008651
 80085d8:	08008651 	.word	0x08008651
 80085dc:	08008651 	.word	0x08008651
 80085e0:	08008651 	.word	0x08008651
 80085e4:	08008651 	.word	0x08008651
 80085e8:	08008651 	.word	0x08008651
 80085ec:	08008651 	.word	0x08008651
 80085f0:	08008651 	.word	0x08008651
 80085f4:	08008651 	.word	0x08008651
 80085f8:	08008651 	.word	0x08008651
 80085fc:	08008651 	.word	0x08008651
 8008600:	08008651 	.word	0x08008651
 8008604:	08008651 	.word	0x08008651
 8008608:	08008651 	.word	0x08008651
 800860c:	08008651 	.word	0x08008651
 8008610:	08008651 	.word	0x08008651
 8008614:	08008651 	.word	0x08008651
 8008618:	08008651 	.word	0x08008651
 800861c:	08008651 	.word	0x08008651
 8008620:	08008651 	.word	0x08008651
 8008624:	08008651 	.word	0x08008651
 8008628:	08008651 	.word	0x08008651
 800862c:	08008651 	.word	0x08008651
 8008630:	08008651 	.word	0x08008651
 8008634:	08008651 	.word	0x08008651
 8008638:	08008651 	.word	0x08008651
 800863c:	08008651 	.word	0x08008651
 8008640:	08008651 	.word	0x08008651
 8008644:	08008651 	.word	0x08008651
 8008648:	08008651 	.word	0x08008651
 800864c:	08008651 	.word	0x08008651
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008650:	bf00      	nop
  }

  return (USBD_OK);
 8008652:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	4805      	ldr	r0, [pc, #20]	; (8008684 <CDC_Receive_FS+0x24>)
 800866e:	f7fe fbc1 	bl	8006df4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008672:	4804      	ldr	r0, [pc, #16]	; (8008684 <CDC_Receive_FS+0x24>)
 8008674:	f7fe fc22 	bl	8006ebc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008678:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	200002b4 	.word	0x200002b4

08008688 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008698:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <CDC_Transmit_FS+0x48>)
 800869a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800869e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e00b      	b.n	80086c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086ae:	887b      	ldrh	r3, [r7, #2]
 80086b0:	461a      	mov	r2, r3
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4806      	ldr	r0, [pc, #24]	; (80086d0 <CDC_Transmit_FS+0x48>)
 80086b6:	f7fe fb7b 	bl	8006db0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086ba:	4805      	ldr	r0, [pc, #20]	; (80086d0 <CDC_Transmit_FS+0x48>)
 80086bc:	f7fe fbb8 	bl	8006e30 <USBD_CDC_TransmitPacket>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	200002b4 	.word	0x200002b4

080086d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2212      	movs	r2, #18
 8008708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800870a:	4b03      	ldr	r3, [pc, #12]	; (8008718 <USBD_FS_DeviceDescriptor+0x20>)
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	20000114 	.word	0x20000114

0800871c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2204      	movs	r2, #4
 800872c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800872e:	4b03      	ldr	r3, [pc, #12]	; (800873c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008730:	4618      	mov	r0, r3
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	20000128 	.word	0x20000128

08008740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d105      	bne.n	800875e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4907      	ldr	r1, [pc, #28]	; (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
 8008756:	4808      	ldr	r0, [pc, #32]	; (8008778 <USBD_FS_ProductStrDescriptor+0x38>)
 8008758:	f7ff fdf8 	bl	800834c <USBD_GetString>
 800875c:	e004      	b.n	8008768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	4904      	ldr	r1, [pc, #16]	; (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
 8008762:	4805      	ldr	r0, [pc, #20]	; (8008778 <USBD_FS_ProductStrDescriptor+0x38>)
 8008764:	f7ff fdf2 	bl	800834c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008768:	4b02      	ldr	r3, [pc, #8]	; (8008774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000d90 	.word	0x20000d90
 8008778:	08008f9c 	.word	0x08008f9c

0800877c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	4904      	ldr	r1, [pc, #16]	; (800879c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800878c:	4804      	ldr	r0, [pc, #16]	; (80087a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800878e:	f7ff fddd 	bl	800834c <USBD_GetString>
  return USBD_StrDesc;
 8008792:	4b02      	ldr	r3, [pc, #8]	; (800879c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20000d90 	.word	0x20000d90
 80087a0:	08008fb4 	.word	0x08008fb4

080087a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	221a      	movs	r2, #26
 80087b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087b6:	f000 f843 	bl	8008840 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ba:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	2000012c 	.word	0x2000012c

080087c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4907      	ldr	r1, [pc, #28]	; (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80087de:	4808      	ldr	r0, [pc, #32]	; (8008800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e0:	f7ff fdb4 	bl	800834c <USBD_GetString>
 80087e4:	e004      	b.n	80087f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4904      	ldr	r1, [pc, #16]	; (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ea:	4805      	ldr	r0, [pc, #20]	; (8008800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087ec:	f7ff fdae 	bl	800834c <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f0:	4b02      	ldr	r3, [pc, #8]	; (80087fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000d90 	.word	0x20000d90
 8008800:	08008fc8 	.word	0x08008fc8

08008804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d105      	bne.n	8008822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4907      	ldr	r1, [pc, #28]	; (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800881a:	4808      	ldr	r0, [pc, #32]	; (800883c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800881c:	f7ff fd96 	bl	800834c <USBD_GetString>
 8008820:	e004      	b.n	800882c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	4904      	ldr	r1, [pc, #16]	; (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008826:	4805      	ldr	r0, [pc, #20]	; (800883c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008828:	f7ff fd90 	bl	800834c <USBD_GetString>
  }
  return USBD_StrDesc;
 800882c:	4b02      	ldr	r3, [pc, #8]	; (8008838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000d90 	.word	0x20000d90
 800883c:	08008fd4 	.word	0x08008fd4

08008840 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008846:	4b0f      	ldr	r3, [pc, #60]	; (8008884 <Get_SerialNum+0x44>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800884c:	4b0e      	ldr	r3, [pc, #56]	; (8008888 <Get_SerialNum+0x48>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008852:	4b0e      	ldr	r3, [pc, #56]	; (800888c <Get_SerialNum+0x4c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4413      	add	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d009      	beq.n	800887a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008866:	2208      	movs	r2, #8
 8008868:	4909      	ldr	r1, [pc, #36]	; (8008890 <Get_SerialNum+0x50>)
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f814 	bl	8008898 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008870:	2204      	movs	r2, #4
 8008872:	4908      	ldr	r1, [pc, #32]	; (8008894 <Get_SerialNum+0x54>)
 8008874:	68b8      	ldr	r0, [r7, #8]
 8008876:	f000 f80f 	bl	8008898 <IntToUnicode>
  }
}
 800887a:	bf00      	nop
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	1fff7a10 	.word	0x1fff7a10
 8008888:	1fff7a14 	.word	0x1fff7a14
 800888c:	1fff7a18 	.word	0x1fff7a18
 8008890:	2000012e 	.word	0x2000012e
 8008894:	2000013e 	.word	0x2000013e

08008898 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008898:	b480      	push	{r7}
 800889a:	b087      	sub	sp, #28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	4613      	mov	r3, r2
 80088a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088aa:	2300      	movs	r3, #0
 80088ac:	75fb      	strb	r3, [r7, #23]
 80088ae:	e027      	b.n	8008900 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	0f1b      	lsrs	r3, r3, #28
 80088b4:	2b09      	cmp	r3, #9
 80088b6:	d80b      	bhi.n	80088d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	0f1b      	lsrs	r3, r3, #28
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	4619      	mov	r1, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	440b      	add	r3, r1
 80088c8:	3230      	adds	r2, #48	; 0x30
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	e00a      	b.n	80088e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	0f1b      	lsrs	r3, r3, #28
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	4619      	mov	r1, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	440b      	add	r3, r1
 80088e0:	3237      	adds	r2, #55	; 0x37
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	3301      	adds	r3, #1
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	4413      	add	r3, r2
 80088f6:	2200      	movs	r2, #0
 80088f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	3301      	adds	r3, #1
 80088fe:	75fb      	strb	r3, [r7, #23]
 8008900:	7dfa      	ldrb	r2, [r7, #23]
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	429a      	cmp	r2, r3
 8008906:	d3d3      	bcc.n	80088b0 <IntToUnicode+0x18>
  }
}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008920:	f107 0314 	add.w	r3, r7, #20
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	605a      	str	r2, [r3, #4]
 800892a:	609a      	str	r2, [r3, #8]
 800892c:	60da      	str	r2, [r3, #12]
 800892e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008938:	d13a      	bne.n	80089b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800893a:	2300      	movs	r3, #0
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	4b1e      	ldr	r3, [pc, #120]	; (80089b8 <HAL_PCD_MspInit+0xa0>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	4a1d      	ldr	r2, [pc, #116]	; (80089b8 <HAL_PCD_MspInit+0xa0>)
 8008944:	f043 0301 	orr.w	r3, r3, #1
 8008948:	6313      	str	r3, [r2, #48]	; 0x30
 800894a:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <HAL_PCD_MspInit+0xa0>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008956:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800895a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800895c:	2302      	movs	r3, #2
 800895e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008960:	2300      	movs	r3, #0
 8008962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008964:	2303      	movs	r3, #3
 8008966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008968:	230a      	movs	r3, #10
 800896a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800896c:	f107 0314 	add.w	r3, r7, #20
 8008970:	4619      	mov	r1, r3
 8008972:	4812      	ldr	r0, [pc, #72]	; (80089bc <HAL_PCD_MspInit+0xa4>)
 8008974:	f7f9 f8f4 	bl	8001b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008978:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <HAL_PCD_MspInit+0xa0>)
 800897a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897c:	4a0e      	ldr	r2, [pc, #56]	; (80089b8 <HAL_PCD_MspInit+0xa0>)
 800897e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008982:	6353      	str	r3, [r2, #52]	; 0x34
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]
 8008988:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <HAL_PCD_MspInit+0xa0>)
 800898a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898c:	4a0a      	ldr	r2, [pc, #40]	; (80089b8 <HAL_PCD_MspInit+0xa0>)
 800898e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008992:	6453      	str	r3, [r2, #68]	; 0x44
 8008994:	4b08      	ldr	r3, [pc, #32]	; (80089b8 <HAL_PCD_MspInit+0xa0>)
 8008996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089a0:	2200      	movs	r2, #0
 80089a2:	2100      	movs	r1, #0
 80089a4:	2043      	movs	r0, #67	; 0x43
 80089a6:	f7f9 f8a4 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089aa:	2043      	movs	r0, #67	; 0x43
 80089ac:	f7f9 f8bd 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089b0:	bf00      	nop
 80089b2:	3728      	adds	r7, #40	; 0x28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	40023800 	.word	0x40023800
 80089bc:	40020000 	.word	0x40020000

080089c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089d4:	4619      	mov	r1, r3
 80089d6:	4610      	mov	r0, r2
 80089d8:	f7fe fb59 	bl	800708e <USBD_LL_SetupStage>
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089f6:	78fa      	ldrb	r2, [r7, #3]
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	4613      	mov	r3, r2
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	440b      	add	r3, r1
 8008a04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	f7fe fb93 	bl	8007138 <USBD_LL_DataOutStage>
}
 8008a12:	bf00      	nop
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b082      	sub	sp, #8
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	460b      	mov	r3, r1
 8008a24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a2c:	78fa      	ldrb	r2, [r7, #3]
 8008a2e:	6879      	ldr	r1, [r7, #4]
 8008a30:	4613      	mov	r3, r2
 8008a32:	00db      	lsls	r3, r3, #3
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	440b      	add	r3, r1
 8008a3a:	334c      	adds	r3, #76	; 0x4c
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	4619      	mov	r1, r3
 8008a42:	f7fe fc2c 	bl	800729e <USBD_LL_DataInStage>
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe fd60 	bl	8007522 <USBD_LL_SOF>
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a72:	2301      	movs	r3, #1
 8008a74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d001      	beq.n	8008a82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a7e:	f7f8 fb1d 	bl	80010bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a88:	7bfa      	ldrb	r2, [r7, #15]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe fd0a 	bl	80074a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fe fcb2 	bl	8007402 <USBD_LL_Reset>
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fd05 	bl	80074c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ace:	f043 0301 	orr.w	r3, r3, #1
 8008ad2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a1b      	ldr	r3, [r3, #32]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008adc:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <HAL_PCD_SuspendCallback+0x48>)
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	4a03      	ldr	r2, [pc, #12]	; (8008af0 <HAL_PCD_SuspendCallback+0x48>)
 8008ae2:	f043 0306 	orr.w	r3, r3, #6
 8008ae6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	e000ed00 	.word	0xe000ed00

08008af4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fe fcf5 	bl	80074f2 <USBD_LL_Resume>
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b22:	78fa      	ldrb	r2, [r7, #3]
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fd4d 	bl	80075c6 <USBD_LL_IsoOUTIncomplete>
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe fd09 	bl	8007562 <USBD_LL_IsoINIncomplete>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe fd5f 	bl	800762a <USBD_LL_DevConnected>
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fd5c 	bl	8007640 <USBD_LL_DevDisconnected>
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d13c      	bne.n	8008c1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ba0:	4a20      	ldr	r2, [pc, #128]	; (8008c24 <USBD_LL_Init+0x94>)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a1e      	ldr	r2, [pc, #120]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bb8:	4b1a      	ldr	r3, [pc, #104]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bba:	2204      	movs	r2, #4
 8008bbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bbe:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bc4:	4b17      	ldr	r3, [pc, #92]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bca:	4b16      	ldr	r3, [pc, #88]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bcc:	2202      	movs	r2, #2
 8008bce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bd0:	4b14      	ldr	r3, [pc, #80]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bd6:	4b13      	ldr	r3, [pc, #76]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bdc:	4b11      	ldr	r3, [pc, #68]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008be2:	4b10      	ldr	r3, [pc, #64]	; (8008c24 <USBD_LL_Init+0x94>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008be8:	4b0e      	ldr	r3, [pc, #56]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bee:	480d      	ldr	r0, [pc, #52]	; (8008c24 <USBD_LL_Init+0x94>)
 8008bf0:	f7f9 f9a9 	bl	8001f46 <HAL_PCD_Init>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008bfa:	f7f8 fa5f 	bl	80010bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008bfe:	2180      	movs	r1, #128	; 0x80
 8008c00:	4808      	ldr	r0, [pc, #32]	; (8008c24 <USBD_LL_Init+0x94>)
 8008c02:	f7fa fc00 	bl	8003406 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c06:	2240      	movs	r2, #64	; 0x40
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4806      	ldr	r0, [pc, #24]	; (8008c24 <USBD_LL_Init+0x94>)
 8008c0c:	f7fa fbb4 	bl	8003378 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c10:	2280      	movs	r2, #128	; 0x80
 8008c12:	2101      	movs	r1, #1
 8008c14:	4803      	ldr	r0, [pc, #12]	; (8008c24 <USBD_LL_Init+0x94>)
 8008c16:	f7fa fbaf 	bl	8003378 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20000f90 	.word	0x20000f90

08008c28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f9 fa9e 	bl	8002180 <HAL_PCD_Start>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 f942 	bl	8008ed4 <USBD_Get_USB_Status>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	4608      	mov	r0, r1
 8008c68:	4611      	mov	r1, r2
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	70fb      	strb	r3, [r7, #3]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70bb      	strb	r3, [r7, #2]
 8008c74:	4613      	mov	r3, r2
 8008c76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c86:	78bb      	ldrb	r3, [r7, #2]
 8008c88:	883a      	ldrh	r2, [r7, #0]
 8008c8a:	78f9      	ldrb	r1, [r7, #3]
 8008c8c:	f7f9 ff6f 	bl	8002b6e <HAL_PCD_EP_Open>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 f91c 	bl	8008ed4 <USBD_Get_USB_Status>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7f9 ffb8 	bl	8002c3e <HAL_PCD_EP_Close>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f000 f8fd 	bl	8008ed4 <USBD_Get_USB_Status>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	4611      	mov	r1, r2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fa f890 	bl	8002e2c <HAL_PCD_EP_SetStall>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f8de 	bl	8008ed4 <USBD_Get_USB_Status>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b084      	sub	sp, #16
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d40:	78fa      	ldrb	r2, [r7, #3]
 8008d42:	4611      	mov	r1, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fa f8d5 	bl	8002ef4 <HAL_PCD_EP_ClrStall>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 f8bf 	bl	8008ed4 <USBD_Get_USB_Status>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	da0b      	bge.n	8008d98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	333e      	adds	r3, #62	; 0x3e
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	e00b      	b.n	8008db0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d9e:	68f9      	ldr	r1, [r7, #12]
 8008da0:	4613      	mov	r3, r2
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008dae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dd6:	78fa      	ldrb	r2, [r7, #3]
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f9 fea2 	bl	8002b24 <HAL_PCD_SetAddress>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 f874 	bl	8008ed4 <USBD_Get_USB_Status>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b086      	sub	sp, #24
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
 8008e06:	460b      	mov	r3, r1
 8008e08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e18:	7af9      	ldrb	r1, [r7, #11]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	f7f9 ffbb 	bl	8002d98 <HAL_PCD_EP_Transmit>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f000 f853 	bl	8008ed4 <USBD_Get_USB_Status>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e32:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	607a      	str	r2, [r7, #4]
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	460b      	mov	r3, r1
 8008e4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e5a:	7af9      	ldrb	r1, [r7, #11]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	f7f9 ff37 	bl	8002cd2 <HAL_PCD_EP_Receive>
 8008e64:	4603      	mov	r3, r0
 8008e66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 f832 	bl	8008ed4 <USBD_Get_USB_Status>
 8008e70:	4603      	mov	r3, r0
 8008e72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e74:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	460b      	mov	r3, r1
 8008e88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	4611      	mov	r1, r2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7f9 ff67 	bl	8002d68 <HAL_PCD_EP_GetRxCount>
 8008e9a:	4603      	mov	r3, r0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008eac:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <USBD_static_malloc+0x18>)
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	2000149c 	.word	0x2000149c

08008ec0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]

}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ee2:	79fb      	ldrb	r3, [r7, #7]
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d817      	bhi.n	8008f18 <USBD_Get_USB_Status+0x44>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <USBD_Get_USB_Status+0x1c>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f01 	.word	0x08008f01
 8008ef4:	08008f07 	.word	0x08008f07
 8008ef8:	08008f0d 	.word	0x08008f0d
 8008efc:	08008f13 	.word	0x08008f13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
    break;
 8008f04:	e00b      	b.n	8008f1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f06:	2303      	movs	r3, #3
 8008f08:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0a:	e008      	b.n	8008f1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f10:	e005      	b.n	8008f1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f12:	2303      	movs	r3, #3
 8008f14:	73fb      	strb	r3, [r7, #15]
    break;
 8008f16:	e002      	b.n	8008f1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1c:	bf00      	nop
  }
  return usb_status;
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <__libc_init_array>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	4d0d      	ldr	r5, [pc, #52]	; (8008f64 <__libc_init_array+0x38>)
 8008f30:	4c0d      	ldr	r4, [pc, #52]	; (8008f68 <__libc_init_array+0x3c>)
 8008f32:	1b64      	subs	r4, r4, r5
 8008f34:	10a4      	asrs	r4, r4, #2
 8008f36:	2600      	movs	r6, #0
 8008f38:	42a6      	cmp	r6, r4
 8008f3a:	d109      	bne.n	8008f50 <__libc_init_array+0x24>
 8008f3c:	4d0b      	ldr	r5, [pc, #44]	; (8008f6c <__libc_init_array+0x40>)
 8008f3e:	4c0c      	ldr	r4, [pc, #48]	; (8008f70 <__libc_init_array+0x44>)
 8008f40:	f000 f820 	bl	8008f84 <_init>
 8008f44:	1b64      	subs	r4, r4, r5
 8008f46:	10a4      	asrs	r4, r4, #2
 8008f48:	2600      	movs	r6, #0
 8008f4a:	42a6      	cmp	r6, r4
 8008f4c:	d105      	bne.n	8008f5a <__libc_init_array+0x2e>
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f54:	4798      	blx	r3
 8008f56:	3601      	adds	r6, #1
 8008f58:	e7ee      	b.n	8008f38 <__libc_init_array+0xc>
 8008f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f5e:	4798      	blx	r3
 8008f60:	3601      	adds	r6, #1
 8008f62:	e7f2      	b.n	8008f4a <__libc_init_array+0x1e>
 8008f64:	08008ffc 	.word	0x08008ffc
 8008f68:	08008ffc 	.word	0x08008ffc
 8008f6c:	08008ffc 	.word	0x08008ffc
 8008f70:	08009000 	.word	0x08009000

08008f74 <memset>:
 8008f74:	4402      	add	r2, r0
 8008f76:	4603      	mov	r3, r0
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d100      	bne.n	8008f7e <memset+0xa>
 8008f7c:	4770      	bx	lr
 8008f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f82:	e7f9      	b.n	8008f78 <memset+0x4>

08008f84 <_init>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr

08008f90 <_fini>:
 8008f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f92:	bf00      	nop
 8008f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f96:	bc08      	pop	{r3}
 8008f98:	469e      	mov	lr, r3
 8008f9a:	4770      	bx	lr
