
top_actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dcc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fbc  08008fbc  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  08008fbc  08008fbc  00018fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fc4  08008fc4  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  08008fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  20000118  080090e4  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  080090e4  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013eff  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003021  00000000  00000000  00034047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00037068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00038118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f6b  00000000  00000000  00039088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001411f  00000000  00000000  00051ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee86  00000000  00000000  00066112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4f98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004750  00000000  00000000  000f4fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000118 	.word	0x20000118
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008f4c 	.word	0x08008f4c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000011c 	.word	0x2000011c
 80001d4:	08008f4c 	.word	0x08008f4c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	; 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__gedf2>:
 80007b8:	f04f 3cff 	mov.w	ip, #4294967295
 80007bc:	e006      	b.n	80007cc <__cmpdf2+0x4>
 80007be:	bf00      	nop

080007c0 <__ledf2>:
 80007c0:	f04f 0c01 	mov.w	ip, #1
 80007c4:	e002      	b.n	80007cc <__cmpdf2+0x4>
 80007c6:	bf00      	nop

080007c8 <__cmpdf2>:
 80007c8:	f04f 0c01 	mov.w	ip, #1
 80007cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e2:	d01b      	beq.n	800081c <__cmpdf2+0x54>
 80007e4:	b001      	add	sp, #4
 80007e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ea:	bf0c      	ite	eq
 80007ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f0:	ea91 0f03 	teqne	r1, r3
 80007f4:	bf02      	ittt	eq
 80007f6:	ea90 0f02 	teqeq	r0, r2
 80007fa:	2000      	moveq	r0, #0
 80007fc:	4770      	bxeq	lr
 80007fe:	f110 0f00 	cmn.w	r0, #0
 8000802:	ea91 0f03 	teq	r1, r3
 8000806:	bf58      	it	pl
 8000808:	4299      	cmppl	r1, r3
 800080a:	bf08      	it	eq
 800080c:	4290      	cmpeq	r0, r2
 800080e:	bf2c      	ite	cs
 8000810:	17d8      	asrcs	r0, r3, #31
 8000812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000816:	f040 0001 	orr.w	r0, r0, #1
 800081a:	4770      	bx	lr
 800081c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000824:	d102      	bne.n	800082c <__cmpdf2+0x64>
 8000826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082a:	d107      	bne.n	800083c <__cmpdf2+0x74>
 800082c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000834:	d1d6      	bne.n	80007e4 <__cmpdf2+0x1c>
 8000836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083a:	d0d3      	beq.n	80007e4 <__cmpdf2+0x1c>
 800083c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_cdrcmple>:
 8000844:	4684      	mov	ip, r0
 8000846:	4610      	mov	r0, r2
 8000848:	4662      	mov	r2, ip
 800084a:	468c      	mov	ip, r1
 800084c:	4619      	mov	r1, r3
 800084e:	4663      	mov	r3, ip
 8000850:	e000      	b.n	8000854 <__aeabi_cdcmpeq>
 8000852:	bf00      	nop

08000854 <__aeabi_cdcmpeq>:
 8000854:	b501      	push	{r0, lr}
 8000856:	f7ff ffb7 	bl	80007c8 <__cmpdf2>
 800085a:	2800      	cmp	r0, #0
 800085c:	bf48      	it	mi
 800085e:	f110 0f00 	cmnmi.w	r0, #0
 8000862:	bd01      	pop	{r0, pc}

08000864 <__aeabi_dcmpeq>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff fff4 	bl	8000854 <__aeabi_cdcmpeq>
 800086c:	bf0c      	ite	eq
 800086e:	2001      	moveq	r0, #1
 8000870:	2000      	movne	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmplt>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffea 	bl	8000854 <__aeabi_cdcmpeq>
 8000880:	bf34      	ite	cc
 8000882:	2001      	movcc	r0, #1
 8000884:	2000      	movcs	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmple>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffe0 	bl	8000854 <__aeabi_cdcmpeq>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpge>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffce 	bl	8000844 <__aeabi_cdrcmple>
 80008a8:	bf94      	ite	ls
 80008aa:	2001      	movls	r0, #1
 80008ac:	2000      	movhi	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmpgt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffc4 	bl	8000844 <__aeabi_cdrcmple>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_d2iz>:
 80008c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008d0:	d215      	bcs.n	80008fe <__aeabi_d2iz+0x36>
 80008d2:	d511      	bpl.n	80008f8 <__aeabi_d2iz+0x30>
 80008d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008dc:	d912      	bls.n	8000904 <__aeabi_d2iz+0x3c>
 80008de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ee:	fa23 f002 	lsr.w	r0, r3, r2
 80008f2:	bf18      	it	ne
 80008f4:	4240      	negne	r0, r0
 80008f6:	4770      	bx	lr
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	4770      	bx	lr
 80008fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000902:	d105      	bne.n	8000910 <__aeabi_d2iz+0x48>
 8000904:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000908:	bf08      	it	eq
 800090a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_uldivmod>:
 8000918:	b953      	cbnz	r3, 8000930 <__aeabi_uldivmod+0x18>
 800091a:	b94a      	cbnz	r2, 8000930 <__aeabi_uldivmod+0x18>
 800091c:	2900      	cmp	r1, #0
 800091e:	bf08      	it	eq
 8000920:	2800      	cmpeq	r0, #0
 8000922:	bf1c      	itt	ne
 8000924:	f04f 31ff 	movne.w	r1, #4294967295
 8000928:	f04f 30ff 	movne.w	r0, #4294967295
 800092c:	f000 b974 	b.w	8000c18 <__aeabi_idiv0>
 8000930:	f1ad 0c08 	sub.w	ip, sp, #8
 8000934:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000938:	f000 f806 	bl	8000948 <__udivmoddi4>
 800093c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000944:	b004      	add	sp, #16
 8000946:	4770      	bx	lr

08000948 <__udivmoddi4>:
 8000948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800094c:	9d08      	ldr	r5, [sp, #32]
 800094e:	4604      	mov	r4, r0
 8000950:	468e      	mov	lr, r1
 8000952:	2b00      	cmp	r3, #0
 8000954:	d14d      	bne.n	80009f2 <__udivmoddi4+0xaa>
 8000956:	428a      	cmp	r2, r1
 8000958:	4694      	mov	ip, r2
 800095a:	d969      	bls.n	8000a30 <__udivmoddi4+0xe8>
 800095c:	fab2 f282 	clz	r2, r2
 8000960:	b152      	cbz	r2, 8000978 <__udivmoddi4+0x30>
 8000962:	fa01 f302 	lsl.w	r3, r1, r2
 8000966:	f1c2 0120 	rsb	r1, r2, #32
 800096a:	fa20 f101 	lsr.w	r1, r0, r1
 800096e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000972:	ea41 0e03 	orr.w	lr, r1, r3
 8000976:	4094      	lsls	r4, r2
 8000978:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800097c:	0c21      	lsrs	r1, r4, #16
 800097e:	fbbe f6f8 	udiv	r6, lr, r8
 8000982:	fa1f f78c 	uxth.w	r7, ip
 8000986:	fb08 e316 	mls	r3, r8, r6, lr
 800098a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800098e:	fb06 f107 	mul.w	r1, r6, r7
 8000992:	4299      	cmp	r1, r3
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x64>
 8000996:	eb1c 0303 	adds.w	r3, ip, r3
 800099a:	f106 30ff 	add.w	r0, r6, #4294967295
 800099e:	f080 811f 	bcs.w	8000be0 <__udivmoddi4+0x298>
 80009a2:	4299      	cmp	r1, r3
 80009a4:	f240 811c 	bls.w	8000be0 <__udivmoddi4+0x298>
 80009a8:	3e02      	subs	r6, #2
 80009aa:	4463      	add	r3, ip
 80009ac:	1a5b      	subs	r3, r3, r1
 80009ae:	b2a4      	uxth	r4, r4
 80009b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009b4:	fb08 3310 	mls	r3, r8, r0, r3
 80009b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009bc:	fb00 f707 	mul.w	r7, r0, r7
 80009c0:	42a7      	cmp	r7, r4
 80009c2:	d90a      	bls.n	80009da <__udivmoddi4+0x92>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80009cc:	f080 810a 	bcs.w	8000be4 <__udivmoddi4+0x29c>
 80009d0:	42a7      	cmp	r7, r4
 80009d2:	f240 8107 	bls.w	8000be4 <__udivmoddi4+0x29c>
 80009d6:	4464      	add	r4, ip
 80009d8:	3802      	subs	r0, #2
 80009da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009de:	1be4      	subs	r4, r4, r7
 80009e0:	2600      	movs	r6, #0
 80009e2:	b11d      	cbz	r5, 80009ec <__udivmoddi4+0xa4>
 80009e4:	40d4      	lsrs	r4, r2
 80009e6:	2300      	movs	r3, #0
 80009e8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0xc2>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80ef 	beq.w	8000bda <__udivmoddi4+0x292>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x160>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0xd4>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80f9 	bhi.w	8000c0e <__udivmoddi4+0x2c6>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	469e      	mov	lr, r3
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0e0      	beq.n	80009ec <__udivmoddi4+0xa4>
 8000a2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a2e:	e7dd      	b.n	80009ec <__udivmoddi4+0xa4>
 8000a30:	b902      	cbnz	r2, 8000a34 <__udivmoddi4+0xec>
 8000a32:	deff      	udf	#255	; 0xff
 8000a34:	fab2 f282 	clz	r2, r2
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	f040 8092 	bne.w	8000b62 <__udivmoddi4+0x21a>
 8000a3e:	eba1 010c 	sub.w	r1, r1, ip
 8000a42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	0c20      	lsrs	r0, r4, #16
 8000a4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a52:	fb07 1113 	mls	r1, r7, r3, r1
 8000a56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a5a:	fb0e f003 	mul.w	r0, lr, r3
 8000a5e:	4288      	cmp	r0, r1
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x12c>
 8000a62:	eb1c 0101 	adds.w	r1, ip, r1
 8000a66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a6a:	d202      	bcs.n	8000a72 <__udivmoddi4+0x12a>
 8000a6c:	4288      	cmp	r0, r1
 8000a6e:	f200 80cb 	bhi.w	8000c08 <__udivmoddi4+0x2c0>
 8000a72:	4643      	mov	r3, r8
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000a80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a84:	fb0e fe00 	mul.w	lr, lr, r0
 8000a88:	45a6      	cmp	lr, r4
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x156>
 8000a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a94:	d202      	bcs.n	8000a9c <__udivmoddi4+0x154>
 8000a96:	45a6      	cmp	lr, r4
 8000a98:	f200 80bb 	bhi.w	8000c12 <__udivmoddi4+0x2ca>
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aa6:	e79c      	b.n	80009e2 <__udivmoddi4+0x9a>
 8000aa8:	f1c6 0720 	rsb	r7, r6, #32
 8000aac:	40b3      	lsls	r3, r6
 8000aae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ab2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab6:	fa20 f407 	lsr.w	r4, r0, r7
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	40f9      	lsrs	r1, r7
 8000ac2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac6:	fa00 f306 	lsl.w	r3, r0, r6
 8000aca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ace:	0c20      	lsrs	r0, r4, #16
 8000ad0:	fa1f fe8c 	uxth.w	lr, ip
 8000ad4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ad8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000adc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ae0:	4288      	cmp	r0, r1
 8000ae2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae6:	d90b      	bls.n	8000b00 <__udivmoddi4+0x1b8>
 8000ae8:	eb1c 0101 	adds.w	r1, ip, r1
 8000aec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000af0:	f080 8088 	bcs.w	8000c04 <__udivmoddi4+0x2bc>
 8000af4:	4288      	cmp	r0, r1
 8000af6:	f240 8085 	bls.w	8000c04 <__udivmoddi4+0x2bc>
 8000afa:	f1a8 0802 	sub.w	r8, r8, #2
 8000afe:	4461      	add	r1, ip
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b08:	fb09 1110 	mls	r1, r9, r0, r1
 8000b0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b14:	458e      	cmp	lr, r1
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x1e2>
 8000b18:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b20:	d26c      	bcs.n	8000bfc <__udivmoddi4+0x2b4>
 8000b22:	458e      	cmp	lr, r1
 8000b24:	d96a      	bls.n	8000bfc <__udivmoddi4+0x2b4>
 8000b26:	3802      	subs	r0, #2
 8000b28:	4461      	add	r1, ip
 8000b2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000b32:	eba1 010e 	sub.w	r1, r1, lr
 8000b36:	42a1      	cmp	r1, r4
 8000b38:	46c8      	mov	r8, r9
 8000b3a:	46a6      	mov	lr, r4
 8000b3c:	d356      	bcc.n	8000bec <__udivmoddi4+0x2a4>
 8000b3e:	d053      	beq.n	8000be8 <__udivmoddi4+0x2a0>
 8000b40:	b15d      	cbz	r5, 8000b5a <__udivmoddi4+0x212>
 8000b42:	ebb3 0208 	subs.w	r2, r3, r8
 8000b46:	eb61 010e 	sbc.w	r1, r1, lr
 8000b4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000b4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000b52:	40f1      	lsrs	r1, r6
 8000b54:	431f      	orrs	r7, r3
 8000b56:	e9c5 7100 	strd	r7, r1, [r5]
 8000b5a:	2600      	movs	r6, #0
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	f1c2 0320 	rsb	r3, r2, #32
 8000b66:	40d8      	lsrs	r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4301      	orrs	r1, r0
 8000b74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b78:	fa1f fe8c 	uxth.w	lr, ip
 8000b7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b80:	fb07 3610 	mls	r6, r7, r0, r3
 8000b84:	0c0b      	lsrs	r3, r1, #16
 8000b86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	fa04 f402 	lsl.w	r4, r4, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x260>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9e:	d22f      	bcs.n	8000c00 <__udivmoddi4+0x2b8>
 8000ba0:	429e      	cmp	r6, r3
 8000ba2:	d92d      	bls.n	8000c00 <__udivmoddi4+0x2b8>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1b9b      	subs	r3, r3, r6
 8000baa:	b289      	uxth	r1, r1
 8000bac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x28a>
 8000bc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bc8:	d216      	bcs.n	8000bf8 <__udivmoddi4+0x2b0>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d914      	bls.n	8000bf8 <__udivmoddi4+0x2b0>
 8000bce:	3e02      	subs	r6, #2
 8000bd0:	4461      	add	r1, ip
 8000bd2:	1ac9      	subs	r1, r1, r3
 8000bd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bd8:	e738      	b.n	8000a4c <__udivmoddi4+0x104>
 8000bda:	462e      	mov	r6, r5
 8000bdc:	4628      	mov	r0, r5
 8000bde:	e705      	b.n	80009ec <__udivmoddi4+0xa4>
 8000be0:	4606      	mov	r6, r0
 8000be2:	e6e3      	b.n	80009ac <__udivmoddi4+0x64>
 8000be4:	4618      	mov	r0, r3
 8000be6:	e6f8      	b.n	80009da <__udivmoddi4+0x92>
 8000be8:	454b      	cmp	r3, r9
 8000bea:	d2a9      	bcs.n	8000b40 <__udivmoddi4+0x1f8>
 8000bec:	ebb9 0802 	subs.w	r8, r9, r2
 8000bf0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	e7a3      	b.n	8000b40 <__udivmoddi4+0x1f8>
 8000bf8:	4646      	mov	r6, r8
 8000bfa:	e7ea      	b.n	8000bd2 <__udivmoddi4+0x28a>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	e794      	b.n	8000b2a <__udivmoddi4+0x1e2>
 8000c00:	4640      	mov	r0, r8
 8000c02:	e7d1      	b.n	8000ba8 <__udivmoddi4+0x260>
 8000c04:	46d0      	mov	r8, sl
 8000c06:	e77b      	b.n	8000b00 <__udivmoddi4+0x1b8>
 8000c08:	3b02      	subs	r3, #2
 8000c0a:	4461      	add	r1, ip
 8000c0c:	e732      	b.n	8000a74 <__udivmoddi4+0x12c>
 8000c0e:	4630      	mov	r0, r6
 8000c10:	e709      	b.n	8000a26 <__udivmoddi4+0xde>
 8000c12:	4464      	add	r4, ip
 8000c14:	3802      	subs	r0, #2
 8000c16:	e742      	b.n	8000a9e <__udivmoddi4+0x156>

08000c18 <__aeabi_idiv0>:
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 fdda 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f826 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 f988 	bl	8000f3c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c2c:	f007 fc52 	bl	80084d4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000c30:	f000 f88a 	bl	8000d48 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000c34:	f000 f934 	bl	8000ea0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <main+0x4c>)
 8000c3a:	f003 f865 	bl	8003d08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <main+0x50>)
 8000c40:	f003 f862 	bl	8003d08 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c44:	2100      	movs	r1, #0
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <main+0x50>)
 8000c48:	f003 f91a 	bl	8003e80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <main+0x50>)
 8000c50:	f003 f916 	bl	8003e80 <HAL_TIM_PWM_Start>

  // Store the frequency of PID loop
  PID_freq = HAL_RCC_GetSysClockFreq()/htim4.Init.Period;
 8000c54:	f002 ff36 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <main+0x4c>)
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <main+0x54>)
 8000c64:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <main+0x4a>
 8000c68:	2000017c 	.word	0x2000017c
 8000c6c:	20000134 	.word	0x20000134
 8000c70:	200001c4 	.word	0x200001c4

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	; 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2230      	movs	r2, #48	; 0x30
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f008 f95a 	bl	8008f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <SystemClock_Config+0xcc>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <SystemClock_Config+0xcc>)
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <SystemClock_Config+0xcc>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ce8:	2319      	movs	r3, #25
 8000cea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cec:	23c0      	movs	r3, #192	; 0xc0
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fb83 	bl	8003408 <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d08:	f000 f9b8 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2101      	movs	r1, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fde5 	bl	80038f8 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d34:	f000 f9a2 	bl	800107c <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	; 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b096      	sub	sp, #88	; 0x58
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f008 f8db 	bl	8008f3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d86:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000d88:	4a44      	ldr	r2, [pc, #272]	; (8000e9c <MX_TIM1_Init+0x154>)
 8000d8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d8c:	4b42      	ldr	r3, [pc, #264]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8000d98:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000d9a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000d9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da0:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000da6:	4b3c      	ldr	r3, [pc, #240]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dac:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000db2:	4839      	ldr	r0, [pc, #228]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000db4:	f002 ff58 	bl	8003c68 <HAL_TIM_Base_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dbe:	f000 f95d 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4832      	ldr	r0, [pc, #200]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000dd0:	f003 fad0 	bl	8004374 <HAL_TIM_ConfigClockSource>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dda:	f000 f94f 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dde:	482e      	ldr	r0, [pc, #184]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000de0:	f002 fff4 	bl	8003dcc <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dea:	f000 f947 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4826      	ldr	r0, [pc, #152]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000dfe:	f003 fe7f 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e08:	f000 f938 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0c:	2360      	movs	r3, #96	; 0x60
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4819      	ldr	r0, [pc, #100]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000e32:	f003 f9dd 	bl	80041f0 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e3c:	f000 f91e 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	2204      	movs	r2, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000e4a:	f003 f9d1 	bl	80041f0 <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e54:	f000 f912 	bl	800107c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000e7c:	f003 feae 	bl	8004bdc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000e86:	f000 f8f9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e8a:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000e8c:	f000 f962 	bl	8001154 <HAL_TIM_MspPostInit>

}
 8000e90:	bf00      	nop
 8000e92:	3758      	adds	r7, #88	; 0x58
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000134 	.word	0x20000134
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <MX_TIM4_Init+0x98>)
 8000ec0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ed0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ee4:	f002 fec0 	bl	8003c68 <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000eee:	f000 f8c5 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000f00:	f003 fa38 	bl	8004374 <HAL_TIM_ConfigClockSource>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 f8b7 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000f1c:	f003 fdf0 	bl	8004b00 <HAL_TIMEx_MasterConfigSynchronization>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f26:	f000 f8a9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000017c 	.word	0x2000017c
 8000f38:	40000800 	.word	0x40000800

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b45      	ldr	r3, [pc, #276]	; (800106c <MX_GPIO_Init+0x130>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a44      	ldr	r2, [pc, #272]	; (800106c <MX_GPIO_Init+0x130>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <MX_GPIO_Init+0x130>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <MX_GPIO_Init+0x130>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a3d      	ldr	r2, [pc, #244]	; (800106c <MX_GPIO_Init+0x130>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	; (800106c <MX_GPIO_Init+0x130>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b37      	ldr	r3, [pc, #220]	; (800106c <MX_GPIO_Init+0x130>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a36      	ldr	r2, [pc, #216]	; (800106c <MX_GPIO_Init+0x130>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b34      	ldr	r3, [pc, #208]	; (800106c <MX_GPIO_Init+0x130>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_GPIO_Init+0x130>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a2f      	ldr	r2, [pc, #188]	; (800106c <MX_GPIO_Init+0x130>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_GPIO_Init+0x130>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	4829      	ldr	r0, [pc, #164]	; (8001070 <MX_GPIO_Init+0x134>)
 8000fca:	f000 ff49 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2178      	movs	r1, #120	; 0x78
 8000fd2:	4828      	ldr	r0, [pc, #160]	; (8001074 <MX_GPIO_Init+0x138>)
 8000fd4:	f000 ff44 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ERROR_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481f      	ldr	r0, [pc, #124]	; (8001070 <MX_GPIO_Init+0x134>)
 8000ff2:	f000 fd99 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_A_Pin ENC2_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC2_A_Pin;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001000:	2301      	movs	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	481b      	ldr	r0, [pc, #108]	; (8001078 <MX_GPIO_Init+0x13c>)
 800100c:	f000 fd8c 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|ENC2_B_Pin;
 8001010:	230a      	movs	r3, #10
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4815      	ldr	r0, [pc, #84]	; (8001078 <MX_GPIO_Init+0x13c>)
 8001024:	f000 fd80 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_B_Pin IN2_A_Pin IN2_B_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin;
 8001028:	2378      	movs	r3, #120	; 0x78
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_GPIO_Init+0x138>)
 8001040:	f000 fd72 	bl	8001b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2006      	movs	r0, #6
 800104a:	f000 fd36 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800104e:	2006      	movs	r0, #6
 8001050:	f000 fd4f 	bl	8001af2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2008      	movs	r0, #8
 800105a:	f000 fd2e 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800105e:	2008      	movs	r0, #8
 8001060:	f000 fd47 	bl	8001af2 <HAL_NVIC_EnableIRQ>

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40020800 	.word	0x40020800
 8001074:	40020400 	.word	0x40020400
 8001078:	40020000 	.word	0x40020000

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_MspInit+0x4c>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a18      	ldr	r2, [pc, #96]	; (8001148 <HAL_TIM_Base_MspInit+0x70>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10e      	bne.n	8001108 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_TIM_Base_MspInit+0x74>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_TIM_Base_MspInit+0x74>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_TIM_Base_MspInit+0x74>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001106:	e01a      	b.n	800113e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_TIM_Base_MspInit+0x78>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d115      	bne.n	800113e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_TIM_Base_MspInit+0x74>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_TIM_Base_MspInit+0x74>)
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x74>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	201e      	movs	r0, #30
 8001134:	f000 fcc1 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001138:	201e      	movs	r0, #30
 800113a:	f000 fcda 	bl	8001af2 <HAL_NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40010000 	.word	0x40010000
 800114c:	40023800 	.word	0x40023800
 8001150:	40000800 	.word	0x40000800

08001154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <HAL_TIM_MspPostInit+0x68>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d11e      	bne.n	80011b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_TIM_MspPostInit+0x6c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_TIM_MspPostInit+0x6c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_TIM_MspPostInit+0x6c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001192:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001196:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <HAL_TIM_MspPostInit+0x70>)
 80011b0:	f000 fcba 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40010000 	.word	0x40010000
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f000 fb32 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	/* Check the direction of the first motor */
	if(HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 8001220:	2102      	movs	r1, #2
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <EXTI0_IRQHandler+0x4c>)
 8001224:	f000 fe04 	bl	8001e30 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <EXTI0_IRQHandler+0x1e>
		/* Update the position of the first motor */
		enc1_pos ++;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <EXTI0_IRQHandler+0x50>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <EXTI0_IRQHandler+0x50>)
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	e004      	b.n	8001244 <EXTI0_IRQHandler+0x28>
	}else{
		enc1_pos --;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <EXTI0_IRQHandler+0x50>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <EXTI0_IRQHandler+0x50>)
 8001242:	6013      	str	r3, [r2, #0]
	}
	enc1_pos_cm = (float)enc1_pos/(float)(GEAR_RATIO);
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <EXTI0_IRQHandler+0x50>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001250:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001270 <EXTI0_IRQHandler+0x54>
 8001254:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <EXTI0_IRQHandler+0x58>)
 800125a:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 800125e:	2001      	movs	r0, #1
 8001260:	f000 fe32 	bl	8001ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020000 	.word	0x40020000
 800126c:	200001f0 	.word	0x200001f0
 8001270:	42200000 	.word	0x42200000
 8001274:	200001f8 	.word	0x200001f8

08001278 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	/* Check the direction of the second motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC2_B_Pin)){
 800127c:	2108      	movs	r1, #8
 800127e:	4811      	ldr	r0, [pc, #68]	; (80012c4 <EXTI2_IRQHandler+0x4c>)
 8001280:	f000 fdd6 	bl	8001e30 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <EXTI2_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc2_pos ++;
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <EXTI2_IRQHandler+0x50>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <EXTI2_IRQHandler+0x50>)
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e004      	b.n	80012a0 <EXTI2_IRQHandler+0x28>
		}else{
			enc2_pos --;
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <EXTI2_IRQHandler+0x50>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3b01      	subs	r3, #1
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <EXTI2_IRQHandler+0x50>)
 800129e:	6013      	str	r3, [r2, #0]
		}
		enc2_pos_cm = (float)enc2_pos/(float)(GEAR_RATIO);
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <EXTI2_IRQHandler+0x50>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ac:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012cc <EXTI2_IRQHandler+0x54>
 80012b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <EXTI2_IRQHandler+0x58>)
 80012b6:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 80012ba:	2004      	movs	r0, #4
 80012bc:	f000 fe04 	bl	8001ec8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40020000 	.word	0x40020000
 80012c8:	200001f4 	.word	0x200001f4
 80012cc:	42200000 	.word	0x42200000
 80012d0:	200001fc 	.word	0x200001fc
 80012d4:	00000000 	.word	0x00000000

080012d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(error_code == 0 && external_shutdown == 0){
 80012de:	4bbc      	ldr	r3, [pc, #752]	; (80015d0 <TIM4_IRQHandler+0x2f8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 81a8 	bne.w	8001638 <TIM4_IRQHandler+0x360>
 80012e8:	4bba      	ldr	r3, [pc, #744]	; (80015d4 <TIM4_IRQHandler+0x2fc>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 81a3 	bne.w	8001638 <TIM4_IRQHandler+0x360>

	/* Determine PID errors */
	float pos_error1 = mot1_set_pos - enc1_pos_cm;
 80012f2:	4bb9      	ldr	r3, [pc, #740]	; (80015d8 <TIM4_IRQHandler+0x300>)
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	4bb8      	ldr	r3, [pc, #736]	; (80015dc <TIM4_IRQHandler+0x304>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001302:	edc7 7a03 	vstr	s15, [r7, #12]
	float pos_error2 = mot2_set_pos - enc2_pos_cm;
 8001306:	4bb6      	ldr	r3, [pc, #728]	; (80015e0 <TIM4_IRQHandler+0x308>)
 8001308:	ed93 7a00 	vldr	s14, [r3]
 800130c:	4bb5      	ldr	r3, [pc, #724]	; (80015e4 <TIM4_IRQHandler+0x30c>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001316:	edc7 7a02 	vstr	s15, [r7, #8]

	float der_error1=(pos_error1-pre_pos_error1)*PID_freq;
 800131a:	4bb3      	ldr	r3, [pc, #716]	; (80015e8 <TIM4_IRQHandler+0x310>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ed97 7a03 	vldr	s14, [r7, #12]
 8001324:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001328:	4bb0      	ldr	r3, [pc, #704]	; (80015ec <TIM4_IRQHandler+0x314>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001338:	edc7 7a01 	vstr	s15, [r7, #4]
	float der_error2=(pos_error2-pre_pos_error2)*PID_freq;
 800133c:	4bac      	ldr	r3, [pc, #688]	; (80015f0 <TIM4_IRQHandler+0x318>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	ed97 7a02 	vldr	s14, [r7, #8]
 8001346:	ee37 7a67 	vsub.f32	s14, s14, s15
 800134a:	4ba8      	ldr	r3, [pc, #672]	; (80015ec <TIM4_IRQHandler+0x314>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135a:	edc7 7a00 	vstr	s15, [r7]

	int_error1+=pos_error1/PID_freq;
 800135e:	4ba3      	ldr	r3, [pc, #652]	; (80015ec <TIM4_IRQHandler+0x314>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800136a:	edd7 6a03 	vldr	s13, [r7, #12]
 800136e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001372:	4ba0      	ldr	r3, [pc, #640]	; (80015f4 <TIM4_IRQHandler+0x31c>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137c:	4b9d      	ldr	r3, [pc, #628]	; (80015f4 <TIM4_IRQHandler+0x31c>)
 800137e:	edc3 7a00 	vstr	s15, [r3]
	int_error2+=pos_error2/PID_freq;
 8001382:	4b9a      	ldr	r3, [pc, #616]	; (80015ec <TIM4_IRQHandler+0x314>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001396:	4b98      	ldr	r3, [pc, #608]	; (80015f8 <TIM4_IRQHandler+0x320>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	4b95      	ldr	r3, [pc, #596]	; (80015f8 <TIM4_IRQHandler+0x320>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]

	pre_pos_error1=pos_error1;
 80013a6:	4a90      	ldr	r2, [pc, #576]	; (80015e8 <TIM4_IRQHandler+0x310>)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6013      	str	r3, [r2, #0]
	pre_pos_error2=pos_error2;
 80013ac:	4a90      	ldr	r2, [pc, #576]	; (80015f0 <TIM4_IRQHandler+0x318>)
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	6013      	str	r3, [r2, #0]

	/* Set the duty (only proportional implemented for now) */
	duty1 = (int)(kp1*pos_error1+kd1*der_error1+ki1*int_error1);
 80013b2:	4b92      	ldr	r3, [pc, #584]	; (80015fc <TIM4_IRQHandler+0x324>)
 80013b4:	ed93 7a00 	vldr	s14, [r3]
 80013b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c0:	4b8f      	ldr	r3, [pc, #572]	; (8001600 <TIM4_IRQHandler+0x328>)
 80013c2:	edd3 6a00 	vldr	s13, [r3]
 80013c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d2:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <TIM4_IRQHandler+0x32c>)
 80013d4:	edd3 6a00 	vldr	s13, [r3]
 80013d8:	4b86      	ldr	r3, [pc, #536]	; (80015f4 <TIM4_IRQHandler+0x31c>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ea:	ee17 2a90 	vmov	r2, s15
 80013ee:	4b86      	ldr	r3, [pc, #536]	; (8001608 <TIM4_IRQHandler+0x330>)
 80013f0:	601a      	str	r2, [r3, #0]
	duty2 = (int)(kp2*pos_error2+kd2*der_error2+ki2*int_error2);
 80013f2:	4b86      	ldr	r3, [pc, #536]	; (800160c <TIM4_IRQHandler+0x334>)
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	4b83      	ldr	r3, [pc, #524]	; (8001610 <TIM4_IRQHandler+0x338>)
 8001402:	edd3 6a00 	vldr	s13, [r3]
 8001406:	edd7 7a00 	vldr	s15, [r7]
 800140a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001412:	4b80      	ldr	r3, [pc, #512]	; (8001614 <TIM4_IRQHandler+0x33c>)
 8001414:	edd3 6a00 	vldr	s13, [r3]
 8001418:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <TIM4_IRQHandler+0x320>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800142a:	ee17 2a90 	vmov	r2, s15
 800142e:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <TIM4_IRQHandler+0x340>)
 8001430:	601a      	str	r2, [r3, #0]

	/* Set the direction */
	if(duty1 > 0){
 8001432:	4b75      	ldr	r3, [pc, #468]	; (8001608 <TIM4_IRQHandler+0x330>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	dd0e      	ble.n	8001458 <TIM4_IRQHandler+0x180>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, HIGH);
 800143a:	4b78      	ldr	r3, [pc, #480]	; (800161c <TIM4_IRQHandler+0x344>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	2108      	movs	r1, #8
 8001442:	4877      	ldr	r0, [pc, #476]	; (8001620 <TIM4_IRQHandler+0x348>)
 8001444:	f000 fd0c 	bl	8001e60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 8001448:	4b76      	ldr	r3, [pc, #472]	; (8001624 <TIM4_IRQHandler+0x34c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	2110      	movs	r1, #16
 8001450:	4873      	ldr	r0, [pc, #460]	; (8001620 <TIM4_IRQHandler+0x348>)
 8001452:	f000 fd05 	bl	8001e60 <HAL_GPIO_WritePin>
 8001456:	e012      	b.n	800147e <TIM4_IRQHandler+0x1a6>
	}
	else{
			duty1 = -duty1;
 8001458:	4b6b      	ldr	r3, [pc, #428]	; (8001608 <TIM4_IRQHandler+0x330>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	425b      	negs	r3, r3
 800145e:	4a6a      	ldr	r2, [pc, #424]	; (8001608 <TIM4_IRQHandler+0x330>)
 8001460:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, HIGH);
 8001462:	4b6e      	ldr	r3, [pc, #440]	; (800161c <TIM4_IRQHandler+0x344>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	2110      	movs	r1, #16
 800146a:	486d      	ldr	r0, [pc, #436]	; (8001620 <TIM4_IRQHandler+0x348>)
 800146c:	f000 fcf8 	bl	8001e60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 8001470:	4b6c      	ldr	r3, [pc, #432]	; (8001624 <TIM4_IRQHandler+0x34c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	2108      	movs	r1, #8
 8001478:	4869      	ldr	r0, [pc, #420]	; (8001620 <TIM4_IRQHandler+0x348>)
 800147a:	f000 fcf1 	bl	8001e60 <HAL_GPIO_WritePin>
	}
	if(duty2 > 0){
 800147e:	4b66      	ldr	r3, [pc, #408]	; (8001618 <TIM4_IRQHandler+0x340>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	dd0e      	ble.n	80014a4 <TIM4_IRQHandler+0x1cc>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, HIGH);
 8001486:	4b65      	ldr	r3, [pc, #404]	; (800161c <TIM4_IRQHandler+0x344>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	2120      	movs	r1, #32
 800148e:	4864      	ldr	r0, [pc, #400]	; (8001620 <TIM4_IRQHandler+0x348>)
 8001490:	f000 fce6 	bl	8001e60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, LOW);
 8001494:	4b63      	ldr	r3, [pc, #396]	; (8001624 <TIM4_IRQHandler+0x34c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	2140      	movs	r1, #64	; 0x40
 800149c:	4860      	ldr	r0, [pc, #384]	; (8001620 <TIM4_IRQHandler+0x348>)
 800149e:	f000 fcdf 	bl	8001e60 <HAL_GPIO_WritePin>
 80014a2:	e012      	b.n	80014ca <TIM4_IRQHandler+0x1f2>
	}
	else{
			duty2 = -duty2;
 80014a4:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <TIM4_IRQHandler+0x340>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	425b      	negs	r3, r3
 80014aa:	4a5b      	ldr	r2, [pc, #364]	; (8001618 <TIM4_IRQHandler+0x340>)
 80014ac:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, HIGH);
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <TIM4_IRQHandler+0x344>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	485a      	ldr	r0, [pc, #360]	; (8001620 <TIM4_IRQHandler+0x348>)
 80014b8:	f000 fcd2 	bl	8001e60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, LOW);
 80014bc:	4b59      	ldr	r3, [pc, #356]	; (8001624 <TIM4_IRQHandler+0x34c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	2120      	movs	r1, #32
 80014c4:	4856      	ldr	r0, [pc, #344]	; (8001620 <TIM4_IRQHandler+0x348>)
 80014c6:	f000 fccb 	bl	8001e60 <HAL_GPIO_WritePin>
	}

	/* Limit the duty */
	if(duty1 > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 80014ca:	4b4f      	ldr	r3, [pc, #316]	; (8001608 <TIM4_IRQHandler+0x330>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f908 	bl	80006e4 <__aeabi_i2d>
 80014d4:	4604      	mov	r4, r0
 80014d6:	460d      	mov	r5, r1
 80014d8:	4b53      	ldr	r3, [pc, #332]	; (8001628 <TIM4_IRQHandler+0x350>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f8f0 	bl	80006c4 <__aeabi_ui2d>
 80014e4:	a338      	add	r3, pc, #224	; (adr r3, 80015c8 <TIM4_IRQHandler+0x2f0>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7fe fe7f 	bl	80001ec <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4620      	mov	r0, r4
 80014f4:	4629      	mov	r1, r5
 80014f6:	f7ff f9dd 	bl	80008b4 <__aeabi_dcmpgt>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <TIM4_IRQHandler+0x250>
			duty1 = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001500:	4b49      	ldr	r3, [pc, #292]	; (8001628 <TIM4_IRQHandler+0x350>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	3301      	adds	r3, #1
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f8dc 	bl	80006c4 <__aeabi_ui2d>
 800150c:	a32e      	add	r3, pc, #184	; (adr r3, 80015c8 <TIM4_IRQHandler+0x2f0>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7fe fe6b 	bl	80001ec <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff f9d3 	bl	80008c8 <__aeabi_d2iz>
 8001522:	4603      	mov	r3, r0
 8001524:	4a38      	ldr	r2, [pc, #224]	; (8001608 <TIM4_IRQHandler+0x330>)
 8001526:	6013      	str	r3, [r2, #0]
		}
	if(duty2 > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001528:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <TIM4_IRQHandler+0x340>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f8d9 	bl	80006e4 <__aeabi_i2d>
 8001532:	4604      	mov	r4, r0
 8001534:	460d      	mov	r5, r1
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <TIM4_IRQHandler+0x350>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f8c1 	bl	80006c4 <__aeabi_ui2d>
 8001542:	a321      	add	r3, pc, #132	; (adr r3, 80015c8 <TIM4_IRQHandler+0x2f0>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe fe50 	bl	80001ec <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7ff f9ae 	bl	80008b4 <__aeabi_dcmpgt>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d013      	beq.n	8001586 <TIM4_IRQHandler+0x2ae>
			duty2 = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <TIM4_IRQHandler+0x350>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	3301      	adds	r3, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f8ad 	bl	80006c4 <__aeabi_ui2d>
 800156a:	a317      	add	r3, pc, #92	; (adr r3, 80015c8 <TIM4_IRQHandler+0x2f0>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7fe fe3c 	bl	80001ec <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff f9a4 	bl	80008c8 <__aeabi_d2iz>
 8001580:	4603      	mov	r3, r0
 8001582:	4a25      	ldr	r2, [pc, #148]	; (8001618 <TIM4_IRQHandler+0x340>)
 8001584:	6013      	str	r3, [r2, #0]
		}

	TIM1->CCR1 = duty1;
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <TIM4_IRQHandler+0x330>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <TIM4_IRQHandler+0x354>)
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = duty2;
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <TIM4_IRQHandler+0x340>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <TIM4_IRQHandler+0x354>)
 8001594:	639a      	str	r2, [r3, #56]	; 0x38

	// Send acknowledge if the system reaches steady state
	if (ack_to_be_sent == 1 && pos_error1 == 0){
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <TIM4_IRQHandler+0x358>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10e      	bne.n	80015bc <TIM4_IRQHandler+0x2e4>
 800159e:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	d107      	bne.n	80015bc <TIM4_IRQHandler+0x2e4>
		steady_state_counter++;
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <TIM4_IRQHandler+0x35c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <TIM4_IRQHandler+0x35c>)
 80015b6:	701a      	strb	r2, [r3, #0]
		if(steady_state_counter == 1){
			//forward_kinematics();
		}

		if (steady_state_counter == 255){
 80015b8:	bf00      	nop
	if(error_code == 0 && external_shutdown == 0){
 80015ba:	e04d      	b.n	8001658 <TIM4_IRQHandler+0x380>
			// forward_kinematics(); X_curr should be updated above, as soon as pos_error1 = 0 !!!
		}
	}
	else {
		steady_state_counter = 0;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <TIM4_IRQHandler+0x35c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
	if(error_code == 0 && external_shutdown == 0){
 80015c2:	e049      	b.n	8001658 <TIM4_IRQHandler+0x380>
 80015c4:	f3af 8000 	nop.w
 80015c8:	66666666 	.word	0x66666666
 80015cc:	3fee6666 	.word	0x3fee6666
 80015d0:	200001d4 	.word	0x200001d4
 80015d4:	200001d5 	.word	0x200001d5
 80015d8:	20000200 	.word	0x20000200
 80015dc:	200001f8 	.word	0x200001f8
 80015e0:	20000204 	.word	0x20000204
 80015e4:	200001fc 	.word	0x200001fc
 80015e8:	20000208 	.word	0x20000208
 80015ec:	200001c4 	.word	0x200001c4
 80015f0:	2000020c 	.word	0x2000020c
 80015f4:	20000210 	.word	0x20000210
 80015f8:	20000214 	.word	0x20000214
 80015fc:	20000010 	.word	0x20000010
 8001600:	2000021c 	.word	0x2000021c
 8001604:	20000218 	.word	0x20000218
 8001608:	20000228 	.word	0x20000228
 800160c:	20000014 	.word	0x20000014
 8001610:	20000224 	.word	0x20000224
 8001614:	20000220 	.word	0x20000220
 8001618:	2000022c 	.word	0x2000022c
 800161c:	20000018 	.word	0x20000018
 8001620:	40020400 	.word	0x40020400
 8001624:	20000230 	.word	0x20000230
 8001628:	20000134 	.word	0x20000134
 800162c:	40010000 	.word	0x40010000
 8001630:	200001d6 	.word	0x200001d6
 8001634:	200001d7 	.word	0x200001d7
	}

	}
	else{
		TIM1->CCR1 = 0;
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <TIM4_IRQHandler+0x390>)
 800163a:	2200      	movs	r2, #0
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <TIM4_IRQHandler+0x390>)
 8001640:	2200      	movs	r2, #0
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
		memcpy(&usb_out, &error_message, sizeof(usb_out));
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <TIM4_IRQHandler+0x394>)
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <TIM4_IRQHandler+0x398>)
 8001648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800164c:	e883 0003 	stmia.w	r3, {r0, r1}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 8001650:	2108      	movs	r1, #8
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <TIM4_IRQHandler+0x394>)
 8001654:	f006 fffc 	bl	8008650 <CDC_Transmit_FS>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <TIM4_IRQHandler+0x39c>)
 800165a:	f002 fcc1 	bl	8003fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bdb0      	pop	{r4, r5, r7, pc}
 8001666:	bf00      	nop
 8001668:	40010000 	.word	0x40010000
 800166c:	20000000 	.word	0x20000000
 8001670:	20000008 	.word	0x20000008
 8001674:	2000017c 	.word	0x2000017c

08001678 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

	CDC_Receive_FS(usb_temp,sizeof(usb_temp));
 800167c:	2108      	movs	r1, #8
 800167e:	482d      	ldr	r0, [pc, #180]	; (8001734 <OTG_FS_IRQHandler+0xbc>)
 8001680:	f006 ffd2 	bl	8008628 <CDC_Receive_FS>

	if(strcmp((char *)usb_temp, (char *)empty_string) != 0){
 8001684:	492c      	ldr	r1, [pc, #176]	; (8001738 <OTG_FS_IRQHandler+0xc0>)
 8001686:	482b      	ldr	r0, [pc, #172]	; (8001734 <OTG_FS_IRQHandler+0xbc>)
 8001688:	f7fe fda6 	bl	80001d8 <strcmp>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d045      	beq.n	800171e <OTG_FS_IRQHandler+0xa6>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001696:	4829      	ldr	r0, [pc, #164]	; (800173c <OTG_FS_IRQHandler+0xc4>)
 8001698:	f000 fbfb 	bl	8001e92 <HAL_GPIO_TogglePin>

		// Store the data in usb_in array if a non-empty message received
		memcpy(&usb_in, &usb_temp, sizeof(usb_in));
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <OTG_FS_IRQHandler+0xc8>)
 800169e:	4a25      	ldr	r2, [pc, #148]	; (8001734 <OTG_FS_IRQHandler+0xbc>)
 80016a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016a4:	e883 0003 	stmia.w	r3, {r0, r1}

		/* Parsing USB Message*/
		if(usb_in[0] == 'm'){
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <OTG_FS_IRQHandler+0xc8>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b6d      	cmp	r3, #109	; 0x6d
 80016ae:	d12f      	bne.n	8001710 <OTG_FS_IRQHandler+0x98>
			// Since STM32 byte size is 16 bits, there isn't a real uint8_t type
			// We manually do big endian storage, and manually decode them below here
			move_x = usb_in[1]*256 + usb_in[2];
 80016b0:	4b23      	ldr	r3, [pc, #140]	; (8001740 <OTG_FS_IRQHandler+0xc8>)
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b21      	ldr	r3, [pc, #132]	; (8001740 <OTG_FS_IRQHandler+0xc8>)
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <OTG_FS_IRQHandler+0xcc>)
 80016c8:	801a      	strh	r2, [r3, #0]
			move_y = usb_in[3]*256 + usb_in[4];
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <OTG_FS_IRQHandler+0xc8>)
 80016cc:	78db      	ldrb	r3, [r3, #3]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <OTG_FS_IRQHandler+0xc8>)
 80016d6:	791b      	ldrb	r3, [r3, #4]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4413      	add	r3, r2
 80016dc:	b29b      	uxth	r3, r3
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <OTG_FS_IRQHandler+0xd0>)
 80016e2:	801a      	strh	r2, [r3, #0]
			usb_in[4] = move_y%256;
			usb_in[5] = '\n';
			CDC_Transmit_FS(usb_in,sizeof(usb_in));
			*/

			Y_ref = Y_curr + (float)move_y/10;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <OTG_FS_IRQHandler+0xd0>)
 80016e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <OTG_FS_IRQHandler+0xd4>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <OTG_FS_IRQHandler+0xd8>)
 8001706:	edc3 7a00 	vstr	s15, [r3]

			ack_to_be_sent = 1;
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <OTG_FS_IRQHandler+0xdc>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]

		}

		if(usb_in[0] == 's'){
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <OTG_FS_IRQHandler+0xc8>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b73      	cmp	r3, #115	; 0x73
 8001716:	d102      	bne.n	800171e <OTG_FS_IRQHandler+0xa6>
			external_shutdown = 1;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <OTG_FS_IRQHandler+0xe0>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
		}

	}

	// Clear usb_temp array
	memset(usb_temp, 0, sizeof(usb_temp));
 800171e:	2208      	movs	r2, #8
 8001720:	2100      	movs	r1, #0
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <OTG_FS_IRQHandler+0xbc>)
 8001724:	f007 fc0a 	bl	8008f3c <memset>

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <OTG_FS_IRQHandler+0xe4>)
 800172a:	f000 fd40 	bl	80021ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001e0 	.word	0x200001e0
 8001738:	200001e8 	.word	0x200001e8
 800173c:	40020800 	.word	0x40020800
 8001740:	200001d8 	.word	0x200001d8
 8001744:	200001c8 	.word	0x200001c8
 8001748:	200001ca 	.word	0x200001ca
 800174c:	200001d0 	.word	0x200001d0
 8001750:	200001cc 	.word	0x200001cc
 8001754:	200001d6 	.word	0x200001d6
 8001758:	200001d5 	.word	0x200001d5
 800175c:	20000f18 	.word	0x20000f18

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178a:	490e      	ldr	r1, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a0:	4c0b      	ldr	r4, [pc, #44]	; (80017d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ae:	f7ff ffd7 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f007 fb9f 	bl	8008ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff fa31 	bl	8000c1c <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 80017c8:	08008fcc 	.word	0x08008fcc
  ldr r2, =_sbss
 80017cc:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 80017d0:	20001644 	.word	0x20001644

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_Init+0x40>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_Init+0x40>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x40>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f94f 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fc3c 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f967 	bl	8001b0e <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f92f 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000001c 	.word	0x2000001c
 8001874:	20000024 	.word	0x20000024
 8001878:	20000020 	.word	0x20000020

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000024 	.word	0x20000024
 80018a0:	20000234 	.word	0x20000234

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000234 	.word	0x20000234

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff ffee 	bl	80018a4 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_Delay+0x44>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018e2:	bf00      	nop
 80018e4:	f7ff ffde 	bl	80018a4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000024 	.word	0x20000024

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	; (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff29 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff3e 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff8e 	bl	80019f8 <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5d 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff31 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa2 	bl	8001a60 <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e159      	b.n	8001df8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8148 	bne.w	8001df2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d005      	beq.n	8001b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d130      	bne.n	8001bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d017      	beq.n	8001c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a2 	beq.w	8001df2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b57      	ldr	r3, [pc, #348]	; (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a56      	ldr	r2, [pc, #344]	; (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b54      	ldr	r3, [pc, #336]	; (8001e10 <HAL_GPIO_Init+0x2e8>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cca:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a49      	ldr	r2, [pc, #292]	; (8001e18 <HAL_GPIO_Init+0x2f0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d019      	beq.n	8001d2a <HAL_GPIO_Init+0x202>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_GPIO_Init+0x2f4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x1fe>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a47      	ldr	r2, [pc, #284]	; (8001e20 <HAL_GPIO_Init+0x2f8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x1fa>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a46      	ldr	r2, [pc, #280]	; (8001e24 <HAL_GPIO_Init+0x2fc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x1f6>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a45      	ldr	r2, [pc, #276]	; (8001e28 <HAL_GPIO_Init+0x300>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x1f2>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e008      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e004      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x204>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f002 0203 	and.w	r2, r2, #3
 8001d32:	0092      	lsls	r2, r2, #2
 8001d34:	4093      	lsls	r3, r2
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d3c:	4935      	ldr	r1, [pc, #212]	; (8001e14 <HAL_GPIO_Init+0x2ec>)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	3302      	adds	r3, #2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d4a:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d6e:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dec:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <HAL_GPIO_Init+0x304>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	f67f aea2 	bls.w	8001b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e7c:	e003      	b.n	8001e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	041a      	lsls	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea4:	887a      	ldrh	r2, [r7, #2]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	041a      	lsls	r2, r3, #16
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	400b      	ands	r3, r1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed4:	695a      	ldr	r2, [r3, #20]
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f806 	bl	8001ef8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40013c00 	.word	0x40013c00

08001ef8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f10:	b08f      	sub	sp, #60	; 0x3c
 8001f12:	af0a      	add	r7, sp, #40	; 0x28
 8001f14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e10f      	b.n	8002140 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d106      	bne.n	8001f40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f006 fcd0 	bl	80088e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2203      	movs	r2, #3
 8001f44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 ffb7 	bl	8004ed2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	687e      	ldr	r6, [r7, #4]
 8001f6c:	466d      	mov	r5, sp
 8001f6e:	f106 0410 	add.w	r4, r6, #16
 8001f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f82:	1d33      	adds	r3, r6, #4
 8001f84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f86:	6838      	ldr	r0, [r7, #0]
 8001f88:	f002 fe8e 	bl	8004ca8 <USB_CoreInit>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0d0      	b.n	8002140 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 ffa5 	bl	8004ef4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	e04a      	b.n	8002046 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	333d      	adds	r3, #61	; 0x3d
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	333c      	adds	r3, #60	; 0x3c
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	b298      	uxth	r0, r3
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3344      	adds	r3, #68	; 0x44
 8001fec:	4602      	mov	r2, r0
 8001fee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3340      	adds	r3, #64	; 0x40
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3348      	adds	r3, #72	; 0x48
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	334c      	adds	r3, #76	; 0x4c
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3354      	adds	r3, #84	; 0x54
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	3301      	adds	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3af      	bcc.n	8001fb0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e044      	b.n	80020e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	3301      	adds	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d3b5      	bcc.n	8002056 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	687e      	ldr	r6, [r7, #4]
 80020f2:	466d      	mov	r5, sp
 80020f4:	f106 0410 	add.w	r4, r6, #16
 80020f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002100:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002104:	e885 0003 	stmia.w	r5, {r0, r1}
 8002108:	1d33      	adds	r3, r6, #4
 800210a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210c:	6838      	ldr	r0, [r7, #0]
 800210e:	f002 ff3d 	bl	8004f8c <USB_DevInit>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e00d      	b.n	8002140 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f004 f88c 	bl	8006256 <USB_DevDisconnect>

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002148 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_PCD_Start+0x1c>
 8002160:	2302      	movs	r3, #2
 8002162:	e020      	b.n	80021a6 <HAL_PCD_Start+0x5e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	2b01      	cmp	r3, #1
 8002172:	d109      	bne.n	8002188 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002178:	2b01      	cmp	r3, #1
 800217a:	d005      	beq.n	8002188 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fe8f 	bl	8004eb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f004 f83c 	bl	8006214 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021ae:	b590      	push	{r4, r7, lr}
 80021b0:	b08d      	sub	sp, #52	; 0x34
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 f8fa 	bl	80063be <USB_GetMode>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f040 848a 	bne.w	8002ae6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f004 f85e 	bl	8006298 <USB_ReadInterrupts>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8480 	beq.w	8002ae4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f004 f84b 	bl	8006298 <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b02      	cmp	r3, #2
 800220a:	d107      	bne.n	800221c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f002 0202 	and.w	r2, r2, #2
 800221a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f004 f839 	bl	8006298 <USB_ReadInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b10      	cmp	r3, #16
 800222e:	d161      	bne.n	80022f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0210 	bic.w	r2, r2, #16
 800223e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002240:	6a3b      	ldr	r3, [r7, #32]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f003 020f 	and.w	r2, r3, #15
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	0c5b      	lsrs	r3, r3, #17
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	2b02      	cmp	r3, #2
 800226a:	d124      	bne.n	80022b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d035      	beq.n	80022e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002286:	b29b      	uxth	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	6a38      	ldr	r0, [r7, #32]
 800228c:	f003 fe70 	bl	8005f70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800229c:	441a      	add	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6a1a      	ldr	r2, [r3, #32]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ae:	441a      	add	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	621a      	str	r2, [r3, #32]
 80022b4:	e016      	b.n	80022e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	0c5b      	lsrs	r3, r3, #17
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d110      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c8:	2208      	movs	r2, #8
 80022ca:	4619      	mov	r1, r3
 80022cc:	6a38      	ldr	r0, [r7, #32]
 80022ce:	f003 fe4f 	bl	8005f70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022de:	441a      	add	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0210 	orr.w	r2, r2, #16
 80022f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f003 ffcd 	bl	8006298 <USB_ReadInterrupts>
 80022fe:	4603      	mov	r3, r0
 8002300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002304:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002308:	f040 80a7 	bne.w	800245a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f003 ffd2 	bl	80062be <USB_ReadDevAllOutEpInterrupt>
 800231a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800231c:	e099      	b.n	8002452 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 808e 	beq.w	8002446 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fff6 	bl	8006326 <USB_ReadDevOutEPInterrupt>
 800233a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00c      	beq.n	8002360 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002352:	461a      	mov	r2, r3
 8002354:	2301      	movs	r3, #1
 8002356:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fec2 	bl	80030e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00c      	beq.n	8002384 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	2308      	movs	r3, #8
 800237a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800237c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 ff98 	bl	80032b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f003 0310 	and.w	r3, r3, #16
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800239a:	461a      	mov	r2, r3
 800239c:	2310      	movs	r3, #16
 800239e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d030      	beq.n	800240c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d109      	bne.n	80023ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	78db      	ldrb	r3, [r3, #3]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d108      	bne.n	80023fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2200      	movs	r2, #0
 80023ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	4619      	mov	r1, r3
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f006 fb6f 	bl	8008ad8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	4413      	add	r3, r2
 8002402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002406:	461a      	mov	r2, r3
 8002408:	2302      	movs	r3, #2
 800240a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002422:	461a      	mov	r2, r3
 8002424:	2320      	movs	r3, #32
 8002426:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800243e:	461a      	mov	r2, r3
 8002440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002444:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	3301      	adds	r3, #1
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	f47f af62 	bne.w	800231e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f003 ff1a 	bl	8006298 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800246e:	f040 80db 	bne.w	8002628 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 ff3b 	bl	80062f2 <USB_ReadDevAllInEpInterrupt>
 800247c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002482:	e0cd      	b.n	8002620 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80c2 	beq.w	8002614 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f003 ff61 	bl	8006362 <USB_ReadDevInEPInterrupt>
 80024a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d057      	beq.n	800255c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	2201      	movs	r2, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69f9      	ldr	r1, [r7, #28]
 80024c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024cc:	4013      	ands	r3, r2
 80024ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024dc:	461a      	mov	r2, r3
 80024de:	2301      	movs	r3, #1
 80024e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d132      	bne.n	8002550 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	334c      	adds	r3, #76	; 0x4c
 80024fa:	6819      	ldr	r1, [r3, #0]
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4403      	add	r3, r0
 800250a:	3348      	adds	r3, #72	; 0x48
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4419      	add	r1, r3
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4403      	add	r3, r0
 800251e:	334c      	adds	r3, #76	; 0x4c
 8002520:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	2b00      	cmp	r3, #0
 8002526:	d113      	bne.n	8002550 <HAL_PCD_IRQHandler+0x3a2>
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	3354      	adds	r3, #84	; 0x54
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d108      	bne.n	8002550 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002548:	461a      	mov	r2, r3
 800254a:	2101      	movs	r1, #1
 800254c:	f003 ff68 	bl	8006420 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f006 fa43 	bl	80089e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002572:	461a      	mov	r2, r3
 8002574:	2308      	movs	r3, #8
 8002576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	4413      	add	r3, r2
 800258a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258e:	461a      	mov	r2, r3
 8002590:	2310      	movs	r3, #16
 8002592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025aa:	461a      	mov	r2, r3
 80025ac:	2340      	movs	r3, #64	; 0x40
 80025ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d023      	beq.n	8002602 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025bc:	6a38      	ldr	r0, [r7, #32]
 80025be:	f002 fe49 	bl	8005254 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	3338      	adds	r3, #56	; 0x38
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	3304      	adds	r3, #4
 80025d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	78db      	ldrb	r3, [r3, #3]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d108      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4619      	mov	r1, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f006 fa86 	bl	8008afc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025fc:	461a      	mov	r2, r3
 80025fe:	2302      	movs	r3, #2
 8002600:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800260c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fcdb 	bl	8002fca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	3301      	adds	r3, #1
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	2b00      	cmp	r3, #0
 8002624:	f47f af2e 	bne.w	8002484 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f003 fe33 	bl	8006298 <USB_ReadInterrupts>
 8002632:	4603      	mov	r3, r0
 8002634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800263c:	d122      	bne.n	8002684 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002658:	2b01      	cmp	r3, #1
 800265a:	d108      	bne.n	800266e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002664:	2100      	movs	r1, #0
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fec2 	bl	80033f0 <HAL_PCDEx_LPM_Callback>
 800266c:	e002      	b.n	8002674 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f006 fa24 	bl	8008abc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f003 fe05 	bl	8006298 <USB_ReadInterrupts>
 800268e:	4603      	mov	r3, r0
 8002690:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002698:	d112      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d102      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f006 f9e0 	bl	8008a70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026be:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fde7 	bl	8006298 <USB_ReadInterrupts>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d4:	f040 80b7 	bne.w	8002846 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2110      	movs	r1, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fdae 	bl	8005254 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fc:	e046      	b.n	800278c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270a:	461a      	mov	r2, r3
 800270c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002710:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002722:	0151      	lsls	r1, r2, #5
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	440a      	add	r2, r1
 8002728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800272c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002730:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273e:	461a      	mov	r2, r3
 8002740:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002744:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002756:	0151      	lsls	r1, r2, #5
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	440a      	add	r2, r1
 800275c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002760:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002764:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002776:	0151      	lsls	r1, r2, #5
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	440a      	add	r2, r1
 800277c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002784:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	3301      	adds	r3, #1
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002792:	429a      	cmp	r2, r3
 8002794:	d3b3      	bcc.n	80026fe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c2:	f043 030b 	orr.w	r3, r3, #11
 80027c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d8:	f043 030b 	orr.w	r3, r3, #11
 80027dc:	6453      	str	r3, [r2, #68]	; 0x44
 80027de:	e015      	b.n	800280c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002806:	f043 030b 	orr.w	r3, r3, #11
 800280a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800281e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002830:	461a      	mov	r2, r3
 8002832:	f003 fdf5 	bl	8006420 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695a      	ldr	r2, [r3, #20]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f003 fd24 	bl	8006298 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285a:	d124      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f003 fdba 	bl	80063da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f002 fd6f 	bl	800534e <USB_GetDevSpeed>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681c      	ldr	r4, [r3, #0]
 800287c:	f001 f9e8 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8002880:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	4620      	mov	r0, r4
 800288c:	f002 fa6e 	bl	8004d6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f006 f8ce 	bl	8008a32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80028a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fcf4 	bl	8006298 <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d10a      	bne.n	80028d0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f006 f8ab 	bl	8008a16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695a      	ldr	r2, [r3, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f002 0208 	and.w	r2, r2, #8
 80028ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 fcdf 	bl	8006298 <USB_ReadInterrupts>
 80028da:	4603      	mov	r3, r0
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d122      	bne.n	800292a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f0:	2301      	movs	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	e014      	b.n	8002920 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	b2db      	uxtb	r3, r3
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fb27 	bl	8002f68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	3301      	adds	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002926:	429a      	cmp	r2, r3
 8002928:	d3e5      	bcc.n	80028f6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fcb2 	bl	8006298 <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293e:	d13b      	bne.n	80029b8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002940:	2301      	movs	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	e02b      	b.n	800299e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	4413      	add	r3, r2
 800294e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3340      	adds	r3, #64	; 0x40
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d115      	bne.n	8002998 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800296c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	da12      	bge.n	8002998 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	333f      	adds	r3, #63	; 0x3f
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800298e:	b2db      	uxtb	r3, r3
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fae8 	bl	8002f68 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	3301      	adds	r3, #1
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d3ce      	bcc.n	8002946 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 fc6b 	bl	8006298 <USB_ReadInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029cc:	d155      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ce:	2301      	movs	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	e045      	b.n	8002a60 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d12e      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	da2b      	bge.n	8002a5a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a0e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d121      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a56:	6053      	str	r3, [r2, #4]
            break;
 8002a58:	e007      	b.n	8002a6a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d3b4      	bcc.n	80029d4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 fc0a 	bl	8006298 <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8e:	d10a      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f006 f845 	bl	8008b20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002aa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fbf4 	bl	8006298 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d115      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f006 f835 	bl	8008b3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	e000      	b.n	8002ae6 <HAL_PCD_IRQHandler+0x938>
      return;
 8002ae4:	bf00      	nop
    }
  }
}
 8002ae6:	3734      	adds	r7, #52	; 0x34
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_PCD_SetAddress+0x1a>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e013      	b.n	8002b2e <HAL_PCD_SetAddress+0x42>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 fb52 	bl	80061c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	4608      	mov	r0, r1
 8002b40:	4611      	mov	r1, r2
 8002b42:	461a      	mov	r2, r3
 8002b44:	4603      	mov	r3, r0
 8002b46:	70fb      	strb	r3, [r7, #3]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	803b      	strh	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	da0f      	bge.n	8002b7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	3338      	adds	r3, #56	; 0x38
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	705a      	strb	r2, [r3, #1]
 8002b7a:	e00f      	b.n	8002b9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 020f 	and.w	r2, r3, #15
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ba8:	883a      	ldrh	r2, [r7, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	78ba      	ldrb	r2, [r7, #2]
 8002bb2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	785b      	ldrb	r3, [r3, #1]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bc6:	78bb      	ldrb	r3, [r7, #2]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d102      	bne.n	8002bd2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_PCD_EP_Open+0xaa>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e00e      	b.n	8002bfe <HAL_PCD_EP_Open+0xc8>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 fbd2 	bl	8005398 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da0f      	bge.n	8002c3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	f003 020f 	and.w	r2, r3, #15
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	3338      	adds	r3, #56	; 0x38
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	705a      	strb	r2, [r3, #1]
 8002c38:	e00f      	b.n	8002c5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	f003 020f 	and.w	r2, r3, #15
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3304      	adds	r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_PCD_EP_Close+0x6e>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e00e      	b.n	8002c92 <HAL_PCD_EP_Close+0x8c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68f9      	ldr	r1, [r7, #12]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 fc10 	bl	80054a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002caa:	7afb      	ldrb	r3, [r7, #11]
 8002cac:	f003 020f 	and.w	r2, r3, #15
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d102      	bne.n	8002cf6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cf6:	7afb      	ldrb	r3, [r7, #11]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6979      	ldr	r1, [r7, #20]
 8002d0e:	f002 feef 	bl	8005af0 <USB_EP0StartXfer>
 8002d12:	e008      	b.n	8002d26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6979      	ldr	r1, [r7, #20]
 8002d22:	f002 fc9d 	bl	8005660 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	f003 020f 	and.w	r2, r3, #15
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	3338      	adds	r3, #56	; 0x38
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	3304      	adds	r3, #4
 8002d86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2200      	movs	r2, #0
 8002d98:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da0:	7afb      	ldrb	r3, [r7, #11]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d102      	bne.n	8002dba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6979      	ldr	r1, [r7, #20]
 8002dd2:	f002 fe8d 	bl	8005af0 <USB_EP0StartXfer>
 8002dd6:	e008      	b.n	8002dea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	6979      	ldr	r1, [r7, #20]
 8002de6:	f002 fc3b 	bl	8005660 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	f003 020f 	and.w	r2, r3, #15
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d901      	bls.n	8002e12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e050      	b.n	8002eb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da0f      	bge.n	8002e3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	3338      	adds	r3, #56	; 0x38
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3304      	adds	r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	705a      	strb	r2, [r3, #1]
 8002e38:	e00d      	b.n	8002e56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_PCD_EP_SetStall+0x82>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e01e      	b.n	8002eb4 <HAL_PCD_EP_SetStall+0xc0>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68f9      	ldr	r1, [r7, #12]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 f8cb 	bl	8006020 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	b2d9      	uxtb	r1, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f003 fabb 	bl	8006420 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 020f 	and.w	r2, r3, #15
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d901      	bls.n	8002eda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e042      	b.n	8002f60 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	da0f      	bge.n	8002f02 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f003 020f 	and.w	r2, r3, #15
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	3338      	adds	r3, #56	; 0x38
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	705a      	strb	r2, [r3, #1]
 8002f00:	e00f      	b.n	8002f22 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 020f 	and.w	r2, r3, #15
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	3304      	adds	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_PCD_EP_ClrStall+0x86>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e00e      	b.n	8002f60 <HAL_PCD_EP_ClrStall+0xa4>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 f8d3 	bl	80060fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	da0c      	bge.n	8002f96 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	f003 020f 	and.w	r2, r3, #15
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	3338      	adds	r3, #56	; 0x38
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e00c      	b.n	8002fb0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	3304      	adds	r3, #4
 8002fae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 fef2 	bl	8005da0 <USB_EPStopXfer>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002fc0:	7afb      	ldrb	r3, [r7, #11]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b08a      	sub	sp, #40	; 0x28
 8002fce:	af02      	add	r7, sp, #8
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	3338      	adds	r3, #56	; 0x38
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1a      	ldr	r2, [r3, #32]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d901      	bls.n	8003002 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e06c      	b.n	80030dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	429a      	cmp	r2, r3
 8003016:	d902      	bls.n	800301e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3303      	adds	r3, #3
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003026:	e02b      	b.n	8003080 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	429a      	cmp	r2, r3
 800303c:	d902      	bls.n	8003044 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	3303      	adds	r3, #3
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6919      	ldr	r1, [r3, #16]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800305c:	b2db      	uxtb	r3, r3
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	4603      	mov	r3, r0
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f002 ff46 	bl	8005ef4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	441a      	add	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	441a      	add	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	b29b      	uxth	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	429a      	cmp	r2, r3
 8003094:	d809      	bhi.n	80030aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1a      	ldr	r2, [r3, #32]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800309e:	429a      	cmp	r2, r3
 80030a0:	d203      	bcs.n	80030aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1be      	bne.n	8003028 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d811      	bhi.n	80030da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	2201      	movs	r2, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	6939      	ldr	r1, [r7, #16]
 80030d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030d6:	4013      	ands	r3, r2
 80030d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	333c      	adds	r3, #60	; 0x3c
 80030fc:	3304      	adds	r3, #4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d17b      	bne.n	8003212 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	4a61      	ldr	r2, [pc, #388]	; (80032ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	f240 80b9 	bls.w	80032a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80b3 	beq.w	80032a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003146:	461a      	mov	r2, r3
 8003148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314c:	6093      	str	r3, [r2, #8]
 800314e:	e0a7      	b.n	80032a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003166:	461a      	mov	r2, r3
 8003168:	2320      	movs	r3, #32
 800316a:	6093      	str	r3, [r2, #8]
 800316c:	e098      	b.n	80032a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	f040 8093 	bne.w	80032a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4a4b      	ldr	r2, [pc, #300]	; (80032ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d90f      	bls.n	80031a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	6093      	str	r3, [r2, #8]
 80031a0:	e07e      	b.n	80032a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	3304      	adds	r3, #4
 80031b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	0159      	lsls	r1, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	440b      	add	r3, r1
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ce:	1ad2      	subs	r2, r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d114      	bne.n	8003204 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031ec:	461a      	mov	r2, r3
 80031ee:	2101      	movs	r1, #1
 80031f0:	f003 f916 	bl	8006420 <USB_EP0_OutStart>
 80031f4:	e006      	b.n	8003204 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	441a      	add	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f005 fbce 	bl	80089ac <HAL_PCD_DataOutStageCallback>
 8003210:	e046      	b.n	80032a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	4a26      	ldr	r2, [pc, #152]	; (80032b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d124      	bne.n	8003264 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	461a      	mov	r2, r3
 8003232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003236:	6093      	str	r3, [r2, #8]
 8003238:	e032      	b.n	80032a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003250:	461a      	mov	r2, r3
 8003252:	2320      	movs	r3, #32
 8003254:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f005 fba5 	bl	80089ac <HAL_PCD_DataOutStageCallback>
 8003262:	e01d      	b.n	80032a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d114      	bne.n	8003294 <PCD_EP_OutXfrComplete_int+0x1b0>
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d108      	bne.n	8003294 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800328c:	461a      	mov	r2, r3
 800328e:	2100      	movs	r1, #0
 8003290:	f003 f8c6 	bl	8006420 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f005 fb86 	bl	80089ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3720      	adds	r7, #32
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	4f54300a 	.word	0x4f54300a
 80032b0:	4f54310a 	.word	0x4f54310a

080032b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	333c      	adds	r3, #60	; 0x3c
 80032cc:	3304      	adds	r3, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a15      	ldr	r2, [pc, #84]	; (800333c <PCD_EP_OutSetupPacket_int+0x88>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d90e      	bls.n	8003308 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003300:	461a      	mov	r2, r3
 8003302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003306:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f005 fb3d 	bl	8008988 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a0a      	ldr	r2, [pc, #40]	; (800333c <PCD_EP_OutSetupPacket_int+0x88>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d90c      	bls.n	8003330 <PCD_EP_OutSetupPacket_int+0x7c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d108      	bne.n	8003330 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003328:	461a      	mov	r2, r3
 800332a:	2101      	movs	r1, #1
 800332c:	f003 f878 	bl	8006420 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	4f54300a 	.word	0x4f54300a

08003340 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
 800334c:	4613      	mov	r3, r2
 800334e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d107      	bne.n	800336e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800335e:	883b      	ldrh	r3, [r7, #0]
 8003360:	0419      	lsls	r1, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	430a      	orrs	r2, r1
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
 800336c:	e028      	b.n	80033c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	4413      	add	r3, r2
 800337a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]
 8003380:	e00d      	b.n	800339e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	3340      	adds	r3, #64	; 0x40
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	4413      	add	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	3301      	adds	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d3ec      	bcc.n	8003382 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033a8:	883b      	ldrh	r3, [r7, #0]
 80033aa:	0418      	lsls	r0, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	4302      	orrs	r2, r0
 80033b8:	3340      	adds	r3, #64	; 0x40
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e267      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d075      	beq.n	8003512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003426:	4b88      	ldr	r3, [pc, #544]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b04      	cmp	r3, #4
 8003430:	d00c      	beq.n	800344c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003432:	4b85      	ldr	r3, [pc, #532]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800343a:	2b08      	cmp	r3, #8
 800343c:	d112      	bne.n	8003464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343e:	4b82      	ldr	r3, [pc, #520]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800344a:	d10b      	bne.n	8003464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	4b7e      	ldr	r3, [pc, #504]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d05b      	beq.n	8003510 <HAL_RCC_OscConfig+0x108>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d157      	bne.n	8003510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e242      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d106      	bne.n	800347c <HAL_RCC_OscConfig+0x74>
 800346e:	4b76      	ldr	r3, [pc, #472]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a75      	ldr	r2, [pc, #468]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e01d      	b.n	80034b8 <HAL_RCC_OscConfig+0xb0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x98>
 8003486:	4b70      	ldr	r3, [pc, #448]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6f      	ldr	r2, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800348c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6c      	ldr	r2, [pc, #432]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e00b      	b.n	80034b8 <HAL_RCC_OscConfig+0xb0>
 80034a0:	4b69      	ldr	r3, [pc, #420]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a68      	ldr	r2, [pc, #416]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b66      	ldr	r3, [pc, #408]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a65      	ldr	r2, [pc, #404]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d013      	beq.n	80034e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe f9f0 	bl	80018a4 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe f9ec 	bl	80018a4 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e207      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	4b5b      	ldr	r3, [pc, #364]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0xc0>
 80034e6:	e014      	b.n	8003512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe f9dc 	bl	80018a4 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe f9d8 	bl	80018a4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1f3      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003502:	4b51      	ldr	r3, [pc, #324]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0xe8>
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d063      	beq.n	80035e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351e:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352a:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003532:	2b08      	cmp	r3, #8
 8003534:	d11c      	bne.n	8003570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003536:	4b44      	ldr	r3, [pc, #272]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d116      	bne.n	8003570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_RCC_OscConfig+0x152>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d001      	beq.n	800355a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e1c7      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4937      	ldr	r1, [pc, #220]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356e:	e03a      	b.n	80035e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003578:	4b34      	ldr	r3, [pc, #208]	; (800364c <HAL_RCC_OscConfig+0x244>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fe f991 	bl	80018a4 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003586:	f7fe f98d 	bl	80018a4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e1a8      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003598:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a4:	4b28      	ldr	r3, [pc, #160]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4925      	ldr	r1, [pc, #148]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]
 80035b8:	e015      	b.n	80035e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <HAL_RCC_OscConfig+0x244>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe f970 	bl	80018a4 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c8:	f7fe f96c 	bl	80018a4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e187      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d036      	beq.n	8003660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fa:	4b15      	ldr	r3, [pc, #84]	; (8003650 <HAL_RCC_OscConfig+0x248>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7fe f950 	bl	80018a4 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003608:	f7fe f94c 	bl	80018a4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e167      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_OscConfig+0x240>)
 800361c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x200>
 8003626:	e01b      	b.n	8003660 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003628:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_OscConfig+0x248>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362e:	f7fe f939 	bl	80018a4 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	e00e      	b.n	8003654 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003636:	f7fe f935 	bl	80018a4 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d907      	bls.n	8003654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e150      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
 8003648:	40023800 	.word	0x40023800
 800364c:	42470000 	.word	0x42470000
 8003650:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003654:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ea      	bne.n	8003636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8097 	beq.w	800379c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003672:	4b81      	ldr	r3, [pc, #516]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10f      	bne.n	800369e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	4b7d      	ldr	r3, [pc, #500]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a7c      	ldr	r2, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b7a      	ldr	r3, [pc, #488]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b77      	ldr	r3, [pc, #476]	; (800387c <HAL_RCC_OscConfig+0x474>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d118      	bne.n	80036dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036aa:	4b74      	ldr	r3, [pc, #464]	; (800387c <HAL_RCC_OscConfig+0x474>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a73      	ldr	r2, [pc, #460]	; (800387c <HAL_RCC_OscConfig+0x474>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b6:	f7fe f8f5 	bl	80018a4 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036be:	f7fe f8f1 	bl	80018a4 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e10c      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	4b6a      	ldr	r3, [pc, #424]	; (800387c <HAL_RCC_OscConfig+0x474>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x2ea>
 80036e4:	4b64      	ldr	r3, [pc, #400]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a63      	ldr	r2, [pc, #396]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
 80036f0:	e01c      	b.n	800372c <HAL_RCC_OscConfig+0x324>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b05      	cmp	r3, #5
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x30c>
 80036fa:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a5e      	ldr	r2, [pc, #376]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
 8003706:	4b5c      	ldr	r3, [pc, #368]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	4a5b      	ldr	r2, [pc, #364]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6713      	str	r3, [r2, #112]	; 0x70
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0x324>
 8003714:	4b58      	ldr	r3, [pc, #352]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003718:	4a57      	ldr	r2, [pc, #348]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	6713      	str	r3, [r2, #112]	; 0x70
 8003720:	4b55      	ldr	r3, [pc, #340]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a54      	ldr	r2, [pc, #336]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003726:	f023 0304 	bic.w	r3, r3, #4
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d015      	beq.n	8003760 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003734:	f7fe f8b6 	bl	80018a4 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7fe f8b2 	bl	80018a4 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0cb      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003752:	4b49      	ldr	r3, [pc, #292]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0ee      	beq.n	800373c <HAL_RCC_OscConfig+0x334>
 800375e:	e014      	b.n	800378a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003760:	f7fe f8a0 	bl	80018a4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003766:	e00a      	b.n	800377e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003768:	f7fe f89c 	bl	80018a4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	; 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0b5      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377e:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ee      	bne.n	8003768 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800378a:	7dfb      	ldrb	r3, [r7, #23]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	4a38      	ldr	r2, [pc, #224]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80a1 	beq.w	80038e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a6:	4b34      	ldr	r3, [pc, #208]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d05c      	beq.n	800386c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d141      	bne.n	800383e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b31      	ldr	r3, [pc, #196]	; (8003880 <HAL_RCC_OscConfig+0x478>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7fe f870 	bl	80018a4 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fe f86c 	bl	80018a4 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e087      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	019b      	lsls	r3, r3, #6
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	3b01      	subs	r3, #1
 8003800:	041b      	lsls	r3, r3, #16
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	061b      	lsls	r3, r3, #24
 800380a:	491b      	ldr	r1, [pc, #108]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003810:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <HAL_RCC_OscConfig+0x478>)
 8003812:	2201      	movs	r2, #1
 8003814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003816:	f7fe f845 	bl	80018a4 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381e:	f7fe f841 	bl	80018a4 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e05c      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x416>
 800383c:	e054      	b.n	80038e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <HAL_RCC_OscConfig+0x478>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fe f82e 	bl	80018a4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384c:	f7fe f82a 	bl	80018a4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e045      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_OscConfig+0x470>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x444>
 800386a:	e03d      	b.n	80038e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e038      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
 8003878:	40023800 	.word	0x40023800
 800387c:	40007000 	.word	0x40007000
 8003880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_RCC_OscConfig+0x4ec>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d028      	beq.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d121      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d11a      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038bc:	4293      	cmp	r3, r2
 80038be:	d111      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	3b01      	subs	r3, #1
 80038ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d107      	bne.n	80038e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800

080038f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0cc      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800390c:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d90c      	bls.n	8003934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b65      	ldr	r3, [pc, #404]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0b8      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d020      	beq.n	8003982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800394c:	4b59      	ldr	r3, [pc, #356]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a58      	ldr	r2, [pc, #352]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003964:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a52      	ldr	r2, [pc, #328]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800396e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003970:	4b50      	ldr	r3, [pc, #320]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	494d      	ldr	r1, [pc, #308]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d044      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d119      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e07f      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b6:	4b3f      	ldr	r3, [pc, #252]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e06f      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c6:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e067      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d6:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f023 0203 	bic.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4934      	ldr	r1, [pc, #208]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e8:	f7fd ff5c 	bl	80018a4 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f0:	f7fd ff58 	bl	80018a4 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e04f      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 020c 	and.w	r2, r3, #12
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d1eb      	bne.n	80039f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d20c      	bcs.n	8003a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e032      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a4c:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4916      	ldr	r1, [pc, #88]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	490e      	ldr	r1, [pc, #56]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a7e:	f000 f821 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003a82:	4602      	mov	r2, r0
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	490a      	ldr	r1, [pc, #40]	; (8003ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	5ccb      	ldrb	r3, [r1, r3]
 8003a92:	fa22 f303 	lsr.w	r3, r2, r3
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd febc 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023c00 	.word	0x40023c00
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	08008fac 	.word	0x08008fac
 8003abc:	2000001c 	.word	0x2000001c
 8003ac0:	20000020 	.word	0x20000020

08003ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac8:	b090      	sub	sp, #64	; 0x40
 8003aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003adc:	4b59      	ldr	r3, [pc, #356]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d00d      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x40>
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	f200 80a1 	bhi.w	8003c30 <HAL_RCC_GetSysClockFreq+0x16c>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x34>
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0x3a>
 8003af6:	e09b      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af8:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003afa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003afc:	e09b      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003afe:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b02:	e098      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b04:	4b4f      	ldr	r3, [pc, #316]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b0e:	4b4d      	ldr	r3, [pc, #308]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d028      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1a:	4b4a      	ldr	r3, [pc, #296]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	099b      	lsrs	r3, r3, #6
 8003b20:	2200      	movs	r2, #0
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	627a      	str	r2, [r7, #36]	; 0x24
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b30:	fb03 f201 	mul.w	r2, r3, r1
 8003b34:	2300      	movs	r3, #0
 8003b36:	fb00 f303 	mul.w	r3, r0, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	4a43      	ldr	r2, [pc, #268]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b44:	460a      	mov	r2, r1
 8003b46:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b4a:	4413      	add	r3, r2
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	2200      	movs	r2, #0
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	61fa      	str	r2, [r7, #28]
 8003b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b5e:	f7fc fedb 	bl	8000918 <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4613      	mov	r3, r2
 8003b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b6a:	e053      	b.n	8003c14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	099b      	lsrs	r3, r3, #6
 8003b72:	2200      	movs	r2, #0
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	617a      	str	r2, [r7, #20]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b7e:	f04f 0b00 	mov.w	fp, #0
 8003b82:	4652      	mov	r2, sl
 8003b84:	465b      	mov	r3, fp
 8003b86:	f04f 0000 	mov.w	r0, #0
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	0159      	lsls	r1, r3, #5
 8003b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b94:	0150      	lsls	r0, r2, #5
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b9e:	eb63 090b 	sbc.w	r9, r3, fp
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bb6:	ebb2 0408 	subs.w	r4, r2, r8
 8003bba:	eb63 0509 	sbc.w	r5, r3, r9
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	00eb      	lsls	r3, r5, #3
 8003bc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bcc:	00e2      	lsls	r2, r4, #3
 8003bce:	4614      	mov	r4, r2
 8003bd0:	461d      	mov	r5, r3
 8003bd2:	eb14 030a 	adds.w	r3, r4, sl
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	eb45 030b 	adc.w	r3, r5, fp
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bea:	4629      	mov	r1, r5
 8003bec:	028b      	lsls	r3, r1, #10
 8003bee:	4621      	mov	r1, r4
 8003bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	028a      	lsls	r2, r1, #10
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfe:	2200      	movs	r2, #0
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	60fa      	str	r2, [r7, #12]
 8003c04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c08:	f7fc fe86 	bl	8000918 <__aeabi_uldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4613      	mov	r3, r2
 8003c12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c14:	4b0b      	ldr	r3, [pc, #44]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2e:	e002      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3740      	adds	r7, #64	; 0x40
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	00f42400 	.word	0x00f42400
 8003c4c:	017d7840 	.word	0x017d7840

08003c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	2000001c 	.word	0x2000001c

08003c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e041      	b.n	8003cfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd fa22 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f000 fc5e 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d001      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e044      	b.n	8003daa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d018      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d013      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1a      	ldr	r2, [pc, #104]	; (8003dbc <HAL_TIM_Base_Start_IT+0xb4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00e      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d009      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <HAL_TIM_Base_Start_IT+0x6c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d111      	bne.n	8003d98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b06      	cmp	r3, #6
 8003d84:	d010      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d96:	e007      	b.n	8003da8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40010000 	.word	0x40010000
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	40000c00 	.word	0x40000c00
 8003dc8:	40014000 	.word	0x40014000

08003dcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f839 	bl	8003e6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 fbac 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <HAL_TIM_PWM_Start+0x24>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e022      	b.n	8003eea <HAL_TIM_PWM_Start+0x6a>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d109      	bne.n	8003ebe <HAL_TIM_PWM_Start+0x3e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	bf14      	ite	ne
 8003eb6:	2301      	movne	r3, #1
 8003eb8:	2300      	moveq	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	e015      	b.n	8003eea <HAL_TIM_PWM_Start+0x6a>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d109      	bne.n	8003ed8 <HAL_TIM_PWM_Start+0x58>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf14      	ite	ne
 8003ed0:	2301      	movne	r3, #1
 8003ed2:	2300      	moveq	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	e008      	b.n	8003eea <HAL_TIM_PWM_Start+0x6a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e068      	b.n	8003fc4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <HAL_TIM_PWM_Start+0x82>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f00:	e013      	b.n	8003f2a <HAL_TIM_PWM_Start+0xaa>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d104      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x92>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f10:	e00b      	b.n	8003f2a <HAL_TIM_PWM_Start+0xaa>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_PWM_Start+0xa2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	e003      	b.n	8003f2a <HAL_TIM_PWM_Start+0xaa>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2202      	movs	r2, #2
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	6839      	ldr	r1, [r7, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fdbe 	bl	8004ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <HAL_TIM_PWM_Start+0x14c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d107      	bne.n	8003f52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <HAL_TIM_PWM_Start+0x14c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <HAL_TIM_PWM_Start+0x10e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d013      	beq.n	8003f8e <HAL_TIM_PWM_Start+0x10e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_TIM_PWM_Start+0x150>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_TIM_PWM_Start+0x10e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <HAL_TIM_PWM_Start+0x154>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_TIM_PWM_Start+0x10e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <HAL_TIM_PWM_Start+0x158>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_TIM_PWM_Start+0x10e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <HAL_TIM_PWM_Start+0x15c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d111      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b06      	cmp	r3, #6
 8003f9e:	d010      	beq.n	8003fc2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb0:	e007      	b.n	8003fc2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000800 	.word	0x40000800
 8003fd8:	40000c00 	.word	0x40000c00
 8003fdc:	40014000 	.word	0x40014000

08003fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0202 	mvn.w	r2, #2
 800400c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa81 	bl	800452a <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa73 	bl	8004516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fa84 	bl	800453e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b04      	cmp	r3, #4
 8004048:	d122      	bne.n	8004090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d11b      	bne.n	8004090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0204 	mvn.w	r2, #4
 8004060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2202      	movs	r2, #2
 8004066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fa57 	bl	800452a <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa49 	bl	8004516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fa5a 	bl	800453e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b08      	cmp	r3, #8
 800409c:	d122      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d11b      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0208 	mvn.w	r2, #8
 80040b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2204      	movs	r2, #4
 80040ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa2d 	bl	800452a <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fa1f 	bl	8004516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fa30 	bl	800453e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d122      	bne.n	8004138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d11b      	bne.n	8004138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0210 	mvn.w	r2, #16
 8004108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2208      	movs	r2, #8
 800410e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fa03 	bl	800452a <HAL_TIM_IC_CaptureCallback>
 8004124:	e005      	b.n	8004132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f9f5 	bl	8004516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fa06 	bl	800453e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10e      	bne.n	8004164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0201 	mvn.w	r2, #1
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9cf 	bl	8004502 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d10e      	bne.n	8004190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d107      	bne.n	8004190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fd82 	bl	8004c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d10e      	bne.n	80041bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d107      	bne.n	80041bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9cb 	bl	8004552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0220 	mvn.w	r2, #32
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fd4c 	bl	8004c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800420a:	2302      	movs	r3, #2
 800420c:	e0ae      	b.n	800436c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	f200 809f 	bhi.w	800435c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800421e:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004224:	08004259 	.word	0x08004259
 8004228:	0800435d 	.word	0x0800435d
 800422c:	0800435d 	.word	0x0800435d
 8004230:	0800435d 	.word	0x0800435d
 8004234:	08004299 	.word	0x08004299
 8004238:	0800435d 	.word	0x0800435d
 800423c:	0800435d 	.word	0x0800435d
 8004240:	0800435d 	.word	0x0800435d
 8004244:	080042db 	.word	0x080042db
 8004248:	0800435d 	.word	0x0800435d
 800424c:	0800435d 	.word	0x0800435d
 8004250:	0800435d 	.word	0x0800435d
 8004254:	0800431b 	.word	0x0800431b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fa02 	bl	8004668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0204 	bic.w	r2, r2, #4
 8004282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6999      	ldr	r1, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	619a      	str	r2, [r3, #24]
      break;
 8004296:	e064      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fa48 	bl	8004734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6999      	ldr	r1, [r3, #24]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
      break;
 80042d8:	e043      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fa93 	bl	800480c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0208 	orr.w	r2, r2, #8
 80042f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0204 	bic.w	r2, r2, #4
 8004304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69d9      	ldr	r1, [r3, #28]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	61da      	str	r2, [r3, #28]
      break;
 8004318:	e023      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fadd 	bl	80048e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69d9      	ldr	r1, [r3, #28]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	61da      	str	r2, [r3, #28]
      break;
 800435a:	e002      	b.n	8004362 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
      break;
 8004360:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIM_ConfigClockSource+0x1c>
 800438c:	2302      	movs	r3, #2
 800438e:	e0b4      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x186>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c8:	d03e      	beq.n	8004448 <HAL_TIM_ConfigClockSource+0xd4>
 80043ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ce:	f200 8087 	bhi.w	80044e0 <HAL_TIM_ConfigClockSource+0x16c>
 80043d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d6:	f000 8086 	beq.w	80044e6 <HAL_TIM_ConfigClockSource+0x172>
 80043da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043de:	d87f      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e0:	2b70      	cmp	r3, #112	; 0x70
 80043e2:	d01a      	beq.n	800441a <HAL_TIM_ConfigClockSource+0xa6>
 80043e4:	2b70      	cmp	r3, #112	; 0x70
 80043e6:	d87b      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e8:	2b60      	cmp	r3, #96	; 0x60
 80043ea:	d050      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x11a>
 80043ec:	2b60      	cmp	r3, #96	; 0x60
 80043ee:	d877      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b50      	cmp	r3, #80	; 0x50
 80043f2:	d03c      	beq.n	800446e <HAL_TIM_ConfigClockSource+0xfa>
 80043f4:	2b50      	cmp	r3, #80	; 0x50
 80043f6:	d873      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d058      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x13a>
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d86f      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b30      	cmp	r3, #48	; 0x30
 8004402:	d064      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x15a>
 8004404:	2b30      	cmp	r3, #48	; 0x30
 8004406:	d86b      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004408:	2b20      	cmp	r3, #32
 800440a:	d060      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x15a>
 800440c:	2b20      	cmp	r3, #32
 800440e:	d867      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d05c      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x15a>
 8004414:	2b10      	cmp	r3, #16
 8004416:	d05a      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x15a>
 8004418:	e062      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6899      	ldr	r1, [r3, #8]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f000 fb23 	bl	8004a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800443c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	609a      	str	r2, [r3, #8]
      break;
 8004446:	e04f      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6899      	ldr	r1, [r3, #8]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f000 fb0c 	bl	8004a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800446a:	609a      	str	r2, [r3, #8]
      break;
 800446c:	e03c      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	461a      	mov	r2, r3
 800447c:	f000 fa80 	bl	8004980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2150      	movs	r1, #80	; 0x50
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fad9 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 800448c:	e02c      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	461a      	mov	r2, r3
 800449c:	f000 fa9f 	bl	80049de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2160      	movs	r1, #96	; 0x60
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fac9 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 80044ac:	e01c      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6859      	ldr	r1, [r3, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f000 fa60 	bl	8004980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2140      	movs	r1, #64	; 0x40
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fab9 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 80044cc:	e00c      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f000 fab0 	bl	8004a3e <TIM_ITRx_SetConfig>
      break;
 80044de:	e003      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      break;
 80044e4:	e000      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a34      	ldr	r2, [pc, #208]	; (800464c <TIM_Base_SetConfig+0xe4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00f      	beq.n	80045a0 <TIM_Base_SetConfig+0x38>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004586:	d00b      	beq.n	80045a0 <TIM_Base_SetConfig+0x38>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a31      	ldr	r2, [pc, #196]	; (8004650 <TIM_Base_SetConfig+0xe8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d007      	beq.n	80045a0 <TIM_Base_SetConfig+0x38>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a30      	ldr	r2, [pc, #192]	; (8004654 <TIM_Base_SetConfig+0xec>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0x38>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a2f      	ldr	r2, [pc, #188]	; (8004658 <TIM_Base_SetConfig+0xf0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d108      	bne.n	80045b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a25      	ldr	r2, [pc, #148]	; (800464c <TIM_Base_SetConfig+0xe4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01b      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d017      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a22      	ldr	r2, [pc, #136]	; (8004650 <TIM_Base_SetConfig+0xe8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a21      	ldr	r2, [pc, #132]	; (8004654 <TIM_Base_SetConfig+0xec>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00f      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a20      	ldr	r2, [pc, #128]	; (8004658 <TIM_Base_SetConfig+0xf0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00b      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1f      	ldr	r2, [pc, #124]	; (800465c <TIM_Base_SetConfig+0xf4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <TIM_Base_SetConfig+0xf8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_Base_SetConfig+0x8a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <TIM_Base_SetConfig+0xfc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d108      	bne.n	8004604 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a08      	ldr	r2, [pc, #32]	; (800464c <TIM_Base_SetConfig+0xe4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d103      	bne.n	8004638 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	615a      	str	r2, [r3, #20]
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40010000 	.word	0x40010000
 8004650:	40000400 	.word	0x40000400
 8004654:	40000800 	.word	0x40000800
 8004658:	40000c00 	.word	0x40000c00
 800465c:	40014000 	.word	0x40014000
 8004660:	40014400 	.word	0x40014400
 8004664:	40014800 	.word	0x40014800

08004668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	f023 0201 	bic.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f023 0302 	bic.w	r3, r3, #2
 80046b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <TIM_OC1_SetConfig+0xc8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d10c      	bne.n	80046de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 0308 	bic.w	r3, r3, #8
 80046ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f023 0304 	bic.w	r3, r3, #4
 80046dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a13      	ldr	r2, [pc, #76]	; (8004730 <TIM_OC1_SetConfig+0xc8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d111      	bne.n	800470a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	621a      	str	r2, [r3, #32]
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40010000 	.word	0x40010000

08004734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f023 0210 	bic.w	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0320 	bic.w	r3, r3, #32
 800477e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <TIM_OC2_SetConfig+0xd4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d10d      	bne.n	80047b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a15      	ldr	r2, [pc, #84]	; (8004808 <TIM_OC2_SetConfig+0xd4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d113      	bne.n	80047e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	4313      	orrs	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40010000 	.word	0x40010000

0800480c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	021b      	lsls	r3, r3, #8
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <TIM_OC3_SetConfig+0xd0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10d      	bne.n	8004886 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a14      	ldr	r2, [pc, #80]	; (80048dc <TIM_OC3_SetConfig+0xd0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d113      	bne.n	80048b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800489c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	621a      	str	r2, [r3, #32]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	40010000 	.word	0x40010000

080048e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800492a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	031b      	lsls	r3, r3, #12
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a10      	ldr	r2, [pc, #64]	; (800497c <TIM_OC4_SetConfig+0x9c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d109      	bne.n	8004954 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40010000 	.word	0x40010000

08004980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f023 0201 	bic.w	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 030a 	bic.w	r3, r3, #10
 80049bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049de:	b480      	push	{r7}
 80049e0:	b087      	sub	sp, #28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	f023 0210 	bic.w	r2, r3, #16
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	031b      	lsls	r3, r3, #12
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f043 0307 	orr.w	r3, r3, #7
 8004a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	609a      	str	r2, [r3, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	021a      	lsls	r2, r3, #8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	609a      	str	r2, [r3, #8]
}
 8004aa8:	bf00      	nop
 8004aaa:	371c      	adds	r7, #28
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a1a      	ldr	r2, [r3, #32]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	431a      	orrs	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e050      	b.n	8004bba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d018      	beq.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b64:	d013      	beq.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00e      	beq.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a13      	ldr	r2, [pc, #76]	; (8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40000c00 	.word	0x40000c00
 8004bd8:	40014000 	.word	0x40014000

08004bdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e03d      	b.n	8004c74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ca8:	b084      	sub	sp, #16
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	f107 001c 	add.w	r0, r7, #28
 8004cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d122      	bne.n	8004d06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d105      	bne.n	8004cfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f001 fbee 	bl	80064dc <USB_CoreReset>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
 8004d04:	e01a      	b.n	8004d3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f001 fbe2 	bl	80064dc <USB_CoreReset>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8004d2e:	e005      	b.n	8004d3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d10b      	bne.n	8004d5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f043 0206 	orr.w	r2, r3, #6
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f043 0220 	orr.w	r2, r3, #32
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d66:	b004      	add	sp, #16
 8004d68:	4770      	bx	lr
	...

08004d6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	4613      	mov	r3, r2
 8004d78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d165      	bne.n	8004e4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a41      	ldr	r2, [pc, #260]	; (8004e88 <USB_SetTurnaroundTime+0x11c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d906      	bls.n	8004d96 <USB_SetTurnaroundTime+0x2a>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a40      	ldr	r2, [pc, #256]	; (8004e8c <USB_SetTurnaroundTime+0x120>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d202      	bcs.n	8004d96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d90:	230f      	movs	r3, #15
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	e062      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a3c      	ldr	r2, [pc, #240]	; (8004e8c <USB_SetTurnaroundTime+0x120>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d306      	bcc.n	8004dac <USB_SetTurnaroundTime+0x40>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4a3b      	ldr	r2, [pc, #236]	; (8004e90 <USB_SetTurnaroundTime+0x124>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d202      	bcs.n	8004dac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004da6:	230e      	movs	r3, #14
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e057      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a38      	ldr	r2, [pc, #224]	; (8004e90 <USB_SetTurnaroundTime+0x124>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d306      	bcc.n	8004dc2 <USB_SetTurnaroundTime+0x56>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4a37      	ldr	r2, [pc, #220]	; (8004e94 <USB_SetTurnaroundTime+0x128>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d202      	bcs.n	8004dc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dbc:	230d      	movs	r3, #13
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e04c      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4a33      	ldr	r2, [pc, #204]	; (8004e94 <USB_SetTurnaroundTime+0x128>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d306      	bcc.n	8004dd8 <USB_SetTurnaroundTime+0x6c>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a32      	ldr	r2, [pc, #200]	; (8004e98 <USB_SetTurnaroundTime+0x12c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d802      	bhi.n	8004dd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e041      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a2f      	ldr	r2, [pc, #188]	; (8004e98 <USB_SetTurnaroundTime+0x12c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d906      	bls.n	8004dee <USB_SetTurnaroundTime+0x82>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a2e      	ldr	r2, [pc, #184]	; (8004e9c <USB_SetTurnaroundTime+0x130>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d802      	bhi.n	8004dee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004de8:	230b      	movs	r3, #11
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e036      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4a2a      	ldr	r2, [pc, #168]	; (8004e9c <USB_SetTurnaroundTime+0x130>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d906      	bls.n	8004e04 <USB_SetTurnaroundTime+0x98>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4a29      	ldr	r2, [pc, #164]	; (8004ea0 <USB_SetTurnaroundTime+0x134>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d802      	bhi.n	8004e04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dfe:	230a      	movs	r3, #10
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e02b      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a26      	ldr	r2, [pc, #152]	; (8004ea0 <USB_SetTurnaroundTime+0x134>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d906      	bls.n	8004e1a <USB_SetTurnaroundTime+0xae>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a25      	ldr	r2, [pc, #148]	; (8004ea4 <USB_SetTurnaroundTime+0x138>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d202      	bcs.n	8004e1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e14:	2309      	movs	r3, #9
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e020      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <USB_SetTurnaroundTime+0x138>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d306      	bcc.n	8004e30 <USB_SetTurnaroundTime+0xc4>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	4a20      	ldr	r2, [pc, #128]	; (8004ea8 <USB_SetTurnaroundTime+0x13c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d802      	bhi.n	8004e30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e015      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4a1d      	ldr	r2, [pc, #116]	; (8004ea8 <USB_SetTurnaroundTime+0x13c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d906      	bls.n	8004e46 <USB_SetTurnaroundTime+0xda>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <USB_SetTurnaroundTime+0x140>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d202      	bcs.n	8004e46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e40:	2307      	movs	r3, #7
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e00a      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e46:	2306      	movs	r3, #6
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e007      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e52:	2309      	movs	r3, #9
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e001      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e58:	2309      	movs	r3, #9
 8004e5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	029b      	lsls	r3, r3, #10
 8004e70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e74:	431a      	orrs	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	00d8acbf 	.word	0x00d8acbf
 8004e8c:	00e4e1c0 	.word	0x00e4e1c0
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	01067380 	.word	0x01067380
 8004e98:	011a499f 	.word	0x011a499f
 8004e9c:	01312cff 	.word	0x01312cff
 8004ea0:	014ca43f 	.word	0x014ca43f
 8004ea4:	016e3600 	.word	0x016e3600
 8004ea8:	01a6ab1f 	.word	0x01a6ab1f
 8004eac:	01e84800 	.word	0x01e84800

08004eb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f043 0201 	orr.w	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d115      	bne.n	8004f42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f22:	2001      	movs	r0, #1
 8004f24:	f7fc fcca 	bl	80018bc <HAL_Delay>
      ms++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f001 fa45 	bl	80063be <USB_GetMode>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d01e      	beq.n	8004f78 <USB_SetCurrentMode+0x84>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b31      	cmp	r3, #49	; 0x31
 8004f3e:	d9f0      	bls.n	8004f22 <USB_SetCurrentMode+0x2e>
 8004f40:	e01a      	b.n	8004f78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f54:	2001      	movs	r0, #1
 8004f56:	f7fc fcb1 	bl	80018bc <HAL_Delay>
      ms++;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f001 fa2c 	bl	80063be <USB_GetMode>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <USB_SetCurrentMode+0x84>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b31      	cmp	r3, #49	; 0x31
 8004f70:	d9f0      	bls.n	8004f54 <USB_SetCurrentMode+0x60>
 8004f72:	e001      	b.n	8004f78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e005      	b.n	8004f84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b32      	cmp	r3, #50	; 0x32
 8004f7c:	d101      	bne.n	8004f82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	e009      	b.n	8004fc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	3340      	adds	r3, #64	; 0x40
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b0e      	cmp	r3, #14
 8004fc4:	d9f2      	bls.n	8004fac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d11c      	bne.n	8005006 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	639a      	str	r2, [r3, #56]	; 0x38
 8005004:	e00b      	b.n	800501e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005024:	461a      	mov	r2, r3
 8005026:	2300      	movs	r3, #0
 8005028:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005030:	4619      	mov	r1, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005038:	461a      	mov	r2, r3
 800503a:	680b      	ldr	r3, [r1, #0]
 800503c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	2b01      	cmp	r3, #1
 8005042:	d10c      	bne.n	800505e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d104      	bne.n	8005054 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800504a:	2100      	movs	r1, #0
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f965 	bl	800531c <USB_SetDevSpeed>
 8005052:	e008      	b.n	8005066 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005054:	2101      	movs	r1, #1
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f960 	bl	800531c <USB_SetDevSpeed>
 800505c:	e003      	b.n	8005066 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800505e:	2103      	movs	r1, #3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f95b 	bl	800531c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005066:	2110      	movs	r1, #16
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f8f3 	bl	8005254 <USB_FlushTxFifo>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f91f 	bl	80052bc <USB_FlushRxFifo>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	461a      	mov	r2, r3
 8005090:	2300      	movs	r3, #0
 8005092:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509a:	461a      	mov	r2, r3
 800509c:	2300      	movs	r3, #0
 800509e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a6:	461a      	mov	r2, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	e043      	b.n	800513a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c8:	d118      	bne.n	80050fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	461a      	mov	r2, r3
 80050de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	e013      	b.n	800510e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	461a      	mov	r2, r3
 80050f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e008      	b.n	800510e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005108:	461a      	mov	r2, r3
 800510a:	2300      	movs	r3, #0
 800510c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511a:	461a      	mov	r2, r3
 800511c:	2300      	movs	r3, #0
 800511e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	461a      	mov	r2, r3
 800512e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005132:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	3301      	adds	r3, #1
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	429a      	cmp	r2, r3
 8005140:	d3b7      	bcc.n	80050b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	e043      	b.n	80051d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800515a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800515e:	d118      	bne.n	8005192 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	461a      	mov	r2, r3
 8005174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e013      	b.n	80051a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	461a      	mov	r2, r3
 800518a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	e008      	b.n	80051a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b0:	461a      	mov	r2, r3
 80051b2:	2300      	movs	r3, #0
 80051b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	461a      	mov	r2, r3
 80051c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	3301      	adds	r3, #1
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3b7      	bcc.n	8005148 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d105      	bne.n	800520c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f043 0210 	orr.w	r2, r3, #16
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <USB_DevInit+0x2c4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f043 0208 	orr.w	r2, r3, #8
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800522a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d107      	bne.n	8005240 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800524c:	b004      	add	sp, #16
 800524e:	4770      	bx	lr
 8005250:	803c3800 	.word	0x803c3800

08005254 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <USB_FlushTxFifo+0x64>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e01b      	b.n	80052ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	daf2      	bge.n	8005262 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	019b      	lsls	r3, r3, #6
 8005284:	f043 0220 	orr.w	r2, r3, #32
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3301      	adds	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4a08      	ldr	r2, [pc, #32]	; (80052b8 <USB_FlushTxFifo+0x64>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d901      	bls.n	800529e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e006      	b.n	80052ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d0f0      	beq.n	800528c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	00030d40 	.word	0x00030d40

080052bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a11      	ldr	r2, [pc, #68]	; (8005318 <USB_FlushRxFifo+0x5c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e018      	b.n	800530c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	daf2      	bge.n	80052c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2210      	movs	r2, #16
 80052ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4a08      	ldr	r2, [pc, #32]	; (8005318 <USB_FlushRxFifo+0x5c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e006      	b.n	800530c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b10      	cmp	r3, #16
 8005308:	d0f0      	beq.n	80052ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	00030d40 	.word	0x00030d40

0800531c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800533c:	4313      	orrs	r3, r2
 800533e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b087      	sub	sp, #28
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0306 	and.w	r3, r3, #6
 8005366:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800536e:	2300      	movs	r3, #0
 8005370:	75fb      	strb	r3, [r7, #23]
 8005372:	e00a      	b.n	800538a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d002      	beq.n	8005380 <USB_GetDevSpeed+0x32>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b06      	cmp	r3, #6
 800537e:	d102      	bne.n	8005386 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005380:	2302      	movs	r3, #2
 8005382:	75fb      	strb	r3, [r7, #23]
 8005384:	e001      	b.n	800538a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005386:	230f      	movs	r3, #15
 8005388:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
}
 800538c:	4618      	mov	r0, r3
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d13a      	bne.n	800542a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	2101      	movs	r1, #1
 80053c6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	68f9      	ldr	r1, [r7, #12]
 80053ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d2:	4313      	orrs	r3, r2
 80053d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d155      	bne.n	8005498 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	791b      	ldrb	r3, [r3, #4]
 8005406:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005408:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	059b      	lsls	r3, r3, #22
 800540e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005410:	4313      	orrs	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e036      	b.n	8005498 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005430:	69da      	ldr	r2, [r3, #28]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	2101      	movs	r1, #1
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	041b      	lsls	r3, r3, #16
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005448:	4313      	orrs	r3, r2
 800544a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d11a      	bne.n	8005498 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	791b      	ldrb	r3, [r3, #4]
 800547c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800547e:	430b      	orrs	r3, r1
 8005480:	4313      	orrs	r3, r2
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005496:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	785b      	ldrb	r3, [r3, #1]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d161      	bne.n	8005588 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054da:	d11f      	bne.n	800551c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800551a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	2101      	movs	r1, #1
 800552e:	fa01 f303 	lsl.w	r3, r1, r3
 8005532:	b29b      	uxth	r3, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	68f9      	ldr	r1, [r7, #12]
 8005538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800553c:	4013      	ands	r3, r2
 800553e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	2101      	movs	r1, #1
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	b29b      	uxth	r3, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	68f9      	ldr	r1, [r7, #12]
 800555c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005560:	4013      	ands	r3, r2
 8005562:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	0159      	lsls	r1, r3, #5
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	440b      	add	r3, r1
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	4619      	mov	r1, r3
 8005580:	4b35      	ldr	r3, [pc, #212]	; (8005658 <USB_DeactivateEndpoint+0x1b0>)
 8005582:	4013      	ands	r3, r2
 8005584:	600b      	str	r3, [r1, #0]
 8005586:	e060      	b.n	800564a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559e:	d11f      	bne.n	80055e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	2101      	movs	r1, #1
 80055f2:	fa01 f303 	lsl.w	r3, r1, r3
 80055f6:	041b      	lsls	r3, r3, #16
 80055f8:	43db      	mvns	r3, r3
 80055fa:	68f9      	ldr	r1, [r7, #12]
 80055fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005600:	4013      	ands	r3, r2
 8005602:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	2101      	movs	r1, #1
 8005616:	fa01 f303 	lsl.w	r3, r1, r3
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	43db      	mvns	r3, r3
 800561e:	68f9      	ldr	r1, [r7, #12]
 8005620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005624:	4013      	ands	r3, r2
 8005626:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	0159      	lsls	r1, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	440b      	add	r3, r1
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	4619      	mov	r1, r3
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <USB_DeactivateEndpoint+0x1b4>)
 8005646:	4013      	ands	r3, r2
 8005648:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	ec337800 	.word	0xec337800
 800565c:	eff37800 	.word	0xeff37800

08005660 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af02      	add	r7, sp, #8
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 815c 	bne.w	800593a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d132      	bne.n	80056f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	0151      	lsls	r1, r2, #5
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	440a      	add	r2, r1
 80056a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	0151      	lsls	r1, r2, #5
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	440a      	add	r2, r1
 80056c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e8:	0cdb      	lsrs	r3, r3, #19
 80056ea:	04db      	lsls	r3, r3, #19
 80056ec:	6113      	str	r3, [r2, #16]
 80056ee:	e074      	b.n	80057da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	0151      	lsls	r1, r2, #5
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	440a      	add	r2, r1
 8005706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570a:	0cdb      	lsrs	r3, r3, #19
 800570c:	04db      	lsls	r3, r3, #19
 800570e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	69fa      	ldr	r2, [r7, #28]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800572e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005740:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6999      	ldr	r1, [r3, #24]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	440b      	add	r3, r1
 800574c:	1e59      	subs	r1, r3, #1
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	fbb1 f3f3 	udiv	r3, r1, r3
 8005756:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005758:	4b9d      	ldr	r3, [pc, #628]	; (80059d0 <USB_EPStartXfer+0x370>)
 800575a:	400b      	ands	r3, r1
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	0148      	lsls	r0, r1, #5
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	4401      	add	r1, r0
 8005764:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005768:	4313      	orrs	r3, r2
 800576a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005782:	69b9      	ldr	r1, [r7, #24]
 8005784:	0148      	lsls	r0, r1, #5
 8005786:	69f9      	ldr	r1, [r7, #28]
 8005788:	4401      	add	r1, r0
 800578a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800578e:	4313      	orrs	r3, r2
 8005790:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	791b      	ldrb	r3, [r3, #4]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d11f      	bne.n	80057da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d14b      	bne.n	8005878 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	461a      	mov	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	791b      	ldrb	r3, [r3, #4]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d128      	bne.n	8005856 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	2b00      	cmp	r3, #0
 8005812:	d110      	bne.n	8005836 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005832:	6013      	str	r3, [r2, #0]
 8005834:	e00f      	b.n	8005856 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005854:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005870:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	e133      	b.n	8005ae0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005896:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	791b      	ldrb	r3, [r3, #4]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d015      	beq.n	80058cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 811b 	beq.w	8005ae0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	2101      	movs	r1, #1
 80058bc:	fa01 f303 	lsl.w	r3, r1, r3
 80058c0:	69f9      	ldr	r1, [r7, #28]
 80058c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058c6:	4313      	orrs	r3, r2
 80058c8:	634b      	str	r3, [r1, #52]	; 0x34
 80058ca:	e109      	b.n	8005ae0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d110      	bne.n	80058fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	e00f      	b.n	800591e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800591c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	6919      	ldr	r1, [r3, #16]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	b298      	uxth	r0, r3
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	4603      	mov	r3, r0
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fade 	bl	8005ef4 <USB_WritePacket>
 8005938:	e0d2      	b.n	8005ae0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	0cdb      	lsrs	r3, r3, #19
 8005956:	04db      	lsls	r3, r3, #19
 8005958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005974:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005978:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800597c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d126      	bne.n	80059d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800599c:	69b9      	ldr	r1, [r7, #24]
 800599e:	0148      	lsls	r0, r1, #5
 80059a0:	69f9      	ldr	r1, [r7, #28]
 80059a2:	4401      	add	r1, r0
 80059a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059a8:	4313      	orrs	r3, r2
 80059aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059ca:	6113      	str	r3, [r2, #16]
 80059cc:	e03a      	b.n	8005a44 <USB_EPStartXfer+0x3e4>
 80059ce:	bf00      	nop
 80059d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	1e5a      	subs	r2, r3, #1
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	8afa      	ldrh	r2, [r7, #22]
 80059f0:	fb03 f202 	mul.w	r2, r3, r2
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	8afb      	ldrh	r3, [r7, #22]
 8005a08:	04d9      	lsls	r1, r3, #19
 8005a0a:	4b38      	ldr	r3, [pc, #224]	; (8005aec <USB_EPStartXfer+0x48c>)
 8005a0c:	400b      	ands	r3, r1
 8005a0e:	69b9      	ldr	r1, [r7, #24]
 8005a10:	0148      	lsls	r0, r1, #5
 8005a12:	69f9      	ldr	r1, [r7, #28]
 8005a14:	4401      	add	r1, r0
 8005a16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	0148      	lsls	r0, r1, #5
 8005a38:	69f9      	ldr	r1, [r7, #28]
 8005a3a:	4401      	add	r1, r0
 8005a3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a40:	4313      	orrs	r3, r2
 8005a42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10d      	bne.n	8005a66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6919      	ldr	r1, [r3, #16]
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	460a      	mov	r2, r1
 8005a64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	791b      	ldrb	r3, [r3, #4]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d128      	bne.n	8005ac0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d110      	bne.n	8005aa0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e00f      	b.n	8005ac0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	1ff80000 	.word	0x1ff80000

08005af0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	f040 80ce 	bne.w	8005cae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d132      	bne.n	8005b80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b78:	0cdb      	lsrs	r3, r3, #19
 8005b7a:	04db      	lsls	r3, r3, #19
 8005b7c:	6113      	str	r3, [r2, #16]
 8005b7e:	e04e      	b.n	8005c1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b9a:	0cdb      	lsrs	r3, r3, #19
 8005b9c:	04db      	lsls	r3, r3, #19
 8005b9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	0151      	lsls	r1, r2, #5
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	699a      	ldr	r2, [r3, #24]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d903      	bls.n	8005bd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0e:	6939      	ldr	r1, [r7, #16]
 8005c10:	0148      	lsls	r0, r1, #5
 8005c12:	6979      	ldr	r1, [r7, #20]
 8005c14:	4401      	add	r1, r0
 8005c16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d11e      	bne.n	8005c62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	e097      	b.n	8005d92 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 8083 	beq.w	8005d92 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca2:	6979      	ldr	r1, [r7, #20]
 8005ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	634b      	str	r3, [r1, #52]	; 0x34
 8005cac:	e071      	b.n	8005d92 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc8:	0cdb      	lsrs	r3, r3, #19
 8005cca:	04db      	lsls	r3, r3, #19
 8005ccc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	0151      	lsls	r1, r2, #5
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cf0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d40:	6939      	ldr	r1, [r7, #16]
 8005d42:	0148      	lsls	r0, r1, #5
 8005d44:	6979      	ldr	r1, [r7, #20]
 8005d46:	4401      	add	r1, r0
 8005d48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d10d      	bne.n	8005d72 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6919      	ldr	r1, [r3, #16]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	460a      	mov	r2, r1
 8005d70:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	785b      	ldrb	r3, [r3, #1]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d14a      	bne.n	8005e54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd6:	f040 8086 	bne.w	8005ee6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	7812      	ldrb	r2, [r2, #0]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dfc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	7812      	ldrb	r2, [r2, #0]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3301      	adds	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d902      	bls.n	8005e38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	75fb      	strb	r3, [r7, #23]
          break;
 8005e36:	e056      	b.n	8005ee6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e50:	d0e7      	beq.n	8005e22 <USB_EPStopXfer+0x82>
 8005e52:	e048      	b.n	8005ee6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6c:	d13b      	bne.n	8005ee6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	7812      	ldrb	r2, [r2, #0]
 8005e82:	0151      	lsls	r1, r2, #5
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	440a      	add	r2, r1
 8005e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d902      	bls.n	8005ecc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8005eca:	e00c      	b.n	8005ee6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee4:	d0e7      	beq.n	8005eb6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b089      	sub	sp, #36	; 0x24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	4611      	mov	r1, r2
 8005f00:	461a      	mov	r2, r3
 8005f02:	460b      	mov	r3, r1
 8005f04:	71fb      	strb	r3, [r7, #7]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d123      	bne.n	8005f62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f1a:	88bb      	ldrh	r3, [r7, #4]
 8005f1c:	3303      	adds	r3, #3
 8005f1e:	089b      	lsrs	r3, r3, #2
 8005f20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f22:	2300      	movs	r3, #0
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	e018      	b.n	8005f5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	031a      	lsls	r2, r3, #12
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f34:	461a      	mov	r2, r3
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3301      	adds	r3, #1
 8005f52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	3301      	adds	r3, #1
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d3e2      	bcc.n	8005f28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3724      	adds	r7, #36	; 0x24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b08b      	sub	sp, #44	; 0x2c
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	089b      	lsrs	r3, r3, #2
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f96:	2300      	movs	r3, #0
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	e014      	b.n	8005fc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	3301      	adds	r3, #1
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	623b      	str	r3, [r7, #32]
 8005fc6:	6a3a      	ldr	r2, [r7, #32]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d3e6      	bcc.n	8005f9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fce:	8bfb      	ldrh	r3, [r7, #30]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01e      	beq.n	8006012 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f107 0310 	add.w	r3, r7, #16
 8005fe4:	6812      	ldr	r2, [r2, #0]
 8005fe6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	701a      	strb	r2, [r3, #0]
      i++;
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	623b      	str	r3, [r7, #32]
      pDest++;
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	3301      	adds	r3, #1
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006006:	8bfb      	ldrh	r3, [r7, #30]
 8006008:	3b01      	subs	r3, #1
 800600a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800600c:	8bfb      	ldrh	r3, [r7, #30]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1ea      	bne.n	8005fe8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006014:	4618      	mov	r0, r3
 8006016:	372c      	adds	r7, #44	; 0x2c
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d12c      	bne.n	8006096 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	db12      	blt.n	8006074 <USB_EPSetStall+0x54>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00f      	beq.n	8006074 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006072:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	e02b      	b.n	80060ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	db12      	blt.n	80060ce <USB_EPSetStall+0xae>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00f      	beq.n	80060ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d128      	bne.n	800616a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006136:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	791b      	ldrb	r3, [r3, #4]
 800613c:	2b03      	cmp	r3, #3
 800613e:	d003      	beq.n	8006148 <USB_EPClearStall+0x4c>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	791b      	ldrb	r3, [r3, #4]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d138      	bne.n	80061ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	e027      	b.n	80061ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006184:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006188:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	791b      	ldrb	r3, [r3, #4]
 800618e:	2b03      	cmp	r3, #3
 8006190:	d003      	beq.n	800619a <USB_EPClearStall+0x9e>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	791b      	ldrb	r3, [r3, #4]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d10f      	bne.n	80061ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	460b      	mov	r3, r1
 80061d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061fc:	68f9      	ldr	r1, [r7, #12]
 80061fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006202:	4313      	orrs	r3, r2
 8006204:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800622e:	f023 0303 	bic.w	r3, r3, #3
 8006232:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006242:	f023 0302 	bic.w	r3, r3, #2
 8006246:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006270:	f023 0303 	bic.w	r3, r3, #3
 8006274:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006284:	f043 0302 	orr.w	r3, r3, #2
 8006288:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4013      	ands	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062b0:	68fb      	ldr	r3, [r7, #12]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062be:	b480      	push	{r7}
 80062c0:	b085      	sub	sp, #20
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	0c1b      	lsrs	r3, r3, #16
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	4013      	ands	r3, r2
 8006314:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	b29b      	uxth	r3, r3
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	4013      	ands	r3, r2
 8006352:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006354:	68bb      	ldr	r3, [r7, #8]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006362:	b480      	push	{r7}
 8006364:	b087      	sub	sp, #28
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006384:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006386:	78fb      	ldrb	r3, [r7, #3]
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	01db      	lsls	r3, r3, #7
 8006394:	b2db      	uxtb	r3, r3
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4013      	ands	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063b0:	68bb      	ldr	r3, [r7, #8]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f003 0301 	and.w	r3, r3, #1
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063f8:	f023 0307 	bic.w	r3, r3, #7
 80063fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800640c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	460b      	mov	r3, r1
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	333c      	adds	r3, #60	; 0x3c
 8006436:	3304      	adds	r3, #4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4a26      	ldr	r2, [pc, #152]	; (80064d8 <USB_EP0_OutStart+0xb8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d90a      	bls.n	800645a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006454:	d101      	bne.n	800645a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	e037      	b.n	80064ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	461a      	mov	r2, r3
 8006462:	2300      	movs	r3, #0
 8006464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f043 0318 	orr.w	r3, r3, #24
 800648c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800649c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064a2:	7afb      	ldrb	r3, [r7, #11]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d10f      	bne.n	80064c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	461a      	mov	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	4f54300a 	.word	0x4f54300a

080064dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a13      	ldr	r2, [pc, #76]	; (8006540 <USB_CoreReset+0x64>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d901      	bls.n	80064fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e01b      	b.n	8006532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	daf2      	bge.n	80064e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f043 0201 	orr.w	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a09      	ldr	r2, [pc, #36]	; (8006540 <USB_CoreReset+0x64>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e006      	b.n	8006532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	d0f0      	beq.n	8006512 <USB_CoreReset+0x36>

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	00030d40 	.word	0x00030d40

08006544 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006550:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006554:	f002 fc8a 	bl	8008e6c <USBD_static_malloc>
 8006558:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	32b0      	adds	r2, #176	; 0xb0
 800656a:	2100      	movs	r1, #0
 800656c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006570:	2302      	movs	r3, #2
 8006572:	e0d4      	b.n	800671e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006574:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006578:	2100      	movs	r1, #0
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f002 fcde 	bl	8008f3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	32b0      	adds	r2, #176	; 0xb0
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	32b0      	adds	r2, #176	; 0xb0
 800659a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	7c1b      	ldrb	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d138      	bne.n	800661e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065ac:	4b5e      	ldr	r3, [pc, #376]	; (8006728 <USBD_CDC_Init+0x1e4>)
 80065ae:	7819      	ldrb	r1, [r3, #0]
 80065b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b4:	2202      	movs	r2, #2
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f002 fb35 	bl	8008c26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065bc:	4b5a      	ldr	r3, [pc, #360]	; (8006728 <USBD_CDC_Init+0x1e4>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	f003 020f 	and.w	r2, r3, #15
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	2201      	movs	r2, #1
 80065d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065d6:	4b55      	ldr	r3, [pc, #340]	; (800672c <USBD_CDC_Init+0x1e8>)
 80065d8:	7819      	ldrb	r1, [r3, #0]
 80065da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065de:	2202      	movs	r2, #2
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f002 fb20 	bl	8008c26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065e6:	4b51      	ldr	r3, [pc, #324]	; (800672c <USBD_CDC_Init+0x1e8>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f003 020f 	and.w	r2, r3, #15
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065fe:	2201      	movs	r2, #1
 8006600:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006602:	4b4b      	ldr	r3, [pc, #300]	; (8006730 <USBD_CDC_Init+0x1ec>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	f003 020f 	and.w	r2, r3, #15
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	3326      	adds	r3, #38	; 0x26
 8006618:	2210      	movs	r2, #16
 800661a:	801a      	strh	r2, [r3, #0]
 800661c:	e035      	b.n	800668a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800661e:	4b42      	ldr	r3, [pc, #264]	; (8006728 <USBD_CDC_Init+0x1e4>)
 8006620:	7819      	ldrb	r1, [r3, #0]
 8006622:	2340      	movs	r3, #64	; 0x40
 8006624:	2202      	movs	r2, #2
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f002 fafd 	bl	8008c26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800662c:	4b3e      	ldr	r3, [pc, #248]	; (8006728 <USBD_CDC_Init+0x1e4>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 020f 	and.w	r2, r3, #15
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	3324      	adds	r3, #36	; 0x24
 8006642:	2201      	movs	r2, #1
 8006644:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006646:	4b39      	ldr	r3, [pc, #228]	; (800672c <USBD_CDC_Init+0x1e8>)
 8006648:	7819      	ldrb	r1, [r3, #0]
 800664a:	2340      	movs	r3, #64	; 0x40
 800664c:	2202      	movs	r2, #2
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f002 fae9 	bl	8008c26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006654:	4b35      	ldr	r3, [pc, #212]	; (800672c <USBD_CDC_Init+0x1e8>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800666c:	2201      	movs	r2, #1
 800666e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006670:	4b2f      	ldr	r3, [pc, #188]	; (8006730 <USBD_CDC_Init+0x1ec>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	f003 020f 	and.w	r2, r3, #15
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	3326      	adds	r3, #38	; 0x26
 8006686:	2210      	movs	r2, #16
 8006688:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800668a:	4b29      	ldr	r3, [pc, #164]	; (8006730 <USBD_CDC_Init+0x1ec>)
 800668c:	7819      	ldrb	r1, [r3, #0]
 800668e:	2308      	movs	r3, #8
 8006690:	2203      	movs	r2, #3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f002 fac7 	bl	8008c26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <USBD_CDC_Init+0x1ec>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f003 020f 	and.w	r2, r3, #15
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	3324      	adds	r3, #36	; 0x24
 80066ae:	2201      	movs	r2, #1
 80066b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	33b0      	adds	r3, #176	; 0xb0
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80066e8:	2302      	movs	r3, #2
 80066ea:	e018      	b.n	800671e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	7c1b      	ldrb	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10a      	bne.n	800670a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066f4:	4b0d      	ldr	r3, [pc, #52]	; (800672c <USBD_CDC_Init+0x1e8>)
 80066f6:	7819      	ldrb	r1, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f002 fb7e 	bl	8008e04 <USBD_LL_PrepareReceive>
 8006708:	e008      	b.n	800671c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <USBD_CDC_Init+0x1e8>)
 800670c:	7819      	ldrb	r1, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006714:	2340      	movs	r3, #64	; 0x40
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f002 fb74 	bl	8008e04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	200000af 	.word	0x200000af
 800672c:	200000b0 	.word	0x200000b0
 8006730:	200000b1 	.word	0x200000b1

08006734 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006740:	4b3a      	ldr	r3, [pc, #232]	; (800682c <USBD_CDC_DeInit+0xf8>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f002 fa93 	bl	8008c72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800674c:	4b37      	ldr	r3, [pc, #220]	; (800682c <USBD_CDC_DeInit+0xf8>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	f003 020f 	and.w	r2, r3, #15
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	3324      	adds	r3, #36	; 0x24
 8006762:	2200      	movs	r2, #0
 8006764:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006766:	4b32      	ldr	r3, [pc, #200]	; (8006830 <USBD_CDC_DeInit+0xfc>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f002 fa80 	bl	8008c72 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006772:	4b2f      	ldr	r3, [pc, #188]	; (8006830 <USBD_CDC_DeInit+0xfc>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	f003 020f 	and.w	r2, r3, #15
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800678a:	2200      	movs	r2, #0
 800678c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800678e:	4b29      	ldr	r3, [pc, #164]	; (8006834 <USBD_CDC_DeInit+0x100>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	4619      	mov	r1, r3
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f002 fa6c 	bl	8008c72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800679a:	4b26      	ldr	r3, [pc, #152]	; (8006834 <USBD_CDC_DeInit+0x100>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	f003 020f 	and.w	r2, r3, #15
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	3324      	adds	r3, #36	; 0x24
 80067b0:	2200      	movs	r2, #0
 80067b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067b4:	4b1f      	ldr	r3, [pc, #124]	; (8006834 <USBD_CDC_DeInit+0x100>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f003 020f 	and.w	r2, r3, #15
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	3326      	adds	r3, #38	; 0x26
 80067ca:	2200      	movs	r2, #0
 80067cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32b0      	adds	r2, #176	; 0xb0
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01f      	beq.n	8006820 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	33b0      	adds	r3, #176	; 0xb0
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	32b0      	adds	r2, #176	; 0xb0
 80067fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006802:	4618      	mov	r0, r3
 8006804:	f002 fb40 	bl	8008e88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	32b0      	adds	r2, #176	; 0xb0
 8006812:	2100      	movs	r1, #0
 8006814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	200000af 	.word	0x200000af
 8006830:	200000b0 	.word	0x200000b0
 8006834:	200000b1 	.word	0x200000b1

08006838 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	32b0      	adds	r2, #176	; 0xb0
 800684c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006850:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006864:	2303      	movs	r3, #3
 8006866:	e0bf      	b.n	80069e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006870:	2b00      	cmp	r3, #0
 8006872:	d050      	beq.n	8006916 <USBD_CDC_Setup+0xde>
 8006874:	2b20      	cmp	r3, #32
 8006876:	f040 80af 	bne.w	80069d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	88db      	ldrh	r3, [r3, #6]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d03a      	beq.n	80068f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	b25b      	sxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	da1b      	bge.n	80068c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	33b0      	adds	r3, #176	; 0xb0
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	88d2      	ldrh	r2, [r2, #6]
 80068a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	88db      	ldrh	r3, [r3, #6]
 80068ae:	2b07      	cmp	r3, #7
 80068b0:	bf28      	it	cs
 80068b2:	2307      	movcs	r3, #7
 80068b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	89fa      	ldrh	r2, [r7, #14]
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 fd89 	bl	80083d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068c2:	e090      	b.n	80069e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	785a      	ldrb	r2, [r3, #1]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	88db      	ldrh	r3, [r3, #6]
 80068d2:	2b3f      	cmp	r3, #63	; 0x3f
 80068d4:	d803      	bhi.n	80068de <USBD_CDC_Setup+0xa6>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	e000      	b.n	80068e0 <USBD_CDC_Setup+0xa8>
 80068de:	2240      	movs	r2, #64	; 0x40
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80068e6:	6939      	ldr	r1, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80068ee:	461a      	mov	r2, r3
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fd9b 	bl	800842c <USBD_CtlPrepareRx>
      break;
 80068f6:	e076      	b.n	80069e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	33b0      	adds	r3, #176	; 0xb0
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	7850      	ldrb	r0, [r2, #1]
 800690e:	2200      	movs	r2, #0
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	4798      	blx	r3
      break;
 8006914:	e067      	b.n	80069e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b0b      	cmp	r3, #11
 800691c:	d851      	bhi.n	80069c2 <USBD_CDC_Setup+0x18a>
 800691e:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <USBD_CDC_Setup+0xec>)
 8006920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006924:	08006955 	.word	0x08006955
 8006928:	080069d1 	.word	0x080069d1
 800692c:	080069c3 	.word	0x080069c3
 8006930:	080069c3 	.word	0x080069c3
 8006934:	080069c3 	.word	0x080069c3
 8006938:	080069c3 	.word	0x080069c3
 800693c:	080069c3 	.word	0x080069c3
 8006940:	080069c3 	.word	0x080069c3
 8006944:	080069c3 	.word	0x080069c3
 8006948:	080069c3 	.word	0x080069c3
 800694c:	0800697f 	.word	0x0800697f
 8006950:	080069a9 	.word	0x080069a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b03      	cmp	r3, #3
 800695e:	d107      	bne.n	8006970 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006960:	f107 030a 	add.w	r3, r7, #10
 8006964:	2202      	movs	r2, #2
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fd33 	bl	80083d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800696e:	e032      	b.n	80069d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fcbd 	bl	80082f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006978:	2303      	movs	r3, #3
 800697a:	75fb      	strb	r3, [r7, #23]
          break;
 800697c:	e02b      	b.n	80069d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b03      	cmp	r3, #3
 8006988:	d107      	bne.n	800699a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800698a:	f107 030d 	add.w	r3, r7, #13
 800698e:	2201      	movs	r2, #1
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f001 fd1e 	bl	80083d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006998:	e01d      	b.n	80069d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 fca8 	bl	80082f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80069a2:	2303      	movs	r3, #3
 80069a4:	75fb      	strb	r3, [r7, #23]
          break;
 80069a6:	e016      	b.n	80069d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d00f      	beq.n	80069d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fc9b 	bl	80082f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80069bc:	2303      	movs	r3, #3
 80069be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069c0:	e008      	b.n	80069d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 fc94 	bl	80082f2 <USBD_CtlError>
          ret = USBD_FAIL;
 80069ca:	2303      	movs	r3, #3
 80069cc:	75fb      	strb	r3, [r7, #23]
          break;
 80069ce:	e002      	b.n	80069d6 <USBD_CDC_Setup+0x19e>
          break;
 80069d0:	bf00      	nop
 80069d2:	e008      	b.n	80069e6 <USBD_CDC_Setup+0x1ae>
          break;
 80069d4:	bf00      	nop
      }
      break;
 80069d6:	e006      	b.n	80069e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f001 fc89 	bl	80082f2 <USBD_CtlError>
      ret = USBD_FAIL;
 80069e0:	2303      	movs	r3, #3
 80069e2:	75fb      	strb	r3, [r7, #23]
      break;
 80069e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	32b0      	adds	r2, #176	; 0xb0
 8006a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e065      	b.n	8006ae6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	32b0      	adds	r2, #176	; 0xb0
 8006a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	3318      	adds	r3, #24
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d02f      	beq.n	8006aa4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	f003 020f 	and.w	r2, r3, #15
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	3318      	adds	r3, #24
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	f003 010f 	and.w	r1, r3, #15
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	460b      	mov	r3, r1
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	440b      	add	r3, r1
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4403      	add	r3, r0
 8006a6c:	3348      	adds	r3, #72	; 0x48
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d112      	bne.n	8006aa4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	f003 020f 	and.w	r2, r3, #15
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	3318      	adds	r3, #24
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a96:	78f9      	ldrb	r1, [r7, #3]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 f990 	bl	8008dc2 <USBD_LL_Transmit>
 8006aa2:	e01f      	b.n	8006ae4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	33b0      	adds	r3, #176	; 0xb0
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d010      	beq.n	8006ae4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	33b0      	adds	r3, #176	; 0xb0
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	460b      	mov	r3, r1
 8006af8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	32b0      	adds	r2, #176	; 0xb0
 8006b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	32b0      	adds	r2, #176	; 0xb0
 8006b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e01a      	b.n	8006b56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f002 f98e 	bl	8008e46 <USBD_LL_GetRxDataSize>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	33b0      	adds	r3, #176	; 0xb0
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b50:	4611      	mov	r1, r2
 8006b52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	32b0      	adds	r2, #176	; 0xb0
 8006b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e025      	b.n	8006bcc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	33b0      	adds	r3, #176	; 0xb0
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01a      	beq.n	8006bca <USBD_CDC_EP0_RxReady+0x6c>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b9a:	2bff      	cmp	r3, #255	; 0xff
 8006b9c:	d015      	beq.n	8006bca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	33b0      	adds	r3, #176	; 0xb0
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006bb6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	22ff      	movs	r2, #255	; 0xff
 8006bc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bdc:	2182      	movs	r1, #130	; 0x82
 8006bde:	4818      	ldr	r0, [pc, #96]	; (8006c40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006be0:	f000 fd4f 	bl	8007682 <USBD_GetEpDesc>
 8006be4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006be6:	2101      	movs	r1, #1
 8006be8:	4815      	ldr	r0, [pc, #84]	; (8006c40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bea:	f000 fd4a 	bl	8007682 <USBD_GetEpDesc>
 8006bee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bf0:	2181      	movs	r1, #129	; 0x81
 8006bf2:	4813      	ldr	r0, [pc, #76]	; (8006c40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bf4:	f000 fd45 	bl	8007682 <USBD_GetEpDesc>
 8006bf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2210      	movs	r2, #16
 8006c04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c14:	711a      	strb	r2, [r3, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d006      	beq.n	8006c2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c28:	711a      	strb	r2, [r3, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2243      	movs	r2, #67	; 0x43
 8006c32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	2000006c 	.word	0x2000006c

08006c44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c4c:	2182      	movs	r1, #130	; 0x82
 8006c4e:	4818      	ldr	r0, [pc, #96]	; (8006cb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c50:	f000 fd17 	bl	8007682 <USBD_GetEpDesc>
 8006c54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c56:	2101      	movs	r1, #1
 8006c58:	4815      	ldr	r0, [pc, #84]	; (8006cb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c5a:	f000 fd12 	bl	8007682 <USBD_GetEpDesc>
 8006c5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c60:	2181      	movs	r1, #129	; 0x81
 8006c62:	4813      	ldr	r0, [pc, #76]	; (8006cb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c64:	f000 fd0d 	bl	8007682 <USBD_GetEpDesc>
 8006c68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2210      	movs	r2, #16
 8006c74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d006      	beq.n	8006c8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	711a      	strb	r2, [r3, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f042 0202 	orr.w	r2, r2, #2
 8006c88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d006      	beq.n	8006c9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	711a      	strb	r2, [r3, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f042 0202 	orr.w	r2, r2, #2
 8006c9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2243      	movs	r2, #67	; 0x43
 8006ca2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ca4:	4b02      	ldr	r3, [pc, #8]	; (8006cb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	2000006c 	.word	0x2000006c

08006cb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cbc:	2182      	movs	r1, #130	; 0x82
 8006cbe:	4818      	ldr	r0, [pc, #96]	; (8006d20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cc0:	f000 fcdf 	bl	8007682 <USBD_GetEpDesc>
 8006cc4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	4815      	ldr	r0, [pc, #84]	; (8006d20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cca:	f000 fcda 	bl	8007682 <USBD_GetEpDesc>
 8006cce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cd0:	2181      	movs	r1, #129	; 0x81
 8006cd2:	4813      	ldr	r0, [pc, #76]	; (8006d20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cd4:	f000 fcd5 	bl	8007682 <USBD_GetEpDesc>
 8006cd8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2210      	movs	r2, #16
 8006ce4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d006      	beq.n	8006cfa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf4:	711a      	strb	r2, [r3, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d006      	beq.n	8006d0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d08:	711a      	strb	r2, [r3, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2243      	movs	r2, #67	; 0x43
 8006d12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d14:	4b02      	ldr	r3, [pc, #8]	; (8006d20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	2000006c 	.word	0x2000006c

08006d24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	220a      	movs	r2, #10
 8006d30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d32:	4b03      	ldr	r3, [pc, #12]	; (8006d40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	20000028 	.word	0x20000028

08006d44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e009      	b.n	8006d6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	33b0      	adds	r3, #176	; 0xb0
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	32b0      	adds	r2, #176	; 0xb0
 8006d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d92:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e008      	b.n	8006db0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	32b0      	adds	r2, #176	; 0xb0
 8006dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e004      	b.n	8006dea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32b0      	adds	r2, #176	; 0xb0
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	32b0      	adds	r2, #176	; 0xb0
 8006e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e025      	b.n	8006e76 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11f      	bne.n	8006e74 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e3c:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <USBD_CDC_TransmitPacket+0x88>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4403      	add	r3, r0
 8006e56:	3318      	adds	r3, #24
 8006e58:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <USBD_CDC_TransmitPacket+0x88>)
 8006e5c:	7819      	ldrb	r1, [r3, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 ffa9 	bl	8008dc2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	200000af 	.word	0x200000af

08006e84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	32b0      	adds	r2, #176	; 0xb0
 8006e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	32b0      	adds	r2, #176	; 0xb0
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e018      	b.n	8006ee4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7c1b      	ldrb	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eba:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <USBD_CDC_ReceivePacket+0x68>)
 8006ebc:	7819      	ldrb	r1, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 ff9b 	bl	8008e04 <USBD_LL_PrepareReceive>
 8006ece:	e008      	b.n	8006ee2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <USBD_CDC_ReceivePacket+0x68>)
 8006ed2:	7819      	ldrb	r1, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eda:	2340      	movs	r3, #64	; 0x40
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 ff91 	bl	8008e04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	200000b0 	.word	0x200000b0

08006ef0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e01f      	b.n	8006f48 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	79fa      	ldrb	r2, [r7, #7]
 8006f3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f001 fe0b 	bl	8008b58 <USBD_LL_Init>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e025      	b.n	8006fb4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	32ae      	adds	r2, #174	; 0xae
 8006f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00f      	beq.n	8006fa4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	32ae      	adds	r2, #174	; 0xae
 8006f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	f107 020e 	add.w	r2, r7, #14
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 fe13 	bl	8008bf0 <USBD_LL_Start>
 8006fca:	4603      	mov	r3, r0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fdc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d009      	beq.n	8007018 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	78fa      	ldrb	r2, [r7, #3]
 800700e:	4611      	mov	r1, r2
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
 8007014:	4603      	mov	r3, r0
 8007016:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	4611      	mov	r1, r2
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	4798      	blx	r3
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007048:	2303      	movs	r3, #3
 800704a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f001 f908 	bl	800827e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800707c:	461a      	mov	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800708a:	f003 031f 	and.w	r3, r3, #31
 800708e:	2b02      	cmp	r3, #2
 8007090:	d01a      	beq.n	80070c8 <USBD_LL_SetupStage+0x72>
 8007092:	2b02      	cmp	r3, #2
 8007094:	d822      	bhi.n	80070dc <USBD_LL_SetupStage+0x86>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <USBD_LL_SetupStage+0x4a>
 800709a:	2b01      	cmp	r3, #1
 800709c:	d00a      	beq.n	80070b4 <USBD_LL_SetupStage+0x5e>
 800709e:	e01d      	b.n	80070dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fb5f 	bl	800776c <USBD_StdDevReq>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73fb      	strb	r3, [r7, #15]
      break;
 80070b2:	e020      	b.n	80070f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fbc7 	bl	8007850 <USBD_StdItfReq>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]
      break;
 80070c6:	e016      	b.n	80070f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc29 	bl	8007928 <USBD_StdEPReq>
 80070d6:	4603      	mov	r3, r0
 80070d8:	73fb      	strb	r3, [r7, #15]
      break;
 80070da:	e00c      	b.n	80070f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fde0 	bl	8008cb0 <USBD_LL_StallEP>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
      break;
 80070f4:	bf00      	nop
  }

  return ret;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	460b      	mov	r3, r1
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007112:	7afb      	ldrb	r3, [r7, #11]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d16e      	bne.n	80071f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800711e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007126:	2b03      	cmp	r3, #3
 8007128:	f040 8098 	bne.w	800725c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	429a      	cmp	r2, r3
 8007136:	d913      	bls.n	8007160 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	1ad2      	subs	r2, r2, r3
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	4293      	cmp	r3, r2
 8007150:	bf28      	it	cs
 8007152:	4613      	movcs	r3, r2
 8007154:	461a      	mov	r2, r3
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f001 f984 	bl	8008466 <USBD_CtlContinueRx>
 800715e:	e07d      	b.n	800725c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2b02      	cmp	r3, #2
 800716c:	d014      	beq.n	8007198 <USBD_LL_DataOutStage+0x98>
 800716e:	2b02      	cmp	r3, #2
 8007170:	d81d      	bhi.n	80071ae <USBD_LL_DataOutStage+0xae>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <USBD_LL_DataOutStage+0x7c>
 8007176:	2b01      	cmp	r3, #1
 8007178:	d003      	beq.n	8007182 <USBD_LL_DataOutStage+0x82>
 800717a:	e018      	b.n	80071ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	75bb      	strb	r3, [r7, #22]
            break;
 8007180:	e018      	b.n	80071b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007188:	b2db      	uxtb	r3, r3
 800718a:	4619      	mov	r1, r3
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fa5e 	bl	800764e <USBD_CoreFindIF>
 8007192:	4603      	mov	r3, r0
 8007194:	75bb      	strb	r3, [r7, #22]
            break;
 8007196:	e00d      	b.n	80071b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	4619      	mov	r1, r3
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fa60 	bl	8007668 <USBD_CoreFindEP>
 80071a8:	4603      	mov	r3, r0
 80071aa:	75bb      	strb	r3, [r7, #22]
            break;
 80071ac:	e002      	b.n	80071b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	75bb      	strb	r3, [r7, #22]
            break;
 80071b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071b4:	7dbb      	ldrb	r3, [r7, #22]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d119      	bne.n	80071ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d113      	bne.n	80071ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071c6:	7dba      	ldrb	r2, [r7, #22]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	32ae      	adds	r2, #174	; 0xae
 80071cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00b      	beq.n	80071ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80071d6:	7dba      	ldrb	r2, [r7, #22]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071de:	7dba      	ldrb	r2, [r7, #22]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	32ae      	adds	r2, #174	; 0xae
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f001 f94a 	bl	8008488 <USBD_CtlSendStatus>
 80071f4:	e032      	b.n	800725c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80071f6:	7afb      	ldrb	r3, [r7, #11]
 80071f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	4619      	mov	r1, r3
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fa31 	bl	8007668 <USBD_CoreFindEP>
 8007206:	4603      	mov	r3, r0
 8007208:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800720a:	7dbb      	ldrb	r3, [r7, #22]
 800720c:	2bff      	cmp	r3, #255	; 0xff
 800720e:	d025      	beq.n	800725c <USBD_LL_DataOutStage+0x15c>
 8007210:	7dbb      	ldrb	r3, [r7, #22]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d122      	bne.n	800725c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b03      	cmp	r3, #3
 8007220:	d117      	bne.n	8007252 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007222:	7dba      	ldrb	r2, [r7, #22]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	32ae      	adds	r2, #174	; 0xae
 8007228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00f      	beq.n	8007252 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007232:	7dba      	ldrb	r2, [r7, #22]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800723a:	7dba      	ldrb	r2, [r7, #22]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	32ae      	adds	r2, #174	; 0xae
 8007240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	7afa      	ldrb	r2, [r7, #11]
 8007248:	4611      	mov	r1, r2
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	4798      	blx	r3
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007258:	7dfb      	ldrb	r3, [r7, #23]
 800725a:	e000      	b.n	800725e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b086      	sub	sp, #24
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	460b      	mov	r3, r1
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007274:	7afb      	ldrb	r3, [r7, #11]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d16f      	bne.n	800735a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3314      	adds	r3, #20
 800727e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007286:	2b02      	cmp	r3, #2
 8007288:	d15a      	bne.n	8007340 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	429a      	cmp	r2, r3
 8007294:	d914      	bls.n	80072c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	689a      	ldr	r2, [r3, #8]
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	461a      	mov	r2, r3
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f001 f8ac 	bl	800840a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072b2:	2300      	movs	r3, #0
 80072b4:	2200      	movs	r2, #0
 80072b6:	2100      	movs	r1, #0
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f001 fda3 	bl	8008e04 <USBD_LL_PrepareReceive>
 80072be:	e03f      	b.n	8007340 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d11c      	bne.n	8007306 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d316      	bcc.n	8007306 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d20f      	bcs.n	8007306 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072e6:	2200      	movs	r2, #0
 80072e8:	2100      	movs	r1, #0
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f001 f88d 	bl	800840a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072f8:	2300      	movs	r3, #0
 80072fa:	2200      	movs	r2, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f001 fd80 	bl	8008e04 <USBD_LL_PrepareReceive>
 8007304:	e01c      	b.n	8007340 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b03      	cmp	r3, #3
 8007310:	d10f      	bne.n	8007332 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d009      	beq.n	8007332 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007332:	2180      	movs	r1, #128	; 0x80
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f001 fcbb 	bl	8008cb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f001 f8b7 	bl	80084ae <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d03a      	beq.n	80073c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff fe42 	bl	8006fd4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007358:	e032      	b.n	80073c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007360:	b2db      	uxtb	r3, r3
 8007362:	4619      	mov	r1, r3
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 f97f 	bl	8007668 <USBD_CoreFindEP>
 800736a:	4603      	mov	r3, r0
 800736c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	2bff      	cmp	r3, #255	; 0xff
 8007372:	d025      	beq.n	80073c0 <USBD_LL_DataInStage+0x15a>
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d122      	bne.n	80073c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b03      	cmp	r3, #3
 8007384:	d11c      	bne.n	80073c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007386:	7dfa      	ldrb	r2, [r7, #23]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	32ae      	adds	r2, #174	; 0xae
 800738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d014      	beq.n	80073c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007396:	7dfa      	ldrb	r2, [r7, #23]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800739e:	7dfa      	ldrb	r2, [r7, #23]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	32ae      	adds	r2, #174	; 0xae
 80073a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	7afa      	ldrb	r2, [r7, #11]
 80073ac:	4611      	mov	r1, r2
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	4798      	blx	r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073b6:	7dbb      	ldrb	r3, [r7, #22]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073bc:	7dbb      	ldrb	r3, [r7, #22]
 80073be:	e000      	b.n	80073c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b084      	sub	sp, #16
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d014      	beq.n	8007430 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00e      	beq.n	8007430 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	6852      	ldr	r2, [r2, #4]
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	4611      	mov	r1, r2
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800742c:	2303      	movs	r3, #3
 800742e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007430:	2340      	movs	r3, #64	; 0x40
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 fbf5 	bl	8008c26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2240      	movs	r2, #64	; 0x40
 8007448:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800744c:	2340      	movs	r3, #64	; 0x40
 800744e:	2200      	movs	r2, #0
 8007450:	2180      	movs	r1, #128	; 0x80
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 fbe7 	bl	8008c26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2240      	movs	r2, #64	; 0x40
 8007462:	621a      	str	r2, [r3, #32]

  return ret;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	b2da      	uxtb	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2204      	movs	r2, #4
 80074a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d106      	bne.n	80074dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d110      	bne.n	8007520 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	460b      	mov	r3, r1
 8007534:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	32ae      	adds	r2, #174	; 0xae
 8007540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007548:	2303      	movs	r3, #3
 800754a:	e01c      	b.n	8007586 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b03      	cmp	r3, #3
 8007556:	d115      	bne.n	8007584 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	32ae      	adds	r2, #174	; 0xae
 8007562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00b      	beq.n	8007584 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	32ae      	adds	r2, #174	; 0xae
 8007576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	78fa      	ldrb	r2, [r7, #3]
 800757e:	4611      	mov	r1, r2
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	32ae      	adds	r2, #174	; 0xae
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e01c      	b.n	80075ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d115      	bne.n	80075e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32ae      	adds	r2, #174	; 0xae
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	32ae      	adds	r2, #174	; 0xae
 80075da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	4611      	mov	r1, r2
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00e      	beq.n	8007644 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6852      	ldr	r2, [r2, #4]
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	4611      	mov	r1, r2
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4798      	blx	r3
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800765a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800765c:	4618      	mov	r0, r3
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	460b      	mov	r3, r1
 8007672:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007674:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007676:	4618      	mov	r0, r3
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	885b      	ldrh	r3, [r3, #2]
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d920      	bls.n	80076ec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076b2:	e013      	b.n	80076dc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076b4:	f107 030a 	add.w	r3, r7, #10
 80076b8:	4619      	mov	r1, r3
 80076ba:	6978      	ldr	r0, [r7, #20]
 80076bc:	f000 f81b 	bl	80076f6 <USBD_GetNextDesc>
 80076c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b05      	cmp	r3, #5
 80076c8:	d108      	bne.n	80076dc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	789b      	ldrb	r3, [r3, #2]
 80076d2:	78fa      	ldrb	r2, [r7, #3]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d008      	beq.n	80076ea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	885b      	ldrh	r3, [r3, #2]
 80076e0:	b29a      	uxth	r2, r3
 80076e2:	897b      	ldrh	r3, [r7, #10]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d8e5      	bhi.n	80076b4 <USBD_GetEpDesc+0x32>
 80076e8:	e000      	b.n	80076ec <USBD_GetEpDesc+0x6a>
          break;
 80076ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80076ec:	693b      	ldr	r3, [r7, #16]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b085      	sub	sp, #20
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	881a      	ldrh	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	4413      	add	r3, r2
 8007710:	b29a      	uxth	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4413      	add	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007722:	68fb      	ldr	r3, [r7, #12]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	3301      	adds	r3, #1
 8007746:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800774e:	8a3b      	ldrh	r3, [r7, #16]
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	b21a      	sxth	r2, r3
 8007754:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007758:	4313      	orrs	r3, r2
 800775a:	b21b      	sxth	r3, r3
 800775c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800775e:	89fb      	ldrh	r3, [r7, #14]
}
 8007760:	4618      	mov	r0, r3
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007782:	2b40      	cmp	r3, #64	; 0x40
 8007784:	d005      	beq.n	8007792 <USBD_StdDevReq+0x26>
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d857      	bhi.n	800783a <USBD_StdDevReq+0xce>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00f      	beq.n	80077ae <USBD_StdDevReq+0x42>
 800778e:	2b20      	cmp	r3, #32
 8007790:	d153      	bne.n	800783a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	32ae      	adds	r2, #174	; 0xae
 800779c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
 80077a8:	4603      	mov	r3, r0
 80077aa:	73fb      	strb	r3, [r7, #15]
      break;
 80077ac:	e04a      	b.n	8007844 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	2b09      	cmp	r3, #9
 80077b4:	d83b      	bhi.n	800782e <USBD_StdDevReq+0xc2>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <USBD_StdDevReq+0x50>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	08007811 	.word	0x08007811
 80077c0:	08007825 	.word	0x08007825
 80077c4:	0800782f 	.word	0x0800782f
 80077c8:	0800781b 	.word	0x0800781b
 80077cc:	0800782f 	.word	0x0800782f
 80077d0:	080077ef 	.word	0x080077ef
 80077d4:	080077e5 	.word	0x080077e5
 80077d8:	0800782f 	.word	0x0800782f
 80077dc:	08007807 	.word	0x08007807
 80077e0:	080077f9 	.word	0x080077f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa3c 	bl	8007c64 <USBD_GetDescriptor>
          break;
 80077ec:	e024      	b.n	8007838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fba1 	bl	8007f38 <USBD_SetAddress>
          break;
 80077f6:	e01f      	b.n	8007838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fbe0 	bl	8007fc0 <USBD_SetConfig>
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
          break;
 8007804:	e018      	b.n	8007838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fc83 	bl	8008114 <USBD_GetConfig>
          break;
 800780e:	e013      	b.n	8007838 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fcb4 	bl	8008180 <USBD_GetStatus>
          break;
 8007818:	e00e      	b.n	8007838 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fce3 	bl	80081e8 <USBD_SetFeature>
          break;
 8007822:	e009      	b.n	8007838 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fd07 	bl	800823a <USBD_ClrFeature>
          break;
 800782c:	e004      	b.n	8007838 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fd5e 	bl	80082f2 <USBD_CtlError>
          break;
 8007836:	bf00      	nop
      }
      break;
 8007838:	e004      	b.n	8007844 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fd58 	bl	80082f2 <USBD_CtlError>
      break;
 8007842:	bf00      	nop
  }

  return ret;
 8007844:	7bfb      	ldrb	r3, [r7, #15]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop

08007850 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d005      	beq.n	8007876 <USBD_StdItfReq+0x26>
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d852      	bhi.n	8007914 <USBD_StdItfReq+0xc4>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <USBD_StdItfReq+0x26>
 8007872:	2b20      	cmp	r3, #32
 8007874:	d14e      	bne.n	8007914 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787c:	b2db      	uxtb	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	2b02      	cmp	r3, #2
 8007882:	d840      	bhi.n	8007906 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	889b      	ldrh	r3, [r3, #4]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	d836      	bhi.n	80078fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	889b      	ldrh	r3, [r3, #4]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff fed9 	bl	800764e <USBD_CoreFindIF>
 800789c:	4603      	mov	r3, r0
 800789e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078a0:	7bbb      	ldrb	r3, [r7, #14]
 80078a2:	2bff      	cmp	r3, #255	; 0xff
 80078a4:	d01d      	beq.n	80078e2 <USBD_StdItfReq+0x92>
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d11a      	bne.n	80078e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078ac:	7bba      	ldrb	r2, [r7, #14]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	32ae      	adds	r2, #174	; 0xae
 80078b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00f      	beq.n	80078dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078bc:	7bba      	ldrb	r2, [r7, #14]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078c4:	7bba      	ldrb	r2, [r7, #14]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	32ae      	adds	r2, #174	; 0xae
 80078ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078da:	e004      	b.n	80078e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078dc:	2303      	movs	r3, #3
 80078de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078e0:	e001      	b.n	80078e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078e2:	2303      	movs	r3, #3
 80078e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	88db      	ldrh	r3, [r3, #6]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d110      	bne.n	8007910 <USBD_StdItfReq+0xc0>
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10d      	bne.n	8007910 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fdc7 	bl	8008488 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80078fa:	e009      	b.n	8007910 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fcf7 	bl	80082f2 <USBD_CtlError>
          break;
 8007904:	e004      	b.n	8007910 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fcf2 	bl	80082f2 <USBD_CtlError>
          break;
 800790e:	e000      	b.n	8007912 <USBD_StdItfReq+0xc2>
          break;
 8007910:	bf00      	nop
      }
      break;
 8007912:	e004      	b.n	800791e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fceb 	bl	80082f2 <USBD_CtlError>
      break;
 800791c:	bf00      	nop
  }

  return ret;
 800791e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	889b      	ldrh	r3, [r3, #4]
 800793a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d007      	beq.n	8007958 <USBD_StdEPReq+0x30>
 8007948:	2b40      	cmp	r3, #64	; 0x40
 800794a:	f200 817f 	bhi.w	8007c4c <USBD_StdEPReq+0x324>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d02a      	beq.n	80079a8 <USBD_StdEPReq+0x80>
 8007952:	2b20      	cmp	r3, #32
 8007954:	f040 817a 	bne.w	8007c4c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff fe83 	bl	8007668 <USBD_CoreFindEP>
 8007962:	4603      	mov	r3, r0
 8007964:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007966:	7b7b      	ldrb	r3, [r7, #13]
 8007968:	2bff      	cmp	r3, #255	; 0xff
 800796a:	f000 8174 	beq.w	8007c56 <USBD_StdEPReq+0x32e>
 800796e:	7b7b      	ldrb	r3, [r7, #13]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f040 8170 	bne.w	8007c56 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007976:	7b7a      	ldrb	r2, [r7, #13]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800797e:	7b7a      	ldrb	r2, [r7, #13]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	32ae      	adds	r2, #174	; 0xae
 8007984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8163 	beq.w	8007c56 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007990:	7b7a      	ldrb	r2, [r7, #13]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	32ae      	adds	r2, #174	; 0xae
 8007996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	4798      	blx	r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079a6:	e156      	b.n	8007c56 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	785b      	ldrb	r3, [r3, #1]
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d008      	beq.n	80079c2 <USBD_StdEPReq+0x9a>
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	f300 8145 	bgt.w	8007c40 <USBD_StdEPReq+0x318>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 809b 	beq.w	8007af2 <USBD_StdEPReq+0x1ca>
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d03c      	beq.n	8007a3a <USBD_StdEPReq+0x112>
 80079c0:	e13e      	b.n	8007c40 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d002      	beq.n	80079d4 <USBD_StdEPReq+0xac>
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d016      	beq.n	8007a00 <USBD_StdEPReq+0xd8>
 80079d2:	e02c      	b.n	8007a2e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00d      	beq.n	80079f6 <USBD_StdEPReq+0xce>
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b80      	cmp	r3, #128	; 0x80
 80079de:	d00a      	beq.n	80079f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f963 	bl	8008cb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ea:	2180      	movs	r1, #128	; 0x80
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f95f 	bl	8008cb0 <USBD_LL_StallEP>
 80079f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079f4:	e020      	b.n	8007a38 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fc7a 	bl	80082f2 <USBD_CtlError>
              break;
 80079fe:	e01b      	b.n	8007a38 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	885b      	ldrh	r3, [r3, #2]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10e      	bne.n	8007a26 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <USBD_StdEPReq+0xfe>
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b80      	cmp	r3, #128	; 0x80
 8007a12:	d008      	beq.n	8007a26 <USBD_StdEPReq+0xfe>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	88db      	ldrh	r3, [r3, #6]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d104      	bne.n	8007a26 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 f945 	bl	8008cb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fd2e 	bl	8008488 <USBD_CtlSendStatus>

              break;
 8007a2c:	e004      	b.n	8007a38 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc5e 	bl	80082f2 <USBD_CtlError>
              break;
 8007a36:	bf00      	nop
          }
          break;
 8007a38:	e107      	b.n	8007c4a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d002      	beq.n	8007a4c <USBD_StdEPReq+0x124>
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d016      	beq.n	8007a78 <USBD_StdEPReq+0x150>
 8007a4a:	e04b      	b.n	8007ae4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00d      	beq.n	8007a6e <USBD_StdEPReq+0x146>
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b80      	cmp	r3, #128	; 0x80
 8007a56:	d00a      	beq.n	8007a6e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 f927 	bl	8008cb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a62:	2180      	movs	r1, #128	; 0x80
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f923 	bl	8008cb0 <USBD_LL_StallEP>
 8007a6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a6c:	e040      	b.n	8007af0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fc3e 	bl	80082f2 <USBD_CtlError>
              break;
 8007a76:	e03b      	b.n	8007af0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	885b      	ldrh	r3, [r3, #2]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d136      	bne.n	8007aee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 f92d 	bl	8008cee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fcf7 	bl	8008488 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff fde2 	bl	8007668 <USBD_CoreFindEP>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aa8:	7b7b      	ldrb	r3, [r7, #13]
 8007aaa:	2bff      	cmp	r3, #255	; 0xff
 8007aac:	d01f      	beq.n	8007aee <USBD_StdEPReq+0x1c6>
 8007aae:	7b7b      	ldrb	r3, [r7, #13]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d11c      	bne.n	8007aee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ab4:	7b7a      	ldrb	r2, [r7, #13]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007abc:	7b7a      	ldrb	r2, [r7, #13]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	32ae      	adds	r2, #174	; 0xae
 8007ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007acc:	7b7a      	ldrb	r2, [r7, #13]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	32ae      	adds	r2, #174	; 0xae
 8007ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
 8007ade:	4603      	mov	r3, r0
 8007ae0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007ae2:	e004      	b.n	8007aee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fc03 	bl	80082f2 <USBD_CtlError>
              break;
 8007aec:	e000      	b.n	8007af0 <USBD_StdEPReq+0x1c8>
              break;
 8007aee:	bf00      	nop
          }
          break;
 8007af0:	e0ab      	b.n	8007c4a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d002      	beq.n	8007b04 <USBD_StdEPReq+0x1dc>
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d032      	beq.n	8007b68 <USBD_StdEPReq+0x240>
 8007b02:	e097      	b.n	8007c34 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d007      	beq.n	8007b1a <USBD_StdEPReq+0x1f2>
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	d004      	beq.n	8007b1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fbed 	bl	80082f2 <USBD_CtlError>
                break;
 8007b18:	e091      	b.n	8007c3e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	da0b      	bge.n	8007b3a <USBD_StdEPReq+0x212>
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	3310      	adds	r3, #16
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	4413      	add	r3, r2
 8007b36:	3304      	adds	r3, #4
 8007b38:	e00b      	b.n	8007b52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	4413      	add	r3, r2
 8007b50:	3304      	adds	r3, #4
 8007b52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc37 	bl	80083d4 <USBD_CtlSendData>
              break;
 8007b66:	e06a      	b.n	8007c3e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	da11      	bge.n	8007b94 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	f003 020f 	and.w	r2, r3, #15
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	3324      	adds	r3, #36	; 0x24
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d117      	bne.n	8007bba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fbb0 	bl	80082f2 <USBD_CtlError>
                  break;
 8007b92:	e054      	b.n	8007c3e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	f003 020f 	and.w	r2, r3, #15
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d104      	bne.n	8007bba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fb9d 	bl	80082f2 <USBD_CtlError>
                  break;
 8007bb8:	e041      	b.n	8007c3e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	da0b      	bge.n	8007bda <USBD_StdEPReq+0x2b2>
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	3310      	adds	r3, #16
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	e00b      	b.n	8007bf2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007be0:	4613      	mov	r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	4413      	add	r3, r2
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bf4:	7bbb      	ldrb	r3, [r7, #14]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <USBD_StdEPReq+0x2d8>
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	2b80      	cmp	r3, #128	; 0x80
 8007bfe:	d103      	bne.n	8007c08 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e00e      	b.n	8007c26 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f001 f88d 	bl	8008d2c <USBD_LL_IsStallEP>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e002      	b.n	8007c26 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fbd1 	bl	80083d4 <USBD_CtlSendData>
              break;
 8007c32:	e004      	b.n	8007c3e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fb5b 	bl	80082f2 <USBD_CtlError>
              break;
 8007c3c:	bf00      	nop
          }
          break;
 8007c3e:	e004      	b.n	8007c4a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fb55 	bl	80082f2 <USBD_CtlError>
          break;
 8007c48:	bf00      	nop
      }
      break;
 8007c4a:	e005      	b.n	8007c58 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fb4f 	bl	80082f2 <USBD_CtlError>
      break;
 8007c54:	e000      	b.n	8007c58 <USBD_StdEPReq+0x330>
      break;
 8007c56:	bf00      	nop
  }

  return ret;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
	...

08007c64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	885b      	ldrh	r3, [r3, #2]
 8007c7e:	0a1b      	lsrs	r3, r3, #8
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	2b06      	cmp	r3, #6
 8007c86:	f200 8128 	bhi.w	8007eda <USBD_GetDescriptor+0x276>
 8007c8a:	a201      	add	r2, pc, #4	; (adr r2, 8007c90 <USBD_GetDescriptor+0x2c>)
 8007c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c90:	08007cad 	.word	0x08007cad
 8007c94:	08007cc5 	.word	0x08007cc5
 8007c98:	08007d05 	.word	0x08007d05
 8007c9c:	08007edb 	.word	0x08007edb
 8007ca0:	08007edb 	.word	0x08007edb
 8007ca4:	08007e7b 	.word	0x08007e7b
 8007ca8:	08007ea7 	.word	0x08007ea7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7c12      	ldrb	r2, [r2, #16]
 8007cb8:	f107 0108 	add.w	r1, r7, #8
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	4798      	blx	r3
 8007cc0:	60f8      	str	r0, [r7, #12]
      break;
 8007cc2:	e112      	b.n	8007eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	7c1b      	ldrb	r3, [r3, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d10d      	bne.n	8007ce8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	f107 0208 	add.w	r2, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ce6:	e100      	b.n	8007eea <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	f107 0208 	add.w	r2, r7, #8
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4798      	blx	r3
 8007cf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	2202      	movs	r2, #2
 8007d00:	701a      	strb	r2, [r3, #0]
      break;
 8007d02:	e0f2      	b.n	8007eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	885b      	ldrh	r3, [r3, #2]
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b05      	cmp	r3, #5
 8007d0c:	f200 80ac 	bhi.w	8007e68 <USBD_GetDescriptor+0x204>
 8007d10:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <USBD_GetDescriptor+0xb4>)
 8007d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d16:	bf00      	nop
 8007d18:	08007d31 	.word	0x08007d31
 8007d1c:	08007d65 	.word	0x08007d65
 8007d20:	08007d99 	.word	0x08007d99
 8007d24:	08007dcd 	.word	0x08007dcd
 8007d28:	08007e01 	.word	0x08007e01
 8007d2c:	08007e35 	.word	0x08007e35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	7c12      	ldrb	r2, [r2, #16]
 8007d48:	f107 0108 	add.w	r1, r7, #8
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d52:	e091      	b.n	8007e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 facb 	bl	80082f2 <USBD_CtlError>
            err++;
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	72fb      	strb	r3, [r7, #11]
          break;
 8007d62:	e089      	b.n	8007e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	7c12      	ldrb	r2, [r2, #16]
 8007d7c:	f107 0108 	add.w	r1, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d86:	e077      	b.n	8007e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fab1 	bl	80082f2 <USBD_CtlError>
            err++;
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	3301      	adds	r3, #1
 8007d94:	72fb      	strb	r3, [r7, #11]
          break;
 8007d96:	e06f      	b.n	8007e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	7c12      	ldrb	r2, [r2, #16]
 8007db0:	f107 0108 	add.w	r1, r7, #8
 8007db4:	4610      	mov	r0, r2
 8007db6:	4798      	blx	r3
 8007db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dba:	e05d      	b.n	8007e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa97 	bl	80082f2 <USBD_CtlError>
            err++;
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dca:	e055      	b.n	8007e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	7c12      	ldrb	r2, [r2, #16]
 8007de4:	f107 0108 	add.w	r1, r7, #8
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dee:	e043      	b.n	8007e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa7d 	bl	80082f2 <USBD_CtlError>
            err++;
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfe:	e03b      	b.n	8007e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	7c12      	ldrb	r2, [r2, #16]
 8007e18:	f107 0108 	add.w	r1, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e22:	e029      	b.n	8007e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fa63 	bl	80082f2 <USBD_CtlError>
            err++;
 8007e2c:	7afb      	ldrb	r3, [r7, #11]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	72fb      	strb	r3, [r7, #11]
          break;
 8007e32:	e021      	b.n	8007e78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	7c12      	ldrb	r2, [r2, #16]
 8007e4c:	f107 0108 	add.w	r1, r7, #8
 8007e50:	4610      	mov	r0, r2
 8007e52:	4798      	blx	r3
 8007e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e56:	e00f      	b.n	8007e78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa49 	bl	80082f2 <USBD_CtlError>
            err++;
 8007e60:	7afb      	ldrb	r3, [r7, #11]
 8007e62:	3301      	adds	r3, #1
 8007e64:	72fb      	strb	r3, [r7, #11]
          break;
 8007e66:	e007      	b.n	8007e78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa41 	bl	80082f2 <USBD_CtlError>
          err++;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	3301      	adds	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e76:	bf00      	nop
      }
      break;
 8007e78:	e037      	b.n	8007eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7c1b      	ldrb	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e8a:	f107 0208 	add.w	r2, r7, #8
 8007e8e:	4610      	mov	r0, r2
 8007e90:	4798      	blx	r3
 8007e92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e94:	e029      	b.n	8007eea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fa2a 	bl	80082f2 <USBD_CtlError>
        err++;
 8007e9e:	7afb      	ldrb	r3, [r7, #11]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ea4:	e021      	b.n	8007eea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	7c1b      	ldrb	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10d      	bne.n	8007eca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	f107 0208 	add.w	r2, r7, #8
 8007eba:	4610      	mov	r0, r2
 8007ebc:	4798      	blx	r3
 8007ebe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	2207      	movs	r2, #7
 8007ec6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ec8:	e00f      	b.n	8007eea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fa10 	bl	80082f2 <USBD_CtlError>
        err++;
 8007ed2:	7afb      	ldrb	r3, [r7, #11]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ed8:	e007      	b.n	8007eea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fa08 	bl	80082f2 <USBD_CtlError>
      err++;
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee8:	bf00      	nop
  }

  if (err != 0U)
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d11e      	bne.n	8007f2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	88db      	ldrh	r3, [r3, #6]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d016      	beq.n	8007f26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ef8:	893b      	ldrh	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00e      	beq.n	8007f1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	88da      	ldrh	r2, [r3, #6]
 8007f02:	893b      	ldrh	r3, [r7, #8]
 8007f04:	4293      	cmp	r3, r2
 8007f06:	bf28      	it	cs
 8007f08:	4613      	movcs	r3, r2
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f0e:	893b      	ldrh	r3, [r7, #8]
 8007f10:	461a      	mov	r2, r3
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fa5d 	bl	80083d4 <USBD_CtlSendData>
 8007f1a:	e009      	b.n	8007f30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f9e7 	bl	80082f2 <USBD_CtlError>
 8007f24:	e004      	b.n	8007f30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 faae 	bl	8008488 <USBD_CtlSendStatus>
 8007f2c:	e000      	b.n	8007f30 <USBD_GetDescriptor+0x2cc>
    return;
 8007f2e:	bf00      	nop
  }
}
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop

08007f38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	889b      	ldrh	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d131      	bne.n	8007fae <USBD_SetAddress+0x76>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	88db      	ldrh	r3, [r3, #6]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d12d      	bne.n	8007fae <USBD_SetAddress+0x76>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	885b      	ldrh	r3, [r3, #2]
 8007f56:	2b7f      	cmp	r3, #127	; 0x7f
 8007f58:	d829      	bhi.n	8007fae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d104      	bne.n	8007f7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f9bc 	bl	80082f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7a:	e01d      	b.n	8007fb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	7bfa      	ldrb	r2, [r7, #15]
 8007f80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fefb 	bl	8008d84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fa7a 	bl	8008488 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa2:	e009      	b.n	8007fb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fac:	e004      	b.n	8007fb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f99e 	bl	80082f2 <USBD_CtlError>
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	885b      	ldrh	r3, [r3, #2]
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	4b4e      	ldr	r3, [pc, #312]	; (8008110 <USBD_SetConfig+0x150>)
 8007fd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fd8:	4b4d      	ldr	r3, [pc, #308]	; (8008110 <USBD_SetConfig+0x150>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d905      	bls.n	8007fec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f985 	bl	80082f2 <USBD_CtlError>
    return USBD_FAIL;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e08c      	b.n	8008106 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d002      	beq.n	8007ffe <USBD_SetConfig+0x3e>
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d029      	beq.n	8008050 <USBD_SetConfig+0x90>
 8007ffc:	e075      	b.n	80080ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ffe:	4b44      	ldr	r3, [pc, #272]	; (8008110 <USBD_SetConfig+0x150>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d020      	beq.n	8008048 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008006:	4b42      	ldr	r3, [pc, #264]	; (8008110 <USBD_SetConfig+0x150>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008010:	4b3f      	ldr	r3, [pc, #252]	; (8008110 <USBD_SetConfig+0x150>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7fe ffe7 	bl	8006fea <USBD_SetClassConfig>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d008      	beq.n	8008038 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f962 	bl	80082f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008036:	e065      	b.n	8008104 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fa25 	bl	8008488 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2203      	movs	r2, #3
 8008042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008046:	e05d      	b.n	8008104 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fa1d 	bl	8008488 <USBD_CtlSendStatus>
      break;
 800804e:	e059      	b.n	8008104 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008050:	4b2f      	ldr	r3, [pc, #188]	; (8008110 <USBD_SetConfig+0x150>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d112      	bne.n	800807e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008060:	4b2b      	ldr	r3, [pc, #172]	; (8008110 <USBD_SetConfig+0x150>)
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800806a:	4b29      	ldr	r3, [pc, #164]	; (8008110 <USBD_SetConfig+0x150>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fe ffd6 	bl	8007022 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa06 	bl	8008488 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800807c:	e042      	b.n	8008104 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800807e:	4b24      	ldr	r3, [pc, #144]	; (8008110 <USBD_SetConfig+0x150>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	429a      	cmp	r2, r3
 800808a:	d02a      	beq.n	80080e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	b2db      	uxtb	r3, r3
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7fe ffc4 	bl	8007022 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800809a:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <USBD_SetConfig+0x150>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080a4:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <USBD_SetConfig+0x150>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fe ff9d 	bl	8006fea <USBD_SetClassConfig>
 80080b0:	4603      	mov	r3, r0
 80080b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00f      	beq.n	80080da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f918 	bl	80082f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7fe ffa9 	bl	8007022 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080d8:	e014      	b.n	8008104 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f9d4 	bl	8008488 <USBD_CtlSendStatus>
      break;
 80080e0:	e010      	b.n	8008104 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f9d0 	bl	8008488 <USBD_CtlSendStatus>
      break;
 80080e8:	e00c      	b.n	8008104 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f900 	bl	80082f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080f2:	4b07      	ldr	r3, [pc, #28]	; (8008110 <USBD_SetConfig+0x150>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7fe ff92 	bl	8007022 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80080fe:	2303      	movs	r3, #3
 8008100:	73fb      	strb	r3, [r7, #15]
      break;
 8008102:	bf00      	nop
  }

  return ret;
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000238 	.word	0x20000238

08008114 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	88db      	ldrh	r3, [r3, #6]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d004      	beq.n	8008130 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f8e2 	bl	80082f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800812e:	e023      	b.n	8008178 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	dc02      	bgt.n	8008142 <USBD_GetConfig+0x2e>
 800813c:	2b00      	cmp	r3, #0
 800813e:	dc03      	bgt.n	8008148 <USBD_GetConfig+0x34>
 8008140:	e015      	b.n	800816e <USBD_GetConfig+0x5a>
 8008142:	2b03      	cmp	r3, #3
 8008144:	d00b      	beq.n	800815e <USBD_GetConfig+0x4a>
 8008146:	e012      	b.n	800816e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3308      	adds	r3, #8
 8008152:	2201      	movs	r2, #1
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f93c 	bl	80083d4 <USBD_CtlSendData>
        break;
 800815c:	e00c      	b.n	8008178 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3304      	adds	r3, #4
 8008162:	2201      	movs	r2, #1
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f934 	bl	80083d4 <USBD_CtlSendData>
        break;
 800816c:	e004      	b.n	8008178 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f8be 	bl	80082f2 <USBD_CtlError>
        break;
 8008176:	bf00      	nop
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008190:	b2db      	uxtb	r3, r3
 8008192:	3b01      	subs	r3, #1
 8008194:	2b02      	cmp	r3, #2
 8008196:	d81e      	bhi.n	80081d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	88db      	ldrh	r3, [r3, #6]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d004      	beq.n	80081aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f8a5 	bl	80082f2 <USBD_CtlError>
        break;
 80081a8:	e01a      	b.n	80081e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f043 0202 	orr.w	r2, r3, #2
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	330c      	adds	r3, #12
 80081ca:	2202      	movs	r2, #2
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f900 	bl	80083d4 <USBD_CtlSendData>
      break;
 80081d4:	e004      	b.n	80081e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f88a 	bl	80082f2 <USBD_CtlError>
      break;
 80081de:	bf00      	nop
  }
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d107      	bne.n	800820a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f940 	bl	8008488 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008208:	e013      	b.n	8008232 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	885b      	ldrh	r3, [r3, #2]
 800820e:	2b02      	cmp	r3, #2
 8008210:	d10b      	bne.n	800822a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	889b      	ldrh	r3, [r3, #4]
 8008216:	0a1b      	lsrs	r3, r3, #8
 8008218:	b29b      	uxth	r3, r3
 800821a:	b2da      	uxtb	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f930 	bl	8008488 <USBD_CtlSendStatus>
}
 8008228:	e003      	b.n	8008232 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f860 	bl	80082f2 <USBD_CtlError>
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824a:	b2db      	uxtb	r3, r3
 800824c:	3b01      	subs	r3, #1
 800824e:	2b02      	cmp	r3, #2
 8008250:	d80b      	bhi.n	800826a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	885b      	ldrh	r3, [r3, #2]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d10c      	bne.n	8008274 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f910 	bl	8008488 <USBD_CtlSendStatus>
      }
      break;
 8008268:	e004      	b.n	8008274 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f840 	bl	80082f2 <USBD_CtlError>
      break;
 8008272:	e000      	b.n	8008276 <USBD_ClrFeature+0x3c>
      break;
 8008274:	bf00      	nop
  }
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	3301      	adds	r3, #1
 8008298:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	781a      	ldrb	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff fa41 	bl	8007730 <SWAPBYTE>
 80082ae:	4603      	mov	r3, r0
 80082b0:	461a      	mov	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff fa34 	bl	8007730 <SWAPBYTE>
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f7ff fa27 	bl	8007730 <SWAPBYTE>
 80082e2:	4603      	mov	r3, r0
 80082e4:	461a      	mov	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	80da      	strh	r2, [r3, #6]
}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80082fc:	2180      	movs	r1, #128	; 0x80
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fcd6 	bl	8008cb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008304:	2100      	movs	r1, #0
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fcd2 	bl	8008cb0 <USBD_LL_StallEP>
}
 800830c:	bf00      	nop
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d036      	beq.n	8008398 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800832e:	6938      	ldr	r0, [r7, #16]
 8008330:	f000 f836 	bl	80083a0 <USBD_GetLen>
 8008334:	4603      	mov	r3, r0
 8008336:	3301      	adds	r3, #1
 8008338:	b29b      	uxth	r3, r3
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	4413      	add	r3, r2
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	7812      	ldrb	r2, [r2, #0]
 800834c:	701a      	strb	r2, [r3, #0]
  idx++;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	3301      	adds	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	4413      	add	r3, r2
 800835a:	2203      	movs	r2, #3
 800835c:	701a      	strb	r2, [r3, #0]
  idx++;
 800835e:	7dfb      	ldrb	r3, [r7, #23]
 8008360:	3301      	adds	r3, #1
 8008362:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008364:	e013      	b.n	800838e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	4413      	add	r3, r2
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	7812      	ldrb	r2, [r2, #0]
 8008370:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	3301      	adds	r3, #1
 8008376:	613b      	str	r3, [r7, #16]
    idx++;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	3301      	adds	r3, #1
 800837c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800837e:	7dfb      	ldrb	r3, [r7, #23]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	4413      	add	r3, r2
 8008384:	2200      	movs	r2, #0
 8008386:	701a      	strb	r2, [r3, #0]
    idx++;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	3301      	adds	r3, #1
 800838c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e7      	bne.n	8008366 <USBD_GetString+0x52>
 8008396:	e000      	b.n	800839a <USBD_GetString+0x86>
    return;
 8008398:	bf00      	nop
  }
}
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083b0:	e005      	b.n	80083be <USBD_GetLen+0x1e>
  {
    len++;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	3301      	adds	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	3301      	adds	r3, #1
 80083bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1f5      	bne.n	80083b2 <USBD_GetLen+0x12>
  }

  return len;
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	2100      	movs	r1, #0
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 fce1 	bl	8008dc2 <USBD_LL_Transmit>

  return USBD_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	2100      	movs	r1, #0
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 fcd0 	bl	8008dc2 <USBD_LL_Transmit>

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2203      	movs	r2, #3
 800843c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	2100      	movs	r1, #0
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 fcd4 	bl	8008e04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b084      	sub	sp, #16
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	2100      	movs	r1, #0
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 fcc3 	bl	8008e04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2204      	movs	r2, #4
 8008494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008498:	2300      	movs	r3, #0
 800849a:	2200      	movs	r2, #0
 800849c:	2100      	movs	r1, #0
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fc8f 	bl	8008dc2 <USBD_LL_Transmit>

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2205      	movs	r2, #5
 80084ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084be:	2300      	movs	r3, #0
 80084c0:	2200      	movs	r2, #0
 80084c2:	2100      	movs	r1, #0
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fc9d 	bl	8008e04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084d8:	2200      	movs	r2, #0
 80084da:	4912      	ldr	r1, [pc, #72]	; (8008524 <MX_USB_DEVICE_Init+0x50>)
 80084dc:	4812      	ldr	r0, [pc, #72]	; (8008528 <MX_USB_DEVICE_Init+0x54>)
 80084de:	f7fe fd07 	bl	8006ef0 <USBD_Init>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80084e8:	f7f8 fdc8 	bl	800107c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80084ec:	490f      	ldr	r1, [pc, #60]	; (800852c <MX_USB_DEVICE_Init+0x58>)
 80084ee:	480e      	ldr	r0, [pc, #56]	; (8008528 <MX_USB_DEVICE_Init+0x54>)
 80084f0:	f7fe fd2e 	bl	8006f50 <USBD_RegisterClass>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80084fa:	f7f8 fdbf 	bl	800107c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80084fe:	490c      	ldr	r1, [pc, #48]	; (8008530 <MX_USB_DEVICE_Init+0x5c>)
 8008500:	4809      	ldr	r0, [pc, #36]	; (8008528 <MX_USB_DEVICE_Init+0x54>)
 8008502:	f7fe fc1f 	bl	8006d44 <USBD_CDC_RegisterInterface>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800850c:	f7f8 fdb6 	bl	800107c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008510:	4805      	ldr	r0, [pc, #20]	; (8008528 <MX_USB_DEVICE_Init+0x54>)
 8008512:	f7fe fd53 	bl	8006fbc <USBD_Start>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800851c:	f7f8 fdae 	bl	800107c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008520:	bf00      	nop
 8008522:	bd80      	pop	{r7, pc}
 8008524:	200000c8 	.word	0x200000c8
 8008528:	2000023c 	.word	0x2000023c
 800852c:	20000034 	.word	0x20000034
 8008530:	200000b4 	.word	0x200000b4

08008534 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008538:	2200      	movs	r2, #0
 800853a:	4905      	ldr	r1, [pc, #20]	; (8008550 <CDC_Init_FS+0x1c>)
 800853c:	4805      	ldr	r0, [pc, #20]	; (8008554 <CDC_Init_FS+0x20>)
 800853e:	f7fe fc1b 	bl	8006d78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008542:	4905      	ldr	r1, [pc, #20]	; (8008558 <CDC_Init_FS+0x24>)
 8008544:	4803      	ldr	r0, [pc, #12]	; (8008554 <CDC_Init_FS+0x20>)
 8008546:	f7fe fc39 	bl	8006dbc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800854a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800854c:	4618      	mov	r0, r3
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20000918 	.word	0x20000918
 8008554:	2000023c 	.word	0x2000023c
 8008558:	20000518 	.word	0x20000518

0800855c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008560:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008562:	4618      	mov	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	6039      	str	r1, [r7, #0]
 8008576:	71fb      	strb	r3, [r7, #7]
 8008578:	4613      	mov	r3, r2
 800857a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	2b23      	cmp	r3, #35	; 0x23
 8008580:	d84a      	bhi.n	8008618 <CDC_Control_FS+0xac>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <CDC_Control_FS+0x1c>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	08008619 	.word	0x08008619
 800858c:	08008619 	.word	0x08008619
 8008590:	08008619 	.word	0x08008619
 8008594:	08008619 	.word	0x08008619
 8008598:	08008619 	.word	0x08008619
 800859c:	08008619 	.word	0x08008619
 80085a0:	08008619 	.word	0x08008619
 80085a4:	08008619 	.word	0x08008619
 80085a8:	08008619 	.word	0x08008619
 80085ac:	08008619 	.word	0x08008619
 80085b0:	08008619 	.word	0x08008619
 80085b4:	08008619 	.word	0x08008619
 80085b8:	08008619 	.word	0x08008619
 80085bc:	08008619 	.word	0x08008619
 80085c0:	08008619 	.word	0x08008619
 80085c4:	08008619 	.word	0x08008619
 80085c8:	08008619 	.word	0x08008619
 80085cc:	08008619 	.word	0x08008619
 80085d0:	08008619 	.word	0x08008619
 80085d4:	08008619 	.word	0x08008619
 80085d8:	08008619 	.word	0x08008619
 80085dc:	08008619 	.word	0x08008619
 80085e0:	08008619 	.word	0x08008619
 80085e4:	08008619 	.word	0x08008619
 80085e8:	08008619 	.word	0x08008619
 80085ec:	08008619 	.word	0x08008619
 80085f0:	08008619 	.word	0x08008619
 80085f4:	08008619 	.word	0x08008619
 80085f8:	08008619 	.word	0x08008619
 80085fc:	08008619 	.word	0x08008619
 8008600:	08008619 	.word	0x08008619
 8008604:	08008619 	.word	0x08008619
 8008608:	08008619 	.word	0x08008619
 800860c:	08008619 	.word	0x08008619
 8008610:	08008619 	.word	0x08008619
 8008614:	08008619 	.word	0x08008619
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008618:	bf00      	nop
  }

  return (USBD_OK);
 800861a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	4805      	ldr	r0, [pc, #20]	; (800864c <CDC_Receive_FS+0x24>)
 8008636:	f7fe fbc1 	bl	8006dbc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800863a:	4804      	ldr	r0, [pc, #16]	; (800864c <CDC_Receive_FS+0x24>)
 800863c:	f7fe fc22 	bl	8006e84 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008640:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	2000023c 	.word	0x2000023c

08008650 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008660:	4b0d      	ldr	r3, [pc, #52]	; (8008698 <CDC_Transmit_FS+0x48>)
 8008662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008666:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008672:	2301      	movs	r3, #1
 8008674:	e00b      	b.n	800868e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008676:	887b      	ldrh	r3, [r7, #2]
 8008678:	461a      	mov	r2, r3
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4806      	ldr	r0, [pc, #24]	; (8008698 <CDC_Transmit_FS+0x48>)
 800867e:	f7fe fb7b 	bl	8006d78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008682:	4805      	ldr	r0, [pc, #20]	; (8008698 <CDC_Transmit_FS+0x48>)
 8008684:	f7fe fbb8 	bl	8006df8 <USBD_CDC_TransmitPacket>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	2000023c 	.word	0x2000023c

0800869c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4613      	mov	r3, r2
 80086a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	6039      	str	r1, [r7, #0]
 80086ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2212      	movs	r2, #18
 80086d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086d2:	4b03      	ldr	r3, [pc, #12]	; (80086e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	200000e4 	.word	0x200000e4

080086e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	6039      	str	r1, [r7, #0]
 80086ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2204      	movs	r2, #4
 80086f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086f6:	4b03      	ldr	r3, [pc, #12]	; (8008704 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	200000f8 	.word	0x200000f8

08008708 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d105      	bne.n	8008726 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	4907      	ldr	r1, [pc, #28]	; (800873c <USBD_FS_ProductStrDescriptor+0x34>)
 800871e:	4808      	ldr	r0, [pc, #32]	; (8008740 <USBD_FS_ProductStrDescriptor+0x38>)
 8008720:	f7ff fdf8 	bl	8008314 <USBD_GetString>
 8008724:	e004      	b.n	8008730 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	4904      	ldr	r1, [pc, #16]	; (800873c <USBD_FS_ProductStrDescriptor+0x34>)
 800872a:	4805      	ldr	r0, [pc, #20]	; (8008740 <USBD_FS_ProductStrDescriptor+0x38>)
 800872c:	f7ff fdf2 	bl	8008314 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000d18 	.word	0x20000d18
 8008740:	08008f64 	.word	0x08008f64

08008744 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	6039      	str	r1, [r7, #0]
 800874e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	4904      	ldr	r1, [pc, #16]	; (8008764 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008754:	4804      	ldr	r0, [pc, #16]	; (8008768 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008756:	f7ff fddd 	bl	8008314 <USBD_GetString>
  return USBD_StrDesc;
 800875a:	4b02      	ldr	r3, [pc, #8]	; (8008764 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800875c:	4618      	mov	r0, r3
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	20000d18 	.word	0x20000d18
 8008768:	08008f7c 	.word	0x08008f7c

0800876c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	6039      	str	r1, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	221a      	movs	r2, #26
 800877c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800877e:	f000 f843 	bl	8008808 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008782:	4b02      	ldr	r3, [pc, #8]	; (800878c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	200000fc 	.word	0x200000fc

08008790 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	4603      	mov	r3, r0
 8008798:	6039      	str	r1, [r7, #0]
 800879a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d105      	bne.n	80087ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	4907      	ldr	r1, [pc, #28]	; (80087c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087a6:	4808      	ldr	r0, [pc, #32]	; (80087c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087a8:	f7ff fdb4 	bl	8008314 <USBD_GetString>
 80087ac:	e004      	b.n	80087b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	4904      	ldr	r1, [pc, #16]	; (80087c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087b2:	4805      	ldr	r0, [pc, #20]	; (80087c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087b4:	f7ff fdae 	bl	8008314 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087b8:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000d18 	.word	0x20000d18
 80087c8:	08008f90 	.word	0x08008f90

080087cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	6039      	str	r1, [r7, #0]
 80087d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d105      	bne.n	80087ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	4907      	ldr	r1, [pc, #28]	; (8008800 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087e2:	4808      	ldr	r0, [pc, #32]	; (8008804 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087e4:	f7ff fd96 	bl	8008314 <USBD_GetString>
 80087e8:	e004      	b.n	80087f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	4904      	ldr	r1, [pc, #16]	; (8008800 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087ee:	4805      	ldr	r0, [pc, #20]	; (8008804 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087f0:	f7ff fd90 	bl	8008314 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f4:	4b02      	ldr	r3, [pc, #8]	; (8008800 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	20000d18 	.word	0x20000d18
 8008804:	08008f9c 	.word	0x08008f9c

08008808 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800880e:	4b0f      	ldr	r3, [pc, #60]	; (800884c <Get_SerialNum+0x44>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008814:	4b0e      	ldr	r3, [pc, #56]	; (8008850 <Get_SerialNum+0x48>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800881a:	4b0e      	ldr	r3, [pc, #56]	; (8008854 <Get_SerialNum+0x4c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4413      	add	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800882e:	2208      	movs	r2, #8
 8008830:	4909      	ldr	r1, [pc, #36]	; (8008858 <Get_SerialNum+0x50>)
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 f814 	bl	8008860 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008838:	2204      	movs	r2, #4
 800883a:	4908      	ldr	r1, [pc, #32]	; (800885c <Get_SerialNum+0x54>)
 800883c:	68b8      	ldr	r0, [r7, #8]
 800883e:	f000 f80f 	bl	8008860 <IntToUnicode>
  }
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	1fff7a10 	.word	0x1fff7a10
 8008850:	1fff7a14 	.word	0x1fff7a14
 8008854:	1fff7a18 	.word	0x1fff7a18
 8008858:	200000fe 	.word	0x200000fe
 800885c:	2000010e 	.word	0x2000010e

08008860 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	4613      	mov	r3, r2
 800886c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008872:	2300      	movs	r3, #0
 8008874:	75fb      	strb	r3, [r7, #23]
 8008876:	e027      	b.n	80088c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	0f1b      	lsrs	r3, r3, #28
 800887c:	2b09      	cmp	r3, #9
 800887e:	d80b      	bhi.n	8008898 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	0f1b      	lsrs	r3, r3, #28
 8008884:	b2da      	uxtb	r2, r3
 8008886:	7dfb      	ldrb	r3, [r7, #23]
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	4619      	mov	r1, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	440b      	add	r3, r1
 8008890:	3230      	adds	r2, #48	; 0x30
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	e00a      	b.n	80088ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	0f1b      	lsrs	r3, r3, #28
 800889c:	b2da      	uxtb	r2, r3
 800889e:	7dfb      	ldrb	r3, [r7, #23]
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	4619      	mov	r1, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	440b      	add	r3, r1
 80088a8:	3237      	adds	r2, #55	; 0x37
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	011b      	lsls	r3, r3, #4
 80088b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	3301      	adds	r3, #1
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	4413      	add	r3, r2
 80088be:	2200      	movs	r2, #0
 80088c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	3301      	adds	r3, #1
 80088c6:	75fb      	strb	r3, [r7, #23]
 80088c8:	7dfa      	ldrb	r2, [r7, #23]
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d3d3      	bcc.n	8008878 <IntToUnicode+0x18>
  }
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
	...

080088e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b08a      	sub	sp, #40	; 0x28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e8:	f107 0314 	add.w	r3, r7, #20
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	605a      	str	r2, [r3, #4]
 80088f2:	609a      	str	r2, [r3, #8]
 80088f4:	60da      	str	r2, [r3, #12]
 80088f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008900:	d13a      	bne.n	8008978 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008902:	2300      	movs	r3, #0
 8008904:	613b      	str	r3, [r7, #16]
 8008906:	4b1e      	ldr	r3, [pc, #120]	; (8008980 <HAL_PCD_MspInit+0xa0>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	4a1d      	ldr	r2, [pc, #116]	; (8008980 <HAL_PCD_MspInit+0xa0>)
 800890c:	f043 0301 	orr.w	r3, r3, #1
 8008910:	6313      	str	r3, [r2, #48]	; 0x30
 8008912:	4b1b      	ldr	r3, [pc, #108]	; (8008980 <HAL_PCD_MspInit+0xa0>)
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800891e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008924:	2302      	movs	r3, #2
 8008926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008928:	2300      	movs	r3, #0
 800892a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800892c:	2303      	movs	r3, #3
 800892e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008930:	230a      	movs	r3, #10
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008934:	f107 0314 	add.w	r3, r7, #20
 8008938:	4619      	mov	r1, r3
 800893a:	4812      	ldr	r0, [pc, #72]	; (8008984 <HAL_PCD_MspInit+0xa4>)
 800893c:	f7f9 f8f4 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008940:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <HAL_PCD_MspInit+0xa0>)
 8008942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008944:	4a0e      	ldr	r2, [pc, #56]	; (8008980 <HAL_PCD_MspInit+0xa0>)
 8008946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894a:	6353      	str	r3, [r2, #52]	; 0x34
 800894c:	2300      	movs	r3, #0
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <HAL_PCD_MspInit+0xa0>)
 8008952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008954:	4a0a      	ldr	r2, [pc, #40]	; (8008980 <HAL_PCD_MspInit+0xa0>)
 8008956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800895a:	6453      	str	r3, [r2, #68]	; 0x44
 800895c:	4b08      	ldr	r3, [pc, #32]	; (8008980 <HAL_PCD_MspInit+0xa0>)
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008968:	2200      	movs	r2, #0
 800896a:	2100      	movs	r1, #0
 800896c:	2043      	movs	r0, #67	; 0x43
 800896e:	f7f9 f8a4 	bl	8001aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008972:	2043      	movs	r0, #67	; 0x43
 8008974:	f7f9 f8bd 	bl	8001af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008978:	bf00      	nop
 800897a:	3728      	adds	r7, #40	; 0x28
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	40023800 	.word	0x40023800
 8008984:	40020000 	.word	0x40020000

08008988 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800899c:	4619      	mov	r1, r3
 800899e:	4610      	mov	r0, r2
 80089a0:	f7fe fb59 	bl	8007056 <USBD_LL_SetupStage>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	4613      	mov	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
 80089cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	4619      	mov	r1, r3
 80089d6:	f7fe fb93 	bl	8007100 <USBD_LL_DataOutStage>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	460b      	mov	r3, r1
 80089ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4613      	mov	r3, r2
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	334c      	adds	r3, #76	; 0x4c
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f7fe fc2c 	bl	8007266 <USBD_LL_DataInStage>
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe fd60 	bl	80074ea <USBD_LL_SOF>
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d001      	beq.n	8008a4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a46:	f7f8 fb19 	bl	800107c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a50:	7bfa      	ldrb	r2, [r7, #15]
 8008a52:	4611      	mov	r1, r2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7fe fd0a 	bl	800746e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fe fcb2 	bl	80073ca <USBD_LL_Reset>
}
 8008a66:	bf00      	nop
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fd05 	bl	800748e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6812      	ldr	r2, [r2, #0]
 8008a92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <HAL_PCD_SuspendCallback+0x48>)
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	4a03      	ldr	r2, [pc, #12]	; (8008ab8 <HAL_PCD_SuspendCallback+0x48>)
 8008aaa:	f043 0306 	orr.w	r3, r3, #6
 8008aae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	e000ed00 	.word	0xe000ed00

08008abc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fcf5 	bl	80074ba <USBD_LL_Resume>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aea:	78fa      	ldrb	r2, [r7, #3]
 8008aec:	4611      	mov	r1, r2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe fd4d 	bl	800758e <USBD_LL_IsoOUTIncomplete>
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	4611      	mov	r1, r2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fd09 	bl	800752a <USBD_LL_IsoINIncomplete>
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fd5f 	bl	80075f2 <USBD_LL_DevConnected>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe fd5c 	bl	8007608 <USBD_LL_DevDisconnected>
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d13c      	bne.n	8008be2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b68:	4a20      	ldr	r2, [pc, #128]	; (8008bec <USBD_LL_Init+0x94>)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a1e      	ldr	r2, [pc, #120]	; (8008bec <USBD_LL_Init+0x94>)
 8008b74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b78:	4b1c      	ldr	r3, [pc, #112]	; (8008bec <USBD_LL_Init+0x94>)
 8008b7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b80:	4b1a      	ldr	r3, [pc, #104]	; (8008bec <USBD_LL_Init+0x94>)
 8008b82:	2204      	movs	r2, #4
 8008b84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b86:	4b19      	ldr	r3, [pc, #100]	; (8008bec <USBD_LL_Init+0x94>)
 8008b88:	2202      	movs	r2, #2
 8008b8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b8c:	4b17      	ldr	r3, [pc, #92]	; (8008bec <USBD_LL_Init+0x94>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b92:	4b16      	ldr	r3, [pc, #88]	; (8008bec <USBD_LL_Init+0x94>)
 8008b94:	2202      	movs	r2, #2
 8008b96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b98:	4b14      	ldr	r3, [pc, #80]	; (8008bec <USBD_LL_Init+0x94>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b9e:	4b13      	ldr	r3, [pc, #76]	; (8008bec <USBD_LL_Init+0x94>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ba4:	4b11      	ldr	r3, [pc, #68]	; (8008bec <USBD_LL_Init+0x94>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008baa:	4b10      	ldr	r3, [pc, #64]	; (8008bec <USBD_LL_Init+0x94>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008bb0:	4b0e      	ldr	r3, [pc, #56]	; (8008bec <USBD_LL_Init+0x94>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bb6:	480d      	ldr	r0, [pc, #52]	; (8008bec <USBD_LL_Init+0x94>)
 8008bb8:	f7f9 f9a9 	bl	8001f0e <HAL_PCD_Init>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008bc2:	f7f8 fa5b 	bl	800107c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008bc6:	2180      	movs	r1, #128	; 0x80
 8008bc8:	4808      	ldr	r0, [pc, #32]	; (8008bec <USBD_LL_Init+0x94>)
 8008bca:	f7fa fc00 	bl	80033ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bce:	2240      	movs	r2, #64	; 0x40
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4806      	ldr	r0, [pc, #24]	; (8008bec <USBD_LL_Init+0x94>)
 8008bd4:	f7fa fbb4 	bl	8003340 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008bd8:	2280      	movs	r2, #128	; 0x80
 8008bda:	2101      	movs	r1, #1
 8008bdc:	4803      	ldr	r0, [pc, #12]	; (8008bec <USBD_LL_Init+0x94>)
 8008bde:	f7fa fbaf 	bl	8003340 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	20000f18 	.word	0x20000f18

08008bf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f9 fa9e 	bl	8002148 <HAL_PCD_Start>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 f942 	bl	8008e9c <USBD_Get_USB_Status>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	4608      	mov	r0, r1
 8008c30:	4611      	mov	r1, r2
 8008c32:	461a      	mov	r2, r3
 8008c34:	4603      	mov	r3, r0
 8008c36:	70fb      	strb	r3, [r7, #3]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70bb      	strb	r3, [r7, #2]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c4e:	78bb      	ldrb	r3, [r7, #2]
 8008c50:	883a      	ldrh	r2, [r7, #0]
 8008c52:	78f9      	ldrb	r1, [r7, #3]
 8008c54:	f7f9 ff6f 	bl	8002b36 <HAL_PCD_EP_Open>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 f91c 	bl	8008e9c <USBD_Get_USB_Status>
 8008c64:	4603      	mov	r3, r0
 8008c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c8c:	78fa      	ldrb	r2, [r7, #3]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7f9 ffb8 	bl	8002c06 <HAL_PCD_EP_Close>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f8fd 	bl	8008e9c <USBD_Get_USB_Status>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008cca:	78fa      	ldrb	r2, [r7, #3]
 8008ccc:	4611      	mov	r1, r2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fa f890 	bl	8002df4 <HAL_PCD_EP_SetStall>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 f8de 	bl	8008e9c <USBD_Get_USB_Status>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fa f8d5 	bl	8002ebc <HAL_PCD_EP_ClrStall>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 f8bf 	bl	8008e9c <USBD_Get_USB_Status>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	da0b      	bge.n	8008d60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	333e      	adds	r3, #62	; 0x3e
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	e00b      	b.n	8008d78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d66:	68f9      	ldr	r1, [r7, #12]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	00db      	lsls	r3, r3, #3
 8008d6c:	4413      	add	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	440b      	add	r3, r1
 8008d72:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008d76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d9e:	78fa      	ldrb	r2, [r7, #3]
 8008da0:	4611      	mov	r1, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7f9 fea2 	bl	8002aec <HAL_PCD_SetAddress>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 f874 	bl	8008e9c <USBD_Get_USB_Status>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b086      	sub	sp, #24
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008de0:	7af9      	ldrb	r1, [r7, #11]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	f7f9 ffbb 	bl	8002d60 <HAL_PCD_EP_Transmit>
 8008dea:	4603      	mov	r3, r0
 8008dec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 f853 	bl	8008e9c <USBD_Get_USB_Status>
 8008df6:	4603      	mov	r3, r0
 8008df8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3718      	adds	r7, #24
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	607a      	str	r2, [r7, #4]
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	460b      	mov	r3, r1
 8008e12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e22:	7af9      	ldrb	r1, [r7, #11]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	f7f9 ff37 	bl	8002c9a <HAL_PCD_EP_Receive>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 f832 	bl	8008e9c <USBD_Get_USB_Status>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b082      	sub	sp, #8
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7f9 ff67 	bl	8002d30 <HAL_PCD_EP_GetRxCount>
 8008e62:	4603      	mov	r3, r0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008e74:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <USBD_static_malloc+0x18>)
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20001424 	.word	0x20001424

08008e88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]

}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d817      	bhi.n	8008ee0 <USBD_Get_USB_Status+0x44>
 8008eb0:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <USBD_Get_USB_Status+0x1c>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008ec9 	.word	0x08008ec9
 8008ebc:	08008ecf 	.word	0x08008ecf
 8008ec0:	08008ed5 	.word	0x08008ed5
 8008ec4:	08008edb 	.word	0x08008edb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
    break;
 8008ecc:	e00b      	b.n	8008ee6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed2:	e008      	b.n	8008ee6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed8:	e005      	b.n	8008ee6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eda:	2303      	movs	r3, #3
 8008edc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ede:	e002      	b.n	8008ee6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ee4:	bf00      	nop
  }
  return usb_status;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <__libc_init_array>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	4d0d      	ldr	r5, [pc, #52]	; (8008f2c <__libc_init_array+0x38>)
 8008ef8:	4c0d      	ldr	r4, [pc, #52]	; (8008f30 <__libc_init_array+0x3c>)
 8008efa:	1b64      	subs	r4, r4, r5
 8008efc:	10a4      	asrs	r4, r4, #2
 8008efe:	2600      	movs	r6, #0
 8008f00:	42a6      	cmp	r6, r4
 8008f02:	d109      	bne.n	8008f18 <__libc_init_array+0x24>
 8008f04:	4d0b      	ldr	r5, [pc, #44]	; (8008f34 <__libc_init_array+0x40>)
 8008f06:	4c0c      	ldr	r4, [pc, #48]	; (8008f38 <__libc_init_array+0x44>)
 8008f08:	f000 f820 	bl	8008f4c <_init>
 8008f0c:	1b64      	subs	r4, r4, r5
 8008f0e:	10a4      	asrs	r4, r4, #2
 8008f10:	2600      	movs	r6, #0
 8008f12:	42a6      	cmp	r6, r4
 8008f14:	d105      	bne.n	8008f22 <__libc_init_array+0x2e>
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f1c:	4798      	blx	r3
 8008f1e:	3601      	adds	r6, #1
 8008f20:	e7ee      	b.n	8008f00 <__libc_init_array+0xc>
 8008f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f26:	4798      	blx	r3
 8008f28:	3601      	adds	r6, #1
 8008f2a:	e7f2      	b.n	8008f12 <__libc_init_array+0x1e>
 8008f2c:	08008fc4 	.word	0x08008fc4
 8008f30:	08008fc4 	.word	0x08008fc4
 8008f34:	08008fc4 	.word	0x08008fc4
 8008f38:	08008fc8 	.word	0x08008fc8

08008f3c <memset>:
 8008f3c:	4402      	add	r2, r0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d100      	bne.n	8008f46 <memset+0xa>
 8008f44:	4770      	bx	lr
 8008f46:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4a:	e7f9      	b.n	8008f40 <memset+0x4>

08008f4c <_init>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	bf00      	nop
 8008f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f52:	bc08      	pop	{r3}
 8008f54:	469e      	mov	lr, r3
 8008f56:	4770      	bx	lr

08008f58 <_fini>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	bf00      	nop
 8008f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f5e:	bc08      	pop	{r3}
 8008f60:	469e      	mov	lr, r3
 8008f62:	4770      	bx	lr
