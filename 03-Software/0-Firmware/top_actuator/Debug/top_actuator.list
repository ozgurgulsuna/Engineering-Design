
top_actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009250  08009250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a8  080092a8  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092b0  080092b0  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092b0  080092b0  000192b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  080092b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001534  20000128  080093e0  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000165c  080093e0  0002165c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014002  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003052  00000000  00000000  0003415a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000371b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00038260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f71  00000000  00000000  000391b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001423d  00000000  00000000  00052129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eebb  00000000  00000000  00066366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004778  00000000  00000000  000f5274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000128 	.word	0x20000128
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009238 	.word	0x08009238

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000012c 	.word	0x2000012c
 80001d4:	08009238 	.word	0x08009238

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	; 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__gedf2>:
 80007b8:	f04f 3cff 	mov.w	ip, #4294967295
 80007bc:	e006      	b.n	80007cc <__cmpdf2+0x4>
 80007be:	bf00      	nop

080007c0 <__ledf2>:
 80007c0:	f04f 0c01 	mov.w	ip, #1
 80007c4:	e002      	b.n	80007cc <__cmpdf2+0x4>
 80007c6:	bf00      	nop

080007c8 <__cmpdf2>:
 80007c8:	f04f 0c01 	mov.w	ip, #1
 80007cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007dc:	bf18      	it	ne
 80007de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e2:	d01b      	beq.n	800081c <__cmpdf2+0x54>
 80007e4:	b001      	add	sp, #4
 80007e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ea:	bf0c      	ite	eq
 80007ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f0:	ea91 0f03 	teqne	r1, r3
 80007f4:	bf02      	ittt	eq
 80007f6:	ea90 0f02 	teqeq	r0, r2
 80007fa:	2000      	moveq	r0, #0
 80007fc:	4770      	bxeq	lr
 80007fe:	f110 0f00 	cmn.w	r0, #0
 8000802:	ea91 0f03 	teq	r1, r3
 8000806:	bf58      	it	pl
 8000808:	4299      	cmppl	r1, r3
 800080a:	bf08      	it	eq
 800080c:	4290      	cmpeq	r0, r2
 800080e:	bf2c      	ite	cs
 8000810:	17d8      	asrcs	r0, r3, #31
 8000812:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000816:	f040 0001 	orr.w	r0, r0, #1
 800081a:	4770      	bx	lr
 800081c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000824:	d102      	bne.n	800082c <__cmpdf2+0x64>
 8000826:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082a:	d107      	bne.n	800083c <__cmpdf2+0x74>
 800082c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000834:	d1d6      	bne.n	80007e4 <__cmpdf2+0x1c>
 8000836:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083a:	d0d3      	beq.n	80007e4 <__cmpdf2+0x1c>
 800083c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_cdrcmple>:
 8000844:	4684      	mov	ip, r0
 8000846:	4610      	mov	r0, r2
 8000848:	4662      	mov	r2, ip
 800084a:	468c      	mov	ip, r1
 800084c:	4619      	mov	r1, r3
 800084e:	4663      	mov	r3, ip
 8000850:	e000      	b.n	8000854 <__aeabi_cdcmpeq>
 8000852:	bf00      	nop

08000854 <__aeabi_cdcmpeq>:
 8000854:	b501      	push	{r0, lr}
 8000856:	f7ff ffb7 	bl	80007c8 <__cmpdf2>
 800085a:	2800      	cmp	r0, #0
 800085c:	bf48      	it	mi
 800085e:	f110 0f00 	cmnmi.w	r0, #0
 8000862:	bd01      	pop	{r0, pc}

08000864 <__aeabi_dcmpeq>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff fff4 	bl	8000854 <__aeabi_cdcmpeq>
 800086c:	bf0c      	ite	eq
 800086e:	2001      	moveq	r0, #1
 8000870:	2000      	movne	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmplt>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffea 	bl	8000854 <__aeabi_cdcmpeq>
 8000880:	bf34      	ite	cc
 8000882:	2001      	movcc	r0, #1
 8000884:	2000      	movcs	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmple>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffe0 	bl	8000854 <__aeabi_cdcmpeq>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpge>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffce 	bl	8000844 <__aeabi_cdrcmple>
 80008a8:	bf94      	ite	ls
 80008aa:	2001      	movls	r0, #1
 80008ac:	2000      	movhi	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_dcmpgt>:
 80008b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008b8:	f7ff ffc4 	bl	8000844 <__aeabi_cdrcmple>
 80008bc:	bf34      	ite	cc
 80008be:	2001      	movcc	r0, #1
 80008c0:	2000      	movcs	r0, #0
 80008c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008c6:	bf00      	nop

080008c8 <__aeabi_d2iz>:
 80008c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008d0:	d215      	bcs.n	80008fe <__aeabi_d2iz+0x36>
 80008d2:	d511      	bpl.n	80008f8 <__aeabi_d2iz+0x30>
 80008d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008dc:	d912      	bls.n	8000904 <__aeabi_d2iz+0x3c>
 80008de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008ee:	fa23 f002 	lsr.w	r0, r3, r2
 80008f2:	bf18      	it	ne
 80008f4:	4240      	negne	r0, r0
 80008f6:	4770      	bx	lr
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	4770      	bx	lr
 80008fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000902:	d105      	bne.n	8000910 <__aeabi_d2iz+0x48>
 8000904:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000908:	bf08      	it	eq
 800090a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_uldivmod>:
 8000918:	b953      	cbnz	r3, 8000930 <__aeabi_uldivmod+0x18>
 800091a:	b94a      	cbnz	r2, 8000930 <__aeabi_uldivmod+0x18>
 800091c:	2900      	cmp	r1, #0
 800091e:	bf08      	it	eq
 8000920:	2800      	cmpeq	r0, #0
 8000922:	bf1c      	itt	ne
 8000924:	f04f 31ff 	movne.w	r1, #4294967295
 8000928:	f04f 30ff 	movne.w	r0, #4294967295
 800092c:	f000 b974 	b.w	8000c18 <__aeabi_idiv0>
 8000930:	f1ad 0c08 	sub.w	ip, sp, #8
 8000934:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000938:	f000 f806 	bl	8000948 <__udivmoddi4>
 800093c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000940:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000944:	b004      	add	sp, #16
 8000946:	4770      	bx	lr

08000948 <__udivmoddi4>:
 8000948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800094c:	9d08      	ldr	r5, [sp, #32]
 800094e:	4604      	mov	r4, r0
 8000950:	468e      	mov	lr, r1
 8000952:	2b00      	cmp	r3, #0
 8000954:	d14d      	bne.n	80009f2 <__udivmoddi4+0xaa>
 8000956:	428a      	cmp	r2, r1
 8000958:	4694      	mov	ip, r2
 800095a:	d969      	bls.n	8000a30 <__udivmoddi4+0xe8>
 800095c:	fab2 f282 	clz	r2, r2
 8000960:	b152      	cbz	r2, 8000978 <__udivmoddi4+0x30>
 8000962:	fa01 f302 	lsl.w	r3, r1, r2
 8000966:	f1c2 0120 	rsb	r1, r2, #32
 800096a:	fa20 f101 	lsr.w	r1, r0, r1
 800096e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000972:	ea41 0e03 	orr.w	lr, r1, r3
 8000976:	4094      	lsls	r4, r2
 8000978:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800097c:	0c21      	lsrs	r1, r4, #16
 800097e:	fbbe f6f8 	udiv	r6, lr, r8
 8000982:	fa1f f78c 	uxth.w	r7, ip
 8000986:	fb08 e316 	mls	r3, r8, r6, lr
 800098a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800098e:	fb06 f107 	mul.w	r1, r6, r7
 8000992:	4299      	cmp	r1, r3
 8000994:	d90a      	bls.n	80009ac <__udivmoddi4+0x64>
 8000996:	eb1c 0303 	adds.w	r3, ip, r3
 800099a:	f106 30ff 	add.w	r0, r6, #4294967295
 800099e:	f080 811f 	bcs.w	8000be0 <__udivmoddi4+0x298>
 80009a2:	4299      	cmp	r1, r3
 80009a4:	f240 811c 	bls.w	8000be0 <__udivmoddi4+0x298>
 80009a8:	3e02      	subs	r6, #2
 80009aa:	4463      	add	r3, ip
 80009ac:	1a5b      	subs	r3, r3, r1
 80009ae:	b2a4      	uxth	r4, r4
 80009b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009b4:	fb08 3310 	mls	r3, r8, r0, r3
 80009b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009bc:	fb00 f707 	mul.w	r7, r0, r7
 80009c0:	42a7      	cmp	r7, r4
 80009c2:	d90a      	bls.n	80009da <__udivmoddi4+0x92>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80009cc:	f080 810a 	bcs.w	8000be4 <__udivmoddi4+0x29c>
 80009d0:	42a7      	cmp	r7, r4
 80009d2:	f240 8107 	bls.w	8000be4 <__udivmoddi4+0x29c>
 80009d6:	4464      	add	r4, ip
 80009d8:	3802      	subs	r0, #2
 80009da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009de:	1be4      	subs	r4, r4, r7
 80009e0:	2600      	movs	r6, #0
 80009e2:	b11d      	cbz	r5, 80009ec <__udivmoddi4+0xa4>
 80009e4:	40d4      	lsrs	r4, r2
 80009e6:	2300      	movs	r3, #0
 80009e8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d909      	bls.n	8000a0a <__udivmoddi4+0xc2>
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	f000 80ef 	beq.w	8000bda <__udivmoddi4+0x292>
 80009fc:	2600      	movs	r6, #0
 80009fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000a02:	4630      	mov	r0, r6
 8000a04:	4631      	mov	r1, r6
 8000a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0a:	fab3 f683 	clz	r6, r3
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d14a      	bne.n	8000aa8 <__udivmoddi4+0x160>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0xd4>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 80f9 	bhi.w	8000c0e <__udivmoddi4+0x2c6>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	469e      	mov	lr, r3
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0e0      	beq.n	80009ec <__udivmoddi4+0xa4>
 8000a2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a2e:	e7dd      	b.n	80009ec <__udivmoddi4+0xa4>
 8000a30:	b902      	cbnz	r2, 8000a34 <__udivmoddi4+0xec>
 8000a32:	deff      	udf	#255	; 0xff
 8000a34:	fab2 f282 	clz	r2, r2
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	f040 8092 	bne.w	8000b62 <__udivmoddi4+0x21a>
 8000a3e:	eba1 010c 	sub.w	r1, r1, ip
 8000a42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	2601      	movs	r6, #1
 8000a4c:	0c20      	lsrs	r0, r4, #16
 8000a4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a52:	fb07 1113 	mls	r1, r7, r3, r1
 8000a56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a5a:	fb0e f003 	mul.w	r0, lr, r3
 8000a5e:	4288      	cmp	r0, r1
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x12c>
 8000a62:	eb1c 0101 	adds.w	r1, ip, r1
 8000a66:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a6a:	d202      	bcs.n	8000a72 <__udivmoddi4+0x12a>
 8000a6c:	4288      	cmp	r0, r1
 8000a6e:	f200 80cb 	bhi.w	8000c08 <__udivmoddi4+0x2c0>
 8000a72:	4643      	mov	r3, r8
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000a80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a84:	fb0e fe00 	mul.w	lr, lr, r0
 8000a88:	45a6      	cmp	lr, r4
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x156>
 8000a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a94:	d202      	bcs.n	8000a9c <__udivmoddi4+0x154>
 8000a96:	45a6      	cmp	lr, r4
 8000a98:	f200 80bb 	bhi.w	8000c12 <__udivmoddi4+0x2ca>
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aa6:	e79c      	b.n	80009e2 <__udivmoddi4+0x9a>
 8000aa8:	f1c6 0720 	rsb	r7, r6, #32
 8000aac:	40b3      	lsls	r3, r6
 8000aae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ab2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab6:	fa20 f407 	lsr.w	r4, r0, r7
 8000aba:	fa01 f306 	lsl.w	r3, r1, r6
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	40f9      	lsrs	r1, r7
 8000ac2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac6:	fa00 f306 	lsl.w	r3, r0, r6
 8000aca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ace:	0c20      	lsrs	r0, r4, #16
 8000ad0:	fa1f fe8c 	uxth.w	lr, ip
 8000ad4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ad8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000adc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ae0:	4288      	cmp	r0, r1
 8000ae2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ae6:	d90b      	bls.n	8000b00 <__udivmoddi4+0x1b8>
 8000ae8:	eb1c 0101 	adds.w	r1, ip, r1
 8000aec:	f108 3aff 	add.w	sl, r8, #4294967295
 8000af0:	f080 8088 	bcs.w	8000c04 <__udivmoddi4+0x2bc>
 8000af4:	4288      	cmp	r0, r1
 8000af6:	f240 8085 	bls.w	8000c04 <__udivmoddi4+0x2bc>
 8000afa:	f1a8 0802 	sub.w	r8, r8, #2
 8000afe:	4461      	add	r1, ip
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b08:	fb09 1110 	mls	r1, r9, r0, r1
 8000b0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b14:	458e      	cmp	lr, r1
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x1e2>
 8000b18:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b20:	d26c      	bcs.n	8000bfc <__udivmoddi4+0x2b4>
 8000b22:	458e      	cmp	lr, r1
 8000b24:	d96a      	bls.n	8000bfc <__udivmoddi4+0x2b4>
 8000b26:	3802      	subs	r0, #2
 8000b28:	4461      	add	r1, ip
 8000b2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000b32:	eba1 010e 	sub.w	r1, r1, lr
 8000b36:	42a1      	cmp	r1, r4
 8000b38:	46c8      	mov	r8, r9
 8000b3a:	46a6      	mov	lr, r4
 8000b3c:	d356      	bcc.n	8000bec <__udivmoddi4+0x2a4>
 8000b3e:	d053      	beq.n	8000be8 <__udivmoddi4+0x2a0>
 8000b40:	b15d      	cbz	r5, 8000b5a <__udivmoddi4+0x212>
 8000b42:	ebb3 0208 	subs.w	r2, r3, r8
 8000b46:	eb61 010e 	sbc.w	r1, r1, lr
 8000b4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000b4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000b52:	40f1      	lsrs	r1, r6
 8000b54:	431f      	orrs	r7, r3
 8000b56:	e9c5 7100 	strd	r7, r1, [r5]
 8000b5a:	2600      	movs	r6, #0
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	f1c2 0320 	rsb	r3, r2, #32
 8000b66:	40d8      	lsrs	r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000b70:	4091      	lsls	r1, r2
 8000b72:	4301      	orrs	r1, r0
 8000b74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b78:	fa1f fe8c 	uxth.w	lr, ip
 8000b7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b80:	fb07 3610 	mls	r6, r7, r0, r3
 8000b84:	0c0b      	lsrs	r3, r1, #16
 8000b86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000b8e:	429e      	cmp	r6, r3
 8000b90:	fa04 f402 	lsl.w	r4, r4, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x260>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9e:	d22f      	bcs.n	8000c00 <__udivmoddi4+0x2b8>
 8000ba0:	429e      	cmp	r6, r3
 8000ba2:	d92d      	bls.n	8000c00 <__udivmoddi4+0x2b8>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1b9b      	subs	r3, r3, r6
 8000baa:	b289      	uxth	r1, r1
 8000bac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x28a>
 8000bc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bc8:	d216      	bcs.n	8000bf8 <__udivmoddi4+0x2b0>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d914      	bls.n	8000bf8 <__udivmoddi4+0x2b0>
 8000bce:	3e02      	subs	r6, #2
 8000bd0:	4461      	add	r1, ip
 8000bd2:	1ac9      	subs	r1, r1, r3
 8000bd4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bd8:	e738      	b.n	8000a4c <__udivmoddi4+0x104>
 8000bda:	462e      	mov	r6, r5
 8000bdc:	4628      	mov	r0, r5
 8000bde:	e705      	b.n	80009ec <__udivmoddi4+0xa4>
 8000be0:	4606      	mov	r6, r0
 8000be2:	e6e3      	b.n	80009ac <__udivmoddi4+0x64>
 8000be4:	4618      	mov	r0, r3
 8000be6:	e6f8      	b.n	80009da <__udivmoddi4+0x92>
 8000be8:	454b      	cmp	r3, r9
 8000bea:	d2a9      	bcs.n	8000b40 <__udivmoddi4+0x1f8>
 8000bec:	ebb9 0802 	subs.w	r8, r9, r2
 8000bf0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	e7a3      	b.n	8000b40 <__udivmoddi4+0x1f8>
 8000bf8:	4646      	mov	r6, r8
 8000bfa:	e7ea      	b.n	8000bd2 <__udivmoddi4+0x28a>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	e794      	b.n	8000b2a <__udivmoddi4+0x1e2>
 8000c00:	4640      	mov	r0, r8
 8000c02:	e7d1      	b.n	8000ba8 <__udivmoddi4+0x260>
 8000c04:	46d0      	mov	r8, sl
 8000c06:	e77b      	b.n	8000b00 <__udivmoddi4+0x1b8>
 8000c08:	3b02      	subs	r3, #2
 8000c0a:	4461      	add	r1, ip
 8000c0c:	e732      	b.n	8000a74 <__udivmoddi4+0x12c>
 8000c0e:	4630      	mov	r0, r6
 8000c10:	e709      	b.n	8000a26 <__udivmoddi4+0xde>
 8000c12:	4464      	add	r4, ip
 8000c14:	3802      	subs	r0, #2
 8000c16:	e742      	b.n	8000a9e <__udivmoddi4+0x156>

08000c18 <__aeabi_idiv0>:
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 ff42 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f826 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 f988 	bl	8000f3c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000c2c:	f007 fdba 	bl	80087a4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000c30:	f000 f88a 	bl	8000d48 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000c34:	f000 f934 	bl	8000ea0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // Store the frequency of PID loop
  PID_freq = HAL_RCC_GetSysClockFreq()/htim4.Init.Period;
 8000c38:	f003 f8ac 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <main+0x4c>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <main+0x50>)
 8000c48:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim4);
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <main+0x4c>)
 8000c4c:	f003 f9c4 	bl	8003fd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <main+0x54>)
 8000c52:	f003 f9c1 	bl	8003fd8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c56:	2100      	movs	r1, #0
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <main+0x54>)
 8000c5a:	f003 fa79 	bl	8004150 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c5e:	2104      	movs	r1, #4
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <main+0x54>)
 8000c62:	f003 fa75 	bl	8004150 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <main+0x4a>
 8000c68:	2000018c 	.word	0x2000018c
 8000c6c:	200001d4 	.word	0x200001d4
 8000c70:	20000144 	.word	0x20000144

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	; 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2230      	movs	r2, #48	; 0x30
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f008 fad0 	bl	8009228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <SystemClock_Config+0xcc>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <SystemClock_Config+0xcc>)
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <SystemClock_Config+0xcc>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <SystemClock_Config+0xd0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ce8:	2319      	movs	r3, #25
 8000cea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000cec:	23c0      	movs	r3, #192	; 0xc0
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0320 	add.w	r3, r7, #32
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fceb 	bl	80036d8 <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d08:	f000 f9b8 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2302      	movs	r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2101      	movs	r1, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 ff4d 	bl	8003bc8 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d34:	f000 f9a2 	bl	800107c <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	; 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b096      	sub	sp, #88	; 0x58
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f008 fa51 	bl	8009228 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d86:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000d88:	4a44      	ldr	r2, [pc, #272]	; (8000e9c <MX_TIM1_Init+0x154>)
 8000d8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d8c:	4b42      	ldr	r3, [pc, #264]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d92:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 959;
 8000d98:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000d9a:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000d9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da0:	4b3d      	ldr	r3, [pc, #244]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000da6:	4b3c      	ldr	r3, [pc, #240]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dac:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000db2:	4839      	ldr	r0, [pc, #228]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000db4:	f003 f8c0 	bl	8003f38 <HAL_TIM_Base_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000dbe:	f000 f95d 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4832      	ldr	r0, [pc, #200]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000dd0:	f003 fc38 	bl	8004644 <HAL_TIM_ConfigClockSource>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dda:	f000 f94f 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dde:	482e      	ldr	r0, [pc, #184]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000de0:	f003 f95c 	bl	800409c <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dea:	f000 f947 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4826      	ldr	r0, [pc, #152]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000dfe:	f003 ffe7 	bl	8004dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e08:	f000 f938 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0c:	2360      	movs	r3, #96	; 0x60
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4819      	ldr	r0, [pc, #100]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000e32:	f003 fb45 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000e3c:	f000 f91e 	bl	800107c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	2204      	movs	r2, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4813      	ldr	r0, [pc, #76]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000e4a:	f003 fb39 	bl	80044c0 <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000e54:	f000 f912 	bl	800107c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000e7c:	f004 f816 	bl	8004eac <HAL_TIMEx_ConfigBreakDeadTime>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000e86:	f000 f8f9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e8a:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM1_Init+0x150>)
 8000e8c:	f000 f990 	bl	80011b0 <HAL_TIM_MspPostInit>

}
 8000e90:	bf00      	nop
 8000e92:	3758      	adds	r7, #88	; 0x58
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000144 	.word	0x20000144
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ebe:	4a1e      	ldr	r2, [pc, #120]	; (8000f38 <MX_TIM4_Init+0x98>)
 8000ec0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ed0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ed4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000ee4:	f003 f828 	bl	8003f38 <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000eee:	f000 f8c5 	bl	800107c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	4619      	mov	r1, r3
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000f00:	f003 fba0 	bl	8004644 <HAL_TIM_ConfigClockSource>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 f8b7 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_TIM4_Init+0x94>)
 8000f1c:	f003 ff58 	bl	8004dd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f26:	f000 f8a9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000018c 	.word	0x2000018c
 8000f38:	40000800 	.word	0x40000800

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b45      	ldr	r3, [pc, #276]	; (800106c <MX_GPIO_Init+0x130>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a44      	ldr	r2, [pc, #272]	; (800106c <MX_GPIO_Init+0x130>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b42      	ldr	r3, [pc, #264]	; (800106c <MX_GPIO_Init+0x130>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <MX_GPIO_Init+0x130>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a3d      	ldr	r2, [pc, #244]	; (800106c <MX_GPIO_Init+0x130>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	; (800106c <MX_GPIO_Init+0x130>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b37      	ldr	r3, [pc, #220]	; (800106c <MX_GPIO_Init+0x130>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a36      	ldr	r2, [pc, #216]	; (800106c <MX_GPIO_Init+0x130>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b34      	ldr	r3, [pc, #208]	; (800106c <MX_GPIO_Init+0x130>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b30      	ldr	r3, [pc, #192]	; (800106c <MX_GPIO_Init+0x130>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a2f      	ldr	r2, [pc, #188]	; (800106c <MX_GPIO_Init+0x130>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_GPIO_Init+0x130>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	4829      	ldr	r0, [pc, #164]	; (8001070 <MX_GPIO_Init+0x134>)
 8000fca:	f001 f8b1 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2178      	movs	r1, #120	; 0x78
 8000fd2:	4828      	ldr	r0, [pc, #160]	; (8001074 <MX_GPIO_Init+0x138>)
 8000fd4:	f001 f8ac 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ERROR_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481f      	ldr	r0, [pc, #124]	; (8001070 <MX_GPIO_Init+0x134>)
 8000ff2:	f000 ff01 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_A_Pin ENC2_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC2_A_Pin;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ffa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	481b      	ldr	r0, [pc, #108]	; (8001078 <MX_GPIO_Init+0x13c>)
 800100c:	f000 fef4 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin ENC2_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|ENC2_B_Pin;
 8001010:	230a      	movs	r3, #10
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4815      	ldr	r0, [pc, #84]	; (8001078 <MX_GPIO_Init+0x13c>)
 8001024:	f000 fee8 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_B_Pin IN2_A_Pin IN2_B_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin;
 8001028:	2378      	movs	r3, #120	; 0x78
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_GPIO_Init+0x138>)
 8001040:	f000 feda 	bl	8001df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2006      	movs	r0, #6
 800104a:	f000 fe9e 	bl	8001d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800104e:	2006      	movs	r0, #6
 8001050:	f000 feb7 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	2008      	movs	r0, #8
 800105a:	f000 fe96 	bl	8001d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800105e:	2008      	movs	r0, #8
 8001060:	f000 feaf 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40020800 	.word	0x40020800
 8001074:	40020400 	.word	0x40020400
 8001078:	40020000 	.word	0x40020000

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  // EYVAH
	  memcpy(&usb_out, &error_message, sizeof(usb_out));
 8001084:	2220      	movs	r2, #32
 8001086:	4904      	ldr	r1, [pc, #16]	; (8001098 <Error_Handler+0x1c>)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <Error_Handler+0x20>)
 800108a:	f008 f8bf 	bl	800920c <memcpy>
	  CDC_Transmit_FS(usb_out, sizeof(usb_out));
 800108e:	2120      	movs	r1, #32
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <Error_Handler+0x20>)
 8001092:	f007 fc45 	bl	8008920 <CDC_Transmit_FS>
	  memcpy(&usb_out, &error_message, sizeof(usb_out));
 8001096:	e7f5      	b.n	8001084 <Error_Handler+0x8>
 8001098:	20000010 	.word	0x20000010
 800109c:	20000000 	.word	0x20000000

080010a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_MspInit+0x90>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a20      	ldr	r2, [pc, #128]	; (8001130 <HAL_MspInit+0x90>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <HAL_MspInit+0x90>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <HAL_MspInit+0x90>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a19      	ldr	r2, [pc, #100]	; (8001130 <HAL_MspInit+0x90>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_MspInit+0x90>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 3, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2103      	movs	r1, #3
 80010e2:	f06f 000b 	mvn.w	r0, #11
 80010e6:	f000 fe50 	bl	8001d8a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 3, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2103      	movs	r1, #3
 80010ee:	f06f 000a 	mvn.w	r0, #10
 80010f2:	f000 fe4a 	bl	8001d8a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2103      	movs	r1, #3
 80010fa:	f06f 0009 	mvn.w	r0, #9
 80010fe:	f000 fe44 	bl	8001d8a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 3, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2103      	movs	r1, #3
 8001106:	f06f 0004 	mvn.w	r0, #4
 800110a:	f000 fe3e 	bl	8001d8a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 3, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2103      	movs	r1, #3
 8001112:	f06f 0003 	mvn.w	r0, #3
 8001116:	f000 fe38 	bl	8001d8a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2103      	movs	r1, #3
 800111e:	f06f 0001 	mvn.w	r0, #1
 8001122:	f000 fe32 	bl	8001d8a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <HAL_TIM_Base_MspInit+0x70>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d10e      	bne.n	8001164 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_TIM_Base_MspInit+0x74>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <HAL_TIM_Base_MspInit+0x74>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_TIM_Base_MspInit+0x74>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001162:	e01a      	b.n	800119a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a10      	ldr	r2, [pc, #64]	; (80011ac <HAL_TIM_Base_MspInit+0x78>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d115      	bne.n	800119a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_TIM_Base_MspInit+0x74>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_TIM_Base_MspInit+0x74>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_TIM_Base_MspInit+0x74>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2103      	movs	r1, #3
 800118e:	201e      	movs	r0, #30
 8001190:	f000 fdfb 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001194:	201e      	movs	r0, #30
 8001196:	f000 fe14 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40010000 	.word	0x40010000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40000800 	.word	0x40000800

080011b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_TIM_MspPostInit+0x68>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d11e      	bne.n	8001210 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_TIM_MspPostInit+0x6c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <HAL_TIM_MspPostInit+0x6c>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_TIM_MspPostInit+0x6c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001200:	2301      	movs	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_TIM_MspPostInit+0x70>)
 800120c:	f000 fdf4 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40010000 	.word	0x40010000
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 fc6c 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	/* Check rising of falling*/
	if (HAL_GPIO_ReadPin(GPIOA, ENC1_A_Pin)){
 800127c:	2101      	movs	r1, #1
 800127e:	4821      	ldr	r0, [pc, #132]	; (8001304 <EXTI0_IRQHandler+0x8c>)
 8001280:	f000 ff3e 	bl	8002100 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d011      	beq.n	80012ae <EXTI0_IRQHandler+0x36>
		/* high means the interrupt was rising */
		if (HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 800128a:	2102      	movs	r1, #2
 800128c:	481d      	ldr	r0, [pc, #116]	; (8001304 <EXTI0_IRQHandler+0x8c>)
 800128e:	f000 ff37 	bl	8002100 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <EXTI0_IRQHandler+0x2c>
			/* Update the position of the first motor */
			enc1_pos ++;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <EXTI0_IRQHandler+0x90>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <EXTI0_IRQHandler+0x90>)
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e004      	b.n	80012ae <EXTI0_IRQHandler+0x36>
			}else{
			enc1_pos --;
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <EXTI0_IRQHandler+0x90>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <EXTI0_IRQHandler+0x90>)
 80012ac:	6013      	str	r3, [r2, #0]
		}
	}
	if (!HAL_GPIO_ReadPin(GPIOA, ENC1_A_Pin)){
 80012ae:	2101      	movs	r1, #1
 80012b0:	4814      	ldr	r0, [pc, #80]	; (8001304 <EXTI0_IRQHandler+0x8c>)
 80012b2:	f000 ff25 	bl	8002100 <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d111      	bne.n	80012e0 <EXTI0_IRQHandler+0x68>
		/* low means the interrupt was falling */
		if (HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 80012bc:	2102      	movs	r1, #2
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <EXTI0_IRQHandler+0x8c>)
 80012c0:	f000 ff1e 	bl	8002100 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <EXTI0_IRQHandler+0x5e>
			/* Update the position of the first motor */
			enc1_pos --;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <EXTI0_IRQHandler+0x90>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <EXTI0_IRQHandler+0x90>)
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e004      	b.n	80012e0 <EXTI0_IRQHandler+0x68>
			}else{
			enc1_pos ++;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <EXTI0_IRQHandler+0x90>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <EXTI0_IRQHandler+0x90>)
 80012de:	6013      	str	r3, [r2, #0]
		}
	}
	enc1_pos_cm = (float)enc1_pos/(float)(GEAR_RATIO);
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <EXTI0_IRQHandler+0x90>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ec:	eddf 6a07 	vldr	s13, [pc, #28]	; 800130c <EXTI0_IRQHandler+0x94>
 80012f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <EXTI0_IRQHandler+0x98>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f000 ff4c 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020000 	.word	0x40020000
 8001308:	20000200 	.word	0x20000200
 800130c:	42a00000 	.word	0x42a00000
 8001310:	20000208 	.word	0x20000208

08001314 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	/* Check rising of falling*/
	if (HAL_GPIO_ReadPin(GPIOA, ENC2_A_Pin)){
 8001318:	2104      	movs	r1, #4
 800131a:	4821      	ldr	r0, [pc, #132]	; (80013a0 <EXTI2_IRQHandler+0x8c>)
 800131c:	f000 fef0 	bl	8002100 <HAL_GPIO_ReadPin>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d011      	beq.n	800134a <EXTI2_IRQHandler+0x36>
		/* high means the interrupt was rising */
		if (HAL_GPIO_ReadPin(GPIOA, ENC2_B_Pin)){
 8001326:	2108      	movs	r1, #8
 8001328:	481d      	ldr	r0, [pc, #116]	; (80013a0 <EXTI2_IRQHandler+0x8c>)
 800132a:	f000 fee9 	bl	8002100 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <EXTI2_IRQHandler+0x2c>
			/* Update the position of the first motor */
			enc2_pos ++;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <EXTI2_IRQHandler+0x90>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <EXTI2_IRQHandler+0x90>)
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e004      	b.n	800134a <EXTI2_IRQHandler+0x36>
			}else{
			enc2_pos --;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <EXTI2_IRQHandler+0x90>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3b01      	subs	r3, #1
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <EXTI2_IRQHandler+0x90>)
 8001348:	6013      	str	r3, [r2, #0]
		}
	}
	if (!HAL_GPIO_ReadPin(GPIOA, ENC2_A_Pin)){
 800134a:	2104      	movs	r1, #4
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <EXTI2_IRQHandler+0x8c>)
 800134e:	f000 fed7 	bl	8002100 <HAL_GPIO_ReadPin>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d111      	bne.n	800137c <EXTI2_IRQHandler+0x68>
		/* low means the interrupt was falling */
		if (HAL_GPIO_ReadPin(GPIOA, ENC2_B_Pin)){
 8001358:	2108      	movs	r1, #8
 800135a:	4811      	ldr	r0, [pc, #68]	; (80013a0 <EXTI2_IRQHandler+0x8c>)
 800135c:	f000 fed0 	bl	8002100 <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <EXTI2_IRQHandler+0x5e>
			/* Update the position of the first motor */
			enc2_pos --;
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <EXTI2_IRQHandler+0x90>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3b01      	subs	r3, #1
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <EXTI2_IRQHandler+0x90>)
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e004      	b.n	800137c <EXTI2_IRQHandler+0x68>
			}else{
			enc2_pos ++;
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <EXTI2_IRQHandler+0x90>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <EXTI2_IRQHandler+0x90>)
 800137a:	6013      	str	r3, [r2, #0]
		}
	}
	enc2_pos_cm = (float)enc2_pos/(float)(GEAR_RATIO);
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <EXTI2_IRQHandler+0x90>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001388:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013a8 <EXTI2_IRQHandler+0x94>
 800138c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <EXTI2_IRQHandler+0x98>)
 8001392:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 8001396:	2004      	movs	r0, #4
 8001398:	f000 fefe 	bl	8002198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40020000 	.word	0x40020000
 80013a4:	20000204 	.word	0x20000204
 80013a8:	42a00000 	.word	0x42a00000
 80013ac:	2000020c 	.word	0x2000020c

080013b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(error_code == 0 && external_shutdown == 0){
 80013b6:	4bb6      	ldr	r3, [pc, #728]	; (8001690 <TIM4_IRQHandler+0x2e0>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 8279 	bne.w	80018b2 <TIM4_IRQHandler+0x502>
 80013c0:	4bb4      	ldr	r3, [pc, #720]	; (8001694 <TIM4_IRQHandler+0x2e4>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f040 8274 	bne.w	80018b2 <TIM4_IRQHandler+0x502>

		/* Determine set values (NO INVERSE KINEMATICS) */
		mot1_set_pos_cm = Y_ref;
 80013ca:	4bb3      	ldr	r3, [pc, #716]	; (8001698 <TIM4_IRQHandler+0x2e8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4ab3      	ldr	r2, [pc, #716]	; (800169c <TIM4_IRQHandler+0x2ec>)
 80013d0:	6013      	str	r3, [r2, #0]
		mot2_set_pos_cm = Y_ref;
 80013d2:	4bb1      	ldr	r3, [pc, #708]	; (8001698 <TIM4_IRQHandler+0x2e8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4ab2      	ldr	r2, [pc, #712]	; (80016a0 <TIM4_IRQHandler+0x2f0>)
 80013d8:	6013      	str	r3, [r2, #0]
		mot1_set_pos = (int)(mot1_set_pos_cm*GEAR_RATIO);
 80013da:	4bb0      	ldr	r3, [pc, #704]	; (800169c <TIM4_IRQHandler+0x2ec>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80016a4 <TIM4_IRQHandler+0x2f4>
 80013e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	4bad      	ldr	r3, [pc, #692]	; (80016a8 <TIM4_IRQHandler+0x2f8>)
 80013f2:	edc3 7a00 	vstr	s15, [r3]
		mot2_set_pos = (int)(mot2_set_pos_cm*GEAR_RATIO);
 80013f6:	4baa      	ldr	r3, [pc, #680]	; (80016a0 <TIM4_IRQHandler+0x2f0>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80016a4 <TIM4_IRQHandler+0x2f4>
 8001400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140c:	4ba7      	ldr	r3, [pc, #668]	; (80016ac <TIM4_IRQHandler+0x2fc>)
 800140e:	edc3 7a00 	vstr	s15, [r3]

		/* Determine PID errors */
		pos_error1 = mot1_set_pos - enc2_pos;
 8001412:	4ba5      	ldr	r3, [pc, #660]	; (80016a8 <TIM4_IRQHandler+0x2f8>)
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	4ba5      	ldr	r3, [pc, #660]	; (80016b0 <TIM4_IRQHandler+0x300>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	4ba2      	ldr	r3, [pc, #648]	; (80016b4 <TIM4_IRQHandler+0x304>)
 800142a:	edc3 7a00 	vstr	s15, [r3]
		pos_error2 = mot2_set_pos - enc1_pos;
 800142e:	4b9f      	ldr	r3, [pc, #636]	; (80016ac <TIM4_IRQHandler+0x2fc>)
 8001430:	ed93 7a00 	vldr	s14, [r3]
 8001434:	4ba0      	ldr	r3, [pc, #640]	; (80016b8 <TIM4_IRQHandler+0x308>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001444:	4b9d      	ldr	r3, [pc, #628]	; (80016bc <TIM4_IRQHandler+0x30c>)
 8001446:	edc3 7a00 	vstr	s15, [r3]

		float der_error1=(pos_error1-pre_pos_error1)*PID_freq;
 800144a:	4b9a      	ldr	r3, [pc, #616]	; (80016b4 <TIM4_IRQHandler+0x304>)
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	4b9b      	ldr	r3, [pc, #620]	; (80016c0 <TIM4_IRQHandler+0x310>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee37 7a67 	vsub.f32	s14, s14, s15
 800145a:	4b9a      	ldr	r3, [pc, #616]	; (80016c4 <TIM4_IRQHandler+0x314>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146a:	edc7 7a01 	vstr	s15, [r7, #4]
		float der_error2=(pos_error2-pre_pos_error2)*PID_freq;
 800146e:	4b93      	ldr	r3, [pc, #588]	; (80016bc <TIM4_IRQHandler+0x30c>)
 8001470:	ed93 7a00 	vldr	s14, [r3]
 8001474:	4b94      	ldr	r3, [pc, #592]	; (80016c8 <TIM4_IRQHandler+0x318>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800147e:	4b91      	ldr	r3, [pc, #580]	; (80016c4 <TIM4_IRQHandler+0x314>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	edc7 7a00 	vstr	s15, [r7]

		int_error1+=pos_error1/PID_freq;
 8001492:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <TIM4_IRQHandler+0x304>)
 8001494:	edd3 6a00 	vldr	s13, [r3]
 8001498:	4b8a      	ldr	r3, [pc, #552]	; (80016c4 <TIM4_IRQHandler+0x314>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014a8:	4b88      	ldr	r3, [pc, #544]	; (80016cc <TIM4_IRQHandler+0x31c>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	4b86      	ldr	r3, [pc, #536]	; (80016cc <TIM4_IRQHandler+0x31c>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]
		int_error2+=pos_error2/PID_freq;
 80014b8:	4b80      	ldr	r3, [pc, #512]	; (80016bc <TIM4_IRQHandler+0x30c>)
 80014ba:	edd3 6a00 	vldr	s13, [r3]
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <TIM4_IRQHandler+0x314>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014ce:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <TIM4_IRQHandler+0x320>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d8:	4b7d      	ldr	r3, [pc, #500]	; (80016d0 <TIM4_IRQHandler+0x320>)
 80014da:	edc3 7a00 	vstr	s15, [r3]

		if (int_error1>=ANTI_WIND_UP) int_error1=ANTI_WIND_UP;
 80014de:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <TIM4_IRQHandler+0x31c>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80016d4 <TIM4_IRQHandler+0x324>
 80014e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	db02      	blt.n	80014f8 <TIM4_IRQHandler+0x148>
 80014f2:	4b76      	ldr	r3, [pc, #472]	; (80016cc <TIM4_IRQHandler+0x31c>)
 80014f4:	4a78      	ldr	r2, [pc, #480]	; (80016d8 <TIM4_IRQHandler+0x328>)
 80014f6:	601a      	str	r2, [r3, #0]
		if (int_error2>=ANTI_WIND_UP) int_error2=ANTI_WIND_UP;
 80014f8:	4b75      	ldr	r3, [pc, #468]	; (80016d0 <TIM4_IRQHandler+0x320>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80016d4 <TIM4_IRQHandler+0x324>
 8001502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150a:	db02      	blt.n	8001512 <TIM4_IRQHandler+0x162>
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <TIM4_IRQHandler+0x320>)
 800150e:	4a72      	ldr	r2, [pc, #456]	; (80016d8 <TIM4_IRQHandler+0x328>)
 8001510:	601a      	str	r2, [r3, #0]

		if (int_error1<=-ANTI_WIND_UP) int_error1=-ANTI_WIND_UP;
 8001512:	4b6e      	ldr	r3, [pc, #440]	; (80016cc <TIM4_IRQHandler+0x31c>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80016dc <TIM4_IRQHandler+0x32c>
 800151c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	d802      	bhi.n	800152c <TIM4_IRQHandler+0x17c>
 8001526:	4b69      	ldr	r3, [pc, #420]	; (80016cc <TIM4_IRQHandler+0x31c>)
 8001528:	4a6d      	ldr	r2, [pc, #436]	; (80016e0 <TIM4_IRQHandler+0x330>)
 800152a:	601a      	str	r2, [r3, #0]
		if (int_error2<=-ANTI_WIND_UP) int_error2=-ANTI_WIND_UP;
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <TIM4_IRQHandler+0x320>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80016dc <TIM4_IRQHandler+0x32c>
 8001536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	d802      	bhi.n	8001546 <TIM4_IRQHandler+0x196>
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <TIM4_IRQHandler+0x320>)
 8001542:	4a67      	ldr	r2, [pc, #412]	; (80016e0 <TIM4_IRQHandler+0x330>)
 8001544:	601a      	str	r2, [r3, #0]

		if (((pos_error1>0) && (int_error1<0))||((pos_error1<0) && (int_error1>0))) int_error1=0;
 8001546:	4b5b      	ldr	r3, [pc, #364]	; (80016b4 <TIM4_IRQHandler+0x304>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001554:	dd07      	ble.n	8001566 <TIM4_IRQHandler+0x1b6>
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <TIM4_IRQHandler+0x31c>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d40f      	bmi.n	8001586 <TIM4_IRQHandler+0x1d6>
 8001566:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <TIM4_IRQHandler+0x304>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d50b      	bpl.n	800158e <TIM4_IRQHandler+0x1de>
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <TIM4_IRQHandler+0x31c>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	dd03      	ble.n	800158e <TIM4_IRQHandler+0x1de>
 8001586:	4b51      	ldr	r3, [pc, #324]	; (80016cc <TIM4_IRQHandler+0x31c>)
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
		if (((pos_error2>0) && (int_error2<0))||((pos_error2<0) && (int_error2>0))) int_error2=0;
 800158e:	4b4b      	ldr	r3, [pc, #300]	; (80016bc <TIM4_IRQHandler+0x30c>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	dd07      	ble.n	80015ae <TIM4_IRQHandler+0x1fe>
 800159e:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <TIM4_IRQHandler+0x320>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d40f      	bmi.n	80015ce <TIM4_IRQHandler+0x21e>
 80015ae:	4b43      	ldr	r3, [pc, #268]	; (80016bc <TIM4_IRQHandler+0x30c>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	d50b      	bpl.n	80015d6 <TIM4_IRQHandler+0x226>
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <TIM4_IRQHandler+0x320>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015cc:	dd03      	ble.n	80015d6 <TIM4_IRQHandler+0x226>
 80015ce:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <TIM4_IRQHandler+0x320>)
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

		pre_pos_error1=pos_error1;
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <TIM4_IRQHandler+0x304>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a39      	ldr	r2, [pc, #228]	; (80016c0 <TIM4_IRQHandler+0x310>)
 80015dc:	6013      	str	r3, [r2, #0]
		pre_pos_error2=pos_error2;
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <TIM4_IRQHandler+0x30c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <TIM4_IRQHandler+0x318>)
 80015e4:	6013      	str	r3, [r2, #0]

		/* Set the duty (only proportional implemented for now) */
		duty1 = (int)(kp1*pos_error1+kd1*der_error1+ki1*int_error1);
 80015e6:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <TIM4_IRQHandler+0x334>)
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <TIM4_IRQHandler+0x304>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f6:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <TIM4_IRQHandler+0x338>)
 80015f8:	edd3 6a00 	vldr	s13, [r3]
 80015fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001604:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <TIM4_IRQHandler+0x33c>)
 800160a:	edd3 6a00 	vldr	s13, [r3]
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <TIM4_IRQHandler+0x31c>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001620:	ee17 2a90 	vmov	r2, s15
 8001624:	4b32      	ldr	r3, [pc, #200]	; (80016f0 <TIM4_IRQHandler+0x340>)
 8001626:	601a      	str	r2, [r3, #0]
		duty2 = (int)(kp2*pos_error2+kd2*der_error2+ki2*int_error2);
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <TIM4_IRQHandler+0x344>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <TIM4_IRQHandler+0x30c>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <TIM4_IRQHandler+0x348>)
 800163a:	edd3 6a00 	vldr	s13, [r3]
 800163e:	edd7 7a00 	vldr	s15, [r7]
 8001642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164a:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <TIM4_IRQHandler+0x34c>)
 800164c:	edd3 6a00 	vldr	s13, [r3]
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <TIM4_IRQHandler+0x320>)
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001662:	ee17 2a90 	vmov	r2, s15
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <TIM4_IRQHandler+0x350>)
 8001668:	601a      	str	r2, [r3, #0]

		/* Set the direction */
		if(duty1 > 0){
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <TIM4_IRQHandler+0x340>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	dd4e      	ble.n	8001710 <TIM4_IRQHandler+0x360>
				HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, HIGH);
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <TIM4_IRQHandler+0x354>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	2108      	movs	r1, #8
 800167a:	4823      	ldr	r0, [pc, #140]	; (8001708 <TIM4_IRQHandler+0x358>)
 800167c:	f000 fd58 	bl	8002130 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <TIM4_IRQHandler+0x35c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	2110      	movs	r1, #16
 8001688:	481f      	ldr	r0, [pc, #124]	; (8001708 <TIM4_IRQHandler+0x358>)
 800168a:	f000 fd51 	bl	8002130 <HAL_GPIO_WritePin>
 800168e:	e052      	b.n	8001736 <TIM4_IRQHandler+0x386>
 8001690:	200001e4 	.word	0x200001e4
 8001694:	200001e5 	.word	0x200001e5
 8001698:	200001dc 	.word	0x200001dc
 800169c:	20000218 	.word	0x20000218
 80016a0:	2000021c 	.word	0x2000021c
 80016a4:	42a00000 	.word	0x42a00000
 80016a8:	20000210 	.word	0x20000210
 80016ac:	20000214 	.word	0x20000214
 80016b0:	20000204 	.word	0x20000204
 80016b4:	20000220 	.word	0x20000220
 80016b8:	20000200 	.word	0x20000200
 80016bc:	20000224 	.word	0x20000224
 80016c0:	20000228 	.word	0x20000228
 80016c4:	200001d4 	.word	0x200001d4
 80016c8:	2000022c 	.word	0x2000022c
 80016cc:	20000230 	.word	0x20000230
 80016d0:	20000234 	.word	0x20000234
 80016d4:	42200000 	.word	0x42200000
 80016d8:	42200000 	.word	0x42200000
 80016dc:	c2200000 	.word	0xc2200000
 80016e0:	c2200000 	.word	0xc2200000
 80016e4:	20000018 	.word	0x20000018
 80016e8:	20000238 	.word	0x20000238
 80016ec:	2000001c 	.word	0x2000001c
 80016f0:	20000240 	.word	0x20000240
 80016f4:	20000020 	.word	0x20000020
 80016f8:	2000023c 	.word	0x2000023c
 80016fc:	20000024 	.word	0x20000024
 8001700:	20000244 	.word	0x20000244
 8001704:	20000028 	.word	0x20000028
 8001708:	40020400 	.word	0x40020400
 800170c:	20000248 	.word	0x20000248
		}
		else{
				duty1 = -duty1;
 8001710:	4b7d      	ldr	r3, [pc, #500]	; (8001908 <TIM4_IRQHandler+0x558>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	425b      	negs	r3, r3
 8001716:	4a7c      	ldr	r2, [pc, #496]	; (8001908 <TIM4_IRQHandler+0x558>)
 8001718:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, HIGH);
 800171a:	4b7c      	ldr	r3, [pc, #496]	; (800190c <TIM4_IRQHandler+0x55c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	2110      	movs	r1, #16
 8001722:	487b      	ldr	r0, [pc, #492]	; (8001910 <TIM4_IRQHandler+0x560>)
 8001724:	f000 fd04 	bl	8002130 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 8001728:	4b7a      	ldr	r3, [pc, #488]	; (8001914 <TIM4_IRQHandler+0x564>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	2108      	movs	r1, #8
 8001730:	4877      	ldr	r0, [pc, #476]	; (8001910 <TIM4_IRQHandler+0x560>)
 8001732:	f000 fcfd 	bl	8002130 <HAL_GPIO_WritePin>
		}
		if(duty2 > 0){
 8001736:	4b78      	ldr	r3, [pc, #480]	; (8001918 <TIM4_IRQHandler+0x568>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	dd0e      	ble.n	800175c <TIM4_IRQHandler+0x3ac>
				HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, HIGH);
 800173e:	4b73      	ldr	r3, [pc, #460]	; (800190c <TIM4_IRQHandler+0x55c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	2120      	movs	r1, #32
 8001746:	4872      	ldr	r0, [pc, #456]	; (8001910 <TIM4_IRQHandler+0x560>)
 8001748:	f000 fcf2 	bl	8002130 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, LOW);
 800174c:	4b71      	ldr	r3, [pc, #452]	; (8001914 <TIM4_IRQHandler+0x564>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	2140      	movs	r1, #64	; 0x40
 8001754:	486e      	ldr	r0, [pc, #440]	; (8001910 <TIM4_IRQHandler+0x560>)
 8001756:	f000 fceb 	bl	8002130 <HAL_GPIO_WritePin>
 800175a:	e012      	b.n	8001782 <TIM4_IRQHandler+0x3d2>
		}
		else{
				duty2 = -duty2;
 800175c:	4b6e      	ldr	r3, [pc, #440]	; (8001918 <TIM4_IRQHandler+0x568>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	425b      	negs	r3, r3
 8001762:	4a6d      	ldr	r2, [pc, #436]	; (8001918 <TIM4_IRQHandler+0x568>)
 8001764:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, HIGH);
 8001766:	4b69      	ldr	r3, [pc, #420]	; (800190c <TIM4_IRQHandler+0x55c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	2140      	movs	r1, #64	; 0x40
 800176e:	4868      	ldr	r0, [pc, #416]	; (8001910 <TIM4_IRQHandler+0x560>)
 8001770:	f000 fcde 	bl	8002130 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, LOW);
 8001774:	4b67      	ldr	r3, [pc, #412]	; (8001914 <TIM4_IRQHandler+0x564>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	2120      	movs	r1, #32
 800177c:	4864      	ldr	r0, [pc, #400]	; (8001910 <TIM4_IRQHandler+0x560>)
 800177e:	f000 fcd7 	bl	8002130 <HAL_GPIO_WritePin>
		}

		/* Limit the duty */
		if(duty1 > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001782:	4b61      	ldr	r3, [pc, #388]	; (8001908 <TIM4_IRQHandler+0x558>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe ffac 	bl	80006e4 <__aeabi_i2d>
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
 8001790:	4b62      	ldr	r3, [pc, #392]	; (800191c <TIM4_IRQHandler+0x56c>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	3301      	adds	r3, #1
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe ff94 	bl	80006c4 <__aeabi_ui2d>
 800179c:	a358      	add	r3, pc, #352	; (adr r3, 8001900 <TIM4_IRQHandler+0x550>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe fd23 	bl	80001ec <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7ff f881 	bl	80008b4 <__aeabi_dcmpgt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <TIM4_IRQHandler+0x430>
				duty1 = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 80017b8:	4b58      	ldr	r3, [pc, #352]	; (800191c <TIM4_IRQHandler+0x56c>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	3301      	adds	r3, #1
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe ff80 	bl	80006c4 <__aeabi_ui2d>
 80017c4:	a34e      	add	r3, pc, #312	; (adr r3, 8001900 <TIM4_IRQHandler+0x550>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe fd0f 	bl	80001ec <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f877 	bl	80008c8 <__aeabi_d2iz>
 80017da:	4603      	mov	r3, r0
 80017dc:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <TIM4_IRQHandler+0x558>)
 80017de:	6013      	str	r3, [r2, #0]
			}
		if(duty2 > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <TIM4_IRQHandler+0x568>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe ff7d 	bl	80006e4 <__aeabi_i2d>
 80017ea:	4604      	mov	r4, r0
 80017ec:	460d      	mov	r5, r1
 80017ee:	4b4b      	ldr	r3, [pc, #300]	; (800191c <TIM4_IRQHandler+0x56c>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe ff65 	bl	80006c4 <__aeabi_ui2d>
 80017fa:	a341      	add	r3, pc, #260	; (adr r3, 8001900 <TIM4_IRQHandler+0x550>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fcf4 	bl	80001ec <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7ff f852 	bl	80008b4 <__aeabi_dcmpgt>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d013      	beq.n	800183e <TIM4_IRQHandler+0x48e>
				duty2 = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <TIM4_IRQHandler+0x56c>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	3301      	adds	r3, #1
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe ff51 	bl	80006c4 <__aeabi_ui2d>
 8001822:	a337      	add	r3, pc, #220	; (adr r3, 8001900 <TIM4_IRQHandler+0x550>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe fce0 	bl	80001ec <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f848 	bl	80008c8 <__aeabi_d2iz>
 8001838:	4603      	mov	r3, r0
 800183a:	4a37      	ldr	r2, [pc, #220]	; (8001918 <TIM4_IRQHandler+0x568>)
 800183c:	6013      	str	r3, [r2, #0]
			}

		// Set the duty values to zero if steady state is reached
		if ((fabs(pos_error1) <= 5) && (fabs(pos_error2) <= 5)){
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <TIM4_IRQHandler+0x570>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	eef0 7ae7 	vabs.f32	s15, s15
 8001848:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800184c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001854:	d823      	bhi.n	800189e <TIM4_IRQHandler+0x4ee>
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <TIM4_IRQHandler+0x574>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	eef0 7ae7 	vabs.f32	s15, s15
 8001860:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	d817      	bhi.n	800189e <TIM4_IRQHandler+0x4ee>
			TIM1->CCR1 = 0;
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <TIM4_IRQHandler+0x578>)
 8001870:	2200      	movs	r2, #0
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <TIM4_IRQHandler+0x578>)
 8001876:	2200      	movs	r2, #0
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
			if(ack_to_be_sent == 1){
 800187a:	4b2c      	ldr	r3, [pc, #176]	; (800192c <TIM4_IRQHandler+0x57c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d116      	bne.n	80018b0 <TIM4_IRQHandler+0x500>
				memcpy(&usb_out, &acknowledge_message, sizeof(usb_out));
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <TIM4_IRQHandler+0x580>)
 8001884:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <TIM4_IRQHandler+0x584>)
 8001886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188a:	e883 0003 	stmia.w	r3, {r0, r1}
				CDC_Transmit_FS(usb_out, sizeof(usb_out));
 800188e:	2108      	movs	r1, #8
 8001890:	4827      	ldr	r0, [pc, #156]	; (8001930 <TIM4_IRQHandler+0x580>)
 8001892:	f007 f845 	bl	8008920 <CDC_Transmit_FS>
				ack_to_be_sent = 0;
 8001896:	4b25      	ldr	r3, [pc, #148]	; (800192c <TIM4_IRQHandler+0x57c>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
			if(ack_to_be_sent == 1){
 800189c:	e008      	b.n	80018b0 <TIM4_IRQHandler+0x500>
			}
		}
		else {
			TIM1->CCR1 = duty1;
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <TIM4_IRQHandler+0x558>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <TIM4_IRQHandler+0x578>)
 80018a4:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = duty2;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <TIM4_IRQHandler+0x568>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <TIM4_IRQHandler+0x578>)
 80018ac:	639a      	str	r2, [r3, #56]	; 0x38
	if(error_code == 0 && external_shutdown == 0){
 80018ae:	e010      	b.n	80018d2 <TIM4_IRQHandler+0x522>
 80018b0:	e00f      	b.n	80018d2 <TIM4_IRQHandler+0x522>
		}

	}
	else{
		TIM1->CCR1 = 0;
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <TIM4_IRQHandler+0x578>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <TIM4_IRQHandler+0x578>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
		memcpy(&usb_out, &error_message, sizeof(usb_out));
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <TIM4_IRQHandler+0x580>)
 80018c0:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <TIM4_IRQHandler+0x588>)
 80018c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018c6:	e883 0003 	stmia.w	r3, {r0, r1}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 80018ca:	2108      	movs	r1, #8
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <TIM4_IRQHandler+0x580>)
 80018ce:	f007 f827 	bl	8008920 <CDC_Transmit_FS>
	}

	Y_curr = (enc1_pos_cm + enc2_pos_cm)/2;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <TIM4_IRQHandler+0x58c>)
 80018d4:	ed93 7a00 	vldr	s14, [r3]
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <TIM4_IRQHandler+0x590>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <TIM4_IRQHandler+0x594>)
 80018ec:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018f0:	4815      	ldr	r0, [pc, #84]	; (8001948 <TIM4_IRQHandler+0x598>)
 80018f2:	f002 fcdd 	bl	80042b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bdb0      	pop	{r4, r5, r7, pc}
 80018fe:	bf00      	nop
 8001900:	66666666 	.word	0x66666666
 8001904:	3fee6666 	.word	0x3fee6666
 8001908:	20000240 	.word	0x20000240
 800190c:	20000028 	.word	0x20000028
 8001910:	40020400 	.word	0x40020400
 8001914:	20000248 	.word	0x20000248
 8001918:	20000244 	.word	0x20000244
 800191c:	20000144 	.word	0x20000144
 8001920:	20000220 	.word	0x20000220
 8001924:	20000224 	.word	0x20000224
 8001928:	40010000 	.word	0x40010000
 800192c:	200001e6 	.word	0x200001e6
 8001930:	20000000 	.word	0x20000000
 8001934:	20000008 	.word	0x20000008
 8001938:	20000010 	.word	0x20000010
 800193c:	20000208 	.word	0x20000208
 8001940:	2000020c 	.word	0x2000020c
 8001944:	200001e0 	.word	0x200001e0
 8001948:	2000018c 	.word	0x2000018c

0800194c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

	CDC_Receive_FS(usb_temp,sizeof(usb_temp));
 8001950:	2108      	movs	r1, #8
 8001952:	482d      	ldr	r0, [pc, #180]	; (8001a08 <OTG_FS_IRQHandler+0xbc>)
 8001954:	f006 ffd0 	bl	80088f8 <CDC_Receive_FS>

	if(strcmp((char *)usb_temp, (char *)empty_string) != 0){
 8001958:	492c      	ldr	r1, [pc, #176]	; (8001a0c <OTG_FS_IRQHandler+0xc0>)
 800195a:	482b      	ldr	r0, [pc, #172]	; (8001a08 <OTG_FS_IRQHandler+0xbc>)
 800195c:	f7fe fc3c 	bl	80001d8 <strcmp>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d045      	beq.n	80019f2 <OTG_FS_IRQHandler+0xa6>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196a:	4829      	ldr	r0, [pc, #164]	; (8001a10 <OTG_FS_IRQHandler+0xc4>)
 800196c:	f000 fbf9 	bl	8002162 <HAL_GPIO_TogglePin>

		// Store the data in usb_in array if a non-empty message received
		memcpy(&usb_in, &usb_temp, sizeof(usb_in));
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <OTG_FS_IRQHandler+0xc8>)
 8001972:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <OTG_FS_IRQHandler+0xbc>)
 8001974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001978:	e883 0003 	stmia.w	r3, {r0, r1}

		/* Parsing USB Message*/
		if(usb_in[0] == 'm'){
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <OTG_FS_IRQHandler+0xc8>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b6d      	cmp	r3, #109	; 0x6d
 8001982:	d12f      	bne.n	80019e4 <OTG_FS_IRQHandler+0x98>
			// Since STM32 byte size is 16 bits, there isn't a real uint8_t type
			// We manually do big endian storage, and manually decode them below here
			move_x = usb_in[1]*256 + usb_in[2];
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <OTG_FS_IRQHandler+0xc8>)
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	b29b      	uxth	r3, r3
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b29a      	uxth	r2, r3
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <OTG_FS_IRQHandler+0xc8>)
 8001990:	789b      	ldrb	r3, [r3, #2]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4413      	add	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	b21a      	sxth	r2, r3
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <OTG_FS_IRQHandler+0xcc>)
 800199c:	801a      	strh	r2, [r3, #0]
			move_y = usb_in[3]*256 + usb_in[4];
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <OTG_FS_IRQHandler+0xc8>)
 80019a0:	78db      	ldrb	r3, [r3, #3]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <OTG_FS_IRQHandler+0xc8>)
 80019aa:	791b      	ldrb	r3, [r3, #4]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <OTG_FS_IRQHandler+0xd0>)
 80019b6:	801a      	strh	r2, [r3, #0]
			usb_in[4] = move_y%256;
			usb_in[5] = '\n';
			CDC_Transmit_FS(usb_in,sizeof(usb_in));
			*/

			Y_ref = Y_ref + (float)move_y/10;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <OTG_FS_IRQHandler+0xd0>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <OTG_FS_IRQHandler+0xd4>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <OTG_FS_IRQHandler+0xd4>)
 80019da:	edc3 7a00 	vstr	s15, [r3]

			ack_to_be_sent = 1;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <OTG_FS_IRQHandler+0xd8>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]

		}

		if(usb_in[0] == 's'){
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <OTG_FS_IRQHandler+0xc8>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b73      	cmp	r3, #115	; 0x73
 80019ea:	d102      	bne.n	80019f2 <OTG_FS_IRQHandler+0xa6>
			external_shutdown = 1;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <OTG_FS_IRQHandler+0xdc>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
		}

	}

	// Clear usb_temp array
	memset(usb_temp, 0, sizeof(usb_temp));
 80019f2:	2208      	movs	r2, #8
 80019f4:	2100      	movs	r1, #0
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <OTG_FS_IRQHandler+0xbc>)
 80019f8:	f007 fc16 	bl	8009228 <memset>

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019fc:	480b      	ldr	r0, [pc, #44]	; (8001a2c <OTG_FS_IRQHandler+0xe0>)
 80019fe:	f000 fd3e 	bl	800247e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200001f0 	.word	0x200001f0
 8001a0c:	200001f8 	.word	0x200001f8
 8001a10:	40020800 	.word	0x40020800
 8001a14:	200001e8 	.word	0x200001e8
 8001a18:	200001d8 	.word	0x200001d8
 8001a1c:	200001da 	.word	0x200001da
 8001a20:	200001dc 	.word	0x200001dc
 8001a24:	200001e6 	.word	0x200001e6
 8001a28:	200001e5 	.word	0x200001e5
 8001a2c:	20000f30 	.word	0x20000f30

08001a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <SystemInit+0x20>)
 8001a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <SystemInit+0x20>)
 8001a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a58:	480d      	ldr	r0, [pc, #52]	; (8001a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a5a:	490e      	ldr	r1, [pc, #56]	; (8001a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a5c:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a70:	4c0b      	ldr	r4, [pc, #44]	; (8001aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a7e:	f7ff ffd7 	bl	8001a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a82:	f007 fb9f 	bl	80091c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a86:	f7ff f8c9 	bl	8000c1c <main>
  bx  lr    
 8001a8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a94:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001a98:	080092b8 	.word	0x080092b8
  ldr r2, =_sbss
 8001a9c:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001aa0:	2000165c 	.word	0x2000165c

08001aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_Init+0x40>)
 8001ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <HAL_Init+0x40>)
 8001abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x40>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f94f 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fae0 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f967 	bl	8001dde <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f92f 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000002c 	.word	0x2000002c
 8001b44:	20000034 	.word	0x20000034
 8001b48:	20000030 	.word	0x20000030

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000034 	.word	0x20000034
 8001b70:	2000024c 	.word	0x2000024c

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2000024c 	.word	0x2000024c

08001b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff ffee 	bl	8001b74 <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d005      	beq.n	8001bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_Delay+0x44>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb2:	bf00      	nop
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8f7      	bhi.n	8001bb4 <HAL_Delay+0x28>
  {
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000034 	.word	0x20000034

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <__NVIC_EnableIRQ+0x38>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff8e 	bl	8001c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff29 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff3e 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff8e 	bl	8001cc8 <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5d 	bl	8001c74 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff31 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffa2 	bl	8001d30 <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	e159      	b.n	80020c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e14:	2201      	movs	r2, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8148 	bne.w	80020c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d005      	beq.n	8001e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d130      	bne.n	8001eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 0201 	and.w	r2, r3, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d017      	beq.n	8001ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d123      	bne.n	8001f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	69b9      	ldr	r1, [r7, #24]
 8001f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0203 	and.w	r2, r3, #3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80a2 	beq.w	80020c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b57      	ldr	r3, [pc, #348]	; (80020e0 <HAL_GPIO_Init+0x2e8>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a56      	ldr	r2, [pc, #344]	; (80020e0 <HAL_GPIO_Init+0x2e8>)
 8001f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b54      	ldr	r3, [pc, #336]	; (80020e0 <HAL_GPIO_Init+0x2e8>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9a:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <HAL_GPIO_Init+0x2ec>)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a49      	ldr	r2, [pc, #292]	; (80020e8 <HAL_GPIO_Init+0x2f0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x202>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a48      	ldr	r2, [pc, #288]	; (80020ec <HAL_GPIO_Init+0x2f4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x1fe>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a47      	ldr	r2, [pc, #284]	; (80020f0 <HAL_GPIO_Init+0x2f8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x1fa>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a46      	ldr	r2, [pc, #280]	; (80020f4 <HAL_GPIO_Init+0x2fc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x1f6>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a45      	ldr	r2, [pc, #276]	; (80020f8 <HAL_GPIO_Init+0x300>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x1f2>
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	e008      	b.n	8001ffc <HAL_GPIO_Init+0x204>
 8001fea:	2307      	movs	r3, #7
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x204>
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e004      	b.n	8001ffc <HAL_GPIO_Init+0x204>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e002      	b.n	8001ffc <HAL_GPIO_Init+0x204>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_GPIO_Init+0x204>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f002 0203 	and.w	r2, r2, #3
 8002002:	0092      	lsls	r2, r2, #2
 8002004:	4093      	lsls	r3, r2
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800200c:	4935      	ldr	r1, [pc, #212]	; (80020e4 <HAL_GPIO_Init+0x2ec>)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800201a:	4b38      	ldr	r3, [pc, #224]	; (80020fc <HAL_GPIO_Init+0x304>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <HAL_GPIO_Init+0x304>)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002044:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <HAL_GPIO_Init+0x304>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002068:	4a24      	ldr	r2, [pc, #144]	; (80020fc <HAL_GPIO_Init+0x304>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_GPIO_Init+0x304>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002092:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <HAL_GPIO_Init+0x304>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_GPIO_Init+0x304>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020bc:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <HAL_GPIO_Init+0x304>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3301      	adds	r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b0f      	cmp	r3, #15
 80020cc:	f67f aea2 	bls.w	8001e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40020400 	.word	0x40020400
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020c00 	.word	0x40020c00
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40013c00 	.word	0x40013c00

08002100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800214c:	e003      	b.n	8002156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	041a      	lsls	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	619a      	str	r2, [r3, #24]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002174:	887a      	ldrh	r2, [r7, #2]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4013      	ands	r3, r2
 800217a:	041a      	lsls	r2, r3, #16
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43d9      	mvns	r1, r3
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	400b      	ands	r3, r1
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d006      	beq.n	80021bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021b4:	88fb      	ldrh	r3, [r7, #6]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f806 	bl	80021c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40013c00 	.word	0x40013c00

080021c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e0:	b08f      	sub	sp, #60	; 0x3c
 80021e2:	af0a      	add	r7, sp, #40	; 0x28
 80021e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e10f      	b.n	8002410 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f006 fcd0 	bl	8008bb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2203      	movs	r2, #3
 8002214:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f002 ffb7 	bl	80051a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	687e      	ldr	r6, [r7, #4]
 800223c:	466d      	mov	r5, sp
 800223e:	f106 0410 	add.w	r4, r6, #16
 8002242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800224e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002252:	1d33      	adds	r3, r6, #4
 8002254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002256:	6838      	ldr	r0, [r7, #0]
 8002258:	f002 fe8e 	bl	8004f78 <USB_CoreInit>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0d0      	b.n	8002410 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f002 ffa5 	bl	80051c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e04a      	b.n	8002316 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002280:	7bfa      	ldrb	r2, [r7, #15]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	333d      	adds	r3, #61	; 0x3d
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	333c      	adds	r3, #60	; 0x3c
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	b298      	uxth	r0, r3
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	3344      	adds	r3, #68	; 0x44
 80022bc:	4602      	mov	r2, r0
 80022be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	3340      	adds	r3, #64	; 0x40
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3348      	adds	r3, #72	; 0x48
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	334c      	adds	r3, #76	; 0x4c
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3354      	adds	r3, #84	; 0x54
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	7bfa      	ldrb	r2, [r7, #15]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	d3af      	bcc.n	8002280 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e044      	b.n	80023b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	3301      	adds	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d3b5      	bcc.n	8002326 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	687e      	ldr	r6, [r7, #4]
 80023c2:	466d      	mov	r5, sp
 80023c4:	f106 0410 	add.w	r4, r6, #16
 80023c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d8:	1d33      	adds	r3, r6, #4
 80023da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023dc:	6838      	ldr	r0, [r7, #0]
 80023de:	f002 ff3d 	bl	800525c <USB_DevInit>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e00d      	b.n	8002410 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f004 f88c 	bl	8006526 <USB_DevDisconnect>

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002418 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_PCD_Start+0x1c>
 8002430:	2302      	movs	r3, #2
 8002432:	e020      	b.n	8002476 <HAL_PCD_Start+0x5e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	2b01      	cmp	r3, #1
 8002442:	d109      	bne.n	8002458 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002448:	2b01      	cmp	r3, #1
 800244a:	d005      	beq.n	8002458 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f002 fe8f 	bl	8005180 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f004 f83c 	bl	80064e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800247e:	b590      	push	{r4, r7, lr}
 8002480:	b08d      	sub	sp, #52	; 0x34
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f004 f8fa 	bl	800668e <USB_GetMode>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 848a 	bne.w	8002db6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 f85e 	bl	8006568 <USB_ReadInterrupts>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8480 	beq.w	8002db4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 f84b 	bl	8006568 <USB_ReadInterrupts>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d107      	bne.n	80024ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f002 0202 	and.w	r2, r2, #2
 80024ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f004 f839 	bl	8006568 <USB_ReadInterrupts>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d161      	bne.n	80025c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699a      	ldr	r2, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0210 	bic.w	r2, r2, #16
 800250e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 020f 	and.w	r2, r3, #15
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	3304      	adds	r3, #4
 800252e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	0c5b      	lsrs	r3, r3, #17
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	2b02      	cmp	r3, #2
 800253a:	d124      	bne.n	8002586 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d035      	beq.n	80025b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	6a38      	ldr	r0, [r7, #32]
 800255c:	f003 fe70 	bl	8006240 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800256c:	441a      	add	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6a1a      	ldr	r2, [r3, #32]
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	091b      	lsrs	r3, r3, #4
 800257a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257e:	441a      	add	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	621a      	str	r2, [r3, #32]
 8002584:	e016      	b.n	80025b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	0c5b      	lsrs	r3, r3, #17
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	2b06      	cmp	r3, #6
 8002590:	d110      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002598:	2208      	movs	r2, #8
 800259a:	4619      	mov	r1, r3
 800259c:	6a38      	ldr	r0, [r7, #32]
 800259e:	f003 fe4f 	bl	8006240 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ae:	441a      	add	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0210 	orr.w	r2, r2, #16
 80025c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f003 ffcd 	bl	8006568 <USB_ReadInterrupts>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025d8:	f040 80a7 	bne.w	800272a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 ffd2 	bl	800658e <USB_ReadDevAllOutEpInterrupt>
 80025ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025ec:	e099      	b.n	8002722 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 808e 	beq.w	8002716 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fff6 	bl	80065f6 <USB_ReadDevOutEPInterrupt>
 800260a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002622:	461a      	mov	r2, r3
 8002624:	2301      	movs	r3, #1
 8002626:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fec2 	bl	80033b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002646:	461a      	mov	r2, r3
 8002648:	2308      	movs	r3, #8
 800264a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800264c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 ff98 	bl	8003584 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	4413      	add	r3, r2
 8002666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266a:	461a      	mov	r2, r3
 800266c:	2310      	movs	r3, #16
 800266e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d030      	beq.n	80026dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d109      	bne.n	800269a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002694:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002698:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	3304      	adds	r3, #4
 80026ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	78db      	ldrb	r3, [r3, #3]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d108      	bne.n	80026ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2200      	movs	r2, #0
 80026bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4619      	mov	r1, r3
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f006 fb6f 	bl	8008da8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d6:	461a      	mov	r2, r3
 80026d8:	2302      	movs	r3, #2
 80026da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0320 	and.w	r3, r3, #32
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f2:	461a      	mov	r2, r3
 80026f4:	2320      	movs	r3, #32
 80026f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d009      	beq.n	8002716 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270e:	461a      	mov	r2, r3
 8002710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002714:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	3301      	adds	r3, #1
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	f47f af62 	bne.w	80025ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 ff1a 	bl	8006568 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800273e:	f040 80db 	bne.w	80028f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f003 ff3b 	bl	80065c2 <USB_ReadDevAllInEpInterrupt>
 800274c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002752:	e0cd      	b.n	80028f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80c2 	beq.w	80028e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f003 ff61 	bl	8006632 <USB_ReadDevInEPInterrupt>
 8002770:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d057      	beq.n	800282c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	2201      	movs	r2, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	43db      	mvns	r3, r3
 8002796:	69f9      	ldr	r1, [r7, #28]
 8002798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800279c:	4013      	ands	r3, r2
 800279e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ac:	461a      	mov	r2, r3
 80027ae:	2301      	movs	r3, #1
 80027b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d132      	bne.n	8002820 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	334c      	adds	r3, #76	; 0x4c
 80027ca:	6819      	ldr	r1, [r3, #0]
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4403      	add	r3, r0
 80027da:	3348      	adds	r3, #72	; 0x48
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4419      	add	r1, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4403      	add	r3, r0
 80027ee:	334c      	adds	r3, #76	; 0x4c
 80027f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d113      	bne.n	8002820 <HAL_PCD_IRQHandler+0x3a2>
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	3354      	adds	r3, #84	; 0x54
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d108      	bne.n	8002820 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002818:	461a      	mov	r2, r3
 800281a:	2101      	movs	r1, #1
 800281c:	f003 ff68 	bl	80066f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	b2db      	uxtb	r3, r3
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f006 fa43 	bl	8008cb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002842:	461a      	mov	r2, r3
 8002844:	2308      	movs	r3, #8
 8002846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285e:	461a      	mov	r2, r3
 8002860:	2310      	movs	r3, #16
 8002862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287a:	461a      	mov	r2, r3
 800287c:	2340      	movs	r3, #64	; 0x40
 800287e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d023      	beq.n	80028d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800288a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800288c:	6a38      	ldr	r0, [r7, #32]
 800288e:	f002 fe49 	bl	8005524 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	3338      	adds	r3, #56	; 0x38
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	3304      	adds	r3, #4
 80028a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	78db      	ldrb	r3, [r3, #3]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d108      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2200      	movs	r2, #0
 80028b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f006 fa86 	bl	8008dcc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028cc:	461a      	mov	r2, r3
 80028ce:	2302      	movs	r3, #2
 80028d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fcdb 	bl	800329a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3301      	adds	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f47f af2e 	bne.w	8002754 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 fe33 	bl	8006568 <USB_ReadInterrupts>
 8002902:	4603      	mov	r3, r0
 8002904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800290c:	d122      	bne.n	8002954 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002928:	2b01      	cmp	r3, #1
 800292a:	d108      	bne.n	800293e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002934:	2100      	movs	r1, #0
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fec2 	bl	80036c0 <HAL_PCDEx_LPM_Callback>
 800293c:	e002      	b.n	8002944 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f006 fa24 	bl	8008d8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f003 fe05 	bl	8006568 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002964:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002968:	d112      	bne.n	8002990 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f006 f9e0 	bl	8008d40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800298e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 fde7 	bl	8006568 <USB_ReadInterrupts>
 800299a:	4603      	mov	r3, r0
 800299c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a4:	f040 80b7 	bne.w	8002b16 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2110      	movs	r1, #16
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fdae 	bl	8005524 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029cc:	e046      	b.n	8002a5c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029da:	461a      	mov	r2, r3
 80029dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a26:	0151      	lsls	r1, r2, #5
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	440a      	add	r2, r1
 8002a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a46:	0151      	lsls	r1, r2, #5
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	440a      	add	r2, r1
 8002a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	3301      	adds	r3, #1
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d3b3      	bcc.n	80029ce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a92:	f043 030b 	orr.w	r3, r3, #11
 8002a96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa8:	f043 030b 	orr.w	r3, r3, #11
 8002aac:	6453      	str	r3, [r2, #68]	; 0x44
 8002aae:	e015      	b.n	8002adc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ac2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ac6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad6:	f043 030b 	orr.w	r3, r3, #11
 8002ada:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002aee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b00:	461a      	mov	r2, r3
 8002b02:	f003 fdf5 	bl	80066f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 fd24 	bl	8006568 <USB_ReadInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2a:	d124      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 fdba 	bl	80066aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 fd6f 	bl	800561e <USB_GetDevSpeed>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681c      	ldr	r4, [r3, #0]
 8002b4c:	f001 f9e8 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8002b50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f002 fa6e 	bl	800503c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f006 f8ce 	bl	8008d02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 fcf4 	bl	8006568 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d10a      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f006 f8ab 	bl	8008ce6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f002 0208 	and.w	r2, r2, #8
 8002b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fcdf 	bl	8006568 <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d122      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	e014      	b.n	8002bf0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 fb27 	bl	8003238 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	3301      	adds	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3e5      	bcc.n	8002bc6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 fcb2 	bl	8006568 <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c0e:	d13b      	bne.n	8002c88 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c10:	2301      	movs	r3, #1
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
 8002c14:	e02b      	b.n	8002c6e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	3340      	adds	r3, #64	; 0x40
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d115      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da12      	bge.n	8002c68 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	333f      	adds	r3, #63	; 0x3f
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4619      	mov	r1, r3
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fae8 	bl	8003238 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3ce      	bcc.n	8002c16 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 fc6b 	bl	8006568 <USB_ReadInterrupts>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c9c:	d155      	bne.n	8002d4a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca2:	e045      	b.n	8002d30 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d12e      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ccc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da2b      	bge.n	8002d2a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002cde:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d121      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d26:	6053      	str	r3, [r2, #4]
            break;
 8002d28:	e007      	b.n	8002d3a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d3b4      	bcc.n	8002ca4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fc0a 	bl	8006568 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d10a      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f006 f845 	bl	8008df0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fbf4 	bl	8006568 <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d115      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f006 f835 	bl	8008e0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	e000      	b.n	8002db6 <HAL_PCD_IRQHandler+0x938>
      return;
 8002db4:	bf00      	nop
    }
  }
}
 8002db6:	3734      	adds	r7, #52	; 0x34
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}

08002dbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_SetAddress+0x1a>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e013      	b.n	8002dfe <HAL_PCD_SetAddress+0x42>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fb52 	bl	8006498 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	4608      	mov	r0, r1
 8002e10:	4611      	mov	r1, r2
 8002e12:	461a      	mov	r2, r3
 8002e14:	4603      	mov	r3, r0
 8002e16:	70fb      	strb	r3, [r7, #3]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	803b      	strh	r3, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	da0f      	bge.n	8002e4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 020f 	and.w	r2, r3, #15
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	3338      	adds	r3, #56	; 0x38
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	3304      	adds	r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	705a      	strb	r2, [r3, #1]
 8002e4a:	e00f      	b.n	8002e6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	f003 020f 	and.w	r2, r3, #15
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e78:	883a      	ldrh	r2, [r7, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	78ba      	ldrb	r2, [r7, #2]
 8002e82:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e96:	78bb      	ldrb	r3, [r7, #2]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d102      	bne.n	8002ea2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_PCD_EP_Open+0xaa>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e00e      	b.n	8002ece <HAL_PCD_EP_Open+0xc8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68f9      	ldr	r1, [r7, #12]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 fbd2 	bl	8005668 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	da0f      	bge.n	8002f0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 020f 	and.w	r2, r3, #15
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	3338      	adds	r3, #56	; 0x38
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	3304      	adds	r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	705a      	strb	r2, [r3, #1]
 8002f08:	e00f      	b.n	8002f2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 020f 	and.w	r2, r3, #15
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_PCD_EP_Close+0x6e>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e00e      	b.n	8002f62 <HAL_PCD_EP_Close+0x8c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fc10 	bl	8005778 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	460b      	mov	r3, r1
 8002f78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	7afb      	ldrb	r3, [r7, #11]
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	3304      	adds	r3, #4
 8002f92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fac:	7afb      	ldrb	r3, [r7, #11]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d102      	bne.n	8002fc6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	6979      	ldr	r1, [r7, #20]
 8002fde:	f002 feef 	bl	8005dc0 <USB_EP0StartXfer>
 8002fe2:	e008      	b.n	8002ff6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6979      	ldr	r1, [r7, #20]
 8002ff2:	f002 fc9d 	bl	8005930 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 020f 	and.w	r2, r3, #15
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	460b      	mov	r3, r1
 800303e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3338      	adds	r3, #56	; 0x38
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2200      	movs	r2, #0
 8003068:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2201      	movs	r2, #1
 800306e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	b2da      	uxtb	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d102      	bne.n	800308a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800308a:	7afb      	ldrb	r3, [r7, #11]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	6979      	ldr	r1, [r7, #20]
 80030a2:	f002 fe8d 	bl	8005dc0 <USB_EP0StartXfer>
 80030a6:	e008      	b.n	80030ba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	f002 fc3b 	bl	8005930 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 020f 	and.w	r2, r3, #15
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d901      	bls.n	80030e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e050      	b.n	8003184 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da0f      	bge.n	800310a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	f003 020f 	and.w	r2, r3, #15
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	3338      	adds	r3, #56	; 0x38
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	3304      	adds	r3, #4
 8003100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	705a      	strb	r2, [r3, #1]
 8003108:	e00d      	b.n	8003126 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	b2da      	uxtb	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_PCD_EP_SetStall+0x82>
 8003142:	2302      	movs	r3, #2
 8003144:	e01e      	b.n	8003184 <HAL_PCD_EP_SetStall+0xc0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68f9      	ldr	r1, [r7, #12]
 8003154:	4618      	mov	r0, r3
 8003156:	f003 f8cb 	bl	80062f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	b2d9      	uxtb	r1, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003174:	461a      	mov	r2, r3
 8003176:	f003 fabb 	bl	80066f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d901      	bls.n	80031aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e042      	b.n	8003230 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	da0f      	bge.n	80031d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	3338      	adds	r3, #56	; 0x38
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	3304      	adds	r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	705a      	strb	r2, [r3, #1]
 80031d0:	e00f      	b.n	80031f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 020f 	and.w	r2, r3, #15
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_PCD_EP_ClrStall+0x86>
 800320e:	2302      	movs	r3, #2
 8003210:	e00e      	b.n	8003230 <HAL_PCD_EP_ClrStall+0xa4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	4618      	mov	r0, r3
 8003222:	f003 f8d3 	bl	80063cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003248:	2b00      	cmp	r3, #0
 800324a:	da0c      	bge.n	8003266 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 020f 	and.w	r2, r3, #15
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	3338      	adds	r3, #56	; 0x38
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e00c      	b.n	8003280 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	3304      	adds	r3, #4
 800327e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	4618      	mov	r0, r3
 8003288:	f002 fef2 	bl	8006070 <USB_EPStopXfer>
 800328c:	4603      	mov	r3, r0
 800328e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003290:	7afb      	ldrb	r3, [r7, #11]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b08a      	sub	sp, #40	; 0x28
 800329e:	af02      	add	r7, sp, #8
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	3338      	adds	r3, #56	; 0x38
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	3304      	adds	r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d901      	bls.n	80032d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e06c      	b.n	80033ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d902      	bls.n	80032ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3303      	adds	r3, #3
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032f6:	e02b      	b.n	8003350 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	429a      	cmp	r2, r3
 800330c:	d902      	bls.n	8003314 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3303      	adds	r3, #3
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6919      	ldr	r1, [r3, #16]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800332c:	b2db      	uxtb	r3, r3
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	4603      	mov	r3, r0
 8003332:	6978      	ldr	r0, [r7, #20]
 8003334:	f002 ff46 	bl	80061c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	441a      	add	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1a      	ldr	r2, [r3, #32]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	441a      	add	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	b29b      	uxth	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	429a      	cmp	r2, r3
 8003364:	d809      	bhi.n	800337a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1a      	ldr	r2, [r3, #32]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800336e:	429a      	cmp	r2, r3
 8003370:	d203      	bcs.n	800337a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1be      	bne.n	80032f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	429a      	cmp	r2, r3
 8003384:	d811      	bhi.n	80033aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	2201      	movs	r2, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	43db      	mvns	r3, r3
 80033a0:	6939      	ldr	r1, [r7, #16]
 80033a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033a6:	4013      	ands	r3, r2
 80033a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3720      	adds	r7, #32
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	333c      	adds	r3, #60	; 0x3c
 80033cc:	3304      	adds	r3, #4
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d17b      	bne.n	80034e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d015      	beq.n	8003420 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	4a61      	ldr	r2, [pc, #388]	; (800357c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	f240 80b9 	bls.w	8003570 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80b3 	beq.w	8003570 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800341c:	6093      	str	r3, [r2, #8]
 800341e:	e0a7      	b.n	8003570 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	461a      	mov	r2, r3
 8003438:	2320      	movs	r3, #32
 800343a:	6093      	str	r3, [r2, #8]
 800343c:	e098      	b.n	8003570 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	f040 8093 	bne.w	8003570 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	4a4b      	ldr	r2, [pc, #300]	; (800357c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d90f      	bls.n	8003472 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003468:	461a      	mov	r2, r3
 800346a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346e:	6093      	str	r3, [r2, #8]
 8003470:	e07e      	b.n	8003570 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	3304      	adds	r3, #4
 8003486:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	440b      	add	r3, r1
 8003494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349e:	1ad2      	subs	r2, r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d114      	bne.n	80034d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034bc:	461a      	mov	r2, r3
 80034be:	2101      	movs	r1, #1
 80034c0:	f003 f916 	bl	80066f0 <USB_EP0_OutStart>
 80034c4:	e006      	b.n	80034d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	441a      	add	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4619      	mov	r1, r3
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f005 fbce 	bl	8008c7c <HAL_PCD_DataOutStageCallback>
 80034e0:	e046      	b.n	8003570 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	4a26      	ldr	r2, [pc, #152]	; (8003580 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d124      	bne.n	8003534 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	461a      	mov	r2, r3
 8003502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003506:	6093      	str	r3, [r2, #8]
 8003508:	e032      	b.n	8003570 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003520:	461a      	mov	r2, r3
 8003522:	2320      	movs	r3, #32
 8003524:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f005 fba5 	bl	8008c7c <HAL_PCD_DataOutStageCallback>
 8003532:	e01d      	b.n	8003570 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d114      	bne.n	8003564 <PCD_EP_OutXfrComplete_int+0x1b0>
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800355c:	461a      	mov	r2, r3
 800355e:	2100      	movs	r1, #0
 8003560:	f003 f8c6 	bl	80066f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f005 fb86 	bl	8008c7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	4f54300a 	.word	0x4f54300a
 8003580:	4f54310a 	.word	0x4f54310a

08003584 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	333c      	adds	r3, #60	; 0x3c
 800359c:	3304      	adds	r3, #4
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a15      	ldr	r2, [pc, #84]	; (800360c <PCD_EP_OutSetupPacket_int+0x88>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d90e      	bls.n	80035d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d0:	461a      	mov	r2, r3
 80035d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f005 fb3d 	bl	8008c58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <PCD_EP_OutSetupPacket_int+0x88>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d90c      	bls.n	8003600 <PCD_EP_OutSetupPacket_int+0x7c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d108      	bne.n	8003600 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035f8:	461a      	mov	r2, r3
 80035fa:	2101      	movs	r1, #1
 80035fc:	f003 f878 	bl	80066f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	4f54300a 	.word	0x4f54300a

08003610 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	70fb      	strb	r3, [r7, #3]
 800361c:	4613      	mov	r3, r2
 800361e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d107      	bne.n	800363e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800362e:	883b      	ldrh	r3, [r7, #0]
 8003630:	0419      	lsls	r1, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	430a      	orrs	r2, r1
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
 800363c:	e028      	b.n	8003690 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4413      	add	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	e00d      	b.n	800366e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	3340      	adds	r3, #64	; 0x40
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	0c1b      	lsrs	r3, r3, #16
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	4413      	add	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	3301      	adds	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	3b01      	subs	r3, #1
 8003674:	429a      	cmp	r2, r3
 8003676:	d3ec      	bcc.n	8003652 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003678:	883b      	ldrh	r3, [r7, #0]
 800367a:	0418      	lsls	r0, r3, #16
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	3b01      	subs	r3, #1
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	4302      	orrs	r2, r0
 8003688:	3340      	adds	r3, #64	; 0x40
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e267      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d075      	beq.n	80037e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d00c      	beq.n	800371c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003702:	4b85      	ldr	r3, [pc, #532]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800370a:	2b08      	cmp	r3, #8
 800370c:	d112      	bne.n	8003734 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370e:	4b82      	ldr	r3, [pc, #520]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800371a:	d10b      	bne.n	8003734 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	4b7e      	ldr	r3, [pc, #504]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d05b      	beq.n	80037e0 <HAL_RCC_OscConfig+0x108>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d157      	bne.n	80037e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e242      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d106      	bne.n	800374c <HAL_RCC_OscConfig+0x74>
 800373e:	4b76      	ldr	r3, [pc, #472]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a75      	ldr	r2, [pc, #468]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e01d      	b.n	8003788 <HAL_RCC_OscConfig+0xb0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0x98>
 8003756:	4b70      	ldr	r3, [pc, #448]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a6f      	ldr	r2, [pc, #444]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b6d      	ldr	r3, [pc, #436]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6c      	ldr	r2, [pc, #432]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0xb0>
 8003770:	4b69      	ldr	r3, [pc, #420]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a68      	ldr	r2, [pc, #416]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b66      	ldr	r3, [pc, #408]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a65      	ldr	r2, [pc, #404]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe f9f0 	bl	8001b74 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003798:	f7fe f9ec 	bl	8001b74 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e207      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	4b5b      	ldr	r3, [pc, #364]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0xc0>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe f9dc 	bl	8001b74 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fe f9d8 	bl	8001b74 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1f3      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d2:	4b51      	ldr	r3, [pc, #324]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0xe8>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d063      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ee:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003802:	2b08      	cmp	r3, #8
 8003804:	d11c      	bne.n	8003840 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003806:	4b44      	ldr	r3, [pc, #272]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d116      	bne.n	8003840 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003812:	4b41      	ldr	r3, [pc, #260]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_RCC_OscConfig+0x152>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e1c7      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4937      	ldr	r1, [pc, #220]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	e03a      	b.n	80038b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d020      	beq.n	800388a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003848:	4b34      	ldr	r3, [pc, #208]	; (800391c <HAL_RCC_OscConfig+0x244>)
 800384a:	2201      	movs	r2, #1
 800384c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7fe f991 	bl	8001b74 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003856:	f7fe f98d 	bl	8001b74 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e1a8      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4925      	ldr	r1, [pc, #148]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
 8003888:	e015      	b.n	80038b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_OscConfig+0x244>)
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fe f970 	bl	8001b74 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003898:	f7fe f96c 	bl	8001b74 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e187      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038aa:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d036      	beq.n	8003930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <HAL_RCC_OscConfig+0x248>)
 80038cc:	2201      	movs	r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d0:	f7fe f950 	bl	8001b74 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d8:	f7fe f94c 	bl	8001b74 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e167      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_OscConfig+0x240>)
 80038ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x200>
 80038f6:	e01b      	b.n	8003930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_OscConfig+0x248>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fe:	f7fe f939 	bl	8001b74 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	e00e      	b.n	8003924 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003906:	f7fe f935 	bl	8001b74 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d907      	bls.n	8003924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e150      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
 8003918:	40023800 	.word	0x40023800
 800391c:	42470000 	.word	0x42470000
 8003920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003924:	4b88      	ldr	r3, [pc, #544]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1ea      	bne.n	8003906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8097 	beq.w	8003a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393e:	2300      	movs	r3, #0
 8003940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003942:	4b81      	ldr	r3, [pc, #516]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	4b7d      	ldr	r3, [pc, #500]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a7c      	ldr	r2, [pc, #496]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b7a      	ldr	r3, [pc, #488]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396a:	2301      	movs	r3, #1
 800396c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396e:	4b77      	ldr	r3, [pc, #476]	; (8003b4c <HAL_RCC_OscConfig+0x474>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d118      	bne.n	80039ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397a:	4b74      	ldr	r3, [pc, #464]	; (8003b4c <HAL_RCC_OscConfig+0x474>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a73      	ldr	r2, [pc, #460]	; (8003b4c <HAL_RCC_OscConfig+0x474>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003986:	f7fe f8f5 	bl	8001b74 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398e:	f7fe f8f1 	bl	8001b74 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e10c      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a0:	4b6a      	ldr	r3, [pc, #424]	; (8003b4c <HAL_RCC_OscConfig+0x474>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x2ea>
 80039b4:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a63      	ldr	r2, [pc, #396]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
 80039c0:	e01c      	b.n	80039fc <HAL_RCC_OscConfig+0x324>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b05      	cmp	r3, #5
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x30c>
 80039ca:	4b5f      	ldr	r3, [pc, #380]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	4a5e      	ldr	r2, [pc, #376]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039d0:	f043 0304 	orr.w	r3, r3, #4
 80039d4:	6713      	str	r3, [r2, #112]	; 0x70
 80039d6:	4b5c      	ldr	r3, [pc, #368]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a5b      	ldr	r2, [pc, #364]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	e00b      	b.n	80039fc <HAL_RCC_OscConfig+0x324>
 80039e4:	4b58      	ldr	r3, [pc, #352]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	4a57      	ldr	r2, [pc, #348]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	6713      	str	r3, [r2, #112]	; 0x70
 80039f0:	4b55      	ldr	r3, [pc, #340]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a54      	ldr	r2, [pc, #336]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 80039f6:	f023 0304 	bic.w	r3, r3, #4
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d015      	beq.n	8003a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fe f8b6 	bl	8001b74 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fe f8b2 	bl	8001b74 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e0cb      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a22:	4b49      	ldr	r3, [pc, #292]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0ee      	beq.n	8003a0c <HAL_RCC_OscConfig+0x334>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a30:	f7fe f8a0 	bl	8001b74 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fe f89c 	bl	8001b74 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0b5      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4e:	4b3e      	ldr	r3, [pc, #248]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1ee      	bne.n	8003a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a60:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80a1 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d05c      	beq.n	8003b3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d141      	bne.n	8003b0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <HAL_RCC_OscConfig+0x478>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fe f870 	bl	8001b74 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fe f86c 	bl	8001b74 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e087      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	491b      	ldr	r1, [pc, #108]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_RCC_OscConfig+0x478>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae6:	f7fe f845 	bl	8001b74 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aee:	f7fe f841 	bl	8001b74 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e05c      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x416>
 8003b0c:	e054      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <HAL_RCC_OscConfig+0x478>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fe f82e 	bl	8001b74 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fe f82a 	bl	8001b74 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e045      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_RCC_OscConfig+0x470>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x444>
 8003b3a:	e03d      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d107      	bne.n	8003b54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e038      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x4ec>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d028      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d121      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d11a      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b84:	4013      	ands	r3, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d111      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800

08003bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0cc      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b68      	ldr	r3, [pc, #416]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d90c      	bls.n	8003c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b65      	ldr	r3, [pc, #404]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b63      	ldr	r3, [pc, #396]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0b8      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d020      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c1c:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c34:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c40:	4b50      	ldr	r3, [pc, #320]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	494d      	ldr	r1, [pc, #308]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d044      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d119      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e07f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d107      	bne.n	8003c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e06f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c96:	4b3b      	ldr	r3, [pc, #236]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e067      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	4934      	ldr	r1, [pc, #208]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb8:	f7fd ff5c 	bl	8001b74 <HAL_GetTick>
 8003cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7fd ff58 	bl	8001b74 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e04f      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 020c 	and.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d1eb      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b25      	ldr	r3, [pc, #148]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d20c      	bcs.n	8003d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e032      	b.n	8003d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d1c:	4b19      	ldr	r3, [pc, #100]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4916      	ldr	r1, [pc, #88]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	490e      	ldr	r1, [pc, #56]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d4e:	f000 f821 	bl	8003d94 <HAL_RCC_GetSysClockFreq>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	490a      	ldr	r1, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	5ccb      	ldrb	r3, [r1, r3]
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd febc 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023c00 	.word	0x40023c00
 8003d84:	40023800 	.word	0x40023800
 8003d88:	08009298 	.word	0x08009298
 8003d8c:	2000002c 	.word	0x2000002c
 8003d90:	20000030 	.word	0x20000030

08003d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d98:	b090      	sub	sp, #64	; 0x40
 8003d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003da0:	2300      	movs	r3, #0
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da4:	2300      	movs	r3, #0
 8003da6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dac:	4b59      	ldr	r3, [pc, #356]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d00d      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	f200 80a1 	bhi.w	8003f00 <HAL_RCC_GetSysClockFreq+0x16c>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d003      	beq.n	8003dce <HAL_RCC_GetSysClockFreq+0x3a>
 8003dc6:	e09b      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4b53      	ldr	r3, [pc, #332]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003dcc:	e09b      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dce:	4b53      	ldr	r3, [pc, #332]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003dd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dd2:	e098      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd4:	4b4f      	ldr	r3, [pc, #316]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ddc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dde:	4b4d      	ldr	r3, [pc, #308]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d028      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dea:	4b4a      	ldr	r3, [pc, #296]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	099b      	lsrs	r3, r3, #6
 8003df0:	2200      	movs	r2, #0
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	627a      	str	r2, [r7, #36]	; 0x24
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e00:	fb03 f201 	mul.w	r2, r3, r1
 8003e04:	2300      	movs	r3, #0
 8003e06:	fb00 f303 	mul.w	r3, r0, r3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4a43      	ldr	r2, [pc, #268]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003e0e:	fba0 1202 	umull	r1, r2, r0, r2
 8003e12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e14:	460a      	mov	r2, r1
 8003e16:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e1a:	4413      	add	r3, r2
 8003e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	2200      	movs	r2, #0
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	61fa      	str	r2, [r7, #28]
 8003e26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e2e:	f7fc fd73 	bl	8000918 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4613      	mov	r3, r2
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3a:	e053      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3c:	4b35      	ldr	r3, [pc, #212]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	099b      	lsrs	r3, r3, #6
 8003e42:	2200      	movs	r2, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	617a      	str	r2, [r7, #20]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e4e:	f04f 0b00 	mov.w	fp, #0
 8003e52:	4652      	mov	r2, sl
 8003e54:	465b      	mov	r3, fp
 8003e56:	f04f 0000 	mov.w	r0, #0
 8003e5a:	f04f 0100 	mov.w	r1, #0
 8003e5e:	0159      	lsls	r1, r3, #5
 8003e60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e64:	0150      	lsls	r0, r2, #5
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	ebb2 080a 	subs.w	r8, r2, sl
 8003e6e:	eb63 090b 	sbc.w	r9, r3, fp
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e86:	ebb2 0408 	subs.w	r4, r2, r8
 8003e8a:	eb63 0509 	sbc.w	r5, r3, r9
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	00eb      	lsls	r3, r5, #3
 8003e98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e9c:	00e2      	lsls	r2, r4, #3
 8003e9e:	4614      	mov	r4, r2
 8003ea0:	461d      	mov	r5, r3
 8003ea2:	eb14 030a 	adds.w	r3, r4, sl
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	eb45 030b 	adc.w	r3, r5, fp
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eba:	4629      	mov	r1, r5
 8003ebc:	028b      	lsls	r3, r1, #10
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	028a      	lsls	r2, r1, #10
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ece:	2200      	movs	r2, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	60fa      	str	r2, [r7, #12]
 8003ed4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ed8:	f7fc fd1e 	bl	8000918 <__aeabi_uldivmod>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003efe:	e002      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3740      	adds	r7, #64	; 0x40
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f12:	bf00      	nop
 8003f14:	40023800 	.word	0x40023800
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	017d7840 	.word	0x017d7840

08003f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	2000002c 	.word	0x2000002c

08003f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e041      	b.n	8003fce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fd f8e8 	bl	8001134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f000 fc5e 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d001      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e044      	b.n	800407a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1e      	ldr	r2, [pc, #120]	; (8004088 <HAL_TIM_Base_Start_IT+0xb0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0x6c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401a:	d013      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0x6c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_TIM_Base_Start_IT+0xb4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00e      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0x6c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_TIM_Base_Start_IT+0xb8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d009      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0x6c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a17      	ldr	r2, [pc, #92]	; (8004094 <HAL_TIM_Base_Start_IT+0xbc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_TIM_Base_Start_IT+0x6c>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a16      	ldr	r2, [pc, #88]	; (8004098 <HAL_TIM_Base_Start_IT+0xc0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d111      	bne.n	8004068 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b06      	cmp	r3, #6
 8004054:	d010      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004066:	e007      	b.n	8004078 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40014000 	.word	0x40014000

0800409c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e041      	b.n	8004132 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f839 	bl	800413a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f000 fbac 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
	...

08004150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <HAL_TIM_PWM_Start+0x24>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e022      	b.n	80041ba <HAL_TIM_PWM_Start+0x6a>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b04      	cmp	r3, #4
 8004178:	d109      	bne.n	800418e <HAL_TIM_PWM_Start+0x3e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	e015      	b.n	80041ba <HAL_TIM_PWM_Start+0x6a>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d109      	bne.n	80041a8 <HAL_TIM_PWM_Start+0x58>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e008      	b.n	80041ba <HAL_TIM_PWM_Start+0x6a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e068      	b.n	8004294 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_TIM_PWM_Start+0x82>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d0:	e013      	b.n	80041fa <HAL_TIM_PWM_Start+0xaa>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_PWM_Start+0x92>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e0:	e00b      	b.n	80041fa <HAL_TIM_PWM_Start+0xaa>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_PWM_Start+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f0:	e003      	b.n	80041fa <HAL_TIM_PWM_Start+0xaa>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2201      	movs	r2, #1
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fdbe 	bl	8004d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a23      	ldr	r2, [pc, #140]	; (800429c <HAL_TIM_PWM_Start+0x14c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d107      	bne.n	8004222 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1d      	ldr	r2, [pc, #116]	; (800429c <HAL_TIM_PWM_Start+0x14c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d018      	beq.n	800425e <HAL_TIM_PWM_Start+0x10e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d013      	beq.n	800425e <HAL_TIM_PWM_Start+0x10e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a19      	ldr	r2, [pc, #100]	; (80042a0 <HAL_TIM_PWM_Start+0x150>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00e      	beq.n	800425e <HAL_TIM_PWM_Start+0x10e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <HAL_TIM_PWM_Start+0x154>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_TIM_PWM_Start+0x10e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a16      	ldr	r2, [pc, #88]	; (80042a8 <HAL_TIM_PWM_Start+0x158>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_TIM_PWM_Start+0x10e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a14      	ldr	r2, [pc, #80]	; (80042ac <HAL_TIM_PWM_Start+0x15c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d111      	bne.n	8004282 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b06      	cmp	r3, #6
 800426e:	d010      	beq.n	8004292 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004280:	e007      	b.n	8004292 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40010000 	.word	0x40010000
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800
 80042a8:	40000c00 	.word	0x40000c00
 80042ac:	40014000 	.word	0x40014000

080042b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d122      	bne.n	800430c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d11b      	bne.n	800430c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0202 	mvn.w	r2, #2
 80042dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fa81 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa73 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fa84 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b04      	cmp	r3, #4
 8004318:	d122      	bne.n	8004360 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b04      	cmp	r3, #4
 8004326:	d11b      	bne.n	8004360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0204 	mvn.w	r2, #4
 8004330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fa57 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa49 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fa5a 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b08      	cmp	r3, #8
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b08      	cmp	r3, #8
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0208 	mvn.w	r2, #8
 8004384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2204      	movs	r2, #4
 800438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa2d 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa1f 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fa30 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0210 	mvn.w	r2, #16
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2208      	movs	r2, #8
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa03 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9f5 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fa06 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d10e      	bne.n	8004434 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d107      	bne.n	8004434 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0201 	mvn.w	r2, #1
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f9cf 	bl	80047d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443e:	2b80      	cmp	r3, #128	; 0x80
 8004440:	d10e      	bne.n	8004460 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d107      	bne.n	8004460 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fd82 	bl	8004f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d10e      	bne.n	800448c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d107      	bne.n	800448c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9cb 	bl	8004822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b20      	cmp	r3, #32
 8004498:	d10e      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d107      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f06f 0220 	mvn.w	r2, #32
 80044b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fd4c 	bl	8004f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044da:	2302      	movs	r3, #2
 80044dc:	e0ae      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	f200 809f 	bhi.w	800462c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004529 	.word	0x08004529
 80044f8:	0800462d 	.word	0x0800462d
 80044fc:	0800462d 	.word	0x0800462d
 8004500:	0800462d 	.word	0x0800462d
 8004504:	08004569 	.word	0x08004569
 8004508:	0800462d 	.word	0x0800462d
 800450c:	0800462d 	.word	0x0800462d
 8004510:	0800462d 	.word	0x0800462d
 8004514:	080045ab 	.word	0x080045ab
 8004518:	0800462d 	.word	0x0800462d
 800451c:	0800462d 	.word	0x0800462d
 8004520:	0800462d 	.word	0x0800462d
 8004524:	080045eb 	.word	0x080045eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fa02 	bl	8004938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0204 	bic.w	r2, r2, #4
 8004552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6999      	ldr	r1, [r3, #24]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	619a      	str	r2, [r3, #24]
      break;
 8004566:	e064      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fa48 	bl	8004a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6999      	ldr	r1, [r3, #24]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	021a      	lsls	r2, r3, #8
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	619a      	str	r2, [r3, #24]
      break;
 80045a8:	e043      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fa93 	bl	8004adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0208 	orr.w	r2, r2, #8
 80045c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0204 	bic.w	r2, r2, #4
 80045d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69d9      	ldr	r1, [r3, #28]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	61da      	str	r2, [r3, #28]
      break;
 80045e8:	e023      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fadd 	bl	8004bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	69d9      	ldr	r1, [r3, #28]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	021a      	lsls	r2, r3, #8
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	61da      	str	r2, [r3, #28]
      break;
 800462a:	e002      	b.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
      break;
 8004630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_TIM_ConfigClockSource+0x1c>
 800465c:	2302      	movs	r3, #2
 800465e:	e0b4      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x186>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800467e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004698:	d03e      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0xd4>
 800469a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469e:	f200 8087 	bhi.w	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a6:	f000 8086 	beq.w	80047b6 <HAL_TIM_ConfigClockSource+0x172>
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ae:	d87f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b70      	cmp	r3, #112	; 0x70
 80046b2:	d01a      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xa6>
 80046b4:	2b70      	cmp	r3, #112	; 0x70
 80046b6:	d87b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b60      	cmp	r3, #96	; 0x60
 80046ba:	d050      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x11a>
 80046bc:	2b60      	cmp	r3, #96	; 0x60
 80046be:	d877      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b50      	cmp	r3, #80	; 0x50
 80046c2:	d03c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0xfa>
 80046c4:	2b50      	cmp	r3, #80	; 0x50
 80046c6:	d873      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d058      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x13a>
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	d86f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b30      	cmp	r3, #48	; 0x30
 80046d2:	d064      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	2b30      	cmp	r3, #48	; 0x30
 80046d6:	d86b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d060      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d867      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d05a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15a>
 80046e8:	e062      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6899      	ldr	r1, [r3, #8]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f000 fb23 	bl	8004d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800470c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	609a      	str	r2, [r3, #8]
      break;
 8004716:	e04f      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6899      	ldr	r1, [r3, #8]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f000 fb0c 	bl	8004d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800473a:	609a      	str	r2, [r3, #8]
      break;
 800473c:	e03c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	461a      	mov	r2, r3
 800474c:	f000 fa80 	bl	8004c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2150      	movs	r1, #80	; 0x50
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fad9 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 800475c:	e02c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	461a      	mov	r2, r3
 800476c:	f000 fa9f 	bl	8004cae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2160      	movs	r1, #96	; 0x60
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fac9 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 800477c:	e01c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	461a      	mov	r2, r3
 800478c:	f000 fa60 	bl	8004c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2140      	movs	r1, #64	; 0x40
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fab9 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 800479c:	e00c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f000 fab0 	bl	8004d0e <TIM_ITRx_SetConfig>
      break;
 80047ae:	e003      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      break;
 80047b4:	e000      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a34      	ldr	r2, [pc, #208]	; (800491c <TIM_Base_SetConfig+0xe4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00f      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d00b      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a31      	ldr	r2, [pc, #196]	; (8004920 <TIM_Base_SetConfig+0xe8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a30      	ldr	r2, [pc, #192]	; (8004924 <TIM_Base_SetConfig+0xec>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a2f      	ldr	r2, [pc, #188]	; (8004928 <TIM_Base_SetConfig+0xf0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <TIM_Base_SetConfig+0xe4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01b      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d017      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a22      	ldr	r2, [pc, #136]	; (8004920 <TIM_Base_SetConfig+0xe8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a21      	ldr	r2, [pc, #132]	; (8004924 <TIM_Base_SetConfig+0xec>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00f      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a20      	ldr	r2, [pc, #128]	; (8004928 <TIM_Base_SetConfig+0xf0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <TIM_Base_SetConfig+0xf4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a1e      	ldr	r2, [pc, #120]	; (8004930 <TIM_Base_SetConfig+0xf8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <TIM_Base_SetConfig+0xfc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <TIM_Base_SetConfig+0xe4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d103      	bne.n	8004908 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	615a      	str	r2, [r3, #20]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400
 8004934:	40014800 	.word	0x40014800

08004938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 0302 	bic.w	r3, r3, #2
 8004980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <TIM_OC1_SetConfig+0xc8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d10c      	bne.n	80049ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0308 	bic.w	r3, r3, #8
 800499a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <TIM_OC1_SetConfig+0xc8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d111      	bne.n	80049da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40010000 	.word	0x40010000

08004a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f023 0210 	bic.w	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0320 	bic.w	r3, r3, #32
 8004a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ad8 <TIM_OC2_SetConfig+0xd4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10d      	bne.n	8004a80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <TIM_OC2_SetConfig+0xd4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d113      	bne.n	8004ab0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40010000 	.word	0x40010000

08004adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a1d      	ldr	r2, [pc, #116]	; (8004bac <TIM_OC3_SetConfig+0xd0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10d      	bne.n	8004b56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a14      	ldr	r2, [pc, #80]	; (8004bac <TIM_OC3_SetConfig+0xd0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40010000 	.word	0x40010000

08004bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	031b      	lsls	r3, r3, #12
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a10      	ldr	r2, [pc, #64]	; (8004c4c <TIM_OC4_SetConfig+0x9c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d109      	bne.n	8004c24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	019b      	lsls	r3, r3, #6
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010000 	.word	0x40010000

08004c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f023 0201 	bic.w	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f023 030a 	bic.w	r3, r3, #10
 8004c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b087      	sub	sp, #28
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	60b9      	str	r1, [r7, #8]
 8004cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f023 0210 	bic.w	r2, r3, #16
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	031b      	lsls	r3, r3, #12
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	621a      	str	r2, [r3, #32]
}
 8004d02:	bf00      	nop
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f043 0307 	orr.w	r3, r3, #7
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	609a      	str	r2, [r3, #8]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	021a      	lsls	r2, r3, #8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	609a      	str	r2, [r3, #8]
}
 8004d78:	bf00      	nop
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2201      	movs	r2, #1
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1a      	ldr	r2, [r3, #32]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	401a      	ands	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	621a      	str	r2, [r3, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	371c      	adds	r7, #28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e050      	b.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1c      	ldr	r2, [pc, #112]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e34:	d013      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a16      	ldr	r2, [pc, #88]	; (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d10c      	bne.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40000c00 	.word	0x40000c00
 8004ea8:	40014000 	.word	0x40014000

08004eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e03d      	b.n	8004f44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f78:	b084      	sub	sp, #16
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	f107 001c 	add.w	r0, r7, #28
 8004f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d122      	bne.n	8004fd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d105      	bne.n	8004fca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 fbee 	bl	80067ac <USB_CoreReset>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	e01a      	b.n	800500c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f001 fbe2 	bl	80067ac <USB_CoreReset>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ffe:	e005      	b.n	800500c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	2b01      	cmp	r3, #1
 8005010:	d10b      	bne.n	800502a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f043 0206 	orr.w	r2, r3, #6
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f043 0220 	orr.w	r2, r3, #32
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005036:	b004      	add	sp, #16
 8005038:	4770      	bx	lr
	...

0800503c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d165      	bne.n	800511c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4a41      	ldr	r2, [pc, #260]	; (8005158 <USB_SetTurnaroundTime+0x11c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d906      	bls.n	8005066 <USB_SetTurnaroundTime+0x2a>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4a40      	ldr	r2, [pc, #256]	; (800515c <USB_SetTurnaroundTime+0x120>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d202      	bcs.n	8005066 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005060:	230f      	movs	r3, #15
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	e062      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4a3c      	ldr	r2, [pc, #240]	; (800515c <USB_SetTurnaroundTime+0x120>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d306      	bcc.n	800507c <USB_SetTurnaroundTime+0x40>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4a3b      	ldr	r2, [pc, #236]	; (8005160 <USB_SetTurnaroundTime+0x124>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d202      	bcs.n	800507c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005076:	230e      	movs	r3, #14
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	e057      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4a38      	ldr	r2, [pc, #224]	; (8005160 <USB_SetTurnaroundTime+0x124>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d306      	bcc.n	8005092 <USB_SetTurnaroundTime+0x56>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4a37      	ldr	r2, [pc, #220]	; (8005164 <USB_SetTurnaroundTime+0x128>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d202      	bcs.n	8005092 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800508c:	230d      	movs	r3, #13
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e04c      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4a33      	ldr	r2, [pc, #204]	; (8005164 <USB_SetTurnaroundTime+0x128>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d306      	bcc.n	80050a8 <USB_SetTurnaroundTime+0x6c>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4a32      	ldr	r2, [pc, #200]	; (8005168 <USB_SetTurnaroundTime+0x12c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d802      	bhi.n	80050a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050a2:	230c      	movs	r3, #12
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e041      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4a2f      	ldr	r2, [pc, #188]	; (8005168 <USB_SetTurnaroundTime+0x12c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d906      	bls.n	80050be <USB_SetTurnaroundTime+0x82>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a2e      	ldr	r2, [pc, #184]	; (800516c <USB_SetTurnaroundTime+0x130>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d802      	bhi.n	80050be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050b8:	230b      	movs	r3, #11
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e036      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a2a      	ldr	r2, [pc, #168]	; (800516c <USB_SetTurnaroundTime+0x130>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d906      	bls.n	80050d4 <USB_SetTurnaroundTime+0x98>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4a29      	ldr	r2, [pc, #164]	; (8005170 <USB_SetTurnaroundTime+0x134>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d802      	bhi.n	80050d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050ce:	230a      	movs	r3, #10
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e02b      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a26      	ldr	r2, [pc, #152]	; (8005170 <USB_SetTurnaroundTime+0x134>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d906      	bls.n	80050ea <USB_SetTurnaroundTime+0xae>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a25      	ldr	r2, [pc, #148]	; (8005174 <USB_SetTurnaroundTime+0x138>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d202      	bcs.n	80050ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050e4:	2309      	movs	r3, #9
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e020      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <USB_SetTurnaroundTime+0x138>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d306      	bcc.n	8005100 <USB_SetTurnaroundTime+0xc4>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4a20      	ldr	r2, [pc, #128]	; (8005178 <USB_SetTurnaroundTime+0x13c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d802      	bhi.n	8005100 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050fa:	2308      	movs	r3, #8
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e015      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4a1d      	ldr	r2, [pc, #116]	; (8005178 <USB_SetTurnaroundTime+0x13c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d906      	bls.n	8005116 <USB_SetTurnaroundTime+0xda>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4a1c      	ldr	r2, [pc, #112]	; (800517c <USB_SetTurnaroundTime+0x140>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d202      	bcs.n	8005116 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005110:	2307      	movs	r3, #7
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e00a      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005116:	2306      	movs	r3, #6
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e007      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005122:	2309      	movs	r3, #9
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e001      	b.n	800512c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005128:	2309      	movs	r3, #9
 800512a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	029b      	lsls	r3, r3, #10
 8005140:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	00d8acbf 	.word	0x00d8acbf
 800515c:	00e4e1c0 	.word	0x00e4e1c0
 8005160:	00f42400 	.word	0x00f42400
 8005164:	01067380 	.word	0x01067380
 8005168:	011a499f 	.word	0x011a499f
 800516c:	01312cff 	.word	0x01312cff
 8005170:	014ca43f 	.word	0x014ca43f
 8005174:	016e3600 	.word	0x016e3600
 8005178:	01a6ab1f 	.word	0x01a6ab1f
 800517c:	01e84800 	.word	0x01e84800

08005180 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f043 0201 	orr.w	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f023 0201 	bic.w	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d115      	bne.n	8005212 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051f2:	2001      	movs	r0, #1
 80051f4:	f7fc fcca 	bl	8001b8c <HAL_Delay>
      ms++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f001 fa45 	bl	800668e <USB_GetMode>
 8005204:	4603      	mov	r3, r0
 8005206:	2b01      	cmp	r3, #1
 8005208:	d01e      	beq.n	8005248 <USB_SetCurrentMode+0x84>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b31      	cmp	r3, #49	; 0x31
 800520e:	d9f0      	bls.n	80051f2 <USB_SetCurrentMode+0x2e>
 8005210:	e01a      	b.n	8005248 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d115      	bne.n	8005244 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005224:	2001      	movs	r0, #1
 8005226:	f7fc fcb1 	bl	8001b8c <HAL_Delay>
      ms++;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3301      	adds	r3, #1
 800522e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f001 fa2c 	bl	800668e <USB_GetMode>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <USB_SetCurrentMode+0x84>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b31      	cmp	r3, #49	; 0x31
 8005240:	d9f0      	bls.n	8005224 <USB_SetCurrentMode+0x60>
 8005242:	e001      	b.n	8005248 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e005      	b.n	8005254 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b32      	cmp	r3, #50	; 0x32
 800524c:	d101      	bne.n	8005252 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800525c:	b084      	sub	sp, #16
 800525e:	b580      	push	{r7, lr}
 8005260:	b086      	sub	sp, #24
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800526a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	e009      	b.n	8005290 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	3340      	adds	r3, #64	; 0x40
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	2200      	movs	r2, #0
 8005288:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3301      	adds	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b0e      	cmp	r3, #14
 8005294:	d9f2      	bls.n	800527c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11c      	bne.n	80052d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052aa:	f043 0302 	orr.w	r3, r3, #2
 80052ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38
 80052d4:	e00b      	b.n	80052ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052f4:	461a      	mov	r2, r3
 80052f6:	2300      	movs	r3, #0
 80052f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	4619      	mov	r1, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005308:	461a      	mov	r2, r3
 800530a:	680b      	ldr	r3, [r1, #0]
 800530c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	2b01      	cmp	r3, #1
 8005312:	d10c      	bne.n	800532e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800531a:	2100      	movs	r1, #0
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f965 	bl	80055ec <USB_SetDevSpeed>
 8005322:	e008      	b.n	8005336 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005324:	2101      	movs	r1, #1
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f960 	bl	80055ec <USB_SetDevSpeed>
 800532c:	e003      	b.n	8005336 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800532e:	2103      	movs	r1, #3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f95b 	bl	80055ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005336:	2110      	movs	r1, #16
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f8f3 	bl	8005524 <USB_FlushTxFifo>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f91f 	bl	800558c <USB_FlushRxFifo>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535e:	461a      	mov	r2, r3
 8005360:	2300      	movs	r3, #0
 8005362:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	461a      	mov	r2, r3
 800536c:	2300      	movs	r3, #0
 800536e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005376:	461a      	mov	r2, r3
 8005378:	2300      	movs	r3, #0
 800537a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	e043      	b.n	800540a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005398:	d118      	bne.n	80053cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	461a      	mov	r2, r3
 80053ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	e013      	b.n	80053de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c2:	461a      	mov	r2, r3
 80053c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e008      	b.n	80053de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d8:	461a      	mov	r2, r3
 80053da:	2300      	movs	r3, #0
 80053dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	461a      	mov	r2, r3
 80053ec:	2300      	movs	r3, #0
 80053ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	461a      	mov	r2, r3
 80053fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005402:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	3301      	adds	r3, #1
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d3b7      	bcc.n	8005382 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e043      	b.n	80054a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800542e:	d118      	bne.n	8005462 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	461a      	mov	r2, r3
 8005444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e013      	b.n	8005474 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	461a      	mov	r2, r3
 800545a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	e008      	b.n	8005474 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	461a      	mov	r2, r3
 8005470:	2300      	movs	r3, #0
 8005472:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	461a      	mov	r2, r3
 8005482:	2300      	movs	r3, #0
 8005484:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005492:	461a      	mov	r2, r3
 8005494:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005498:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	3301      	adds	r3, #1
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d3b7      	bcc.n	8005418 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f043 0210 	orr.w	r2, r3, #16
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <USB_DevInit+0x2c4>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f043 0208 	orr.w	r2, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d107      	bne.n	8005510 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005508:	f043 0304 	orr.w	r3, r3, #4
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005510:	7dfb      	ldrb	r3, [r7, #23]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800551c:	b004      	add	sp, #16
 800551e:	4770      	bx	lr
 8005520:	803c3800 	.word	0x803c3800

08005524 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3301      	adds	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4a13      	ldr	r2, [pc, #76]	; (8005588 <USB_FlushTxFifo+0x64>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d901      	bls.n	8005544 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e01b      	b.n	800557c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	daf2      	bge.n	8005532 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	019b      	lsls	r3, r3, #6
 8005554:	f043 0220 	orr.w	r2, r3, #32
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3301      	adds	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a08      	ldr	r2, [pc, #32]	; (8005588 <USB_FlushTxFifo+0x64>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e006      	b.n	800557c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b20      	cmp	r3, #32
 8005578:	d0f0      	beq.n	800555c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	00030d40 	.word	0x00030d40

0800558c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3301      	adds	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a11      	ldr	r2, [pc, #68]	; (80055e8 <USB_FlushRxFifo+0x5c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e018      	b.n	80055dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	daf2      	bge.n	8005598 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2210      	movs	r2, #16
 80055ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a08      	ldr	r2, [pc, #32]	; (80055e8 <USB_FlushRxFifo+0x5c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d901      	bls.n	80055ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e006      	b.n	80055dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d0f0      	beq.n	80055bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	00030d40 	.word	0x00030d40

080055ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	68f9      	ldr	r1, [r7, #12]
 8005608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800560c:	4313      	orrs	r3, r2
 800560e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800561e:	b480      	push	{r7}
 8005620:	b087      	sub	sp, #28
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0306 	and.w	r3, r3, #6
 8005636:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d102      	bne.n	8005644 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]
 8005642:	e00a      	b.n	800565a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d002      	beq.n	8005650 <USB_GetDevSpeed+0x32>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b06      	cmp	r3, #6
 800564e:	d102      	bne.n	8005656 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005650:	2302      	movs	r3, #2
 8005652:	75fb      	strb	r3, [r7, #23]
 8005654:	e001      	b.n	800565a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005656:	230f      	movs	r3, #15
 8005658:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d13a      	bne.n	80056fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	2101      	movs	r1, #1
 8005696:	fa01 f303 	lsl.w	r3, r1, r3
 800569a:	b29b      	uxth	r3, r3
 800569c:	68f9      	ldr	r1, [r7, #12]
 800569e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d155      	bne.n	8005768 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	791b      	ldrb	r3, [r3, #4]
 80056d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	059b      	lsls	r3, r3, #22
 80056de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056e0:	4313      	orrs	r3, r2
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	e036      	b.n	8005768 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	2101      	movs	r1, #1
 800570c:	fa01 f303 	lsl.w	r3, r1, r3
 8005710:	041b      	lsls	r3, r3, #16
 8005712:	68f9      	ldr	r1, [r7, #12]
 8005714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005718:	4313      	orrs	r3, r2
 800571a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d11a      	bne.n	8005768 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	791b      	ldrb	r3, [r3, #4]
 800574c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800574e:	430b      	orrs	r3, r1
 8005750:	4313      	orrs	r3, r2
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005766:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	785b      	ldrb	r3, [r3, #1]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d161      	bne.n	8005858 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057aa:	d11f      	bne.n	80057ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	2101      	movs	r1, #1
 80057fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005802:	b29b      	uxth	r3, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800580c:	4013      	ands	r3, r2
 800580e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	2101      	movs	r1, #1
 8005822:	fa01 f303 	lsl.w	r3, r1, r3
 8005826:	b29b      	uxth	r3, r3
 8005828:	43db      	mvns	r3, r3
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005830:	4013      	ands	r3, r2
 8005832:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	0159      	lsls	r1, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	440b      	add	r3, r1
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	4619      	mov	r1, r3
 8005850:	4b35      	ldr	r3, [pc, #212]	; (8005928 <USB_DeactivateEndpoint+0x1b0>)
 8005852:	4013      	ands	r3, r2
 8005854:	600b      	str	r3, [r1, #0]
 8005856:	e060      	b.n	800591a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800586a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800586e:	d11f      	bne.n	80058b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800588a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800588e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	2101      	movs	r1, #1
 80058c2:	fa01 f303 	lsl.w	r3, r1, r3
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	43db      	mvns	r3, r3
 80058ca:	68f9      	ldr	r1, [r7, #12]
 80058cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d0:	4013      	ands	r3, r2
 80058d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	69da      	ldr	r2, [r3, #28]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f003 030f 	and.w	r3, r3, #15
 80058e4:	2101      	movs	r1, #1
 80058e6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	43db      	mvns	r3, r3
 80058ee:	68f9      	ldr	r1, [r7, #12]
 80058f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f4:	4013      	ands	r3, r2
 80058f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	0159      	lsls	r1, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	440b      	add	r3, r1
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	4619      	mov	r1, r3
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <USB_DeactivateEndpoint+0x1b4>)
 8005916:	4013      	ands	r3, r2
 8005918:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	ec337800 	.word	0xec337800
 800592c:	eff37800 	.word	0xeff37800

08005930 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	; 0x28
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b01      	cmp	r3, #1
 800594e:	f040 815c 	bne.w	8005c0a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d132      	bne.n	80059c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	69fa      	ldr	r2, [r7, #28]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005978:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800597c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800599c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b8:	0cdb      	lsrs	r3, r3, #19
 80059ba:	04db      	lsls	r3, r3, #19
 80059bc:	6113      	str	r3, [r2, #16]
 80059be:	e074      	b.n	8005aaa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	0cdb      	lsrs	r3, r3, #19
 80059dc:	04db      	lsls	r3, r3, #19
 80059de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	0151      	lsls	r1, r2, #5
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	440a      	add	r2, r1
 80059f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6999      	ldr	r1, [r3, #24]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	440b      	add	r3, r1
 8005a1c:	1e59      	subs	r1, r3, #1
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a26:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a28:	4b9d      	ldr	r3, [pc, #628]	; (8005ca0 <USB_EPStartXfer+0x370>)
 8005a2a:	400b      	ands	r3, r1
 8005a2c:	69b9      	ldr	r1, [r7, #24]
 8005a2e:	0148      	lsls	r0, r1, #5
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	4401      	add	r1, r0
 8005a34:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a52:	69b9      	ldr	r1, [r7, #24]
 8005a54:	0148      	lsls	r0, r1, #5
 8005a56:	69f9      	ldr	r1, [r7, #28]
 8005a58:	4401      	add	r1, r0
 8005a5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	791b      	ldrb	r3, [r3, #4]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d11f      	bne.n	8005aaa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	0151      	lsls	r1, r2, #5
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	440a      	add	r2, r1
 8005a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a84:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a88:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aa8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d14b      	bne.n	8005b48 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	791b      	ldrb	r3, [r3, #4]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d128      	bne.n	8005b26 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d110      	bne.n	8005b06 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	e00f      	b.n	8005b26 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b24:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e133      	b.n	8005db0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b66:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	791b      	ldrb	r3, [r3, #4]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d015      	beq.n	8005b9c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 811b 	beq.w	8005db0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b90:	69f9      	ldr	r1, [r7, #28]
 8005b92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b96:	4313      	orrs	r3, r2
 8005b98:	634b      	str	r3, [r1, #52]	; 0x34
 8005b9a:	e109      	b.n	8005db0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d110      	bne.n	8005bce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e00f      	b.n	8005bee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6919      	ldr	r1, [r3, #16]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	781a      	ldrb	r2, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	b298      	uxth	r0, r3
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	4603      	mov	r3, r0
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fade 	bl	80061c4 <USB_WritePacket>
 8005c08:	e0d2      	b.n	8005db0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c24:	0cdb      	lsrs	r3, r3, #19
 8005c26:	04db      	lsls	r3, r3, #19
 8005c28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d126      	bne.n	8005ca4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c6c:	69b9      	ldr	r1, [r7, #24]
 8005c6e:	0148      	lsls	r0, r1, #5
 8005c70:	69f9      	ldr	r1, [r7, #28]
 8005c72:	4401      	add	r1, r0
 8005c74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c9a:	6113      	str	r3, [r2, #16]
 8005c9c:	e03a      	b.n	8005d14 <USB_EPStartXfer+0x3e4>
 8005c9e:	bf00      	nop
 8005ca0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	699a      	ldr	r2, [r3, #24]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	8afa      	ldrh	r2, [r7, #22]
 8005cc0:	fb03 f202 	mul.w	r2, r3, r2
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	8afb      	ldrh	r3, [r7, #22]
 8005cd8:	04d9      	lsls	r1, r3, #19
 8005cda:	4b38      	ldr	r3, [pc, #224]	; (8005dbc <USB_EPStartXfer+0x48c>)
 8005cdc:	400b      	ands	r3, r1
 8005cde:	69b9      	ldr	r1, [r7, #24]
 8005ce0:	0148      	lsls	r0, r1, #5
 8005ce2:	69f9      	ldr	r1, [r7, #28]
 8005ce4:	4401      	add	r1, r0
 8005ce6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cea:	4313      	orrs	r3, r2
 8005cec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	0148      	lsls	r0, r1, #5
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d10:	4313      	orrs	r3, r2
 8005d12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d10d      	bne.n	8005d36 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6919      	ldr	r1, [r3, #16]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	460a      	mov	r2, r1
 8005d34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	791b      	ldrb	r3, [r3, #4]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d128      	bne.n	8005d90 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d110      	bne.n	8005d70 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e00f      	b.n	8005d90 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	0151      	lsls	r1, r2, #5
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	440a      	add	r2, r1
 8005da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	1ff80000 	.word	0x1ff80000

08005dc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f040 80ce 	bne.w	8005f7e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d132      	bne.n	8005e50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e48:	0cdb      	lsrs	r3, r3, #19
 8005e4a:	04db      	lsls	r3, r3, #19
 8005e4c:	6113      	str	r3, [r2, #16]
 8005e4e:	e04e      	b.n	8005eee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6a:	0cdb      	lsrs	r3, r3, #19
 8005e6c:	04db      	lsls	r3, r3, #19
 8005e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d903      	bls.n	8005ea8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	0151      	lsls	r1, r2, #5
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ec6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ede:	6939      	ldr	r1, [r7, #16]
 8005ee0:	0148      	lsls	r0, r1, #5
 8005ee2:	6979      	ldr	r1, [r7, #20]
 8005ee4:	4401      	add	r1, r0
 8005ee6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eea:	4313      	orrs	r3, r2
 8005eec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d11e      	bne.n	8005f32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	e097      	b.n	8006062 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 8083 	beq.w	8006062 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f72:	6979      	ldr	r1, [r7, #20]
 8005f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	634b      	str	r3, [r1, #52]	; 0x34
 8005f7c:	e071      	b.n	8006062 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f98:	0cdb      	lsrs	r3, r3, #19
 8005f9a:	04db      	lsls	r3, r3, #19
 8005f9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006010:	6939      	ldr	r1, [r7, #16]
 8006012:	0148      	lsls	r0, r1, #5
 8006014:	6979      	ldr	r1, [r7, #20]
 8006016:	4401      	add	r1, r0
 8006018:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800601c:	4313      	orrs	r3, r2
 800601e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d10d      	bne.n	8006042 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6919      	ldr	r1, [r3, #16]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603e:	460a      	mov	r2, r1
 8006040:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006060:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d14a      	bne.n	8006124 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060a6:	f040 8086 	bne.w	80061b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80060fe:	4293      	cmp	r3, r2
 8006100:	d902      	bls.n	8006108 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	75fb      	strb	r3, [r7, #23]
          break;
 8006106:	e056      	b.n	80061b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4413      	add	r3, r2
 8006112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006120:	d0e7      	beq.n	80060f2 <USB_EPStopXfer+0x82>
 8006122:	e048      	b.n	80061b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613c:	d13b      	bne.n	80061b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	7812      	ldrb	r2, [r2, #0]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006160:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006184:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006192:	4293      	cmp	r3, r2
 8006194:	d902      	bls.n	800619c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	75fb      	strb	r3, [r7, #23]
          break;
 800619a:	e00c      	b.n	80061b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b4:	d0e7      	beq.n	8006186 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	371c      	adds	r7, #28
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b089      	sub	sp, #36	; 0x24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	4611      	mov	r1, r2
 80061d0:	461a      	mov	r2, r3
 80061d2:	460b      	mov	r3, r1
 80061d4:	71fb      	strb	r3, [r7, #7]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d123      	bne.n	8006232 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061ea:	88bb      	ldrh	r3, [r7, #4]
 80061ec:	3303      	adds	r3, #3
 80061ee:	089b      	lsrs	r3, r3, #2
 80061f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061f2:	2300      	movs	r3, #0
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	e018      	b.n	800622a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	031a      	lsls	r2, r3, #12
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006204:	461a      	mov	r2, r3
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	3301      	adds	r3, #1
 8006210:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	3301      	adds	r3, #1
 8006216:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	3301      	adds	r3, #1
 800621c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	3301      	adds	r3, #1
 8006222:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	3301      	adds	r3, #1
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	429a      	cmp	r2, r3
 8006230:	d3e2      	bcc.n	80061f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3724      	adds	r7, #36	; 0x24
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006240:	b480      	push	{r7}
 8006242:	b08b      	sub	sp, #44	; 0x2c
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006256:	88fb      	ldrh	r3, [r7, #6]
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	b29b      	uxth	r3, r3
 800625c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006266:	2300      	movs	r3, #0
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	e014      	b.n	8006296 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	601a      	str	r2, [r3, #0]
    pDest++;
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	3301      	adds	r3, #1
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	3301      	adds	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	3301      	adds	r3, #1
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	3301      	adds	r3, #1
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	3301      	adds	r3, #1
 8006294:	623b      	str	r3, [r7, #32]
 8006296:	6a3a      	ldr	r2, [r7, #32]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	429a      	cmp	r2, r3
 800629c:	d3e6      	bcc.n	800626c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800629e:	8bfb      	ldrh	r3, [r7, #30]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01e      	beq.n	80062e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ae:	461a      	mov	r2, r3
 80062b0:	f107 0310 	add.w	r3, r7, #16
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	701a      	strb	r2, [r3, #0]
      i++;
 80062ca:	6a3b      	ldr	r3, [r7, #32]
 80062cc:	3301      	adds	r3, #1
 80062ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	3301      	adds	r3, #1
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80062d6:	8bfb      	ldrh	r3, [r7, #30]
 80062d8:	3b01      	subs	r3, #1
 80062da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062dc:	8bfb      	ldrh	r3, [r7, #30]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1ea      	bne.n	80062b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	372c      	adds	r7, #44	; 0x2c
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d12c      	bne.n	8006366 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	db12      	blt.n	8006344 <USB_EPSetStall+0x54>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00f      	beq.n	8006344 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006342:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e02b      	b.n	80063be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	db12      	blt.n	800639e <USB_EPSetStall+0xae>
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00f      	beq.n	800639e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	0151      	lsls	r1, r2, #5
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	440a      	add	r2, r1
 8006394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006398:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800639c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d128      	bne.n	800643a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006406:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	791b      	ldrb	r3, [r3, #4]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d003      	beq.n	8006418 <USB_EPClearStall+0x4c>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	791b      	ldrb	r3, [r3, #4]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d138      	bne.n	800648a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	440a      	add	r2, r1
 800642e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	e027      	b.n	800648a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	440a      	add	r2, r1
 8006450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006454:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006458:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	791b      	ldrb	r3, [r3, #4]
 800645e:	2b03      	cmp	r3, #3
 8006460:	d003      	beq.n	800646a <USB_EPClearStall+0x9e>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	791b      	ldrb	r3, [r3, #4]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d10f      	bne.n	800648a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006488:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	78fb      	ldrb	r3, [r7, #3]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064cc:	68f9      	ldr	r1, [r7, #12]
 80064ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064d2:	4313      	orrs	r3, r2
 80064d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064fe:	f023 0303 	bic.w	r3, r3, #3
 8006502:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006512:	f023 0302 	bic.w	r3, r3, #2
 8006516:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006540:	f023 0303 	bic.w	r3, r3, #3
 8006544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006554:	f043 0302 	orr.w	r3, r3, #2
 8006558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4013      	ands	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800658e:	b480      	push	{r7}
 8006590:	b085      	sub	sp, #20
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	4013      	ands	r3, r2
 80065b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	0c1b      	lsrs	r3, r3, #16
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	b29b      	uxth	r3, r3
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	460b      	mov	r3, r1
 8006600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4013      	ands	r3, r2
 8006622:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006624:	68bb      	ldr	r3, [r7, #8]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006632:	b480      	push	{r7}
 8006634:	b087      	sub	sp, #28
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	460b      	mov	r3, r1
 800663c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006654:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	fa22 f303 	lsr.w	r3, r2, r3
 8006662:	01db      	lsls	r3, r3, #7
 8006664:	b2db      	uxtb	r3, r3
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4013      	ands	r3, r2
 800667e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006680:	68bb      	ldr	r3, [r7, #8]
}
 8006682:	4618      	mov	r0, r3
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0301 	and.w	r3, r3, #1
}
 800669e:	4618      	mov	r0, r3
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066c8:	f023 0307 	bic.w	r3, r3, #7
 80066cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	460b      	mov	r3, r1
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	333c      	adds	r3, #60	; 0x3c
 8006706:	3304      	adds	r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <USB_EP0_OutStart+0xb8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d90a      	bls.n	800672a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006724:	d101      	bne.n	800672a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	e037      	b.n	800679a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	461a      	mov	r2, r3
 8006732:	2300      	movs	r3, #0
 8006734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006748:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006758:	f043 0318 	orr.w	r3, r3, #24
 800675c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800676c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006770:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006772:	7afb      	ldrb	r3, [r7, #11]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d10f      	bne.n	8006798 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	461a      	mov	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006792:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	4f54300a 	.word	0x4f54300a

080067ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	3301      	adds	r3, #1
 80067bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4a13      	ldr	r2, [pc, #76]	; (8006810 <USB_CoreReset+0x64>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e01b      	b.n	8006802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	daf2      	bge.n	80067b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f043 0201 	orr.w	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4a09      	ldr	r2, [pc, #36]	; (8006810 <USB_CoreReset+0x64>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d901      	bls.n	80067f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e006      	b.n	8006802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d0f0      	beq.n	80067e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	00030d40 	.word	0x00030d40

08006814 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006820:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006824:	f002 fc8a 	bl	800913c <USBD_static_malloc>
 8006828:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d109      	bne.n	8006844 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	32b0      	adds	r2, #176	; 0xb0
 800683a:	2100      	movs	r1, #0
 800683c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006840:	2302      	movs	r3, #2
 8006842:	e0d4      	b.n	80069ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006844:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006848:	2100      	movs	r1, #0
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f002 fcec 	bl	8009228 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	32b0      	adds	r2, #176	; 0xb0
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	32b0      	adds	r2, #176	; 0xb0
 800686a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	7c1b      	ldrb	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d138      	bne.n	80068ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800687c:	4b5e      	ldr	r3, [pc, #376]	; (80069f8 <USBD_CDC_Init+0x1e4>)
 800687e:	7819      	ldrb	r1, [r3, #0]
 8006880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006884:	2202      	movs	r2, #2
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f002 fb35 	bl	8008ef6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800688c:	4b5a      	ldr	r3, [pc, #360]	; (80069f8 <USBD_CDC_Init+0x1e4>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f003 020f 	and.w	r2, r3, #15
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	3324      	adds	r3, #36	; 0x24
 80068a2:	2201      	movs	r2, #1
 80068a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068a6:	4b55      	ldr	r3, [pc, #340]	; (80069fc <USBD_CDC_Init+0x1e8>)
 80068a8:	7819      	ldrb	r1, [r3, #0]
 80068aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ae:	2202      	movs	r2, #2
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f002 fb20 	bl	8008ef6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068b6:	4b51      	ldr	r3, [pc, #324]	; (80069fc <USBD_CDC_Init+0x1e8>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f003 020f 	and.w	r2, r3, #15
 80068be:	6879      	ldr	r1, [r7, #4]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068ce:	2201      	movs	r2, #1
 80068d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80068d2:	4b4b      	ldr	r3, [pc, #300]	; (8006a00 <USBD_CDC_Init+0x1ec>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 020f 	and.w	r2, r3, #15
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	3326      	adds	r3, #38	; 0x26
 80068e8:	2210      	movs	r2, #16
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	e035      	b.n	800695a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068ee:	4b42      	ldr	r3, [pc, #264]	; (80069f8 <USBD_CDC_Init+0x1e4>)
 80068f0:	7819      	ldrb	r1, [r3, #0]
 80068f2:	2340      	movs	r3, #64	; 0x40
 80068f4:	2202      	movs	r2, #2
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f002 fafd 	bl	8008ef6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068fc:	4b3e      	ldr	r3, [pc, #248]	; (80069f8 <USBD_CDC_Init+0x1e4>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	f003 020f 	and.w	r2, r3, #15
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	3324      	adds	r3, #36	; 0x24
 8006912:	2201      	movs	r2, #1
 8006914:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006916:	4b39      	ldr	r3, [pc, #228]	; (80069fc <USBD_CDC_Init+0x1e8>)
 8006918:	7819      	ldrb	r1, [r3, #0]
 800691a:	2340      	movs	r3, #64	; 0x40
 800691c:	2202      	movs	r2, #2
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f002 fae9 	bl	8008ef6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006924:	4b35      	ldr	r3, [pc, #212]	; (80069fc <USBD_CDC_Init+0x1e8>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	f003 020f 	and.w	r2, r3, #15
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	440b      	add	r3, r1
 8006938:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800693c:	2201      	movs	r2, #1
 800693e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006940:	4b2f      	ldr	r3, [pc, #188]	; (8006a00 <USBD_CDC_Init+0x1ec>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 020f 	and.w	r2, r3, #15
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	3326      	adds	r3, #38	; 0x26
 8006956:	2210      	movs	r2, #16
 8006958:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800695a:	4b29      	ldr	r3, [pc, #164]	; (8006a00 <USBD_CDC_Init+0x1ec>)
 800695c:	7819      	ldrb	r1, [r3, #0]
 800695e:	2308      	movs	r3, #8
 8006960:	2203      	movs	r2, #3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f002 fac7 	bl	8008ef6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006968:	4b25      	ldr	r3, [pc, #148]	; (8006a00 <USBD_CDC_Init+0x1ec>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 020f 	and.w	r2, r3, #15
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	440b      	add	r3, r1
 800697c:	3324      	adds	r3, #36	; 0x24
 800697e:	2201      	movs	r2, #1
 8006980:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	33b0      	adds	r3, #176	; 0xb0
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80069b8:	2302      	movs	r3, #2
 80069ba:	e018      	b.n	80069ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	7c1b      	ldrb	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069c4:	4b0d      	ldr	r3, [pc, #52]	; (80069fc <USBD_CDC_Init+0x1e8>)
 80069c6:	7819      	ldrb	r1, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f002 fb7e 	bl	80090d4 <USBD_LL_PrepareReceive>
 80069d8:	e008      	b.n	80069ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069da:	4b08      	ldr	r3, [pc, #32]	; (80069fc <USBD_CDC_Init+0x1e8>)
 80069dc:	7819      	ldrb	r1, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069e4:	2340      	movs	r3, #64	; 0x40
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f002 fb74 	bl	80090d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	200000bf 	.word	0x200000bf
 80069fc:	200000c0 	.word	0x200000c0
 8006a00:	200000c1 	.word	0x200000c1

08006a04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a10:	4b3a      	ldr	r3, [pc, #232]	; (8006afc <USBD_CDC_DeInit+0xf8>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f002 fa93 	bl	8008f42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a1c:	4b37      	ldr	r3, [pc, #220]	; (8006afc <USBD_CDC_DeInit+0xf8>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	3324      	adds	r3, #36	; 0x24
 8006a32:	2200      	movs	r2, #0
 8006a34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a36:	4b32      	ldr	r3, [pc, #200]	; (8006b00 <USBD_CDC_DeInit+0xfc>)
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f002 fa80 	bl	8008f42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a42:	4b2f      	ldr	r3, [pc, #188]	; (8006b00 <USBD_CDC_DeInit+0xfc>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	f003 020f 	and.w	r2, r3, #15
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a5e:	4b29      	ldr	r3, [pc, #164]	; (8006b04 <USBD_CDC_DeInit+0x100>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f002 fa6c 	bl	8008f42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a6a:	4b26      	ldr	r3, [pc, #152]	; (8006b04 <USBD_CDC_DeInit+0x100>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	f003 020f 	and.w	r2, r3, #15
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	3324      	adds	r3, #36	; 0x24
 8006a80:	2200      	movs	r2, #0
 8006a82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006a84:	4b1f      	ldr	r3, [pc, #124]	; (8006b04 <USBD_CDC_DeInit+0x100>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f003 020f 	and.w	r2, r3, #15
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	3326      	adds	r3, #38	; 0x26
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	32b0      	adds	r2, #176	; 0xb0
 8006aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01f      	beq.n	8006af0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	33b0      	adds	r3, #176	; 0xb0
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	32b0      	adds	r2, #176	; 0xb0
 8006ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f002 fb40 	bl	8009158 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	32b0      	adds	r2, #176	; 0xb0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200000bf 	.word	0x200000bf
 8006b00:	200000c0 	.word	0x200000c0
 8006b04:	200000c1 	.word	0x200000c1

08006b08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	32b0      	adds	r2, #176	; 0xb0
 8006b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e0bf      	b.n	8006cb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d050      	beq.n	8006be6 <USBD_CDC_Setup+0xde>
 8006b44:	2b20      	cmp	r3, #32
 8006b46:	f040 80af 	bne.w	8006ca8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	88db      	ldrh	r3, [r3, #6]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d03a      	beq.n	8006bc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	b25b      	sxtb	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	da1b      	bge.n	8006b94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	33b0      	adds	r3, #176	; 0xb0
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006b72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	88d2      	ldrh	r2, [r2, #6]
 8006b78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	88db      	ldrh	r3, [r3, #6]
 8006b7e:	2b07      	cmp	r3, #7
 8006b80:	bf28      	it	cs
 8006b82:	2307      	movcs	r3, #7
 8006b84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	89fa      	ldrh	r2, [r7, #14]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fd89 	bl	80086a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006b92:	e090      	b.n	8006cb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	785a      	ldrb	r2, [r3, #1]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	88db      	ldrh	r3, [r3, #6]
 8006ba2:	2b3f      	cmp	r3, #63	; 0x3f
 8006ba4:	d803      	bhi.n	8006bae <USBD_CDC_Setup+0xa6>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	88db      	ldrh	r3, [r3, #6]
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	e000      	b.n	8006bb0 <USBD_CDC_Setup+0xa8>
 8006bae:	2240      	movs	r2, #64	; 0x40
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006bb6:	6939      	ldr	r1, [r7, #16]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fd9b 	bl	80086fc <USBD_CtlPrepareRx>
      break;
 8006bc6:	e076      	b.n	8006cb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	33b0      	adds	r3, #176	; 0xb0
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	7850      	ldrb	r0, [r2, #1]
 8006bde:	2200      	movs	r2, #0
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	4798      	blx	r3
      break;
 8006be4:	e067      	b.n	8006cb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2b0b      	cmp	r3, #11
 8006bec:	d851      	bhi.n	8006c92 <USBD_CDC_Setup+0x18a>
 8006bee:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <USBD_CDC_Setup+0xec>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c25 	.word	0x08006c25
 8006bf8:	08006ca1 	.word	0x08006ca1
 8006bfc:	08006c93 	.word	0x08006c93
 8006c00:	08006c93 	.word	0x08006c93
 8006c04:	08006c93 	.word	0x08006c93
 8006c08:	08006c93 	.word	0x08006c93
 8006c0c:	08006c93 	.word	0x08006c93
 8006c10:	08006c93 	.word	0x08006c93
 8006c14:	08006c93 	.word	0x08006c93
 8006c18:	08006c93 	.word	0x08006c93
 8006c1c:	08006c4f 	.word	0x08006c4f
 8006c20:	08006c79 	.word	0x08006c79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b03      	cmp	r3, #3
 8006c2e:	d107      	bne.n	8006c40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c30:	f107 030a 	add.w	r3, r7, #10
 8006c34:	2202      	movs	r2, #2
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fd33 	bl	80086a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c3e:	e032      	b.n	8006ca6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 fcbd 	bl	80085c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	75fb      	strb	r3, [r7, #23]
          break;
 8006c4c:	e02b      	b.n	8006ca6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d107      	bne.n	8006c6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c5a:	f107 030d 	add.w	r3, r7, #13
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fd1e 	bl	80086a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c68:	e01d      	b.n	8006ca6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fca8 	bl	80085c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c72:	2303      	movs	r3, #3
 8006c74:	75fb      	strb	r3, [r7, #23]
          break;
 8006c76:	e016      	b.n	8006ca6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d00f      	beq.n	8006ca4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 fc9b 	bl	80085c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c90:	e008      	b.n	8006ca4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f001 fc94 	bl	80085c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c9e:	e002      	b.n	8006ca6 <USBD_CDC_Setup+0x19e>
          break;
 8006ca0:	bf00      	nop
 8006ca2:	e008      	b.n	8006cb6 <USBD_CDC_Setup+0x1ae>
          break;
 8006ca4:	bf00      	nop
      }
      break;
 8006ca6:	e006      	b.n	8006cb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 fc89 	bl	80085c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb4:	bf00      	nop
  }

  return (uint8_t)ret;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32b0      	adds	r2, #176	; 0xb0
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e065      	b.n	8006db6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	32b0      	adds	r2, #176	; 0xb0
 8006cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	f003 020f 	and.w	r2, r3, #15
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	3318      	adds	r3, #24
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d02f      	beq.n	8006d74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	f003 020f 	and.w	r2, r3, #15
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	440b      	add	r3, r1
 8006d26:	3318      	adds	r3, #24
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	f003 010f 	and.w	r1, r3, #15
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	460b      	mov	r3, r1
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	440b      	add	r3, r1
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4403      	add	r3, r0
 8006d3c:	3348      	adds	r3, #72	; 0x48
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d112      	bne.n	8006d74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	f003 020f 	and.w	r2, r3, #15
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	3318      	adds	r3, #24
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d66:	78f9      	ldrb	r1, [r7, #3]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f002 f990 	bl	8009092 <USBD_LL_Transmit>
 8006d72:	e01f      	b.n	8006db4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	33b0      	adds	r3, #176	; 0xb0
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d010      	beq.n	8006db4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	33b0      	adds	r3, #176	; 0xb0
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	32b0      	adds	r2, #176	; 0xb0
 8006dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	32b0      	adds	r2, #176	; 0xb0
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e01a      	b.n	8006e26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f002 f98e 	bl	8009116 <USBD_LL_GetRxDataSize>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	33b0      	adds	r3, #176	; 0xb0
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e20:	4611      	mov	r1, r2
 8006e22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	32b0      	adds	r2, #176	; 0xb0
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e025      	b.n	8006e9c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	33b0      	adds	r3, #176	; 0xb0
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01a      	beq.n	8006e9a <USBD_CDC_EP0_RxReady+0x6c>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e6a:	2bff      	cmp	r3, #255	; 0xff
 8006e6c:	d015      	beq.n	8006e9a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	33b0      	adds	r3, #176	; 0xb0
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006e86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e8e:	b292      	uxth	r2, r2
 8006e90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	22ff      	movs	r2, #255	; 0xff
 8006e96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006eac:	2182      	movs	r1, #130	; 0x82
 8006eae:	4818      	ldr	r0, [pc, #96]	; (8006f10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006eb0:	f000 fd4f 	bl	8007952 <USBD_GetEpDesc>
 8006eb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	4815      	ldr	r0, [pc, #84]	; (8006f10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006eba:	f000 fd4a 	bl	8007952 <USBD_GetEpDesc>
 8006ebe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ec0:	2181      	movs	r1, #129	; 0x81
 8006ec2:	4813      	ldr	r0, [pc, #76]	; (8006f10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ec4:	f000 fd45 	bl	8007952 <USBD_GetEpDesc>
 8006ec8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d006      	beq.n	8006eea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ee4:	711a      	strb	r2, [r3, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d006      	beq.n	8006efe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ef8:	711a      	strb	r2, [r3, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2243      	movs	r2, #67	; 0x43
 8006f02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f04:	4b02      	ldr	r3, [pc, #8]	; (8006f10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	2000007c 	.word	0x2000007c

08006f14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f1c:	2182      	movs	r1, #130	; 0x82
 8006f1e:	4818      	ldr	r0, [pc, #96]	; (8006f80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f20:	f000 fd17 	bl	8007952 <USBD_GetEpDesc>
 8006f24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f26:	2101      	movs	r1, #1
 8006f28:	4815      	ldr	r0, [pc, #84]	; (8006f80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f2a:	f000 fd12 	bl	8007952 <USBD_GetEpDesc>
 8006f2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f30:	2181      	movs	r1, #129	; 0x81
 8006f32:	4813      	ldr	r0, [pc, #76]	; (8006f80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f34:	f000 fd0d 	bl	8007952 <USBD_GetEpDesc>
 8006f38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2210      	movs	r2, #16
 8006f44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d006      	beq.n	8006f5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	711a      	strb	r2, [r3, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f042 0202 	orr.w	r2, r2, #2
 8006f58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	711a      	strb	r2, [r3, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f042 0202 	orr.w	r2, r2, #2
 8006f6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2243      	movs	r2, #67	; 0x43
 8006f72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f74:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	2000007c 	.word	0x2000007c

08006f84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f8c:	2182      	movs	r1, #130	; 0x82
 8006f8e:	4818      	ldr	r0, [pc, #96]	; (8006ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f90:	f000 fcdf 	bl	8007952 <USBD_GetEpDesc>
 8006f94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f96:	2101      	movs	r1, #1
 8006f98:	4815      	ldr	r0, [pc, #84]	; (8006ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f9a:	f000 fcda 	bl	8007952 <USBD_GetEpDesc>
 8006f9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fa0:	2181      	movs	r1, #129	; 0x81
 8006fa2:	4813      	ldr	r0, [pc, #76]	; (8006ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fa4:	f000 fcd5 	bl	8007952 <USBD_GetEpDesc>
 8006fa8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2210      	movs	r2, #16
 8006fb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d006      	beq.n	8006fca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fc4:	711a      	strb	r2, [r3, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d006      	beq.n	8006fde <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fd8:	711a      	strb	r2, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2243      	movs	r2, #67	; 0x43
 8006fe2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fe4:	4b02      	ldr	r3, [pc, #8]	; (8006ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2000007c 	.word	0x2000007c

08006ff4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	220a      	movs	r2, #10
 8007000:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007002:	4b03      	ldr	r3, [pc, #12]	; (8007010 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20000038 	.word	0x20000038

08007014 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007024:	2303      	movs	r3, #3
 8007026:	e009      	b.n	800703c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	33b0      	adds	r3, #176	; 0xb0
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	32b0      	adds	r2, #176	; 0xb0
 800705e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007062:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800706a:	2303      	movs	r3, #3
 800706c:	e008      	b.n	8007080 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	371c      	adds	r7, #28
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	32b0      	adds	r2, #176	; 0xb0
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e004      	b.n	80070ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	32b0      	adds	r2, #176	; 0xb0
 80070da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80070e0:	2301      	movs	r3, #1
 80070e2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	32b0      	adds	r2, #176	; 0xb0
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e025      	b.n	8007146 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007100:	2b00      	cmp	r3, #0
 8007102:	d11f      	bne.n	8007144 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2201      	movs	r2, #1
 8007108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800710c:	4b10      	ldr	r3, [pc, #64]	; (8007150 <USBD_CDC_TransmitPacket+0x88>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	f003 020f 	and.w	r2, r3, #15
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4613      	mov	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4403      	add	r3, r0
 8007126:	3318      	adds	r3, #24
 8007128:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <USBD_CDC_TransmitPacket+0x88>)
 800712c:	7819      	ldrb	r1, [r3, #0]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 ffa9 	bl	8009092 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	200000bf 	.word	0x200000bf

08007154 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	32b0      	adds	r2, #176	; 0xb0
 8007166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	32b0      	adds	r2, #176	; 0xb0
 8007176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800717e:	2303      	movs	r3, #3
 8007180:	e018      	b.n	80071b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	7c1b      	ldrb	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10a      	bne.n	80071a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800718a:	4b0c      	ldr	r3, [pc, #48]	; (80071bc <USBD_CDC_ReceivePacket+0x68>)
 800718c:	7819      	ldrb	r1, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 ff9b 	bl	80090d4 <USBD_LL_PrepareReceive>
 800719e:	e008      	b.n	80071b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <USBD_CDC_ReceivePacket+0x68>)
 80071a2:	7819      	ldrb	r1, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071aa:	2340      	movs	r3, #64	; 0x40
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 ff91 	bl	80090d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	200000c0 	.word	0x200000c0

080071c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e01f      	b.n	8007218 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	79fa      	ldrb	r2, [r7, #7]
 800720a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f001 fe0b 	bl	8008e28 <USBD_LL_Init>
 8007212:	4603      	mov	r3, r0
 8007214:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007216:	7dfb      	ldrb	r3, [r7, #23]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007234:	2303      	movs	r3, #3
 8007236:	e025      	b.n	8007284 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	32ae      	adds	r2, #174	; 0xae
 800724a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00f      	beq.n	8007274 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	32ae      	adds	r2, #174	; 0xae
 800725e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	f107 020e 	add.w	r2, r7, #14
 8007268:	4610      	mov	r0, r2
 800726a:	4798      	blx	r3
 800726c:	4602      	mov	r2, r0
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fe13 	bl	8008ec0 <USBD_LL_Start>
 800729a:	4603      	mov	r3, r0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	4611      	mov	r1, r2
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	4611      	mov	r1, r2
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	4798      	blx	r3
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007318:	2303      	movs	r3, #3
 800731a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f001 f908 	bl	800854e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800734c:	461a      	mov	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2b02      	cmp	r3, #2
 8007360:	d01a      	beq.n	8007398 <USBD_LL_SetupStage+0x72>
 8007362:	2b02      	cmp	r3, #2
 8007364:	d822      	bhi.n	80073ac <USBD_LL_SetupStage+0x86>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <USBD_LL_SetupStage+0x4a>
 800736a:	2b01      	cmp	r3, #1
 800736c:	d00a      	beq.n	8007384 <USBD_LL_SetupStage+0x5e>
 800736e:	e01d      	b.n	80073ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fb5f 	bl	8007a3c <USBD_StdDevReq>
 800737e:	4603      	mov	r3, r0
 8007380:	73fb      	strb	r3, [r7, #15]
      break;
 8007382:	e020      	b.n	80073c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fbc7 	bl	8007b20 <USBD_StdItfReq>
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]
      break;
 8007396:	e016      	b.n	80073c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fc29 	bl	8007bf8 <USBD_StdEPReq>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73fb      	strb	r3, [r7, #15]
      break;
 80073aa:	e00c      	b.n	80073c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f001 fde0 	bl	8008f80 <USBD_LL_StallEP>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73fb      	strb	r3, [r7, #15]
      break;
 80073c4:	bf00      	nop
  }

  return ret;
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	460b      	mov	r3, r1
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80073e2:	7afb      	ldrb	r3, [r7, #11]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d16e      	bne.n	80074c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	f040 8098 	bne.w	800752c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	429a      	cmp	r2, r3
 8007406:	d913      	bls.n	8007430 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	1ad2      	subs	r2, r2, r3
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	4293      	cmp	r3, r2
 8007420:	bf28      	it	cs
 8007422:	4613      	movcs	r3, r2
 8007424:	461a      	mov	r2, r3
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f001 f984 	bl	8008736 <USBD_CtlContinueRx>
 800742e:	e07d      	b.n	800752c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2b02      	cmp	r3, #2
 800743c:	d014      	beq.n	8007468 <USBD_LL_DataOutStage+0x98>
 800743e:	2b02      	cmp	r3, #2
 8007440:	d81d      	bhi.n	800747e <USBD_LL_DataOutStage+0xae>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <USBD_LL_DataOutStage+0x7c>
 8007446:	2b01      	cmp	r3, #1
 8007448:	d003      	beq.n	8007452 <USBD_LL_DataOutStage+0x82>
 800744a:	e018      	b.n	800747e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800744c:	2300      	movs	r3, #0
 800744e:	75bb      	strb	r3, [r7, #22]
            break;
 8007450:	e018      	b.n	8007484 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007458:	b2db      	uxtb	r3, r3
 800745a:	4619      	mov	r1, r3
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fa5e 	bl	800791e <USBD_CoreFindIF>
 8007462:	4603      	mov	r3, r0
 8007464:	75bb      	strb	r3, [r7, #22]
            break;
 8007466:	e00d      	b.n	8007484 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4619      	mov	r1, r3
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fa60 	bl	8007938 <USBD_CoreFindEP>
 8007478:	4603      	mov	r3, r0
 800747a:	75bb      	strb	r3, [r7, #22]
            break;
 800747c:	e002      	b.n	8007484 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	75bb      	strb	r3, [r7, #22]
            break;
 8007482:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007484:	7dbb      	ldrb	r3, [r7, #22]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d119      	bne.n	80074be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b03      	cmp	r3, #3
 8007494:	d113      	bne.n	80074be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007496:	7dba      	ldrb	r2, [r7, #22]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	32ae      	adds	r2, #174	; 0xae
 800749c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00b      	beq.n	80074be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80074a6:	7dba      	ldrb	r2, [r7, #22]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074ae:	7dba      	ldrb	r2, [r7, #22]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	32ae      	adds	r2, #174	; 0xae
 80074b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f001 f94a 	bl	8008758 <USBD_CtlSendStatus>
 80074c4:	e032      	b.n	800752c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80074c6:	7afb      	ldrb	r3, [r7, #11]
 80074c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	4619      	mov	r1, r3
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 fa31 	bl	8007938 <USBD_CoreFindEP>
 80074d6:	4603      	mov	r3, r0
 80074d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074da:	7dbb      	ldrb	r3, [r7, #22]
 80074dc:	2bff      	cmp	r3, #255	; 0xff
 80074de:	d025      	beq.n	800752c <USBD_LL_DataOutStage+0x15c>
 80074e0:	7dbb      	ldrb	r3, [r7, #22]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d122      	bne.n	800752c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d117      	bne.n	8007522 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80074f2:	7dba      	ldrb	r2, [r7, #22]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	32ae      	adds	r2, #174	; 0xae
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00f      	beq.n	8007522 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007502:	7dba      	ldrb	r2, [r7, #22]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800750a:	7dba      	ldrb	r2, [r7, #22]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	32ae      	adds	r2, #174	; 0xae
 8007510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	7afa      	ldrb	r2, [r7, #11]
 8007518:	4611      	mov	r1, r2
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	4798      	blx	r3
 800751e:	4603      	mov	r3, r0
 8007520:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	e000      	b.n	800752e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	460b      	mov	r3, r1
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007544:	7afb      	ldrb	r3, [r7, #11]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d16f      	bne.n	800762a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3314      	adds	r3, #20
 800754e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007556:	2b02      	cmp	r3, #2
 8007558:	d15a      	bne.n	8007610 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	429a      	cmp	r2, r3
 8007564:	d914      	bls.n	8007590 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	1ad2      	subs	r2, r2, r3
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	461a      	mov	r2, r3
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f001 f8ac 	bl	80086da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007582:	2300      	movs	r3, #0
 8007584:	2200      	movs	r2, #0
 8007586:	2100      	movs	r1, #0
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f001 fda3 	bl	80090d4 <USBD_LL_PrepareReceive>
 800758e:	e03f      	b.n	8007610 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	429a      	cmp	r2, r3
 800759a:	d11c      	bne.n	80075d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d316      	bcc.n	80075d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d20f      	bcs.n	80075d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075b6:	2200      	movs	r2, #0
 80075b8:	2100      	movs	r1, #0
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f001 f88d 	bl	80086da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075c8:	2300      	movs	r3, #0
 80075ca:	2200      	movs	r2, #0
 80075cc:	2100      	movs	r1, #0
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 fd80 	bl	80090d4 <USBD_LL_PrepareReceive>
 80075d4:	e01c      	b.n	8007610 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d10f      	bne.n	8007602 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d009      	beq.n	8007602 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007602:	2180      	movs	r1, #128	; 0x80
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f001 fcbb 	bl	8008f80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f001 f8b7 	bl	800877e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d03a      	beq.n	8007690 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7ff fe42 	bl	80072a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007628:	e032      	b.n	8007690 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007630:	b2db      	uxtb	r3, r3
 8007632:	4619      	mov	r1, r3
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f97f 	bl	8007938 <USBD_CoreFindEP>
 800763a:	4603      	mov	r3, r0
 800763c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	2bff      	cmp	r3, #255	; 0xff
 8007642:	d025      	beq.n	8007690 <USBD_LL_DataInStage+0x15a>
 8007644:	7dfb      	ldrb	r3, [r7, #23]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d122      	bne.n	8007690 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b03      	cmp	r3, #3
 8007654:	d11c      	bne.n	8007690 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007656:	7dfa      	ldrb	r2, [r7, #23]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	32ae      	adds	r2, #174	; 0xae
 800765c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d014      	beq.n	8007690 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007666:	7dfa      	ldrb	r2, [r7, #23]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800766e:	7dfa      	ldrb	r2, [r7, #23]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	32ae      	adds	r2, #174	; 0xae
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	7afa      	ldrb	r2, [r7, #11]
 800767c:	4611      	mov	r1, r2
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	4798      	blx	r3
 8007682:	4603      	mov	r3, r0
 8007684:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007686:	7dbb      	ldrb	r3, [r7, #22]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800768c:	7dbb      	ldrb	r3, [r7, #22]
 800768e:	e000      	b.n	8007692 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d014      	beq.n	8007700 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00e      	beq.n	8007700 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6852      	ldr	r2, [r2, #4]
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	4611      	mov	r1, r2
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	4798      	blx	r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007700:	2340      	movs	r3, #64	; 0x40
 8007702:	2200      	movs	r2, #0
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 fbf5 	bl	8008ef6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2240      	movs	r2, #64	; 0x40
 8007718:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800771c:	2340      	movs	r3, #64	; 0x40
 800771e:	2200      	movs	r2, #0
 8007720:	2180      	movs	r1, #128	; 0x80
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fbe7 	bl	8008ef6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2240      	movs	r2, #64	; 0x40
 8007732:	621a      	str	r2, [r3, #32]

  return ret;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	78fa      	ldrb	r2, [r7, #3]
 800774e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776c:	b2da      	uxtb	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2204      	movs	r2, #4
 8007778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b04      	cmp	r3, #4
 800779c:	d106      	bne.n	80077ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d110      	bne.n	80077f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	32ae      	adds	r2, #174	; 0xae
 8007810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	e01c      	b.n	8007856 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b03      	cmp	r3, #3
 8007826:	d115      	bne.n	8007854 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	32ae      	adds	r2, #174	; 0xae
 8007832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	32ae      	adds	r2, #174	; 0xae
 8007846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	4611      	mov	r1, r2
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	32ae      	adds	r2, #174	; 0xae
 8007874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800787c:	2303      	movs	r3, #3
 800787e:	e01c      	b.n	80078ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b03      	cmp	r3, #3
 800788a:	d115      	bne.n	80078b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	32ae      	adds	r2, #174	; 0xae
 8007896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00b      	beq.n	80078b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	32ae      	adds	r2, #174	; 0xae
 80078aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	78fa      	ldrb	r2, [r7, #3]
 80078b2:	4611      	mov	r1, r2
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00e      	beq.n	8007914 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6852      	ldr	r2, [r2, #4]
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	4611      	mov	r1, r2
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	460b      	mov	r3, r1
 8007928:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800792a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007944:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b086      	sub	sp, #24
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	460b      	mov	r3, r1
 800795c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	b29a      	uxth	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	b29b      	uxth	r3, r3
 8007976:	429a      	cmp	r2, r3
 8007978:	d920      	bls.n	80079bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007982:	e013      	b.n	80079ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007984:	f107 030a 	add.w	r3, r7, #10
 8007988:	4619      	mov	r1, r3
 800798a:	6978      	ldr	r0, [r7, #20]
 800798c:	f000 f81b 	bl	80079c6 <USBD_GetNextDesc>
 8007990:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	785b      	ldrb	r3, [r3, #1]
 8007996:	2b05      	cmp	r3, #5
 8007998:	d108      	bne.n	80079ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	789b      	ldrb	r3, [r3, #2]
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d008      	beq.n	80079ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80079a8:	2300      	movs	r3, #0
 80079aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	885b      	ldrh	r3, [r3, #2]
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	897b      	ldrh	r3, [r7, #10]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d8e5      	bhi.n	8007984 <USBD_GetEpDesc+0x32>
 80079b8:	e000      	b.n	80079bc <USBD_GetEpDesc+0x6a>
          break;
 80079ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80079bc:	693b      	ldr	r3, [r7, #16]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b085      	sub	sp, #20
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	881a      	ldrh	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4413      	add	r3, r2
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4413      	add	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079f2:	68fb      	ldr	r3, [r7, #12]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	3301      	adds	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a1e:	8a3b      	ldrh	r3, [r7, #16]
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	b21a      	sxth	r2, r3
 8007a24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	b21b      	sxth	r3, r3
 8007a2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a2e:	89fb      	ldrh	r3, [r7, #14]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a52:	2b40      	cmp	r3, #64	; 0x40
 8007a54:	d005      	beq.n	8007a62 <USBD_StdDevReq+0x26>
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d857      	bhi.n	8007b0a <USBD_StdDevReq+0xce>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00f      	beq.n	8007a7e <USBD_StdDevReq+0x42>
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	d153      	bne.n	8007b0a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	32ae      	adds	r2, #174	; 0xae
 8007a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	6839      	ldr	r1, [r7, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	4798      	blx	r3
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7c:	e04a      	b.n	8007b14 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b09      	cmp	r3, #9
 8007a84:	d83b      	bhi.n	8007afe <USBD_StdDevReq+0xc2>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <USBD_StdDevReq+0x50>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007ae1 	.word	0x08007ae1
 8007a90:	08007af5 	.word	0x08007af5
 8007a94:	08007aff 	.word	0x08007aff
 8007a98:	08007aeb 	.word	0x08007aeb
 8007a9c:	08007aff 	.word	0x08007aff
 8007aa0:	08007abf 	.word	0x08007abf
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007aff 	.word	0x08007aff
 8007aac:	08007ad7 	.word	0x08007ad7
 8007ab0:	08007ac9 	.word	0x08007ac9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa3c 	bl	8007f34 <USBD_GetDescriptor>
          break;
 8007abc:	e024      	b.n	8007b08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fba1 	bl	8008208 <USBD_SetAddress>
          break;
 8007ac6:	e01f      	b.n	8007b08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fbe0 	bl	8008290 <USBD_SetConfig>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
          break;
 8007ad4:	e018      	b.n	8007b08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fc83 	bl	80083e4 <USBD_GetConfig>
          break;
 8007ade:	e013      	b.n	8007b08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fcb4 	bl	8008450 <USBD_GetStatus>
          break;
 8007ae8:	e00e      	b.n	8007b08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fce3 	bl	80084b8 <USBD_SetFeature>
          break;
 8007af2:	e009      	b.n	8007b08 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fd07 	bl	800850a <USBD_ClrFeature>
          break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fd5e 	bl	80085c2 <USBD_CtlError>
          break;
 8007b06:	bf00      	nop
      }
      break;
 8007b08:	e004      	b.n	8007b14 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fd58 	bl	80085c2 <USBD_CtlError>
      break;
 8007b12:	bf00      	nop
  }

  return ret;
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop

08007b20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b36:	2b40      	cmp	r3, #64	; 0x40
 8007b38:	d005      	beq.n	8007b46 <USBD_StdItfReq+0x26>
 8007b3a:	2b40      	cmp	r3, #64	; 0x40
 8007b3c:	d852      	bhi.n	8007be4 <USBD_StdItfReq+0xc4>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <USBD_StdItfReq+0x26>
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d14e      	bne.n	8007be4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d840      	bhi.n	8007bd6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	889b      	ldrh	r3, [r3, #4]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d836      	bhi.n	8007bcc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	889b      	ldrh	r3, [r3, #4]
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff fed9 	bl	800791e <USBD_CoreFindIF>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	2bff      	cmp	r3, #255	; 0xff
 8007b74:	d01d      	beq.n	8007bb2 <USBD_StdItfReq+0x92>
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d11a      	bne.n	8007bb2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b7c:	7bba      	ldrb	r2, [r7, #14]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	32ae      	adds	r2, #174	; 0xae
 8007b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00f      	beq.n	8007bac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b8c:	7bba      	ldrb	r2, [r7, #14]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b94:	7bba      	ldrb	r2, [r7, #14]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	32ae      	adds	r2, #174	; 0xae
 8007b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007baa:	e004      	b.n	8007bb6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007bb0:	e001      	b.n	8007bb6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	88db      	ldrh	r3, [r3, #6]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d110      	bne.n	8007be0 <USBD_StdItfReq+0xc0>
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10d      	bne.n	8007be0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fdc7 	bl	8008758 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bca:	e009      	b.n	8007be0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fcf7 	bl	80085c2 <USBD_CtlError>
          break;
 8007bd4:	e004      	b.n	8007be0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fcf2 	bl	80085c2 <USBD_CtlError>
          break;
 8007bde:	e000      	b.n	8007be2 <USBD_StdItfReq+0xc2>
          break;
 8007be0:	bf00      	nop
      }
      break;
 8007be2:	e004      	b.n	8007bee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fceb 	bl	80085c2 <USBD_CtlError>
      break;
 8007bec:	bf00      	nop
  }

  return ret;
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	889b      	ldrh	r3, [r3, #4]
 8007c0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c14:	2b40      	cmp	r3, #64	; 0x40
 8007c16:	d007      	beq.n	8007c28 <USBD_StdEPReq+0x30>
 8007c18:	2b40      	cmp	r3, #64	; 0x40
 8007c1a:	f200 817f 	bhi.w	8007f1c <USBD_StdEPReq+0x324>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d02a      	beq.n	8007c78 <USBD_StdEPReq+0x80>
 8007c22:	2b20      	cmp	r3, #32
 8007c24:	f040 817a 	bne.w	8007f1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff fe83 	bl	8007938 <USBD_CoreFindEP>
 8007c32:	4603      	mov	r3, r0
 8007c34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c36:	7b7b      	ldrb	r3, [r7, #13]
 8007c38:	2bff      	cmp	r3, #255	; 0xff
 8007c3a:	f000 8174 	beq.w	8007f26 <USBD_StdEPReq+0x32e>
 8007c3e:	7b7b      	ldrb	r3, [r7, #13]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f040 8170 	bne.w	8007f26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c46:	7b7a      	ldrb	r2, [r7, #13]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c4e:	7b7a      	ldrb	r2, [r7, #13]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	32ae      	adds	r2, #174	; 0xae
 8007c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 8163 	beq.w	8007f26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c60:	7b7a      	ldrb	r2, [r7, #13]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	32ae      	adds	r2, #174	; 0xae
 8007c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4798      	blx	r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c76:	e156      	b.n	8007f26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d008      	beq.n	8007c92 <USBD_StdEPReq+0x9a>
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	f300 8145 	bgt.w	8007f10 <USBD_StdEPReq+0x318>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 809b 	beq.w	8007dc2 <USBD_StdEPReq+0x1ca>
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d03c      	beq.n	8007d0a <USBD_StdEPReq+0x112>
 8007c90:	e13e      	b.n	8007f10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d002      	beq.n	8007ca4 <USBD_StdEPReq+0xac>
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d016      	beq.n	8007cd0 <USBD_StdEPReq+0xd8>
 8007ca2:	e02c      	b.n	8007cfe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <USBD_StdEPReq+0xce>
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
 8007cac:	2b80      	cmp	r3, #128	; 0x80
 8007cae:	d00a      	beq.n	8007cc6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 f963 	bl	8008f80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cba:	2180      	movs	r1, #128	; 0x80
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 f95f 	bl	8008f80 <USBD_LL_StallEP>
 8007cc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc4:	e020      	b.n	8007d08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc7a 	bl	80085c2 <USBD_CtlError>
              break;
 8007cce:	e01b      	b.n	8007d08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	885b      	ldrh	r3, [r3, #2]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10e      	bne.n	8007cf6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00b      	beq.n	8007cf6 <USBD_StdEPReq+0xfe>
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b80      	cmp	r3, #128	; 0x80
 8007ce2:	d008      	beq.n	8007cf6 <USBD_StdEPReq+0xfe>
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	88db      	ldrh	r3, [r3, #6]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f001 f945 	bl	8008f80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fd2e 	bl	8008758 <USBD_CtlSendStatus>

              break;
 8007cfc:	e004      	b.n	8007d08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 fc5e 	bl	80085c2 <USBD_CtlError>
              break;
 8007d06:	bf00      	nop
          }
          break;
 8007d08:	e107      	b.n	8007f1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d002      	beq.n	8007d1c <USBD_StdEPReq+0x124>
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d016      	beq.n	8007d48 <USBD_StdEPReq+0x150>
 8007d1a:	e04b      	b.n	8007db4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00d      	beq.n	8007d3e <USBD_StdEPReq+0x146>
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	2b80      	cmp	r3, #128	; 0x80
 8007d26:	d00a      	beq.n	8007d3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 f927 	bl	8008f80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d32:	2180      	movs	r1, #128	; 0x80
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 f923 	bl	8008f80 <USBD_LL_StallEP>
 8007d3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d3c:	e040      	b.n	8007dc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fc3e 	bl	80085c2 <USBD_CtlError>
              break;
 8007d46:	e03b      	b.n	8007dc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	885b      	ldrh	r3, [r3, #2]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d136      	bne.n	8007dbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d004      	beq.n	8007d64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 f92d 	bl	8008fbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fcf7 	bl	8008758 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff fde2 	bl	8007938 <USBD_CoreFindEP>
 8007d74:	4603      	mov	r3, r0
 8007d76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d78:	7b7b      	ldrb	r3, [r7, #13]
 8007d7a:	2bff      	cmp	r3, #255	; 0xff
 8007d7c:	d01f      	beq.n	8007dbe <USBD_StdEPReq+0x1c6>
 8007d7e:	7b7b      	ldrb	r3, [r7, #13]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11c      	bne.n	8007dbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d84:	7b7a      	ldrb	r2, [r7, #13]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d8c:	7b7a      	ldrb	r2, [r7, #13]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	32ae      	adds	r2, #174	; 0xae
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d010      	beq.n	8007dbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d9c:	7b7a      	ldrb	r2, [r7, #13]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	32ae      	adds	r2, #174	; 0xae
 8007da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007db2:	e004      	b.n	8007dbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fc03 	bl	80085c2 <USBD_CtlError>
              break;
 8007dbc:	e000      	b.n	8007dc0 <USBD_StdEPReq+0x1c8>
              break;
 8007dbe:	bf00      	nop
          }
          break;
 8007dc0:	e0ab      	b.n	8007f1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d002      	beq.n	8007dd4 <USBD_StdEPReq+0x1dc>
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d032      	beq.n	8007e38 <USBD_StdEPReq+0x240>
 8007dd2:	e097      	b.n	8007f04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dd4:	7bbb      	ldrb	r3, [r7, #14]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d007      	beq.n	8007dea <USBD_StdEPReq+0x1f2>
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b80      	cmp	r3, #128	; 0x80
 8007dde:	d004      	beq.n	8007dea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fbed 	bl	80085c2 <USBD_CtlError>
                break;
 8007de8:	e091      	b.n	8007f0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	da0b      	bge.n	8007e0a <USBD_StdEPReq+0x212>
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	3310      	adds	r3, #16
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	4413      	add	r3, r2
 8007e06:	3304      	adds	r3, #4
 8007e08:	e00b      	b.n	8007e22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
 8007e0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	4413      	add	r3, r2
 8007e20:	3304      	adds	r3, #4
 8007e22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fc37 	bl	80086a4 <USBD_CtlSendData>
              break;
 8007e36:	e06a      	b.n	8007f0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	da11      	bge.n	8007e64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	f003 020f 	and.w	r2, r3, #15
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	3324      	adds	r3, #36	; 0x24
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d117      	bne.n	8007e8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fbb0 	bl	80085c2 <USBD_CtlError>
                  break;
 8007e62:	e054      	b.n	8007f0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	f003 020f 	and.w	r2, r3, #15
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	440b      	add	r3, r1
 8007e76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fb9d 	bl	80085c2 <USBD_CtlError>
                  break;
 8007e88:	e041      	b.n	8007f0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	da0b      	bge.n	8007eaa <USBD_StdEPReq+0x2b2>
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	3310      	adds	r3, #16
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	e00b      	b.n	8007ec2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
 8007eac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4413      	add	r3, r2
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <USBD_StdEPReq+0x2d8>
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	2b80      	cmp	r3, #128	; 0x80
 8007ece:	d103      	bne.n	8007ed8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	e00e      	b.n	8007ef6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 f88d 	bl	8008ffc <USBD_LL_IsStallEP>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2201      	movs	r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	4619      	mov	r1, r3
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fbd1 	bl	80086a4 <USBD_CtlSendData>
              break;
 8007f02:	e004      	b.n	8007f0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fb5b 	bl	80085c2 <USBD_CtlError>
              break;
 8007f0c:	bf00      	nop
          }
          break;
 8007f0e:	e004      	b.n	8007f1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fb55 	bl	80085c2 <USBD_CtlError>
          break;
 8007f18:	bf00      	nop
      }
      break;
 8007f1a:	e005      	b.n	8007f28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fb4f 	bl	80085c2 <USBD_CtlError>
      break;
 8007f24:	e000      	b.n	8007f28 <USBD_StdEPReq+0x330>
      break;
 8007f26:	bf00      	nop
  }

  return ret;
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	885b      	ldrh	r3, [r3, #2]
 8007f4e:	0a1b      	lsrs	r3, r3, #8
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	3b01      	subs	r3, #1
 8007f54:	2b06      	cmp	r3, #6
 8007f56:	f200 8128 	bhi.w	80081aa <USBD_GetDescriptor+0x276>
 8007f5a:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <USBD_GetDescriptor+0x2c>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f7d 	.word	0x08007f7d
 8007f64:	08007f95 	.word	0x08007f95
 8007f68:	08007fd5 	.word	0x08007fd5
 8007f6c:	080081ab 	.word	0x080081ab
 8007f70:	080081ab 	.word	0x080081ab
 8007f74:	0800814b 	.word	0x0800814b
 8007f78:	08008177 	.word	0x08008177
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	7c12      	ldrb	r2, [r2, #16]
 8007f88:	f107 0108 	add.w	r1, r7, #8
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4798      	blx	r3
 8007f90:	60f8      	str	r0, [r7, #12]
      break;
 8007f92:	e112      	b.n	80081ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7c1b      	ldrb	r3, [r3, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10d      	bne.n	8007fb8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	f107 0208 	add.w	r2, r7, #8
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007fb6:	e100      	b.n	80081ba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	f107 0208 	add.w	r2, r7, #8
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4798      	blx	r3
 8007fc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	2202      	movs	r2, #2
 8007fd0:	701a      	strb	r2, [r3, #0]
      break;
 8007fd2:	e0f2      	b.n	80081ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	885b      	ldrh	r3, [r3, #2]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b05      	cmp	r3, #5
 8007fdc:	f200 80ac 	bhi.w	8008138 <USBD_GetDescriptor+0x204>
 8007fe0:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <USBD_GetDescriptor+0xb4>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	08008001 	.word	0x08008001
 8007fec:	08008035 	.word	0x08008035
 8007ff0:	08008069 	.word	0x08008069
 8007ff4:	0800809d 	.word	0x0800809d
 8007ff8:	080080d1 	.word	0x080080d1
 8007ffc:	08008105 	.word	0x08008105
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	7c12      	ldrb	r2, [r2, #16]
 8008018:	f107 0108 	add.w	r1, r7, #8
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
 8008020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008022:	e091      	b.n	8008148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 facb 	bl	80085c2 <USBD_CtlError>
            err++;
 800802c:	7afb      	ldrb	r3, [r7, #11]
 800802e:	3301      	adds	r3, #1
 8008030:	72fb      	strb	r3, [r7, #11]
          break;
 8008032:	e089      	b.n	8008148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	7c12      	ldrb	r2, [r2, #16]
 800804c:	f107 0108 	add.w	r1, r7, #8
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008056:	e077      	b.n	8008148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fab1 	bl	80085c2 <USBD_CtlError>
            err++;
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	3301      	adds	r3, #1
 8008064:	72fb      	strb	r3, [r7, #11]
          break;
 8008066:	e06f      	b.n	8008148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	7c12      	ldrb	r2, [r2, #16]
 8008080:	f107 0108 	add.w	r1, r7, #8
 8008084:	4610      	mov	r0, r2
 8008086:	4798      	blx	r3
 8008088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800808a:	e05d      	b.n	8008148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa97 	bl	80085c2 <USBD_CtlError>
            err++;
 8008094:	7afb      	ldrb	r3, [r7, #11]
 8008096:	3301      	adds	r3, #1
 8008098:	72fb      	strb	r3, [r7, #11]
          break;
 800809a:	e055      	b.n	8008148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	7c12      	ldrb	r2, [r2, #16]
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080be:	e043      	b.n	8008148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa7d 	bl	80085c2 <USBD_CtlError>
            err++;
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	3301      	adds	r3, #1
 80080cc:	72fb      	strb	r3, [r7, #11]
          break;
 80080ce:	e03b      	b.n	8008148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	7c12      	ldrb	r2, [r2, #16]
 80080e8:	f107 0108 	add.w	r1, r7, #8
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080f2:	e029      	b.n	8008148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa63 	bl	80085c2 <USBD_CtlError>
            err++;
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	3301      	adds	r3, #1
 8008100:	72fb      	strb	r3, [r7, #11]
          break;
 8008102:	e021      	b.n	8008148 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7c12      	ldrb	r2, [r2, #16]
 800811c:	f107 0108 	add.w	r1, r7, #8
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
 8008124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008126:	e00f      	b.n	8008148 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa49 	bl	80085c2 <USBD_CtlError>
            err++;
 8008130:	7afb      	ldrb	r3, [r7, #11]
 8008132:	3301      	adds	r3, #1
 8008134:	72fb      	strb	r3, [r7, #11]
          break;
 8008136:	e007      	b.n	8008148 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fa41 	bl	80085c2 <USBD_CtlError>
          err++;
 8008140:	7afb      	ldrb	r3, [r7, #11]
 8008142:	3301      	adds	r3, #1
 8008144:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008146:	bf00      	nop
      }
      break;
 8008148:	e037      	b.n	80081ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	7c1b      	ldrb	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	f107 0208 	add.w	r2, r7, #8
 800815e:	4610      	mov	r0, r2
 8008160:	4798      	blx	r3
 8008162:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008164:	e029      	b.n	80081ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fa2a 	bl	80085c2 <USBD_CtlError>
        err++;
 800816e:	7afb      	ldrb	r3, [r7, #11]
 8008170:	3301      	adds	r3, #1
 8008172:	72fb      	strb	r3, [r7, #11]
      break;
 8008174:	e021      	b.n	80081ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7c1b      	ldrb	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10d      	bne.n	800819a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008186:	f107 0208 	add.w	r2, r7, #8
 800818a:	4610      	mov	r0, r2
 800818c:	4798      	blx	r3
 800818e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3301      	adds	r3, #1
 8008194:	2207      	movs	r2, #7
 8008196:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008198:	e00f      	b.n	80081ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fa10 	bl	80085c2 <USBD_CtlError>
        err++;
 80081a2:	7afb      	ldrb	r3, [r7, #11]
 80081a4:	3301      	adds	r3, #1
 80081a6:	72fb      	strb	r3, [r7, #11]
      break;
 80081a8:	e007      	b.n	80081ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fa08 	bl	80085c2 <USBD_CtlError>
      err++;
 80081b2:	7afb      	ldrb	r3, [r7, #11]
 80081b4:	3301      	adds	r3, #1
 80081b6:	72fb      	strb	r3, [r7, #11]
      break;
 80081b8:	bf00      	nop
  }

  if (err != 0U)
 80081ba:	7afb      	ldrb	r3, [r7, #11]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d11e      	bne.n	80081fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	88db      	ldrh	r3, [r3, #6]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d016      	beq.n	80081f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80081c8:	893b      	ldrh	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00e      	beq.n	80081ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	88da      	ldrh	r2, [r3, #6]
 80081d2:	893b      	ldrh	r3, [r7, #8]
 80081d4:	4293      	cmp	r3, r2
 80081d6:	bf28      	it	cs
 80081d8:	4613      	movcs	r3, r2
 80081da:	b29b      	uxth	r3, r3
 80081dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081de:	893b      	ldrh	r3, [r7, #8]
 80081e0:	461a      	mov	r2, r3
 80081e2:	68f9      	ldr	r1, [r7, #12]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fa5d 	bl	80086a4 <USBD_CtlSendData>
 80081ea:	e009      	b.n	8008200 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f9e7 	bl	80085c2 <USBD_CtlError>
 80081f4:	e004      	b.n	8008200 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 faae 	bl	8008758 <USBD_CtlSendStatus>
 80081fc:	e000      	b.n	8008200 <USBD_GetDescriptor+0x2cc>
    return;
 80081fe:	bf00      	nop
  }
}
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop

08008208 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	889b      	ldrh	r3, [r3, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d131      	bne.n	800827e <USBD_SetAddress+0x76>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	88db      	ldrh	r3, [r3, #6]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d12d      	bne.n	800827e <USBD_SetAddress+0x76>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	885b      	ldrh	r3, [r3, #2]
 8008226:	2b7f      	cmp	r3, #127	; 0x7f
 8008228:	d829      	bhi.n	800827e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008234:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b03      	cmp	r3, #3
 8008240:	d104      	bne.n	800824c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f9bc 	bl	80085c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824a:	e01d      	b.n	8008288 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	7bfa      	ldrb	r2, [r7, #15]
 8008250:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fefb 	bl	8009054 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa7a 	bl	8008758 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008272:	e009      	b.n	8008288 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827c:	e004      	b.n	8008288 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f99e 	bl	80085c2 <USBD_CtlError>
  }
}
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	885b      	ldrh	r3, [r3, #2]
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	4b4e      	ldr	r3, [pc, #312]	; (80083e0 <USBD_SetConfig+0x150>)
 80082a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082a8:	4b4d      	ldr	r3, [pc, #308]	; (80083e0 <USBD_SetConfig+0x150>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d905      	bls.n	80082bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f985 	bl	80085c2 <USBD_CtlError>
    return USBD_FAIL;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e08c      	b.n	80083d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d002      	beq.n	80082ce <USBD_SetConfig+0x3e>
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d029      	beq.n	8008320 <USBD_SetConfig+0x90>
 80082cc:	e075      	b.n	80083ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082ce:	4b44      	ldr	r3, [pc, #272]	; (80083e0 <USBD_SetConfig+0x150>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d020      	beq.n	8008318 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082d6:	4b42      	ldr	r3, [pc, #264]	; (80083e0 <USBD_SetConfig+0x150>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082e0:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <USBD_SetConfig+0x150>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fe ffe7 	bl	80072ba <USBD_SetClassConfig>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d008      	beq.n	8008308 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f962 	bl	80085c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008306:	e065      	b.n	80083d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fa25 	bl	8008758 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2203      	movs	r2, #3
 8008312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008316:	e05d      	b.n	80083d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fa1d 	bl	8008758 <USBD_CtlSendStatus>
      break;
 800831e:	e059      	b.n	80083d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008320:	4b2f      	ldr	r3, [pc, #188]	; (80083e0 <USBD_SetConfig+0x150>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d112      	bne.n	800834e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008330:	4b2b      	ldr	r3, [pc, #172]	; (80083e0 <USBD_SetConfig+0x150>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	461a      	mov	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800833a:	4b29      	ldr	r3, [pc, #164]	; (80083e0 <USBD_SetConfig+0x150>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7fe ffd6 	bl	80072f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa06 	bl	8008758 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800834c:	e042      	b.n	80083d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800834e:	4b24      	ldr	r3, [pc, #144]	; (80083e0 <USBD_SetConfig+0x150>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d02a      	beq.n	80083b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7fe ffc4 	bl	80072f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800836a:	4b1d      	ldr	r3, [pc, #116]	; (80083e0 <USBD_SetConfig+0x150>)
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008374:	4b1a      	ldr	r3, [pc, #104]	; (80083e0 <USBD_SetConfig+0x150>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7fe ff9d 	bl	80072ba <USBD_SetClassConfig>
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00f      	beq.n	80083aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f918 	bl	80085c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7fe ffa9 	bl	80072f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083a8:	e014      	b.n	80083d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f9d4 	bl	8008758 <USBD_CtlSendStatus>
      break;
 80083b0:	e010      	b.n	80083d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f9d0 	bl	8008758 <USBD_CtlSendStatus>
      break;
 80083b8:	e00c      	b.n	80083d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f900 	bl	80085c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083c2:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <USBD_SetConfig+0x150>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7fe ff92 	bl	80072f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083ce:	2303      	movs	r3, #3
 80083d0:	73fb      	strb	r3, [r7, #15]
      break;
 80083d2:	bf00      	nop
  }

  return ret;
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	20000250 	.word	0x20000250

080083e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	88db      	ldrh	r3, [r3, #6]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d004      	beq.n	8008400 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f8e2 	bl	80085c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083fe:	e023      	b.n	8008448 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	dc02      	bgt.n	8008412 <USBD_GetConfig+0x2e>
 800840c:	2b00      	cmp	r3, #0
 800840e:	dc03      	bgt.n	8008418 <USBD_GetConfig+0x34>
 8008410:	e015      	b.n	800843e <USBD_GetConfig+0x5a>
 8008412:	2b03      	cmp	r3, #3
 8008414:	d00b      	beq.n	800842e <USBD_GetConfig+0x4a>
 8008416:	e012      	b.n	800843e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3308      	adds	r3, #8
 8008422:	2201      	movs	r2, #1
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f93c 	bl	80086a4 <USBD_CtlSendData>
        break;
 800842c:	e00c      	b.n	8008448 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3304      	adds	r3, #4
 8008432:	2201      	movs	r2, #1
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f934 	bl	80086a4 <USBD_CtlSendData>
        break;
 800843c:	e004      	b.n	8008448 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f8be 	bl	80085c2 <USBD_CtlError>
        break;
 8008446:	bf00      	nop
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008460:	b2db      	uxtb	r3, r3
 8008462:	3b01      	subs	r3, #1
 8008464:	2b02      	cmp	r3, #2
 8008466:	d81e      	bhi.n	80084a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	88db      	ldrh	r3, [r3, #6]
 800846c:	2b02      	cmp	r3, #2
 800846e:	d004      	beq.n	800847a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f8a5 	bl	80085c2 <USBD_CtlError>
        break;
 8008478:	e01a      	b.n	80084b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008486:	2b00      	cmp	r3, #0
 8008488:	d005      	beq.n	8008496 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f043 0202 	orr.w	r2, r3, #2
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	330c      	adds	r3, #12
 800849a:	2202      	movs	r2, #2
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f900 	bl	80086a4 <USBD_CtlSendData>
      break;
 80084a4:	e004      	b.n	80084b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f88a 	bl	80085c2 <USBD_CtlError>
      break;
 80084ae:	bf00      	nop
  }
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	885b      	ldrh	r3, [r3, #2]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d107      	bne.n	80084da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f940 	bl	8008758 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084d8:	e013      	b.n	8008502 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	885b      	ldrh	r3, [r3, #2]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d10b      	bne.n	80084fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	889b      	ldrh	r3, [r3, #4]
 80084e6:	0a1b      	lsrs	r3, r3, #8
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f930 	bl	8008758 <USBD_CtlSendStatus>
}
 80084f8:	e003      	b.n	8008502 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f860 	bl	80085c2 <USBD_CtlError>
}
 8008502:	bf00      	nop
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800851a:	b2db      	uxtb	r3, r3
 800851c:	3b01      	subs	r3, #1
 800851e:	2b02      	cmp	r3, #2
 8008520:	d80b      	bhi.n	800853a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	885b      	ldrh	r3, [r3, #2]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d10c      	bne.n	8008544 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f910 	bl	8008758 <USBD_CtlSendStatus>
      }
      break;
 8008538:	e004      	b.n	8008544 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f840 	bl	80085c2 <USBD_CtlError>
      break;
 8008542:	e000      	b.n	8008546 <USBD_ClrFeature+0x3c>
      break;
 8008544:	bf00      	nop
  }
}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	781a      	ldrb	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	781a      	ldrb	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3301      	adds	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f7ff fa41 	bl	8007a00 <SWAPBYTE>
 800857e:	4603      	mov	r3, r0
 8008580:	461a      	mov	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	3301      	adds	r3, #1
 800858a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f7ff fa34 	bl	8007a00 <SWAPBYTE>
 8008598:	4603      	mov	r3, r0
 800859a:	461a      	mov	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3301      	adds	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3301      	adds	r3, #1
 80085aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f7ff fa27 	bl	8007a00 <SWAPBYTE>
 80085b2:	4603      	mov	r3, r0
 80085b4:	461a      	mov	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	80da      	strh	r2, [r3, #6]
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b082      	sub	sp, #8
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085cc:	2180      	movs	r1, #128	; 0x80
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fcd6 	bl	8008f80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085d4:	2100      	movs	r1, #0
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fcd2 	bl	8008f80 <USBD_LL_StallEP>
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d036      	beq.n	8008668 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80085fe:	6938      	ldr	r0, [r7, #16]
 8008600:	f000 f836 	bl	8008670 <USBD_GetLen>
 8008604:	4603      	mov	r3, r0
 8008606:	3301      	adds	r3, #1
 8008608:	b29b      	uxth	r3, r3
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	4413      	add	r3, r2
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	7812      	ldrb	r2, [r2, #0]
 800861c:	701a      	strb	r2, [r3, #0]
  idx++;
 800861e:	7dfb      	ldrb	r3, [r7, #23]
 8008620:	3301      	adds	r3, #1
 8008622:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008624:	7dfb      	ldrb	r3, [r7, #23]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	4413      	add	r3, r2
 800862a:	2203      	movs	r2, #3
 800862c:	701a      	strb	r2, [r3, #0]
  idx++;
 800862e:	7dfb      	ldrb	r3, [r7, #23]
 8008630:	3301      	adds	r3, #1
 8008632:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008634:	e013      	b.n	800865e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	4413      	add	r3, r2
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	7812      	ldrb	r2, [r2, #0]
 8008640:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	3301      	adds	r3, #1
 8008646:	613b      	str	r3, [r7, #16]
    idx++;
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	3301      	adds	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	4413      	add	r3, r2
 8008654:	2200      	movs	r2, #0
 8008656:	701a      	strb	r2, [r3, #0]
    idx++;
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	3301      	adds	r3, #1
 800865c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d1e7      	bne.n	8008636 <USBD_GetString+0x52>
 8008666:	e000      	b.n	800866a <USBD_GetString+0x86>
    return;
 8008668:	bf00      	nop
  }
}
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008680:	e005      	b.n	800868e <USBD_GetLen+0x1e>
  {
    len++;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	3301      	adds	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	3301      	adds	r3, #1
 800868c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1f5      	bne.n	8008682 <USBD_GetLen+0x12>
  }

  return len;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	2100      	movs	r1, #0
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 fce1 	bl	8009092 <USBD_LL_Transmit>

  return USBD_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	2100      	movs	r1, #0
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 fcd0 	bl	8009092 <USBD_LL_Transmit>

  return USBD_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2203      	movs	r2, #3
 800870c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	2100      	movs	r1, #0
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fcd4 	bl	80090d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	60f8      	str	r0, [r7, #12]
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	2100      	movs	r1, #0
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 fcc3 	bl	80090d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2204      	movs	r2, #4
 8008764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008768:	2300      	movs	r3, #0
 800876a:	2200      	movs	r2, #0
 800876c:	2100      	movs	r1, #0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fc8f 	bl	8009092 <USBD_LL_Transmit>

  return USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2205      	movs	r2, #5
 800878a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800878e:	2300      	movs	r3, #0
 8008790:	2200      	movs	r2, #0
 8008792:	2100      	movs	r1, #0
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fc9d 	bl	80090d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087a8:	2200      	movs	r2, #0
 80087aa:	4912      	ldr	r1, [pc, #72]	; (80087f4 <MX_USB_DEVICE_Init+0x50>)
 80087ac:	4812      	ldr	r0, [pc, #72]	; (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087ae:	f7fe fd07 	bl	80071c0 <USBD_Init>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087b8:	f7f8 fc60 	bl	800107c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087bc:	490f      	ldr	r1, [pc, #60]	; (80087fc <MX_USB_DEVICE_Init+0x58>)
 80087be:	480e      	ldr	r0, [pc, #56]	; (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087c0:	f7fe fd2e 	bl	8007220 <USBD_RegisterClass>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80087ca:	f7f8 fc57 	bl	800107c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087ce:	490c      	ldr	r1, [pc, #48]	; (8008800 <MX_USB_DEVICE_Init+0x5c>)
 80087d0:	4809      	ldr	r0, [pc, #36]	; (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087d2:	f7fe fc1f 	bl	8007014 <USBD_CDC_RegisterInterface>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087dc:	f7f8 fc4e 	bl	800107c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087e0:	4805      	ldr	r0, [pc, #20]	; (80087f8 <MX_USB_DEVICE_Init+0x54>)
 80087e2:	f7fe fd53 	bl	800728c <USBD_Start>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087ec:	f7f8 fc46 	bl	800107c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087f0:	bf00      	nop
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	200000d8 	.word	0x200000d8
 80087f8:	20000254 	.word	0x20000254
 80087fc:	20000044 	.word	0x20000044
 8008800:	200000c4 	.word	0x200000c4

08008804 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008808:	2200      	movs	r2, #0
 800880a:	4905      	ldr	r1, [pc, #20]	; (8008820 <CDC_Init_FS+0x1c>)
 800880c:	4805      	ldr	r0, [pc, #20]	; (8008824 <CDC_Init_FS+0x20>)
 800880e:	f7fe fc1b 	bl	8007048 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008812:	4905      	ldr	r1, [pc, #20]	; (8008828 <CDC_Init_FS+0x24>)
 8008814:	4803      	ldr	r0, [pc, #12]	; (8008824 <CDC_Init_FS+0x20>)
 8008816:	f7fe fc39 	bl	800708c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800881a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800881c:	4618      	mov	r0, r3
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20000930 	.word	0x20000930
 8008824:	20000254 	.word	0x20000254
 8008828:	20000530 	.word	0x20000530

0800882c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008830:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008832:	4618      	mov	r0, r3
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	6039      	str	r1, [r7, #0]
 8008846:	71fb      	strb	r3, [r7, #7]
 8008848:	4613      	mov	r3, r2
 800884a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b23      	cmp	r3, #35	; 0x23
 8008850:	d84a      	bhi.n	80088e8 <CDC_Control_FS+0xac>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <CDC_Control_FS+0x1c>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	080088e9 	.word	0x080088e9
 800885c:	080088e9 	.word	0x080088e9
 8008860:	080088e9 	.word	0x080088e9
 8008864:	080088e9 	.word	0x080088e9
 8008868:	080088e9 	.word	0x080088e9
 800886c:	080088e9 	.word	0x080088e9
 8008870:	080088e9 	.word	0x080088e9
 8008874:	080088e9 	.word	0x080088e9
 8008878:	080088e9 	.word	0x080088e9
 800887c:	080088e9 	.word	0x080088e9
 8008880:	080088e9 	.word	0x080088e9
 8008884:	080088e9 	.word	0x080088e9
 8008888:	080088e9 	.word	0x080088e9
 800888c:	080088e9 	.word	0x080088e9
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088e9 	.word	0x080088e9
 8008898:	080088e9 	.word	0x080088e9
 800889c:	080088e9 	.word	0x080088e9
 80088a0:	080088e9 	.word	0x080088e9
 80088a4:	080088e9 	.word	0x080088e9
 80088a8:	080088e9 	.word	0x080088e9
 80088ac:	080088e9 	.word	0x080088e9
 80088b0:	080088e9 	.word	0x080088e9
 80088b4:	080088e9 	.word	0x080088e9
 80088b8:	080088e9 	.word	0x080088e9
 80088bc:	080088e9 	.word	0x080088e9
 80088c0:	080088e9 	.word	0x080088e9
 80088c4:	080088e9 	.word	0x080088e9
 80088c8:	080088e9 	.word	0x080088e9
 80088cc:	080088e9 	.word	0x080088e9
 80088d0:	080088e9 	.word	0x080088e9
 80088d4:	080088e9 	.word	0x080088e9
 80088d8:	080088e9 	.word	0x080088e9
 80088dc:	080088e9 	.word	0x080088e9
 80088e0:	080088e9 	.word	0x080088e9
 80088e4:	080088e9 	.word	0x080088e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80088e8:	bf00      	nop
  }

  return (USBD_OK);
 80088ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008902:	6879      	ldr	r1, [r7, #4]
 8008904:	4805      	ldr	r0, [pc, #20]	; (800891c <CDC_Receive_FS+0x24>)
 8008906:	f7fe fbc1 	bl	800708c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800890a:	4804      	ldr	r0, [pc, #16]	; (800891c <CDC_Receive_FS+0x24>)
 800890c:	f7fe fc22 	bl	8007154 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008910:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000254 	.word	0x20000254

08008920 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008930:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <CDC_Transmit_FS+0x48>)
 8008932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008936:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008942:	2301      	movs	r3, #1
 8008944:	e00b      	b.n	800895e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008946:	887b      	ldrh	r3, [r7, #2]
 8008948:	461a      	mov	r2, r3
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	4806      	ldr	r0, [pc, #24]	; (8008968 <CDC_Transmit_FS+0x48>)
 800894e:	f7fe fb7b 	bl	8007048 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008952:	4805      	ldr	r0, [pc, #20]	; (8008968 <CDC_Transmit_FS+0x48>)
 8008954:	f7fe fbb8 	bl	80070c8 <USBD_CDC_TransmitPacket>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20000254 	.word	0x20000254

0800896c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800897e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	6039      	str	r1, [r7, #0]
 800899a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2212      	movs	r2, #18
 80089a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089a2:	4b03      	ldr	r3, [pc, #12]	; (80089b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	200000f4 	.word	0x200000f4

080089b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	6039      	str	r1, [r7, #0]
 80089be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	2204      	movs	r2, #4
 80089c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089c6:	4b03      	ldr	r3, [pc, #12]	; (80089d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	20000108 	.word	0x20000108

080089d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	4907      	ldr	r1, [pc, #28]	; (8008a0c <USBD_FS_ProductStrDescriptor+0x34>)
 80089ee:	4808      	ldr	r0, [pc, #32]	; (8008a10 <USBD_FS_ProductStrDescriptor+0x38>)
 80089f0:	f7ff fdf8 	bl	80085e4 <USBD_GetString>
 80089f4:	e004      	b.n	8008a00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	4904      	ldr	r1, [pc, #16]	; (8008a0c <USBD_FS_ProductStrDescriptor+0x34>)
 80089fa:	4805      	ldr	r0, [pc, #20]	; (8008a10 <USBD_FS_ProductStrDescriptor+0x38>)
 80089fc:	f7ff fdf2 	bl	80085e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a00:	4b02      	ldr	r3, [pc, #8]	; (8008a0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000d30 	.word	0x20000d30
 8008a10:	08009250 	.word	0x08009250

08008a14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a20:	683a      	ldr	r2, [r7, #0]
 8008a22:	4904      	ldr	r1, [pc, #16]	; (8008a34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a24:	4804      	ldr	r0, [pc, #16]	; (8008a38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a26:	f7ff fddd 	bl	80085e4 <USBD_GetString>
  return USBD_StrDesc;
 8008a2a:	4b02      	ldr	r3, [pc, #8]	; (8008a34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20000d30 	.word	0x20000d30
 8008a38:	08009268 	.word	0x08009268

08008a3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	6039      	str	r1, [r7, #0]
 8008a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	221a      	movs	r2, #26
 8008a4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a4e:	f000 f843 	bl	8008ad8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a52:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	2000010c 	.word	0x2000010c

08008a60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d105      	bne.n	8008a7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	4907      	ldr	r1, [pc, #28]	; (8008a94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a76:	4808      	ldr	r0, [pc, #32]	; (8008a98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a78:	f7ff fdb4 	bl	80085e4 <USBD_GetString>
 8008a7c:	e004      	b.n	8008a88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4904      	ldr	r1, [pc, #16]	; (8008a94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a82:	4805      	ldr	r0, [pc, #20]	; (8008a98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a84:	f7ff fdae 	bl	80085e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20000d30 	.word	0x20000d30
 8008a98:	0800927c 	.word	0x0800927c

08008a9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	6039      	str	r1, [r7, #0]
 8008aa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d105      	bne.n	8008aba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	4907      	ldr	r1, [pc, #28]	; (8008ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ab2:	4808      	ldr	r0, [pc, #32]	; (8008ad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ab4:	f7ff fd96 	bl	80085e4 <USBD_GetString>
 8008ab8:	e004      	b.n	8008ac4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4904      	ldr	r1, [pc, #16]	; (8008ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008abe:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ac0:	f7ff fd90 	bl	80085e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ac4:	4b02      	ldr	r3, [pc, #8]	; (8008ad0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000d30 	.word	0x20000d30
 8008ad4:	08009288 	.word	0x08009288

08008ad8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ade:	4b0f      	ldr	r3, [pc, #60]	; (8008b1c <Get_SerialNum+0x44>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ae4:	4b0e      	ldr	r3, [pc, #56]	; (8008b20 <Get_SerialNum+0x48>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008aea:	4b0e      	ldr	r3, [pc, #56]	; (8008b24 <Get_SerialNum+0x4c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4413      	add	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d009      	beq.n	8008b12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008afe:	2208      	movs	r2, #8
 8008b00:	4909      	ldr	r1, [pc, #36]	; (8008b28 <Get_SerialNum+0x50>)
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f814 	bl	8008b30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b08:	2204      	movs	r2, #4
 8008b0a:	4908      	ldr	r1, [pc, #32]	; (8008b2c <Get_SerialNum+0x54>)
 8008b0c:	68b8      	ldr	r0, [r7, #8]
 8008b0e:	f000 f80f 	bl	8008b30 <IntToUnicode>
  }
}
 8008b12:	bf00      	nop
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	1fff7a10 	.word	0x1fff7a10
 8008b20:	1fff7a14 	.word	0x1fff7a14
 8008b24:	1fff7a18 	.word	0x1fff7a18
 8008b28:	2000010e 	.word	0x2000010e
 8008b2c:	2000011e 	.word	0x2000011e

08008b30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b42:	2300      	movs	r3, #0
 8008b44:	75fb      	strb	r3, [r7, #23]
 8008b46:	e027      	b.n	8008b98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	0f1b      	lsrs	r3, r3, #28
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d80b      	bhi.n	8008b68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	0f1b      	lsrs	r3, r3, #28
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	440b      	add	r3, r1
 8008b60:	3230      	adds	r2, #48	; 0x30
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	e00a      	b.n	8008b7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	0f1b      	lsrs	r3, r3, #28
 8008b6c:	b2da      	uxtb	r2, r3
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	4619      	mov	r1, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	440b      	add	r3, r1
 8008b78:	3237      	adds	r2, #55	; 0x37
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	3301      	adds	r3, #1
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	3301      	adds	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
 8008b98:	7dfa      	ldrb	r2, [r7, #23]
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d3d3      	bcc.n	8008b48 <IntToUnicode+0x18>
  }
}
 8008ba0:	bf00      	nop
 8008ba2:	bf00      	nop
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
	...

08008bb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b08a      	sub	sp, #40	; 0x28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb8:	f107 0314 	add.w	r3, r7, #20
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	605a      	str	r2, [r3, #4]
 8008bc2:	609a      	str	r2, [r3, #8]
 8008bc4:	60da      	str	r2, [r3, #12]
 8008bc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bd0:	d13a      	bne.n	8008c48 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	4b1e      	ldr	r3, [pc, #120]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	4a1d      	ldr	r2, [pc, #116]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008bdc:	f043 0301 	orr.w	r3, r3, #1
 8008be0:	6313      	str	r3, [r2, #48]	; 0x30
 8008be2:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	613b      	str	r3, [r7, #16]
 8008bec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008bee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c00:	230a      	movs	r3, #10
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c04:	f107 0314 	add.w	r3, r7, #20
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4812      	ldr	r0, [pc, #72]	; (8008c54 <HAL_PCD_MspInit+0xa4>)
 8008c0c:	f7f9 f8f4 	bl	8001df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c10:	4b0f      	ldr	r3, [pc, #60]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c14:	4a0e      	ldr	r2, [pc, #56]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1a:	6353      	str	r3, [r2, #52]	; 0x34
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c24:	4a0a      	ldr	r2, [pc, #40]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8008c2c:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <HAL_PCD_MspInit+0xa0>)
 8008c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 3, 0);
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2103      	movs	r1, #3
 8008c3c:	2043      	movs	r0, #67	; 0x43
 8008c3e:	f7f9 f8a4 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c42:	2043      	movs	r0, #67	; 0x43
 8008c44:	f7f9 f8bd 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c48:	bf00      	nop
 8008c4a:	3728      	adds	r7, #40	; 0x28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40023800 	.word	0x40023800
 8008c54:	40020000 	.word	0x40020000

08008c58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f7fe fb59 	bl	8007326 <USBD_LL_SetupStage>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c8e:	78fa      	ldrb	r2, [r7, #3]
 8008c90:	6879      	ldr	r1, [r7, #4]
 8008c92:	4613      	mov	r3, r2
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	f7fe fb93 	bl	80073d0 <USBD_LL_DataOutStage>
}
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b082      	sub	sp, #8
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	334c      	adds	r3, #76	; 0x4c
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	78fb      	ldrb	r3, [r7, #3]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	f7fe fc2c 	bl	8007536 <USBD_LL_DataInStage>
}
 8008cde:	bf00      	nop
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fe fd60 	bl	80077ba <USBD_LL_SOF>
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d001      	beq.n	8008d1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008d16:	f7f8 f9b1 	bl	800107c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d20:	7bfa      	ldrb	r2, [r7, #15]
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe fd0a 	bl	800773e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fe fcb2 	bl	800769a <USBD_LL_Reset>
}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe fd05 	bl	800775e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d66:	f043 0301 	orr.w	r3, r3, #1
 8008d6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d005      	beq.n	8008d80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d74:	4b04      	ldr	r3, [pc, #16]	; (8008d88 <HAL_PCD_SuspendCallback+0x48>)
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	4a03      	ldr	r2, [pc, #12]	; (8008d88 <HAL_PCD_SuspendCallback+0x48>)
 8008d7a:	f043 0306 	orr.w	r3, r3, #6
 8008d7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	e000ed00 	.word	0xe000ed00

08008d8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fcf5 	bl	800778a <USBD_LL_Resume>
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fd4d 	bl	800785e <USBD_LL_IsoOUTIncomplete>
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fd09 	bl	80077fa <USBD_LL_IsoINIncomplete>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fd5f 	bl	80078c2 <USBD_LL_DevConnected>
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fd5c 	bl	80078d8 <USBD_LL_DevDisconnected>
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d13c      	bne.n	8008eb2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e38:	4a20      	ldr	r2, [pc, #128]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a1e      	ldr	r2, [pc, #120]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e44:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e48:	4b1c      	ldr	r3, [pc, #112]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e50:	4b1a      	ldr	r3, [pc, #104]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e52:	2204      	movs	r2, #4
 8008e54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e56:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e58:	2202      	movs	r2, #2
 8008e5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e5c:	4b17      	ldr	r3, [pc, #92]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e62:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e64:	2202      	movs	r2, #2
 8008e66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e68:	4b14      	ldr	r3, [pc, #80]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e74:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e7a:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e80:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e86:	480d      	ldr	r0, [pc, #52]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e88:	f7f9 f9a9 	bl	80021de <HAL_PCD_Init>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e92:	f7f8 f8f3 	bl	800107c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e96:	2180      	movs	r1, #128	; 0x80
 8008e98:	4808      	ldr	r0, [pc, #32]	; (8008ebc <USBD_LL_Init+0x94>)
 8008e9a:	f7fa fc00 	bl	800369e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e9e:	2240      	movs	r2, #64	; 0x40
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4806      	ldr	r0, [pc, #24]	; (8008ebc <USBD_LL_Init+0x94>)
 8008ea4:	f7fa fbb4 	bl	8003610 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ea8:	2280      	movs	r2, #128	; 0x80
 8008eaa:	2101      	movs	r1, #1
 8008eac:	4803      	ldr	r0, [pc, #12]	; (8008ebc <USBD_LL_Init+0x94>)
 8008eae:	f7fa fbaf 	bl	8003610 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000f30 	.word	0x20000f30

08008ec0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f9 fa9e 	bl	8002418 <HAL_PCD_Start>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f942 	bl	800916c <USBD_Get_USB_Status>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	4608      	mov	r0, r1
 8008f00:	4611      	mov	r1, r2
 8008f02:	461a      	mov	r2, r3
 8008f04:	4603      	mov	r3, r0
 8008f06:	70fb      	strb	r3, [r7, #3]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70bb      	strb	r3, [r7, #2]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f1e:	78bb      	ldrb	r3, [r7, #2]
 8008f20:	883a      	ldrh	r2, [r7, #0]
 8008f22:	78f9      	ldrb	r1, [r7, #3]
 8008f24:	f7f9 ff6f 	bl	8002e06 <HAL_PCD_EP_Open>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f91c 	bl	800916c <USBD_Get_USB_Status>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b084      	sub	sp, #16
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f5c:	78fa      	ldrb	r2, [r7, #3]
 8008f5e:	4611      	mov	r1, r2
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7f9 ffb8 	bl	8002ed6 <HAL_PCD_EP_Close>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f000 f8fd 	bl	800916c <USBD_Get_USB_Status>
 8008f72:	4603      	mov	r3, r0
 8008f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f9a:	78fa      	ldrb	r2, [r7, #3]
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7fa f890 	bl	80030c4 <HAL_PCD_EP_SetStall>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f8de 	bl	800916c <USBD_Get_USB_Status>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fd8:	78fa      	ldrb	r2, [r7, #3]
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fa f8d5 	bl	800318c <HAL_PCD_EP_ClrStall>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f8bf 	bl	800916c <USBD_Get_USB_Status>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800900e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009014:	2b00      	cmp	r3, #0
 8009016:	da0b      	bge.n	8009030 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009018:	78fb      	ldrb	r3, [r7, #3]
 800901a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800901e:	68f9      	ldr	r1, [r7, #12]
 8009020:	4613      	mov	r3, r2
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	440b      	add	r3, r1
 800902a:	333e      	adds	r3, #62	; 0x3e
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	e00b      	b.n	8009048 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	4613      	mov	r3, r2
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009046:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	4611      	mov	r1, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f7f9 fea2 	bl	8002dbc <HAL_PCD_SetAddress>
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f874 	bl	800916c <USBD_Get_USB_Status>
 8009084:	4603      	mov	r3, r0
 8009086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009088:	7bbb      	ldrb	r3, [r7, #14]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b086      	sub	sp, #24
 8009096:	af00      	add	r7, sp, #0
 8009098:	60f8      	str	r0, [r7, #12]
 800909a:	607a      	str	r2, [r7, #4]
 800909c:	603b      	str	r3, [r7, #0]
 800909e:	460b      	mov	r3, r1
 80090a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090b0:	7af9      	ldrb	r1, [r7, #11]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	f7f9 ffbb 	bl	8003030 <HAL_PCD_EP_Transmit>
 80090ba:	4603      	mov	r3, r0
 80090bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 f853 	bl	800916c <USBD_Get_USB_Status>
 80090c6:	4603      	mov	r3, r0
 80090c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	607a      	str	r2, [r7, #4]
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	460b      	mov	r3, r1
 80090e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090f2:	7af9      	ldrb	r1, [r7, #11]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	f7f9 ff37 	bl	8002f6a <HAL_PCD_EP_Receive>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 f832 	bl	800916c <USBD_Get_USB_Status>
 8009108:	4603      	mov	r3, r0
 800910a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800910c:	7dbb      	ldrb	r3, [r7, #22]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b082      	sub	sp, #8
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009128:	78fa      	ldrb	r2, [r7, #3]
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f7f9 ff67 	bl	8003000 <HAL_PCD_EP_GetRxCount>
 8009132:	4603      	mov	r3, r0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009144:	4b03      	ldr	r3, [pc, #12]	; (8009154 <USBD_static_malloc+0x18>)
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	2000143c 	.word	0x2000143c

08009158 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]

}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	2b03      	cmp	r3, #3
 800917e:	d817      	bhi.n	80091b0 <USBD_Get_USB_Status+0x44>
 8009180:	a201      	add	r2, pc, #4	; (adr r2, 8009188 <USBD_Get_USB_Status+0x1c>)
 8009182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009186:	bf00      	nop
 8009188:	08009199 	.word	0x08009199
 800918c:	0800919f 	.word	0x0800919f
 8009190:	080091a5 	.word	0x080091a5
 8009194:	080091ab 	.word	0x080091ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	73fb      	strb	r3, [r7, #15]
    break;
 800919c:	e00b      	b.n	80091b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800919e:	2303      	movs	r3, #3
 80091a0:	73fb      	strb	r3, [r7, #15]
    break;
 80091a2:	e008      	b.n	80091b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091a4:	2301      	movs	r3, #1
 80091a6:	73fb      	strb	r3, [r7, #15]
    break;
 80091a8:	e005      	b.n	80091b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091aa:	2303      	movs	r3, #3
 80091ac:	73fb      	strb	r3, [r7, #15]
    break;
 80091ae:	e002      	b.n	80091b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091b0:	2303      	movs	r3, #3
 80091b2:	73fb      	strb	r3, [r7, #15]
    break;
 80091b4:	bf00      	nop
  }
  return usb_status;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <__libc_init_array>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4d0d      	ldr	r5, [pc, #52]	; (80091fc <__libc_init_array+0x38>)
 80091c8:	4c0d      	ldr	r4, [pc, #52]	; (8009200 <__libc_init_array+0x3c>)
 80091ca:	1b64      	subs	r4, r4, r5
 80091cc:	10a4      	asrs	r4, r4, #2
 80091ce:	2600      	movs	r6, #0
 80091d0:	42a6      	cmp	r6, r4
 80091d2:	d109      	bne.n	80091e8 <__libc_init_array+0x24>
 80091d4:	4d0b      	ldr	r5, [pc, #44]	; (8009204 <__libc_init_array+0x40>)
 80091d6:	4c0c      	ldr	r4, [pc, #48]	; (8009208 <__libc_init_array+0x44>)
 80091d8:	f000 f82e 	bl	8009238 <_init>
 80091dc:	1b64      	subs	r4, r4, r5
 80091de:	10a4      	asrs	r4, r4, #2
 80091e0:	2600      	movs	r6, #0
 80091e2:	42a6      	cmp	r6, r4
 80091e4:	d105      	bne.n	80091f2 <__libc_init_array+0x2e>
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ec:	4798      	blx	r3
 80091ee:	3601      	adds	r6, #1
 80091f0:	e7ee      	b.n	80091d0 <__libc_init_array+0xc>
 80091f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f6:	4798      	blx	r3
 80091f8:	3601      	adds	r6, #1
 80091fa:	e7f2      	b.n	80091e2 <__libc_init_array+0x1e>
 80091fc:	080092b0 	.word	0x080092b0
 8009200:	080092b0 	.word	0x080092b0
 8009204:	080092b0 	.word	0x080092b0
 8009208:	080092b4 	.word	0x080092b4

0800920c <memcpy>:
 800920c:	440a      	add	r2, r1
 800920e:	4291      	cmp	r1, r2
 8009210:	f100 33ff 	add.w	r3, r0, #4294967295
 8009214:	d100      	bne.n	8009218 <memcpy+0xc>
 8009216:	4770      	bx	lr
 8009218:	b510      	push	{r4, lr}
 800921a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800921e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009222:	4291      	cmp	r1, r2
 8009224:	d1f9      	bne.n	800921a <memcpy+0xe>
 8009226:	bd10      	pop	{r4, pc}

08009228 <memset>:
 8009228:	4402      	add	r2, r0
 800922a:	4603      	mov	r3, r0
 800922c:	4293      	cmp	r3, r2
 800922e:	d100      	bne.n	8009232 <memset+0xa>
 8009230:	4770      	bx	lr
 8009232:	f803 1b01 	strb.w	r1, [r3], #1
 8009236:	e7f9      	b.n	800922c <memset+0x4>

08009238 <_init>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	bf00      	nop
 800923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923e:	bc08      	pop	{r3}
 8009240:	469e      	mov	lr, r3
 8009242:	4770      	bx	lr

08009244 <_fini>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr
