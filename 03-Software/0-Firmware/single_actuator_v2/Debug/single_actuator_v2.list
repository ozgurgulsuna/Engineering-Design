
single_actuator_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b544  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800b6e0  0800b6e0  0001b6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b958  0800b958  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800b958  0800b958  0001b958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b960  0800b960  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b960  0800b960  0001b960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b964  0800b964  0001b964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800b968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015b0  20000188  0800baf0  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001738  0800baf0  00021738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014369  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003105  00000000  00000000  00034521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00037628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00038710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191df  00000000  00000000  000396b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014450  00000000  00000000  00052897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb04  00000000  00000000  00066ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f67eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c44  00000000  00000000  000f683c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000188 	.word	0x20000188
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b6c4 	.word	0x0800b6c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000018c 	.word	0x2000018c
 80001d4:	0800b6c4 	.word	0x0800b6c4

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b974 	b.w	8000eb4 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468e      	mov	lr, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14d      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	d969      	bls.n	8000ccc <__udivmoddi4+0xe8>
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	b152      	cbz	r2, 8000c14 <__udivmoddi4+0x30>
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	f1c2 0120 	rsb	r1, r2, #32
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c12:	4094      	lsls	r4, r2
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	0c21      	lsrs	r1, r4, #16
 8000c1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c1e:	fa1f f78c 	uxth.w	r7, ip
 8000c22:	fb08 e316 	mls	r3, r8, r6, lr
 8000c26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2a:	fb06 f107 	mul.w	r1, r6, r7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 811f 	bcs.w	8000e7c <__udivmoddi4+0x298>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 811c 	bls.w	8000e7c <__udivmoddi4+0x298>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x92>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 810a 	bcs.w	8000e80 <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8107 	bls.w	8000e80 <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	1be4      	subs	r4, r4, r7
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa4>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xc2>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80ef 	beq.w	8000e76 <__udivmoddi4+0x292>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x160>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd4>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80f9 	bhi.w	8000eaa <__udivmoddi4+0x2c6>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa4>
 8000cc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xec>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 8092 	bne.w	8000dfe <__udivmoddi4+0x21a>
 8000cda:	eba1 010c 	sub.w	r1, r1, ip
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	0c20      	lsrs	r0, r4, #16
 8000cea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cee:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf6:	fb0e f003 	mul.w	r0, lr, r3
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x12c>
 8000cfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000d02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x12a>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2c0>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	1a09      	subs	r1, r1, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d18:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x156>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x154>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2ca>
 8000d38:	4608      	mov	r0, r1
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d42:	e79c      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000d44:	f1c6 0720 	rsb	r7, r6, #32
 8000d48:	40b3      	lsls	r3, r6
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa20 f407 	lsr.w	r4, r0, r7
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	40f9      	lsrs	r1, r7
 8000d5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d62:	fa00 f306 	lsl.w	r3, r0, r6
 8000d66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6a:	0c20      	lsrs	r0, r4, #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fb09 1118 	mls	r1, r9, r8, r1
 8000d74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d78:	fb08 f00e 	mul.w	r0, r8, lr
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b8>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	1a09      	subs	r1, r1, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da4:	fb09 1110 	mls	r1, r9, r0, r1
 8000da8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db0:	458e      	cmp	lr, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1e2>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2b4>
 8000dbe:	458e      	cmp	lr, r1
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2b4>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dca:	fba0 9402 	umull	r9, r4, r0, r2
 8000dce:	eba1 010e 	sub.w	r1, r1, lr
 8000dd2:	42a1      	cmp	r1, r4
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46a6      	mov	lr, r4
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x2a4>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x2a0>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x212>
 8000dde:	ebb3 0208 	subs.w	r2, r3, r8
 8000de2:	eb61 010e 	sbc.w	r1, r1, lr
 8000de6:	fa01 f707 	lsl.w	r7, r1, r7
 8000dea:	fa22 f306 	lsr.w	r3, r2, r6
 8000dee:	40f1      	lsrs	r1, r6
 8000df0:	431f      	orrs	r7, r3
 8000df2:	e9c5 7100 	strd	r7, r1, [r5]
 8000df6:	2600      	movs	r6, #0
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1c2 0320 	rsb	r3, r2, #32
 8000e02:	40d8      	lsrs	r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e20:	0c0b      	lsrs	r3, r1, #16
 8000e22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e26:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x260>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b8>
 8000e3c:	429e      	cmp	r6, r3
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b8>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1b9b      	subs	r3, r3, r6
 8000e46:	b289      	uxth	r1, r1
 8000e48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb06 f30e 	mul.w	r3, r6, lr
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x28a>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e6a:	3e02      	subs	r6, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	1ac9      	subs	r1, r1, r3
 8000e70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0x104>
 8000e76:	462e      	mov	r6, r5
 8000e78:	4628      	mov	r0, r5
 8000e7a:	e705      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	e6e3      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e6f8      	b.n	8000c76 <__udivmoddi4+0x92>
 8000e84:	454b      	cmp	r3, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f8>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e90:	3801      	subs	r0, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f8>
 8000e94:	4646      	mov	r6, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x28a>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1e2>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x260>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b8>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x12c>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e709      	b.n	8000cc2 <__udivmoddi4+0xde>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x156>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f001 fa84 	bl	80023c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f82c 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 f9e8 	bl	8001298 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000ec8:	f008 f8fc 	bl	80090c4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000ecc:	f000 f890 	bl	8000ff0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ed0:	f000 f994 	bl	80011fc <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ed4:	f000 f944 	bl	8001160 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <main+0x58>)
 8000eda:	f003 fd0d 	bl	80048f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <main+0x5c>)
 8000ee0:	f003 fd0a 	bl	80048f8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <main+0x5c>)
 8000ee8:	f003 fdc2 	bl	8004a70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000eec:	2104      	movs	r1, #4
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <main+0x5c>)
 8000ef0:	f003 fdbe 	bl	8004a70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <main+0x5c>)
 8000ef8:	f003 fdba 	bl	8004a70 <HAL_TIM_PWM_Start>

  // Store the frequency of PID loop
  PID_freq = HAL_RCC_GetSysClockFreq()/htim4.Init.Period;
 8000efc:	f003 fbda 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <main+0x58>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <main+0x60>)
 8000f0c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x56>
 8000f10:	20000234 	.word	0x20000234
 8000f14:	200001a4 	.word	0x200001a4
 8000f18:	2000027c 	.word	0x2000027c

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f008 fe04 	bl	8009b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <SystemClock_Config+0xd0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <SystemClock_Config+0xd0>)
 8000f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f90:	2319      	movs	r3, #25
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f94:	23c0      	movs	r3, #192	; 0xc0
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 f827 	bl	8003ff8 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fb0:	f000 fc42 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 fa89 	bl	80044e8 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fdc:	f000 fc2c 	bl	8001838 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3750      	adds	r7, #80	; 0x50
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	; 0x58
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2220      	movs	r2, #32
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f008 fd85 	bl	8009b38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800102e:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <MX_TIM1_Init+0x168>)
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <MX_TIM1_Init+0x16c>)
 8001032:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <MX_TIM1_Init+0x168>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <MX_TIM1_Init+0x168>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8001040:	4b45      	ldr	r3, [pc, #276]	; (8001158 <MX_TIM1_Init+0x168>)
 8001042:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001046:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b43      	ldr	r3, [pc, #268]	; (8001158 <MX_TIM1_Init+0x168>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800104e:	4b42      	ldr	r3, [pc, #264]	; (8001158 <MX_TIM1_Init+0x168>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <MX_TIM1_Init+0x168>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800105a:	483f      	ldr	r0, [pc, #252]	; (8001158 <MX_TIM1_Init+0x168>)
 800105c:	f003 fbfc 	bl	8004858 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001066:	f000 fbe7 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001074:	4619      	mov	r1, r3
 8001076:	4838      	ldr	r0, [pc, #224]	; (8001158 <MX_TIM1_Init+0x168>)
 8001078:	f003 ff74 	bl	8004f64 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001082:	f000 fbd9 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001086:	4834      	ldr	r0, [pc, #208]	; (8001158 <MX_TIM1_Init+0x168>)
 8001088:	f003 fc98 	bl	80049bc <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001092:	f000 fbd1 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010a2:	4619      	mov	r1, r3
 80010a4:	482c      	ldr	r0, [pc, #176]	; (8001158 <MX_TIM1_Init+0x168>)
 80010a6:	f004 fb23 	bl	80056f0 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010b0:	f000 fbc2 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	; 0x60
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	481f      	ldr	r0, [pc, #124]	; (8001158 <MX_TIM1_Init+0x168>)
 80010da:	f003 fe81 	bl	8004de0 <HAL_TIM_PWM_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010e4:	f000 fba8 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	2204      	movs	r2, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4819      	ldr	r0, [pc, #100]	; (8001158 <MX_TIM1_Init+0x168>)
 80010f2:	f003 fe75 	bl	8004de0 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010fc:	f000 fb9c 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	2208      	movs	r2, #8
 8001106:	4619      	mov	r1, r3
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <MX_TIM1_Init+0x168>)
 800110a:	f003 fe69 	bl	8004de0 <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001114:	f000 fb90 	bl	8001838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM1_Init+0x168>)
 800113c:	f004 fb46 	bl	80057cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001146:	f000 fb77 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM1_Init+0x168>)
 800114c:	f000 fbfe 	bl	800194c <HAL_TIM_MspPostInit>

}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	; 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001a4 	.word	0x200001a4
 800115c:	40010000 	.word	0x40010000

08001160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM3_Init+0x94>)
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <MX_TIM3_Init+0x98>)
 8001180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM3_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001190:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001194:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM3_Init+0x94>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a4:	f003 fb58 	bl	8004858 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 fb43 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011c0:	f003 fed0 	bl	8004f64 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 fb35 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011dc:	f004 fa88 	bl	80056f0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011e6:	f000 fb27 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001ec 	.word	0x200001ec
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_TIM4_Init+0x94>)
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <MX_TIM4_Init+0x98>)
 800121c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_TIM4_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_TIM4_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_TIM4_Init+0x94>)
 800122c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001230:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_TIM4_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM4_Init+0x94>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_TIM4_Init+0x94>)
 8001240:	f003 fb0a 	bl	8004858 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800124a:	f000 faf5 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_TIM4_Init+0x94>)
 800125c:	f003 fe82 	bl	8004f64 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 fae7 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_TIM4_Init+0x94>)
 8001278:	f004 fa3a 	bl	80056f0 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001282:	f000 fad9 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000234 	.word	0x20000234
 8001294:	40000800 	.word	0x40000800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <MX_GPIO_Init+0x144>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a49      	ldr	r2, [pc, #292]	; (80013dc <MX_GPIO_Init+0x144>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <MX_GPIO_Init+0x144>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <MX_GPIO_Init+0x144>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a42      	ldr	r2, [pc, #264]	; (80013dc <MX_GPIO_Init+0x144>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b40      	ldr	r3, [pc, #256]	; (80013dc <MX_GPIO_Init+0x144>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <MX_GPIO_Init+0x144>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <MX_GPIO_Init+0x144>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b39      	ldr	r3, [pc, #228]	; (80013dc <MX_GPIO_Init+0x144>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MX_GPIO_Init+0x144>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a34      	ldr	r2, [pc, #208]	; (80013dc <MX_GPIO_Init+0x144>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b32      	ldr	r3, [pc, #200]	; (80013dc <MX_GPIO_Init+0x144>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001324:	482e      	ldr	r0, [pc, #184]	; (80013e0 <MX_GPIO_Init+0x148>)
 8001326:	f001 fb93 	bl	8002a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001330:	482c      	ldr	r0, [pc, #176]	; (80013e4 <MX_GPIO_Init+0x14c>)
 8001332:	f001 fb8d 	bl	8002a50 <HAL_GPIO_WritePin>
                          |IN3_A_Pin|IN3_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ERROR_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8001336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <MX_GPIO_Init+0x148>)
 8001350:	f001 f9e2 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_A_Pin ENC2_A_Pin ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC2_A_Pin|ENC3_A_Pin;
 8001354:	2315      	movs	r3, #21
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001358:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	481f      	ldr	r0, [pc, #124]	; (80013e8 <MX_GPIO_Init+0x150>)
 800136a:	f001 f9d5 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin ENC2_B_Pin ENC3_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|ENC2_B_Pin|ENC3_B_Pin;
 800136e:	232a      	movs	r3, #42	; 0x2a
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4819      	ldr	r0, [pc, #100]	; (80013e8 <MX_GPIO_Init+0x150>)
 8001382:	f001 f9c9 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_B_Pin IN2_A_Pin IN2_B_Pin
                           IN3_A_Pin IN3_B_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 8001386:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800138a:	617b      	str	r3, [r7, #20]
                          |IN3_A_Pin|IN3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_GPIO_Init+0x14c>)
 80013a0:	f001 f9ba 	bl	8002718 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2006      	movs	r0, #6
 80013aa:	f001 f97e 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ae:	2006      	movs	r0, #6
 80013b0:	f001 f997 	bl	80026e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2008      	movs	r0, #8
 80013ba:	f001 f976 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013be:	2008      	movs	r0, #8
 80013c0:	f001 f98f 	bl	80026e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	200a      	movs	r0, #10
 80013ca:	f001 f96e 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013ce:	200a      	movs	r0, #10
 80013d0:	f001 f987 	bl	80026e2 <HAL_NVIC_EnableIRQ>

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020000 	.word	0x40020000
 80013ec:	00000000 	.word	0x00000000

080013f0 <inverse_kinematics>:

/* USER CODE BEGIN 4 */
void inverse_kinematics(float X_ref_temp){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	ed87 0a01 	vstr	s0, [r7, #4]

	// Determine the two angles and one length
	d_inner_ref = sqrt(X_ref_temp*X_ref_temp + 20*X_ref_temp + 1864);        // in cm
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001402:	edd7 7a01 	vldr	s15, [r7, #4]
 8001406:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800140a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80015b0 <inverse_kinematics+0x1c0>
 8001416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800141a:	ee17 0a90 	vmov	r0, s15
 800141e:	f7ff f849 	bl	80004b4 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ec43 2b10 	vmov	d0, r2, r3
 800142a:	f008 fe19 	bl	800a060 <sqrt>
 800142e:	ec53 2b10 	vmov	r2, r3, d0
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb6d 	bl	8000b14 <__aeabi_d2f>
 800143a:	4603      	mov	r3, r0
 800143c:	4a5d      	ldr	r2, [pc, #372]	; (80015b4 <inverse_kinematics+0x1c4>)
 800143e:	6013      	str	r3, [r2, #0]
	theta_1_ref = 2*atan( (d_inner_ref + 42)/(X_ref_temp + 10) );  // in radians
 8001440:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <inverse_kinematics+0x1c4>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80015b8 <inverse_kinematics+0x1c8>
 800144a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800145a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800145e:	ee16 0a90 	vmov	r0, s13
 8001462:	f7ff f827 	bl	80004b4 <__aeabi_f2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	ec43 2b10 	vmov	d0, r2, r3
 800146e:	f008 fb6b 	bl	8009b48 <atan>
 8001472:	ec51 0b10 	vmov	r0, r1, d0
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	f7fe febd 	bl	80001f8 <__adddf3>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb45 	bl	8000b14 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <inverse_kinematics+0x1cc>)
 800148e:	6013      	str	r3, [r2, #0]
	// theta_3_ref = M_PI + theta_1_ref;                      // in radians -- NOT REQUIRED

	// Apply the cos theorem
	d_middle_ref = inverse_cos_theorem(D_LOWER_TO_MAIN_POLE, L_LOWER_POLE, (theta_1_ref - M_PI_2));
 8001490:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <inverse_kinematics+0x1cc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f80d 	bl	80004b4 <__aeabi_f2d>
 800149a:	a343      	add	r3, pc, #268	; (adr r3, 80015a8 <inverse_kinematics+0x1b8>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7fe fea8 	bl	80001f4 <__aeabi_dsub>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fb32 	bl	8000b14 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	ee01 3a10 	vmov	s2, r3
 80014b6:	eddf 0a42 	vldr	s1, [pc, #264]	; 80015c0 <inverse_kinematics+0x1d0>
 80014ba:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80015c4 <inverse_kinematics+0x1d4>
 80014be:	f000 f8f5 	bl	80016ac <inverse_cos_theorem>
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
 80014c6:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <inverse_kinematics+0x1d8>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
	d_outer_ref = inverse_cos_theorem(D_HIGHER_TO_MAIN_POLE, L_HIGHER_POLE, (theta_1_ref - M_PI_2));
 80014cc:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <inverse_kinematics+0x1cc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ffef 	bl	80004b4 <__aeabi_f2d>
 80014d6:	a334      	add	r3, pc, #208	; (adr r3, 80015a8 <inverse_kinematics+0x1b8>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fe8a 	bl	80001f4 <__aeabi_dsub>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb14 	bl	8000b14 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	ee01 3a10 	vmov	s2, r3
 80014f2:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 80014f6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80014fa:	f000 f8d7 	bl	80016ac <inverse_cos_theorem>
 80014fe:	eef0 7a40 	vmov.f32	s15, s0
 8001502:	4b32      	ldr	r3, [pc, #200]	; (80015cc <inverse_kinematics+0x1dc>)
 8001504:	edc3 7a00 	vstr	s15, [r3]

	// Determine motor position reference values (everything in cm)
	mot_inner_set_pos = d_inner_ref - D_INNER_OFFSET;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <inverse_kinematics+0x1c4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <inverse_kinematics+0x1e0>)
 800150e:	6013      	str	r3, [r2, #0]
	mot_middle_set_pos = d_middle_ref - D_MIDDLE_OFFSET;
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <inverse_kinematics+0x1d8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a2f      	ldr	r2, [pc, #188]	; (80015d4 <inverse_kinematics+0x1e4>)
 8001516:	6013      	str	r3, [r2, #0]
	mot_outer_set_pos = d_outer_ref - D_OUTER_OFFSET;
 8001518:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <inverse_kinematics+0x1dc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2e      	ldr	r2, [pc, #184]	; (80015d8 <inverse_kinematics+0x1e8>)
 800151e:	6013      	str	r3, [r2, #0]

	// If the set value is larger than the limit, set error code to 'r' ('out of range' error)
	if ((mot_inner_set_pos>INNER_SET_LIMIT_MAX) || (mot_inner_set_pos<INNER_SET_LIMIT_MIN)) error_code ='r';
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <inverse_kinematics+0x1e0>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	dc07      	bgt.n	8001544 <inverse_kinematics+0x154>
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <inverse_kinematics+0x1e0>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	d502      	bpl.n	800154a <inverse_kinematics+0x15a>
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <inverse_kinematics+0x1ec>)
 8001546:	2272      	movs	r2, #114	; 0x72
 8001548:	701a      	strb	r2, [r3, #0]
	if ((mot_middle_set_pos>MIDDLE_SET_LIMIT_MAX) || (mot_middle_set_pos<MIDDLE_SET_LIMIT_MIN)) error_code ='r';
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <inverse_kinematics+0x1e4>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155c:	dc07      	bgt.n	800156e <inverse_kinematics+0x17e>
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <inverse_kinematics+0x1e4>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d502      	bpl.n	8001574 <inverse_kinematics+0x184>
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <inverse_kinematics+0x1ec>)
 8001570:	2272      	movs	r2, #114	; 0x72
 8001572:	701a      	strb	r2, [r3, #0]
	if ((mot_outer_set_pos>OUTER_SET_LIMIT_MAX) || (mot_outer_set_pos<OUTER_SET_LIMIT_MIN)) error_code ='r';
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <inverse_kinematics+0x1e8>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800157e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	dc08      	bgt.n	800159a <inverse_kinematics+0x1aa>
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <inverse_kinematics+0x1e8>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	d400      	bmi.n	800159a <inverse_kinematics+0x1aa>
}
 8001598:	e002      	b.n	80015a0 <inverse_kinematics+0x1b0>
	if ((mot_outer_set_pos>OUTER_SET_LIMIT_MAX) || (mot_outer_set_pos<OUTER_SET_LIMIT_MIN)) error_code ='r';
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <inverse_kinematics+0x1ec>)
 800159c:	2272      	movs	r2, #114	; 0x72
 800159e:	701a      	strb	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	54442d18 	.word	0x54442d18
 80015ac:	3ff921fb 	.word	0x3ff921fb
 80015b0:	44e90000 	.word	0x44e90000
 80015b4:	20000288 	.word	0x20000288
 80015b8:	42280000 	.word	0x42280000
 80015bc:	20000284 	.word	0x20000284
 80015c0:	41c75bf5 	.word	0x41c75bf5
 80015c4:	41701d15 	.word	0x41701d15
 80015c8:	2000028c 	.word	0x2000028c
 80015cc:	20000290 	.word	0x20000290
 80015d0:	200002dc 	.word	0x200002dc
 80015d4:	200002e0 	.word	0x200002e0
 80015d8:	200002e4 	.word	0x200002e4
 80015dc:	200002a8 	.word	0x200002a8

080015e0 <forward_kinematics>:

void forward_kinematics(){
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	// Find d_middle_curr & d_inner_curr
	d_middle_curr = enc_middle_pos_cm + D_MIDDLE_OFFSET;
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <forward_kinematics+0xa4>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001688 <forward_kinematics+0xa8>
 80015ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <forward_kinematics+0xac>)
 80015f4:	edc3 7a00 	vstr	s15, [r3]
	d_inner_curr = enc_inner_pos_cm + D_INNER_OFFSET;
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <forward_kinematics+0xb0>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001688 <forward_kinematics+0xa8>
 8001602:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <forward_kinematics+0xb4>)
 8001608:	edc3 7a00 	vstr	s15, [r3]

	// Find theta_1_curr using cos theorem
	theta_1_curr = forward_cos_theorem(D_LOWER_TO_MAIN_POLE, L_LOWER_POLE, d_middle_curr);
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <forward_kinematics+0xac>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	eeb0 1a67 	vmov.f32	s2, s15
 8001616:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001698 <forward_kinematics+0xb8>
 800161a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800169c <forward_kinematics+0xbc>
 800161e:	f000 f8c3 	bl	80017a8 <forward_cos_theorem>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <forward_kinematics+0xc0>)
 8001628:	edc3 7a00 	vstr	s15, [r3]

	// Update X_curr from the values
	X_curr = d_inner_curr*sin(theta_1_curr) - 10;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <forward_kinematics+0xb4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff3f 	bl	80004b4 <__aeabi_f2d>
 8001636:	4604      	mov	r4, r0
 8001638:	460d      	mov	r5, r1
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <forward_kinematics+0xc0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff38 	bl	80004b4 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f008 fc7c 	bl	8009f48 <sin>
 8001650:	ec53 2b10 	vmov	r2, r3, d0
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7fe ff84 	bl	8000564 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <forward_kinematics+0xc4>)
 800166a:	f7fe fdc3 	bl	80001f4 <__aeabi_dsub>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa4d 	bl	8000b14 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <forward_kinematics+0xc8>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	bdb0      	pop	{r4, r5, r7, pc}
 8001684:	200002d4 	.word	0x200002d4
 8001688:	00000000 	.word	0x00000000
 800168c:	2000029c 	.word	0x2000029c
 8001690:	200002d0 	.word	0x200002d0
 8001694:	200002a0 	.word	0x200002a0
 8001698:	41c75bf5 	.word	0x41c75bf5
 800169c:	41701d15 	.word	0x41701d15
 80016a0:	20000298 	.word	0x20000298
 80016a4:	40240000 	.word	0x40240000
 80016a8:	200002a4 	.word	0x200002a4

080016ac <inverse_cos_theorem>:

float inverse_cos_theorem(float a, float b, float beta){
 80016ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	ed87 0a03 	vstr	s0, [r7, #12]
 80016b8:	edc7 0a02 	vstr	s1, [r7, #8]
 80016bc:	ed87 1a01 	vstr	s2, [r7, #4]
	// Given a, b, and the angle beta; find the other side length of the triangle
	return sqrt( (b*b - a*a*sin(beta)*sin(beta)) ) + a*cos(beta);
 80016c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016c8:	ee17 0a90 	vmov	r0, s15
 80016cc:	f7fe fef2 	bl	80004b4 <__aeabi_f2d>
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
 80016d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016dc:	ee17 0a90 	vmov	r0, s15
 80016e0:	f7fe fee8 	bl	80004b4 <__aeabi_f2d>
 80016e4:	4680      	mov	r8, r0
 80016e6:	4689      	mov	r9, r1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7fe fee3 	bl	80004b4 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ec43 2b10 	vmov	d0, r2, r3
 80016f6:	f008 fc27 	bl	8009f48 <sin>
 80016fa:	ec53 2b10 	vmov	r2, r3, d0
 80016fe:	4640      	mov	r0, r8
 8001700:	4649      	mov	r1, r9
 8001702:	f7fe ff2f 	bl	8000564 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4690      	mov	r8, r2
 800170c:	4699      	mov	r9, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7fe fed0 	bl	80004b4 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	ec43 2b10 	vmov	d0, r2, r3
 800171c:	f008 fc14 	bl	8009f48 <sin>
 8001720:	ec53 2b10 	vmov	r2, r3, d0
 8001724:	4640      	mov	r0, r8
 8001726:	4649      	mov	r1, r9
 8001728:	f7fe ff1c 	bl	8000564 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fd5e 	bl	80001f4 <__aeabi_dsub>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	ec43 2b17 	vmov	d7, r2, r3
 8001740:	eeb0 0a47 	vmov.f32	s0, s14
 8001744:	eef0 0a67 	vmov.f32	s1, s15
 8001748:	f008 fc8a 	bl	800a060 <sqrt>
 800174c:	ec59 8b10 	vmov	r8, r9, d0
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7fe feaf 	bl	80004b4 <__aeabi_f2d>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe feaa 	bl	80004b4 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	ec43 2b10 	vmov	d0, r2, r3
 8001768:	f008 fb8e 	bl	8009e88 <cos>
 800176c:	ec53 2b10 	vmov	r2, r3, d0
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe fef6 	bl	8000564 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4640      	mov	r0, r8
 800177e:	4649      	mov	r1, r9
 8001780:	f7fe fd3a 	bl	80001f8 <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f9c2 	bl	8000b14 <__aeabi_d2f>
 8001790:	4603      	mov	r3, r0
 8001792:	ee07 3a90 	vmov	s15, r3
}
 8001796:	eeb0 0a67 	vmov.f32	s0, s15
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017a2:	0000      	movs	r0, r0
 80017a4:	0000      	movs	r0, r0
	...

080017a8 <forward_cos_theorem>:

float forward_cos_theorem(float a, float b, float c){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80017b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80017b6:	ed87 1a01 	vstr	s2, [r7, #4]
	// Given a, b, and c; find the angle between a and c, then find theta_1
	return M_PI_2 + acos( (a*a + c*c - b*b)/(2*a*c) );
 80017ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80017be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017da:	edd7 7a03 	vldr	s15, [r7, #12]
 80017de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ee:	ee16 0a90 	vmov	r0, s13
 80017f2:	f7fe fe5f 	bl	80004b4 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	ec43 2b10 	vmov	d0, r2, r3
 80017fe:	f008 fbfb 	bl	8009ff8 <acos>
 8001802:	ec51 0b10 	vmov	r0, r1, d0
 8001806:	a30a      	add	r3, pc, #40	; (adr r3, 8001830 <forward_cos_theorem+0x88>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fcf4 	bl	80001f8 <__adddf3>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f97c 	bl	8000b14 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	ee07 3a90 	vmov	s15, r3
}
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	54442d18 	.word	0x54442d18
 8001834:	3ff921fb 	.word	0x3ff921fb

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	e7fe      	b.n	8001840 <Error_Handler+0x8>
	...

08001844 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_MspInit+0x4c>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_MspInit+0x4c>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <HAL_TIM_Base_MspInit+0xa8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d10e      	bne.n	80018c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a24      	ldr	r2, [pc, #144]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018c2:	e036      	b.n	8001932 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_TIM_Base_MspInit+0xb0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d116      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201d      	movs	r0, #29
 80018f0:	f000 fedb 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f4:	201d      	movs	r0, #29
 80018f6:	f000 fef4 	bl	80026e2 <HAL_NVIC_EnableIRQ>
}
 80018fa:	e01a      	b.n	8001932 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_TIM_Base_MspInit+0xb4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d115      	bne.n	8001932 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	201e      	movs	r0, #30
 8001928:	f000 febf 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800192c:	201e      	movs	r0, #30
 800192e:	f000 fed8 	bl	80026e2 <HAL_NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40010000 	.word	0x40010000
 8001940:	40023800 	.word	0x40023800
 8001944:	40000400 	.word	0x40000400
 8001948:	40000800 	.word	0x40000800

0800194c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <HAL_TIM_MspPostInit+0x68>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d11e      	bne.n	80019ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_TIM_MspPostInit+0x6c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_TIM_MspPostInit+0x6c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_TIM_MspPostInit+0x6c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800198a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800198e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800199c:	2301      	movs	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <HAL_TIM_MspPostInit+0x70>)
 80019a8:	f000 feb6 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010000 	.word	0x40010000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 fd2e 	bl	800246c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	/* Check the direction of the first motor */
	if(HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4811      	ldr	r0, [pc, #68]	; (8001a60 <EXTI0_IRQHandler+0x4c>)
 8001a1c:	f001 f800 	bl	8002a20 <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <EXTI0_IRQHandler+0x1e>
		/* Update the position of the first motor */
		enc_inner_pos ++;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e004      	b.n	8001a3c <EXTI0_IRQHandler+0x28>
	}else{
		enc_inner_pos --;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a3a:	6013      	str	r3, [r2, #0]
	}
	enc_inner_pos_cm = (float)enc_inner_pos/(float)(INNER_GEAR_RATIO);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001a68 <EXTI0_IRQHandler+0x54>
 8001a4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <EXTI0_IRQHandler+0x58>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f001 f82e 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40020000 	.word	0x40020000
 8001a64:	200002c4 	.word	0x200002c4
 8001a68:	42200000 	.word	0x42200000
 8001a6c:	200002d0 	.word	0x200002d0

08001a70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	/* Check the direction of the second motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC2_B_Pin)){
 8001a74:	2108      	movs	r1, #8
 8001a76:	4811      	ldr	r0, [pc, #68]	; (8001abc <EXTI2_IRQHandler+0x4c>)
 8001a78:	f000 ffd2 	bl	8002a20 <HAL_GPIO_ReadPin>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <EXTI2_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_middle_pos ++;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e004      	b.n	8001a98 <EXTI2_IRQHandler+0x28>
		}else{
			enc_middle_pos --;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a96:	6013      	str	r3, [r2, #0]
		}
		enc_middle_pos_cm = (float)enc_middle_pos/(float)(MIDDLE_GEAR_RATIO);
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ac4 <EXTI2_IRQHandler+0x54>
 8001aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <EXTI2_IRQHandler+0x58>)
 8001aae:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 8001ab2:	2004      	movs	r0, #4
 8001ab4:	f001 f800 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	200002c8 	.word	0x200002c8
 8001ac4:	43480000 	.word	0x43480000
 8001ac8:	200002d4 	.word	0x200002d4

08001acc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	/* Check the direction of the third motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC3_B_Pin)){
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <EXTI4_IRQHandler+0x4c>)
 8001ad4:	f000 ffa4 	bl	8002a20 <HAL_GPIO_ReadPin>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <EXTI4_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_outer_pos ++;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e004      	b.n	8001af4 <EXTI4_IRQHandler+0x28>
		}else{
			enc_outer_pos --;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001af2:	6013      	str	r3, [r2, #0]
		}
		enc_outer_pos_cm = (float)enc_outer_pos/(float)(OUTER_GEAR_RATIO);
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b00:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001b20 <EXTI4_IRQHandler+0x54>
 8001b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <EXTI4_IRQHandler+0x58>)
 8001b0a:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_A_Pin);
 8001b0e:	2010      	movs	r0, #16
 8001b10:	f000 ffd2 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	200002cc 	.word	0x200002cc
 8001b20:	42200000 	.word	0x42200000
 8001b24:	200002d8 	.word	0x200002d8

08001b28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	// This timer frequency should be determined such that the interpolation
	// interval is approximately equal to the distance that the system can
	// travel in the timer period. (??? IS IT SO? IT LOOKS LIKE IT WILL WORK
	// AS SOON AS THE TIMER PERIOD IS LOW ENOUGH.)
	float X_ref_temp = X_curr + INTERPOLATION_INTERVAL;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <TIM3_IRQHandler+0x84>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b3c:	edc7 7a01 	vstr	s15, [r7, #4]
	if (X_ref_temp < X_ref){
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <TIM3_IRQHandler+0x88>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	d504      	bpl.n	8001b5e <TIM3_IRQHandler+0x36>
		inverse_kinematics(X_ref_temp);
 8001b54:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b58:	f7ff fc4a 	bl	80013f0 <inverse_kinematics>
 8001b5c:	e006      	b.n	8001b6c <TIM3_IRQHandler+0x44>
	}
	else{
		inverse_kinematics(X_ref);
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <TIM3_IRQHandler+0x88>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	eeb0 0a67 	vmov.f32	s0, s15
 8001b68:	f7ff fc42 	bl	80013f0 <inverse_kinematics>
	}

	if(X_ref == X_curr){
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <TIM3_IRQHandler+0x88>)
 8001b6e:	ed93 7a00 	vldr	s14, [r3]
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <TIM3_IRQHandler+0x84>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	d10c      	bne.n	8001b9c <TIM3_IRQHandler+0x74>
		memcpy(&usb_out, &acknowledge_message, sizeof(usb_out));
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <TIM3_IRQHandler+0x8c>)
 8001b84:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <TIM3_IRQHandler+0x90>)
 8001b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b8a:	e883 0003 	stmia.w	r3, {r0, r1}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 8001b8e:	2108      	movs	r1, #8
 8001b90:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <TIM3_IRQHandler+0x8c>)
 8001b92:	f007 fb55 	bl	8009240 <CDC_Transmit_FS>
		ack_to_be_sent = 0;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <TIM3_IRQHandler+0x94>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b9c:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <TIM3_IRQHandler+0x98>)
 8001b9e:	f003 f817 	bl	8004bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002a4 	.word	0x200002a4
 8001bb0:	20000294 	.word	0x20000294
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	200002aa 	.word	0x200002aa
 8001bc0:	200001ec 	.word	0x200001ec
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(error_code == 0 && external_shutdown == 0){
 8001bce:	4bad      	ldr	r3, [pc, #692]	; (8001e84 <TIM4_IRQHandler+0x2bc>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 825c 	bne.w	8002090 <TIM4_IRQHandler+0x4c8>
 8001bd8:	4bab      	ldr	r3, [pc, #684]	; (8001e88 <TIM4_IRQHandler+0x2c0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 8257 	bne.w	8002090 <TIM4_IRQHandler+0x4c8>

	/* Determine PID errors */
	float inner_pos_error = mot_inner_set_pos - enc_inner_pos_cm;
 8001be2:	4baa      	ldr	r3, [pc, #680]	; (8001e8c <TIM4_IRQHandler+0x2c4>)
 8001be4:	ed93 7a00 	vldr	s14, [r3]
 8001be8:	4ba9      	ldr	r3, [pc, #676]	; (8001e90 <TIM4_IRQHandler+0x2c8>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf2:	edc7 7a05 	vstr	s15, [r7, #20]
	float middle_pos_error = mot_middle_set_pos - enc_middle_pos_cm;
 8001bf6:	4ba7      	ldr	r3, [pc, #668]	; (8001e94 <TIM4_IRQHandler+0x2cc>)
 8001bf8:	ed93 7a00 	vldr	s14, [r3]
 8001bfc:	4ba6      	ldr	r3, [pc, #664]	; (8001e98 <TIM4_IRQHandler+0x2d0>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	edc7 7a04 	vstr	s15, [r7, #16]
	float outer_pos_error = mot_outer_set_pos - enc_outer_pos_cm;
 8001c0a:	4ba4      	ldr	r3, [pc, #656]	; (8001e9c <TIM4_IRQHandler+0x2d4>)
 8001c0c:	ed93 7a00 	vldr	s14, [r3]
 8001c10:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <TIM4_IRQHandler+0x2d8>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	edc7 7a03 	vstr	s15, [r7, #12]

	float inner_der_error=(inner_pos_error-pre_inner_pos_error)*PID_freq;
 8001c1e:	4ba1      	ldr	r3, [pc, #644]	; (8001ea4 <TIM4_IRQHandler+0x2dc>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c2c:	4b9e      	ldr	r3, [pc, #632]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3c:	edc7 7a02 	vstr	s15, [r7, #8]
	float middle_der_error=(middle_pos_error-pre_middle_pos_error)*PID_freq;
 8001c40:	4b9a      	ldr	r3, [pc, #616]	; (8001eac <TIM4_IRQHandler+0x2e4>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c4e:	4b96      	ldr	r3, [pc, #600]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	edc7 7a01 	vstr	s15, [r7, #4]
	float outer_der_error=(outer_pos_error-pre_outer_pos_error)*PID_freq;
 8001c62:	4b93      	ldr	r3, [pc, #588]	; (8001eb0 <TIM4_IRQHandler+0x2e8>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c70:	4b8d      	ldr	r3, [pc, #564]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c80:	edc7 7a00 	vstr	s15, [r7]

	inner_int_error+=inner_pos_error/PID_freq;
 8001c84:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c90:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c98:	4b86      	ldr	r3, [pc, #536]	; (8001eb4 <TIM4_IRQHandler+0x2ec>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca2:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <TIM4_IRQHandler+0x2ec>)
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
	middle_int_error+=middle_pos_error/PID_freq;
 8001ca8:	4b7f      	ldr	r3, [pc, #508]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb4:	edd7 6a04 	vldr	s13, [r7, #16]
 8001cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cbc:	4b7e      	ldr	r3, [pc, #504]	; (8001eb8 <TIM4_IRQHandler+0x2f0>)
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	4b7c      	ldr	r3, [pc, #496]	; (8001eb8 <TIM4_IRQHandler+0x2f0>)
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
	outer_int_error+=outer_pos_error/PID_freq;
 8001ccc:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd8:	edd7 6a03 	vldr	s13, [r7, #12]
 8001cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce0:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <TIM4_IRQHandler+0x2f4>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	4b74      	ldr	r3, [pc, #464]	; (8001ebc <TIM4_IRQHandler+0x2f4>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]

	pre_inner_pos_error=inner_pos_error;
 8001cf0:	4a6c      	ldr	r2, [pc, #432]	; (8001ea4 <TIM4_IRQHandler+0x2dc>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	6013      	str	r3, [r2, #0]
	pre_middle_pos_error=middle_pos_error;
 8001cf6:	4a6d      	ldr	r2, [pc, #436]	; (8001eac <TIM4_IRQHandler+0x2e4>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	6013      	str	r3, [r2, #0]
	pre_outer_pos_error=outer_pos_error;
 8001cfc:	4a6c      	ldr	r2, [pc, #432]	; (8001eb0 <TIM4_IRQHandler+0x2e8>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6013      	str	r3, [r2, #0]

	/* Set the duty (only proportional implemented for now) */
	duty_inner = (int)(kp_inner*inner_pos_error+kd_inner*inner_der_error+ki_inner*inner_int_error);
 8001d02:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <TIM4_IRQHandler+0x2f8>)
 8001d04:	ed93 7a00 	vldr	s14, [r3]
 8001d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d10:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <TIM4_IRQHandler+0x2fc>)
 8001d12:	edd3 6a00 	vldr	s13, [r3]
 8001d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d22:	4b69      	ldr	r3, [pc, #420]	; (8001ec8 <TIM4_IRQHandler+0x300>)
 8001d24:	edd3 6a00 	vldr	s13, [r3]
 8001d28:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <TIM4_IRQHandler+0x2ec>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3a:	ee17 2a90 	vmov	r2, s15
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <TIM4_IRQHandler+0x304>)
 8001d40:	601a      	str	r2, [r3, #0]
	duty_middle = (int)(kp_middle*middle_pos_error+kd_middle*middle_der_error+ki_middle*middle_int_error);
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <TIM4_IRQHandler+0x308>)
 8001d44:	ed93 7a00 	vldr	s14, [r3]
 8001d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d50:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <TIM4_IRQHandler+0x30c>)
 8001d52:	edd3 6a00 	vldr	s13, [r3]
 8001d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d62:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <TIM4_IRQHandler+0x310>)
 8001d64:	edd3 6a00 	vldr	s13, [r3]
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <TIM4_IRQHandler+0x2f0>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7a:	ee17 2a90 	vmov	r2, s15
 8001d7e:	4b57      	ldr	r3, [pc, #348]	; (8001edc <TIM4_IRQHandler+0x314>)
 8001d80:	601a      	str	r2, [r3, #0]
	duty_outer = (int)(kp_outer*outer_pos_error+kd_outer*outer_der_error+ki_outer*outer_int_error);
 8001d82:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <TIM4_IRQHandler+0x318>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d90:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <TIM4_IRQHandler+0x31c>)
 8001d92:	edd3 6a00 	vldr	s13, [r3]
 8001d96:	edd7 7a00 	vldr	s15, [r7]
 8001d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da2:	4b51      	ldr	r3, [pc, #324]	; (8001ee8 <TIM4_IRQHandler+0x320>)
 8001da4:	edd3 6a00 	vldr	s13, [r3]
 8001da8:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <TIM4_IRQHandler+0x2f4>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dba:	ee17 2a90 	vmov	r2, s15
 8001dbe:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <TIM4_IRQHandler+0x324>)
 8001dc0:	601a      	str	r2, [r3, #0]

	/* Set the direction */
	if(duty_inner > 0){
 8001dc2:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <TIM4_IRQHandler+0x304>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	dd0e      	ble.n	8001de8 <TIM4_IRQHandler+0x220>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, HIGH);
 8001dca:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2108      	movs	r1, #8
 8001dd2:	4848      	ldr	r0, [pc, #288]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001dd4:	f000 fe3c 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 8001dd8:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2110      	movs	r1, #16
 8001de0:	4844      	ldr	r0, [pc, #272]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001de2:	f000 fe35 	bl	8002a50 <HAL_GPIO_WritePin>
 8001de6:	e012      	b.n	8001e0e <TIM4_IRQHandler+0x246>
	}
	else{
			duty_inner = -duty_inner;
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <TIM4_IRQHandler+0x304>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	425b      	negs	r3, r3
 8001dee:	4a37      	ldr	r2, [pc, #220]	; (8001ecc <TIM4_IRQHandler+0x304>)
 8001df0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, HIGH);
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	2110      	movs	r1, #16
 8001dfa:	483e      	ldr	r0, [pc, #248]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001dfc:	f000 fe28 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 8001e00:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	2108      	movs	r1, #8
 8001e08:	483a      	ldr	r0, [pc, #232]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e0a:	f000 fe21 	bl	8002a50 <HAL_GPIO_WritePin>
	}
	if(duty_middle > 0){
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <TIM4_IRQHandler+0x314>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	dd0e      	ble.n	8001e34 <TIM4_IRQHandler+0x26c>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, HIGH);
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	4835      	ldr	r0, [pc, #212]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e20:	f000 fe16 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, LOW);
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2140      	movs	r1, #64	; 0x40
 8001e2c:	4831      	ldr	r0, [pc, #196]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e2e:	f000 fe0f 	bl	8002a50 <HAL_GPIO_WritePin>
 8001e32:	e012      	b.n	8001e5a <TIM4_IRQHandler+0x292>
	}
	else{
			duty_middle = -duty_middle;
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <TIM4_IRQHandler+0x314>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	425b      	negs	r3, r3
 8001e3a:	4a28      	ldr	r2, [pc, #160]	; (8001edc <TIM4_IRQHandler+0x314>)
 8001e3c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, HIGH);
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	2140      	movs	r1, #64	; 0x40
 8001e46:	482b      	ldr	r0, [pc, #172]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e48:	f000 fe02 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, LOW);
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	2120      	movs	r1, #32
 8001e54:	4827      	ldr	r0, [pc, #156]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e56:	f000 fdfb 	bl	8002a50 <HAL_GPIO_WritePin>
	}
	if(duty_outer > 0){
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <TIM4_IRQHandler+0x324>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	dd4c      	ble.n	8001efc <TIM4_IRQHandler+0x334>
			HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, HIGH);
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e6c:	f000 fdf0 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, LOW);
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7a:	481e      	ldr	r0, [pc, #120]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e7c:	f000 fde8 	bl	8002a50 <HAL_GPIO_WritePin>
 8001e80:	e050      	b.n	8001f24 <TIM4_IRQHandler+0x35c>
 8001e82:	bf00      	nop
 8001e84:	200002a8 	.word	0x200002a8
 8001e88:	200002a9 	.word	0x200002a9
 8001e8c:	200002dc 	.word	0x200002dc
 8001e90:	200002d0 	.word	0x200002d0
 8001e94:	200002e0 	.word	0x200002e0
 8001e98:	200002d4 	.word	0x200002d4
 8001e9c:	200002e4 	.word	0x200002e4
 8001ea0:	200002d8 	.word	0x200002d8
 8001ea4:	200002e8 	.word	0x200002e8
 8001ea8:	2000027c 	.word	0x2000027c
 8001eac:	200002ec 	.word	0x200002ec
 8001eb0:	200002f0 	.word	0x200002f0
 8001eb4:	200002f4 	.word	0x200002f4
 8001eb8:	200002f8 	.word	0x200002f8
 8001ebc:	200002fc 	.word	0x200002fc
 8001ec0:	20000018 	.word	0x20000018
 8001ec4:	20000304 	.word	0x20000304
 8001ec8:	20000300 	.word	0x20000300
 8001ecc:	20000318 	.word	0x20000318
 8001ed0:	2000001c 	.word	0x2000001c
 8001ed4:	2000030c 	.word	0x2000030c
 8001ed8:	20000308 	.word	0x20000308
 8001edc:	2000031c 	.word	0x2000031c
 8001ee0:	20000020 	.word	0x20000020
 8001ee4:	20000314 	.word	0x20000314
 8001ee8:	20000310 	.word	0x20000310
 8001eec:	20000320 	.word	0x20000320
 8001ef0:	20000024 	.word	0x20000024
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	20000324 	.word	0x20000324
	}
	else{
			duty_outer = -duty_outer;
 8001efc:	4b74      	ldr	r3, [pc, #464]	; (80020d0 <TIM4_IRQHandler+0x508>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	425b      	negs	r3, r3
 8001f02:	4a73      	ldr	r2, [pc, #460]	; (80020d0 <TIM4_IRQHandler+0x508>)
 8001f04:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, HIGH);
 8001f06:	4b73      	ldr	r3, [pc, #460]	; (80020d4 <TIM4_IRQHandler+0x50c>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f10:	4871      	ldr	r0, [pc, #452]	; (80020d8 <TIM4_IRQHandler+0x510>)
 8001f12:	f000 fd9d 	bl	8002a50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, LOW);
 8001f16:	4b71      	ldr	r3, [pc, #452]	; (80020dc <TIM4_IRQHandler+0x514>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	486e      	ldr	r0, [pc, #440]	; (80020d8 <TIM4_IRQHandler+0x510>)
 8001f20:	f000 fd96 	bl	8002a50 <HAL_GPIO_WritePin>
	}

	/* Limit the duty */
	if(duty_inner > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001f24:	4b6e      	ldr	r3, [pc, #440]	; (80020e0 <TIM4_IRQHandler+0x518>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fab1 	bl	8000490 <__aeabi_i2d>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	460d      	mov	r5, r1
 8001f32:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fa99 	bl	8000470 <__aeabi_ui2d>
 8001f3e:	a362      	add	r3, pc, #392	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb0e 	bl	8000564 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	4629      	mov	r1, r5
 8001f50:	f7fe fd98 	bl	8000a84 <__aeabi_dcmpgt>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d013      	beq.n	8001f82 <TIM4_IRQHandler+0x3ba>
			duty_inner = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001f5a:	4b62      	ldr	r3, [pc, #392]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fa85 	bl	8000470 <__aeabi_ui2d>
 8001f66:	a358      	add	r3, pc, #352	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fafa 	bl	8000564 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fda4 	bl	8000ac4 <__aeabi_d2iz>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <TIM4_IRQHandler+0x518>)
 8001f80:	6013      	str	r3, [r2, #0]
		}
	if(duty_middle > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001f82:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <TIM4_IRQHandler+0x520>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fa82 	bl	8000490 <__aeabi_i2d>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	4b54      	ldr	r3, [pc, #336]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fa6a 	bl	8000470 <__aeabi_ui2d>
 8001f9c:	a34a      	add	r3, pc, #296	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fadf 	bl	8000564 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4620      	mov	r0, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7fe fd69 	bl	8000a84 <__aeabi_dcmpgt>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <TIM4_IRQHandler+0x418>
			duty_middle = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fa56 	bl	8000470 <__aeabi_ui2d>
 8001fc4:	a340      	add	r3, pc, #256	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe facb 	bl	8000564 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fd75 	bl	8000ac4 <__aeabi_d2iz>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a42      	ldr	r2, [pc, #264]	; (80020e8 <TIM4_IRQHandler+0x520>)
 8001fde:	6013      	str	r3, [r2, #0]
		}
	if(duty_outer > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <TIM4_IRQHandler+0x508>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa53 	bl	8000490 <__aeabi_i2d>
 8001fea:	4604      	mov	r4, r0
 8001fec:	460d      	mov	r5, r1
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa3b 	bl	8000470 <__aeabi_ui2d>
 8001ffa:	a333      	add	r3, pc, #204	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe fab0 	bl	8000564 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe fd3a 	bl	8000a84 <__aeabi_dcmpgt>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d013      	beq.n	800203e <TIM4_IRQHandler+0x476>
			duty_outer = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	3301      	adds	r3, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa27 	bl	8000470 <__aeabi_ui2d>
 8002022:	a329      	add	r3, pc, #164	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe fa9c 	bl	8000564 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fd46 	bl	8000ac4 <__aeabi_d2iz>
 8002038:	4603      	mov	r3, r0
 800203a:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <TIM4_IRQHandler+0x508>)
 800203c:	6013      	str	r3, [r2, #0]
		}

	TIM1->CCR1 = duty_inner;
 800203e:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <TIM4_IRQHandler+0x518>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <TIM4_IRQHandler+0x524>)
 8002044:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_middle;
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <TIM4_IRQHandler+0x520>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <TIM4_IRQHandler+0x524>)
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_outer;
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <TIM4_IRQHandler+0x508>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <TIM4_IRQHandler+0x524>)
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c

	// Send acknowledge if the system reaches steady state
	if (ack_to_be_sent == 1 && inner_pos_error == 0){
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <TIM4_IRQHandler+0x528>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d114      	bne.n	8002088 <TIM4_IRQHandler+0x4c0>
 800205e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002062:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d10d      	bne.n	8002088 <TIM4_IRQHandler+0x4c0>
		steady_state_counter++;
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <TIM4_IRQHandler+0x52c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <TIM4_IRQHandler+0x52c>)
 8002076:	701a      	strb	r2, [r3, #0]
		if(steady_state_counter == 1){
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <TIM4_IRQHandler+0x52c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <TIM4_IRQHandler+0x4bc>
			forward_kinematics();
 8002080:	f7ff faae 	bl	80015e0 <forward_kinematics>
		}

		if (steady_state_counter == 255){
 8002084:	bf00      	nop
	if(error_code == 0 && external_shutdown == 0){
 8002086:	e016      	b.n	80020b6 <TIM4_IRQHandler+0x4ee>
			// forward_kinematics(); X_curr should be updated above, as soon as inner_pos_error = 0 !!!
		}
	}
	else {
		steady_state_counter = 0;
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <TIM4_IRQHandler+0x52c>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
	if(error_code == 0 && external_shutdown == 0){
 800208e:	e012      	b.n	80020b6 <TIM4_IRQHandler+0x4ee>
	}

	}
	else{
		TIM1->CCR1 = 0;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <TIM4_IRQHandler+0x524>)
 8002092:	2200      	movs	r2, #0
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <TIM4_IRQHandler+0x524>)
 8002098:	2200      	movs	r2, #0
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <TIM4_IRQHandler+0x524>)
 800209e:	2200      	movs	r2, #0
 80020a0:	63da      	str	r2, [r3, #60]	; 0x3c
		memcpy(&usb_out, &error_message, sizeof(usb_out));
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <TIM4_IRQHandler+0x530>)
 80020a4:	4a15      	ldr	r2, [pc, #84]	; (80020fc <TIM4_IRQHandler+0x534>)
 80020a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020aa:	e883 0003 	stmia.w	r3, {r0, r1}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 80020ae:	2108      	movs	r1, #8
 80020b0:	4811      	ldr	r0, [pc, #68]	; (80020f8 <TIM4_IRQHandler+0x530>)
 80020b2:	f007 f8c5 	bl	8009240 <CDC_Transmit_FS>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020b6:	4812      	ldr	r0, [pc, #72]	; (8002100 <TIM4_IRQHandler+0x538>)
 80020b8:	f002 fd8a 	bl	8004bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdb0      	pop	{r4, r5, r7, pc}
 80020c4:	f3af 8000 	nop.w
 80020c8:	66666666 	.word	0x66666666
 80020cc:	3fee6666 	.word	0x3fee6666
 80020d0:	20000320 	.word	0x20000320
 80020d4:	20000024 	.word	0x20000024
 80020d8:	40020400 	.word	0x40020400
 80020dc:	20000324 	.word	0x20000324
 80020e0:	20000318 	.word	0x20000318
 80020e4:	200001a4 	.word	0x200001a4
 80020e8:	2000031c 	.word	0x2000031c
 80020ec:	40010000 	.word	0x40010000
 80020f0:	200002aa 	.word	0x200002aa
 80020f4:	200002ab 	.word	0x200002ab
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000010 	.word	0x20000010
 8002100:	20000234 	.word	0x20000234

08002104 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

	CDC_Receive_FS(usb_temp,sizeof(usb_temp));
 800210a:	2108      	movs	r1, #8
 800210c:	487c      	ldr	r0, [pc, #496]	; (8002300 <OTG_FS_IRQHandler+0x1fc>)
 800210e:	f007 f883 	bl	8009218 <CDC_Receive_FS>

	if(strcmp((char *)usb_temp, (char *)empty_string) != 0){
 8002112:	497c      	ldr	r1, [pc, #496]	; (8002304 <OTG_FS_IRQHandler+0x200>)
 8002114:	487a      	ldr	r0, [pc, #488]	; (8002300 <OTG_FS_IRQHandler+0x1fc>)
 8002116:	f7fe f85f 	bl	80001d8 <strcmp>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80e2 	beq.w	80022e6 <OTG_FS_IRQHandler+0x1e2>
		// Toggle the LED to indicate that message is received
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002126:	4878      	ldr	r0, [pc, #480]	; (8002308 <OTG_FS_IRQHandler+0x204>)
 8002128:	f000 fcab 	bl	8002a82 <HAL_GPIO_TogglePin>

		// Store the data in usb_in array if a non-empty message received
		memcpy(&usb_in, &usb_temp, sizeof(usb_in));
 800212c:	4b77      	ldr	r3, [pc, #476]	; (800230c <OTG_FS_IRQHandler+0x208>)
 800212e:	4a74      	ldr	r2, [pc, #464]	; (8002300 <OTG_FS_IRQHandler+0x1fc>)
 8002130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002134:	e883 0003 	stmia.w	r3, {r0, r1}

		/* Parsing USB Message*/
		if(usb_in[0] == 'm'){
 8002138:	4b74      	ldr	r3, [pc, #464]	; (800230c <OTG_FS_IRQHandler+0x208>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b6d      	cmp	r3, #109	; 0x6d
 800213e:	d12b      	bne.n	8002198 <OTG_FS_IRQHandler+0x94>
			// Since STM32 byte size is 16 bits, there isn't a real uint8_t type
			// We manually do big endian storage, and manually decode them below here
			move_x = usb_in[1]*256 + usb_in[2];
 8002140:	4b72      	ldr	r3, [pc, #456]	; (800230c <OTG_FS_IRQHandler+0x208>)
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	b29b      	uxth	r3, r3
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b70      	ldr	r3, [pc, #448]	; (800230c <OTG_FS_IRQHandler+0x208>)
 800214c:	789b      	ldrb	r3, [r3, #2]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4413      	add	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	b21a      	sxth	r2, r3
 8002156:	4b6e      	ldr	r3, [pc, #440]	; (8002310 <OTG_FS_IRQHandler+0x20c>)
 8002158:	801a      	strh	r2, [r3, #0]
			move_y = usb_in[3]*256 + usb_in[4];
 800215a:	4b6c      	ldr	r3, [pc, #432]	; (800230c <OTG_FS_IRQHandler+0x208>)
 800215c:	78db      	ldrb	r3, [r3, #3]
 800215e:	b29b      	uxth	r3, r3
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b69      	ldr	r3, [pc, #420]	; (800230c <OTG_FS_IRQHandler+0x208>)
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	b29b      	uxth	r3, r3
 800216a:	4413      	add	r3, r2
 800216c:	b29b      	uxth	r3, r3
 800216e:	b21a      	sxth	r2, r3
 8002170:	4b68      	ldr	r3, [pc, #416]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 8002172:	801a      	strh	r2, [r3, #0]
			usb_in[4] = move_y%256;
			usb_in[5] = '\n';
			CDC_Transmit_FS(usb_in,sizeof(usb_in));
			*/

			X_ref = X_curr + move_x;
 8002174:	4b66      	ldr	r3, [pc, #408]	; (8002310 <OTG_FS_IRQHandler+0x20c>)
 8002176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002182:	4b65      	ldr	r3, [pc, #404]	; (8002318 <OTG_FS_IRQHandler+0x214>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	4b63      	ldr	r3, [pc, #396]	; (800231c <OTG_FS_IRQHandler+0x218>)
 800218e:	edc3 7a00 	vstr	s15, [r3]

			ack_to_be_sent = 1;
 8002192:	4b63      	ldr	r3, [pc, #396]	; (8002320 <OTG_FS_IRQHandler+0x21c>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]

		}

		if(usb_in[0] == 's'){
 8002198:	4b5c      	ldr	r3, [pc, #368]	; (800230c <OTG_FS_IRQHandler+0x208>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b73      	cmp	r3, #115	; 0x73
 800219e:	d102      	bne.n	80021a6 <OTG_FS_IRQHandler+0xa2>
			external_shutdown = 1;
 80021a0:	4b60      	ldr	r3, [pc, #384]	; (8002324 <OTG_FS_IRQHandler+0x220>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	701a      	strb	r2, [r3, #0]
		}

		if(usb_in[0] == 'i'){
 80021a6:	4b59      	ldr	r3, [pc, #356]	; (800230c <OTG_FS_IRQHandler+0x208>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b69      	cmp	r3, #105	; 0x69
 80021ac:	d16e      	bne.n	800228c <OTG_FS_IRQHandler+0x188>
			// Since STM32 byte size is 16 bits, there isn't a real uint8_t type
			// We manually do big endian storage, and manually decode them below here

			int16_t mot_inner_move_mm = usb_in[1]*256 + usb_in[2];
 80021ae:	4b57      	ldr	r3, [pc, #348]	; (800230c <OTG_FS_IRQHandler+0x208>)
 80021b0:	785b      	ldrb	r3, [r3, #1]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b54      	ldr	r3, [pc, #336]	; (800230c <OTG_FS_IRQHandler+0x208>)
 80021ba:	789b      	ldrb	r3, [r3, #2]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4413      	add	r3, r2
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	80fb      	strh	r3, [r7, #6]
			int16_t mot_middle_move_mm = usb_in[3]*256 + usb_in[4];
 80021c4:	4b51      	ldr	r3, [pc, #324]	; (800230c <OTG_FS_IRQHandler+0x208>)
 80021c6:	78db      	ldrb	r3, [r3, #3]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	4b4f      	ldr	r3, [pc, #316]	; (800230c <OTG_FS_IRQHandler+0x208>)
 80021d0:	791b      	ldrb	r3, [r3, #4]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	80bb      	strh	r3, [r7, #4]
			int16_t mot_outer_move_mm = usb_in[5]*256 + usb_in[6];
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <OTG_FS_IRQHandler+0x208>)
 80021dc:	795b      	ldrb	r3, [r3, #5]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	4b49      	ldr	r3, [pc, #292]	; (800230c <OTG_FS_IRQHandler+0x208>)
 80021e6:	799b      	ldrb	r3, [r3, #6]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	807b      	strh	r3, [r7, #2]

			// Limit initializing movements to 5 cm
			if(abs(mot_inner_move_mm) < 50){
 80021f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bfb8      	it	lt
 80021f8:	425b      	neglt	r3, r3
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b31      	cmp	r3, #49	; 0x31
 80021fe:	d811      	bhi.n	8002224 <OTG_FS_IRQHandler+0x120>
				mot_inner_set_pos = mot_inner_set_pos + (float)mot_inner_move_mm/10;
 8002200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002210:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002214:	4b44      	ldr	r3, [pc, #272]	; (8002328 <OTG_FS_IRQHandler+0x224>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221e:	4b42      	ldr	r3, [pc, #264]	; (8002328 <OTG_FS_IRQHandler+0x224>)
 8002220:	edc3 7a00 	vstr	s15, [r3]
			}
			if(abs(mot_middle_move_mm) < 50){
 8002224:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	bfb8      	it	lt
 800222c:	425b      	neglt	r3, r3
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b31      	cmp	r3, #49	; 0x31
 8002232:	d811      	bhi.n	8002258 <OTG_FS_IRQHandler+0x154>
				mot_middle_set_pos = mot_middle_set_pos + (float)mot_middle_move_mm/10;
 8002234:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002240:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002244:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002248:	4b38      	ldr	r3, [pc, #224]	; (800232c <OTG_FS_IRQHandler+0x228>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <OTG_FS_IRQHandler+0x228>)
 8002254:	edc3 7a00 	vstr	s15, [r3]
			}
			if(abs(mot_outer_move_mm) < 50){
 8002258:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800225c:	2b00      	cmp	r3, #0
 800225e:	bfb8      	it	lt
 8002260:	425b      	neglt	r3, r3
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b31      	cmp	r3, #49	; 0x31
 8002266:	d811      	bhi.n	800228c <OTG_FS_IRQHandler+0x188>
				mot_outer_set_pos = mot_outer_set_pos + (float)mot_outer_move_mm/10;
 8002268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002274:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002278:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800227c:	4b2c      	ldr	r3, [pc, #176]	; (8002330 <OTG_FS_IRQHandler+0x22c>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <OTG_FS_IRQHandler+0x22c>)
 8002288:	edc3 7a00 	vstr	s15, [r3]

		if(usb_in[0] == 'o'){
			// TURN OFF CODE TO BE ADDED
		}

		if(usb_in[0] == 'b'){
 800228c:	4b1f      	ldr	r3, [pc, #124]	; (800230c <OTG_FS_IRQHandler+0x208>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b62      	cmp	r3, #98	; 0x62
 8002292:	d128      	bne.n	80022e6 <OTG_FS_IRQHandler+0x1e2>
			// Finish initializing and begin the main process by reseting
			// motor positions and set values
			mot_inner_set_pos = 0;
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <OTG_FS_IRQHandler+0x224>)
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
			mot_middle_set_pos = 0;
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <OTG_FS_IRQHandler+0x228>)
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
			mot_outer_set_pos = 0;
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <OTG_FS_IRQHandler+0x22c>)
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
			enc_inner_pos_cm = 0;
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <OTG_FS_IRQHandler+0x230>)
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
			enc_middle_pos_cm = 0;
 80022b4:	4b20      	ldr	r3, [pc, #128]	; (8002338 <OTG_FS_IRQHandler+0x234>)
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
			enc_outer_pos_cm = 0;
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <OTG_FS_IRQHandler+0x238>)
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
			enc_inner_pos = 0;
 80022c4:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <OTG_FS_IRQHandler+0x23c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
			enc_middle_pos = 0;
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <OTG_FS_IRQHandler+0x240>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
			enc_outer_pos = 0;
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <OTG_FS_IRQHandler+0x244>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
			X_ref = 0;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <OTG_FS_IRQHandler+0x218>)
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
			X_curr = 0;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <OTG_FS_IRQHandler+0x214>)
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
		}

	}

	// Clear usb_temp array
	memset(usb_temp, 0, sizeof(usb_temp));
 80022e6:	2208      	movs	r2, #8
 80022e8:	2100      	movs	r1, #0
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <OTG_FS_IRQHandler+0x1fc>)
 80022ec:	f007 fc24 	bl	8009b38 <memset>

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022f0:	4816      	ldr	r0, [pc, #88]	; (800234c <OTG_FS_IRQHandler+0x248>)
 80022f2:	f000 fd54 	bl	8002d9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200002b4 	.word	0x200002b4
 8002304:	200002bc 	.word	0x200002bc
 8002308:	40020800 	.word	0x40020800
 800230c:	200002ac 	.word	0x200002ac
 8002310:	20000280 	.word	0x20000280
 8002314:	20000282 	.word	0x20000282
 8002318:	200002a4 	.word	0x200002a4
 800231c:	20000294 	.word	0x20000294
 8002320:	200002aa 	.word	0x200002aa
 8002324:	200002a9 	.word	0x200002a9
 8002328:	200002dc 	.word	0x200002dc
 800232c:	200002e0 	.word	0x200002e0
 8002330:	200002e4 	.word	0x200002e4
 8002334:	200002d0 	.word	0x200002d0
 8002338:	200002d4 	.word	0x200002d4
 800233c:	200002d8 	.word	0x200002d8
 8002340:	200002c4 	.word	0x200002c4
 8002344:	200002c8 	.word	0x200002c8
 8002348:	200002cc 	.word	0x200002cc
 800234c:	2000100c 	.word	0x2000100c

08002350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <SystemInit+0x20>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <SystemInit+0x20>)
 800235c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002378:	480d      	ldr	r0, [pc, #52]	; (80023b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800237a:	490e      	ldr	r1, [pc, #56]	; (80023b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800237c:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002390:	4c0b      	ldr	r4, [pc, #44]	; (80023c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800239e:	f7ff ffd7 	bl	8002350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a2:	f007 fba5 	bl	8009af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a6:	f7fe fd87 	bl	8000eb8 <main>
  bx  lr    
 80023aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b4:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80023b8:	0800b968 	.word	0x0800b968
  ldr r2, =_sbss
 80023bc:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80023c0:	20001738 	.word	0x20001738

080023c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <ADC_IRQHandler>
	...

080023c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_Init+0x40>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <HAL_Init+0x40>)
 80023d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <HAL_Init+0x40>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_Init+0x40>)
 80023de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_Init+0x40>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_Init+0x40>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f0:	2003      	movs	r0, #3
 80023f2:	f000 f94f 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023f6:	200f      	movs	r0, #15
 80023f8:	f000 f808 	bl	800240c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023fc:	f7ff fa22 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023c00 	.word	0x40023c00

0800240c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_InitTick+0x54>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_InitTick+0x58>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002422:	fbb3 f3f1 	udiv	r3, r3, r1
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f967 	bl	80026fe <HAL_SYSTICK_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e00e      	b.n	8002458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b0f      	cmp	r3, #15
 800243e:	d80a      	bhi.n	8002456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002440:	2200      	movs	r2, #0
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f000 f92f 	bl	80026aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <HAL_InitTick+0x5c>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000028 	.word	0x20000028
 8002464:	20000030 	.word	0x20000030
 8002468:	2000002c 	.word	0x2000002c

0800246c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_IncTick+0x20>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_IncTick+0x24>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4413      	add	r3, r2
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <HAL_IncTick+0x24>)
 800247e:	6013      	str	r3, [r2, #0]
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000030 	.word	0x20000030
 8002490:	20000328 	.word	0x20000328

08002494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return uwTick;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_GetTick+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000328 	.word	0x20000328

080024ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b4:	f7ff ffee 	bl	8002494 <HAL_GetTick>
 80024b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d005      	beq.n	80024d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_Delay+0x44>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4413      	add	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024d2:	bf00      	nop
 80024d4:	f7ff ffde 	bl	8002494 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d8f7      	bhi.n	80024d4 <HAL_Delay+0x28>
  {
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000030 	.word	0x20000030

080024f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800251c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	60d3      	str	r3, [r2, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <__NVIC_GetPriorityGrouping+0x18>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f003 0307 	and.w	r3, r3, #7
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	db0b      	blt.n	8002582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	f003 021f 	and.w	r2, r3, #31
 8002570:	4907      	ldr	r1, [pc, #28]	; (8002590 <__NVIC_EnableIRQ+0x38>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2001      	movs	r0, #1
 800257a:	fa00 f202 	lsl.w	r2, r0, r2
 800257e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000e100 	.word	0xe000e100

08002594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0a      	blt.n	80025be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	490c      	ldr	r1, [pc, #48]	; (80025e0 <__NVIC_SetPriority+0x4c>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025bc:	e00a      	b.n	80025d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4908      	ldr	r1, [pc, #32]	; (80025e4 <__NVIC_SetPriority+0x50>)
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3b04      	subs	r3, #4
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	440b      	add	r3, r1
 80025d2:	761a      	strb	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f1c3 0307 	rsb	r3, r3, #7
 8002602:	2b04      	cmp	r3, #4
 8002604:	bf28      	it	cs
 8002606:	2304      	movcs	r3, #4
 8002608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3304      	adds	r3, #4
 800260e:	2b06      	cmp	r3, #6
 8002610:	d902      	bls.n	8002618 <NVIC_EncodePriority+0x30>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3b03      	subs	r3, #3
 8002616:	e000      	b.n	800261a <NVIC_EncodePriority+0x32>
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	f04f 32ff 	mov.w	r2, #4294967295
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	401a      	ands	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43d9      	mvns	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	4313      	orrs	r3, r2
         );
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002660:	d301      	bcc.n	8002666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2301      	movs	r3, #1
 8002664:	e00f      	b.n	8002686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <SysTick_Config+0x40>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266e:	210f      	movs	r1, #15
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f7ff ff8e 	bl	8002594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <SysTick_Config+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <SysTick_Config+0x40>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000e010 	.word	0xe000e010

08002694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff29 	bl	80024f4 <__NVIC_SetPriorityGrouping>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026bc:	f7ff ff3e 	bl	800253c <__NVIC_GetPriorityGrouping>
 80026c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	f7ff ff8e 	bl	80025e8 <NVIC_EncodePriority>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff5d 	bl	8002594 <__NVIC_SetPriority>
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff31 	bl	8002558 <__NVIC_EnableIRQ>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ffa2 	bl	8002650 <SysTick_Config>
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	e159      	b.n	80029e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	f040 8148 	bne.w	80029e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d005      	beq.n	800276a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002766:	2b02      	cmp	r3, #2
 8002768:	d130      	bne.n	80027cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	2203      	movs	r2, #3
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 0201 	and.w	r2, r3, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d017      	beq.n	8002808 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d123      	bne.n	800285c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	08da      	lsrs	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3208      	adds	r2, #8
 800281c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	220f      	movs	r2, #15
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	08da      	lsrs	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3208      	adds	r2, #8
 8002856:	69b9      	ldr	r1, [r7, #24]
 8002858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a2 	beq.w	80029e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	4b57      	ldr	r3, [pc, #348]	; (8002a00 <HAL_GPIO_Init+0x2e8>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a56      	ldr	r2, [pc, #344]	; (8002a00 <HAL_GPIO_Init+0x2e8>)
 80028a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <HAL_GPIO_Init+0x2e8>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ba:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a49      	ldr	r2, [pc, #292]	; (8002a08 <HAL_GPIO_Init+0x2f0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d019      	beq.n	800291a <HAL_GPIO_Init+0x202>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <HAL_GPIO_Init+0x2f4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x1fe>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a47      	ldr	r2, [pc, #284]	; (8002a10 <HAL_GPIO_Init+0x2f8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x1fa>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a46      	ldr	r2, [pc, #280]	; (8002a14 <HAL_GPIO_Init+0x2fc>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x1f6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a45      	ldr	r2, [pc, #276]	; (8002a18 <HAL_GPIO_Init+0x300>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x1f2>
 8002906:	2304      	movs	r3, #4
 8002908:	e008      	b.n	800291c <HAL_GPIO_Init+0x204>
 800290a:	2307      	movs	r3, #7
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x204>
 800290e:	2303      	movs	r3, #3
 8002910:	e004      	b.n	800291c <HAL_GPIO_Init+0x204>
 8002912:	2302      	movs	r3, #2
 8002914:	e002      	b.n	800291c <HAL_GPIO_Init+0x204>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_GPIO_Init+0x204>
 800291a:	2300      	movs	r3, #0
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	f002 0203 	and.w	r2, r2, #3
 8002922:	0092      	lsls	r2, r2, #2
 8002924:	4093      	lsls	r3, r2
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800292c:	4935      	ldr	r1, [pc, #212]	; (8002a04 <HAL_GPIO_Init+0x2ec>)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293a:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_GPIO_Init+0x304>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <HAL_GPIO_Init+0x304>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_GPIO_Init+0x304>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002988:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <HAL_GPIO_Init+0x304>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800298e:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <HAL_GPIO_Init+0x304>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b2:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <HAL_GPIO_Init+0x304>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <HAL_GPIO_Init+0x304>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029dc:	4a0f      	ldr	r2, [pc, #60]	; (8002a1c <HAL_GPIO_Init+0x304>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3301      	adds	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	f67f aea2 	bls.w	8002734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020c00 	.word	0x40020c00
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e001      	b.n	8002a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a60:	787b      	ldrb	r3, [r7, #1]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a6c:	e003      	b.n	8002a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	041a      	lsls	r2, r3, #16
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	619a      	str	r2, [r3, #24]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a94:	887a      	ldrh	r2, [r7, #2]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	041a      	lsls	r2, r3, #16
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	887b      	ldrh	r3, [r7, #2]
 8002aa2:	400b      	ands	r3, r1
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	619a      	str	r2, [r3, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ace:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f806 	bl	8002ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b00:	b08f      	sub	sp, #60	; 0x3c
 8002b02:	af0a      	add	r7, sp, #40	; 0x28
 8002b04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e10f      	b.n	8002d30 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f006 fcd0 	bl	80094d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2203      	movs	r2, #3
 8002b34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 ffb7 	bl	8005ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	687e      	ldr	r6, [r7, #4]
 8002b5c:	466d      	mov	r5, sp
 8002b5e:	f106 0410 	add.w	r4, r6, #16
 8002b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b72:	1d33      	adds	r3, r6, #4
 8002b74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b76:	6838      	ldr	r0, [r7, #0]
 8002b78:	f002 fe8e 	bl	8005898 <USB_CoreInit>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0d0      	b.n	8002d30 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2100      	movs	r1, #0
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 ffa5 	bl	8005ae4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e04a      	b.n	8002c36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	333d      	adds	r3, #61	; 0x3d
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	333c      	adds	r3, #60	; 0x3c
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	b298      	uxth	r0, r3
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3344      	adds	r3, #68	; 0x44
 8002bdc:	4602      	mov	r2, r0
 8002bde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3340      	adds	r3, #64	; 0x40
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3348      	adds	r3, #72	; 0x48
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334c      	adds	r3, #76	; 0x4c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c1c:	7bfa      	ldrb	r2, [r7, #15]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3354      	adds	r3, #84	; 0x54
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	3301      	adds	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d3af      	bcc.n	8002ba0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e044      	b.n	8002cd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c88:	7bfa      	ldrb	r2, [r7, #15]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d3b5      	bcc.n	8002c46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	687e      	ldr	r6, [r7, #4]
 8002ce2:	466d      	mov	r5, sp
 8002ce4:	f106 0410 	add.w	r4, r6, #16
 8002ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cf8:	1d33      	adds	r3, r6, #4
 8002cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	f002 ff3d 	bl	8005b7c <USB_DevInit>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e00d      	b.n	8002d30 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 f88c 	bl	8006e46 <USB_DevDisconnect>

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_PCD_Start+0x1c>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e020      	b.n	8002d96 <HAL_PCD_Start+0x5e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d109      	bne.n	8002d78 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d005      	beq.n	8002d78 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 fe8f 	bl	8005aa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 f83c 	bl	8006e04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d9e:	b590      	push	{r4, r7, lr}
 8002da0:	b08d      	sub	sp, #52	; 0x34
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 f8fa 	bl	8006fae <USB_GetMode>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 848a 	bne.w	80036d6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 f85e 	bl	8006e88 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8480 	beq.w	80036d4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 f84b 	bl	8006e88 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d107      	bne.n	8002e0c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f002 0202 	and.w	r2, r2, #2
 8002e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f004 f839 	bl	8006e88 <USB_ReadInterrupts>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d161      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0210 	bic.w	r2, r2, #16
 8002e2e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	0c5b      	lsrs	r3, r3, #17
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d124      	bne.n	8002ea6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d035      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6a38      	ldr	r0, [r7, #32]
 8002e7c:	f003 fe70 	bl	8006b60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8c:	441a      	add	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e9e:	441a      	add	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	621a      	str	r2, [r3, #32]
 8002ea4:	e016      	b.n	8002ed4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	0c5b      	lsrs	r3, r3, #17
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d110      	bne.n	8002ed4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eb8:	2208      	movs	r2, #8
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6a38      	ldr	r0, [r7, #32]
 8002ebe:	f003 fe4f 	bl	8006b60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	6a1a      	ldr	r2, [r3, #32]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ece:	441a      	add	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0210 	orr.w	r2, r2, #16
 8002ee2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f003 ffcd 	bl	8006e88 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ef8:	f040 80a7 	bne.w	800304a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f003 ffd2 	bl	8006eae <USB_ReadDevAllOutEpInterrupt>
 8002f0a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f0c:	e099      	b.n	8003042 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 808e 	beq.w	8003036 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 fff6 	bl	8006f16 <USB_ReadDevOutEPInterrupt>
 8002f2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00c      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	461a      	mov	r2, r3
 8002f44:	2301      	movs	r3, #1
 8002f46:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fec2 	bl	8003cd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f66:	461a      	mov	r2, r3
 8002f68:	2308      	movs	r3, #8
 8002f6a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 ff98 	bl	8003ea4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2310      	movs	r3, #16
 8002f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d030      	beq.n	8002ffc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d109      	bne.n	8002fba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	78db      	ldrb	r3, [r3, #3]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d108      	bne.n	8002fea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f006 fb6f 	bl	80096c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	461a      	mov	r2, r3
 8003014:	2320      	movs	r3, #32
 8003016:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	015a      	lsls	r2, r3, #5
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	4413      	add	r3, r2
 800302a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800302e:	461a      	mov	r2, r3
 8003030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003034:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	3301      	adds	r3, #1
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	f47f af62 	bne.w	8002f0e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f003 ff1a 	bl	8006e88 <USB_ReadInterrupts>
 8003054:	4603      	mov	r3, r0
 8003056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800305e:	f040 80db 	bne.w	8003218 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f003 ff3b 	bl	8006ee2 <USB_ReadDevAllInEpInterrupt>
 800306c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003072:	e0cd      	b.n	8003210 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80c2 	beq.w	8003204 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f003 ff61 	bl	8006f52 <USB_ReadDevInEPInterrupt>
 8003090:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d057      	beq.n	800314c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	2201      	movs	r2, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69f9      	ldr	r1, [r7, #28]
 80030b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030bc:	4013      	ands	r3, r2
 80030be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030cc:	461a      	mov	r2, r3
 80030ce:	2301      	movs	r3, #1
 80030d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d132      	bne.n	8003140 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334c      	adds	r3, #76	; 0x4c
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4403      	add	r3, r0
 80030fa:	3348      	adds	r3, #72	; 0x48
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4419      	add	r1, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4403      	add	r3, r0
 800310e:	334c      	adds	r3, #76	; 0x4c
 8003110:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d113      	bne.n	8003140 <HAL_PCD_IRQHandler+0x3a2>
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3354      	adds	r3, #84	; 0x54
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003138:	461a      	mov	r2, r3
 800313a:	2101      	movs	r1, #1
 800313c:	f003 ff68 	bl	8007010 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	b2db      	uxtb	r3, r3
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f006 fa43 	bl	80095d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003162:	461a      	mov	r2, r3
 8003164:	2308      	movs	r3, #8
 8003166:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317e:	461a      	mov	r2, r3
 8003180:	2310      	movs	r3, #16
 8003182:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319a:	461a      	mov	r2, r3
 800319c:	2340      	movs	r3, #64	; 0x40
 800319e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d023      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ac:	6a38      	ldr	r0, [r7, #32]
 80031ae:	f002 fe49 	bl	8005e44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	3338      	adds	r3, #56	; 0x38
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	78db      	ldrb	r3, [r3, #3]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d108      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f006 fa86 	bl	80096ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ec:	461a      	mov	r2, r3
 80031ee:	2302      	movs	r3, #2
 80031f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fcdb 	bl	8003bba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	3301      	adds	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	f47f af2e 	bne.w	8003074 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f003 fe33 	bl	8006e88 <USB_ReadInterrupts>
 8003222:	4603      	mov	r3, r0
 8003224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800322c:	d122      	bne.n	8003274 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003248:	2b01      	cmp	r3, #1
 800324a:	d108      	bne.n	800325e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003254:	2100      	movs	r1, #0
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fec2 	bl	8003fe0 <HAL_PCDEx_LPM_Callback>
 800325c:	e002      	b.n	8003264 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f006 fa24 	bl	80096ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f003 fe05 	bl	8006e88 <USB_ReadInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003288:	d112      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d102      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f006 f9e0 	bl	8009660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032ae:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 fde7 	bl	8006e88 <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c4:	f040 80b7 	bne.w	8003436 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d6:	f023 0301 	bic.w	r3, r3, #1
 80032da:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2110      	movs	r1, #16
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 fdae 	bl	8005e44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ec:	e046      	b.n	800337c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fa:	461a      	mov	r2, r3
 80032fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003300:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003312:	0151      	lsls	r1, r2, #5
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	440a      	add	r2, r1
 8003318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800331c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003320:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	461a      	mov	r2, r3
 8003330:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003334:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003346:	0151      	lsls	r1, r2, #5
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	440a      	add	r2, r1
 800334c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003354:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003366:	0151      	lsls	r1, r2, #5
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	440a      	add	r2, r1
 800336c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003370:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003374:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003378:	3301      	adds	r3, #1
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003382:	429a      	cmp	r2, r3
 8003384:	d3b3      	bcc.n	80032ee <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003394:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003398:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b2:	f043 030b 	orr.w	r3, r3, #11
 80033b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c8:	f043 030b 	orr.w	r3, r3, #11
 80033cc:	6453      	str	r3, [r2, #68]	; 0x44
 80033ce:	e015      	b.n	80033fc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f6:	f043 030b 	orr.w	r3, r3, #11
 80033fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800340a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800340e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003420:	461a      	mov	r2, r3
 8003422:	f003 fdf5 	bl	8007010 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f003 fd24 	bl	8006e88 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344a:	d124      	bne.n	8003496 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f003 fdba 	bl	8006fca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f002 fd6f 	bl	8005f3e <USB_GetDevSpeed>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681c      	ldr	r4, [r3, #0]
 800346c:	f001 f9e8 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8003470:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	4620      	mov	r0, r4
 800347c:	f002 fa6e 	bl	800595c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f006 f8ce 	bl	8009622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f003 fcf4 	bl	8006e88 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d10a      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f006 f8ab 	bl	8009606 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f002 0208 	and.w	r2, r2, #8
 80034be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f003 fcdf 	bl	8006e88 <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d122      	bne.n	800351a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e0:	2301      	movs	r3, #1
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
 80034e4:	e014      	b.n	8003510 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb27 	bl	8003b58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	429a      	cmp	r2, r3
 8003518:	d3e5      	bcc.n	80034e6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f003 fcb2 	bl	8006e88 <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352e:	d13b      	bne.n	80035a8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003530:	2301      	movs	r3, #1
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
 8003534:	e02b      	b.n	800358e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354a:	4613      	mov	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3340      	adds	r3, #64	; 0x40
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d115      	bne.n	8003588 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800355c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800355e:	2b00      	cmp	r3, #0
 8003560:	da12      	bge.n	8003588 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	333f      	adds	r3, #63	; 0x3f
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800357e:	b2db      	uxtb	r3, r3
 8003580:	4619      	mov	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fae8 	bl	8003b58 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	3301      	adds	r3, #1
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	429a      	cmp	r2, r3
 8003596:	d3ce      	bcc.n	8003536 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 fc6b 	bl	8006e88 <USB_ReadInterrupts>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035bc:	d155      	bne.n	800366a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035be:	2301      	movs	r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	e045      	b.n	8003650 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d12e      	bne.n	800364a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	da2b      	bge.n	800364a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80035fe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003602:	429a      	cmp	r2, r3
 8003604:	d121      	bne.n	800364a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	4613      	mov	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003646:	6053      	str	r3, [r2, #4]
            break;
 8003648:	e007      	b.n	800365a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	3301      	adds	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003656:	429a      	cmp	r2, r3
 8003658:	d3b4      	bcc.n	80035c4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f003 fc0a 	bl	8006e88 <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d10a      	bne.n	8003696 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f006 f845 	bl	8009710 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f003 fbf4 	bl	8006e88 <USB_ReadInterrupts>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d115      	bne.n	80036d6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f006 f835 	bl	800972c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	e000      	b.n	80036d6 <HAL_PCD_IRQHandler+0x938>
      return;
 80036d4:	bf00      	nop
    }
  }
}
 80036d6:	3734      	adds	r7, #52	; 0x34
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd90      	pop	{r4, r7, pc}

080036dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_PCD_SetAddress+0x1a>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e013      	b.n	800371e <HAL_PCD_SetAddress+0x42>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f003 fb52 	bl	8006db8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	4608      	mov	r0, r1
 8003730:	4611      	mov	r1, r2
 8003732:	461a      	mov	r2, r3
 8003734:	4603      	mov	r3, r0
 8003736:	70fb      	strb	r3, [r7, #3]
 8003738:	460b      	mov	r3, r1
 800373a:	803b      	strh	r3, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003748:	2b00      	cmp	r3, #0
 800374a:	da0f      	bge.n	800376c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 020f 	and.w	r2, r3, #15
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	3338      	adds	r3, #56	; 0x38
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	705a      	strb	r2, [r3, #1]
 800376a:	e00f      	b.n	800378c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 020f 	and.w	r2, r3, #15
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	3304      	adds	r3, #4
 8003784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003798:	883a      	ldrh	r2, [r7, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	78ba      	ldrb	r2, [r7, #2]
 80037a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037b6:	78bb      	ldrb	r3, [r7, #2]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d102      	bne.n	80037c2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_PCD_EP_Open+0xaa>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e00e      	b.n	80037ee <HAL_PCD_EP_Open+0xc8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	4618      	mov	r0, r3
 80037e0:	f002 fbd2 	bl	8005f88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80037ec:	7afb      	ldrb	r3, [r7, #11]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	460b      	mov	r3, r1
 8003800:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003806:	2b00      	cmp	r3, #0
 8003808:	da0f      	bge.n	800382a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3338      	adds	r3, #56	; 0x38
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	705a      	strb	r2, [r3, #1]
 8003828:	e00f      	b.n	800384a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	3304      	adds	r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	b2da      	uxtb	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_PCD_EP_Close+0x6e>
 8003860:	2302      	movs	r3, #2
 8003862:	e00e      	b.n	8003882 <HAL_PCD_EP_Close+0x8c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68f9      	ldr	r1, [r7, #12]
 8003872:	4618      	mov	r0, r3
 8003874:	f002 fc10 	bl	8006098 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	460b      	mov	r3, r1
 8003898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800389a:	7afb      	ldrb	r3, [r7, #11]
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	3304      	adds	r3, #4
 80038b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d102      	bne.n	80038e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038e6:	7afb      	ldrb	r3, [r7, #11]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	6979      	ldr	r1, [r7, #20]
 80038fe:	f002 feef 	bl	80066e0 <USB_EP0StartXfer>
 8003902:	e008      	b.n	8003916 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	6979      	ldr	r1, [r7, #20]
 8003912:	f002 fc9d 	bl	8006250 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 020f 	and.w	r2, r3, #15
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	460b      	mov	r3, r1
 800395e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003960:	7afb      	ldrb	r3, [r7, #11]
 8003962:	f003 020f 	and.w	r2, r3, #15
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	3338      	adds	r3, #56	; 0x38
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	3304      	adds	r3, #4
 8003976:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2200      	movs	r2, #0
 8003988:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2201      	movs	r2, #1
 800398e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003990:	7afb      	ldrb	r3, [r7, #11]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	b2da      	uxtb	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d102      	bne.n	80039aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039aa:	7afb      	ldrb	r3, [r7, #11]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	6979      	ldr	r1, [r7, #20]
 80039c2:	f002 fe8d 	bl	80066e0 <USB_EP0StartXfer>
 80039c6:	e008      	b.n	80039da <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	6979      	ldr	r1, [r7, #20]
 80039d6:	f002 fc3b 	bl	8006250 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d901      	bls.n	8003a02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e050      	b.n	8003aa4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da0f      	bge.n	8003a2a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 020f 	and.w	r2, r3, #15
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	3338      	adds	r3, #56	; 0x38
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3304      	adds	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	705a      	strb	r2, [r3, #1]
 8003a28:	e00d      	b.n	8003a46 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_PCD_EP_SetStall+0x82>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e01e      	b.n	8003aa4 <HAL_PCD_EP_SetStall+0xc0>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f003 f8cb 	bl	8006c10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	b2d9      	uxtb	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a94:	461a      	mov	r2, r3
 8003a96:	f003 fabb 	bl	8007010 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	f003 020f 	and.w	r2, r3, #15
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d901      	bls.n	8003aca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e042      	b.n	8003b50 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da0f      	bge.n	8003af2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 020f 	and.w	r2, r3, #15
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	3338      	adds	r3, #56	; 0x38
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	705a      	strb	r2, [r3, #1]
 8003af0:	e00f      	b.n	8003b12 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	f003 020f 	and.w	r2, r3, #15
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_PCD_EP_ClrStall+0x86>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e00e      	b.n	8003b50 <HAL_PCD_EP_ClrStall+0xa4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f003 f8d3 	bl	8006cec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da0c      	bge.n	8003b86 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 020f 	and.w	r2, r3, #15
 8003b72:	4613      	mov	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	3338      	adds	r3, #56	; 0x38
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	3304      	adds	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e00c      	b.n	8003ba0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	f003 020f 	and.w	r2, r3, #15
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68f9      	ldr	r1, [r7, #12]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f002 fef2 	bl	8006990 <USB_EPStopXfer>
 8003bac:	4603      	mov	r3, r0
 8003bae:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bb0:	7afb      	ldrb	r3, [r7, #11]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b08a      	sub	sp, #40	; 0x28
 8003bbe:	af02      	add	r7, sp, #8
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	3338      	adds	r3, #56	; 0x38
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	4413      	add	r3, r2
 8003bde:	3304      	adds	r3, #4
 8003be0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1a      	ldr	r2, [r3, #32]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d901      	bls.n	8003bf2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e06c      	b.n	8003ccc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d902      	bls.n	8003c0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3303      	adds	r3, #3
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c16:	e02b      	b.n	8003c70 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d902      	bls.n	8003c34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	3303      	adds	r3, #3
 8003c38:	089b      	lsrs	r3, r3, #2
 8003c3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6919      	ldr	r1, [r3, #16]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	4603      	mov	r3, r0
 8003c52:	6978      	ldr	r0, [r7, #20]
 8003c54:	f002 ff46 	bl	8006ae4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	441a      	add	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	441a      	add	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d809      	bhi.n	8003c9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1a      	ldr	r2, [r3, #32]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d203      	bcs.n	8003c9a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1be      	bne.n	8003c18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d811      	bhi.n	8003cca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	2201      	movs	r2, #1
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	6939      	ldr	r1, [r7, #16]
 8003cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3720      	adds	r7, #32
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	333c      	adds	r3, #60	; 0x3c
 8003cec:	3304      	adds	r3, #4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d17b      	bne.n	8003e02 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d015      	beq.n	8003d40 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4a61      	ldr	r2, [pc, #388]	; (8003e9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	f240 80b9 	bls.w	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80b3 	beq.w	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3c:	6093      	str	r3, [r2, #8]
 8003d3e:	e0a7      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d56:	461a      	mov	r2, r3
 8003d58:	2320      	movs	r3, #32
 8003d5a:	6093      	str	r3, [r2, #8]
 8003d5c:	e098      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f040 8093 	bne.w	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	4a4b      	ldr	r2, [pc, #300]	; (8003e9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d90f      	bls.n	8003d92 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8e:	6093      	str	r3, [r2, #8]
 8003d90:	e07e      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	3304      	adds	r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	0159      	lsls	r1, r3, #5
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	440b      	add	r3, r1
 8003db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbe:	1ad2      	subs	r2, r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d114      	bne.n	8003df4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2101      	movs	r1, #1
 8003de0:	f003 f916 	bl	8007010 <USB_EP0_OutStart>
 8003de4:	e006      	b.n	8003df4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	441a      	add	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f005 fbce 	bl	800959c <HAL_PCD_DataOutStageCallback>
 8003e00:	e046      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d124      	bne.n	8003e54 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	461a      	mov	r2, r3
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	6093      	str	r3, [r2, #8]
 8003e28:	e032      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	461a      	mov	r2, r3
 8003e42:	2320      	movs	r3, #32
 8003e44:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f005 fba5 	bl	800959c <HAL_PCD_DataOutStageCallback>
 8003e52:	e01d      	b.n	8003e90 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d114      	bne.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d108      	bne.n	8003e84 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f003 f8c6 	bl	8007010 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f005 fb86 	bl	800959c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	4f54300a 	.word	0x4f54300a
 8003ea0:	4f54310a 	.word	0x4f54310a

08003ea4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	333c      	adds	r3, #60	; 0x3c
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <PCD_EP_OutSetupPacket_int+0x88>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d90e      	bls.n	8003ef8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f005 fb3d 	bl	8009578 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <PCD_EP_OutSetupPacket_int+0x88>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d90c      	bls.n	8003f20 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d108      	bne.n	8003f20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	f003 f878 	bl	8007010 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	4f54300a 	.word	0x4f54300a

08003f30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f48:	78fb      	ldrb	r3, [r7, #3]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d107      	bne.n	8003f5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f4e:	883b      	ldrh	r3, [r7, #0]
 8003f50:	0419      	lsls	r1, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f5c:	e028      	b.n	8003fb0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	4413      	add	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]
 8003f70:	e00d      	b.n	8003f8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	3340      	adds	r3, #64	; 0x40
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	4413      	add	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3ec      	bcc.n	8003f72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f98:	883b      	ldrh	r3, [r7, #0]
 8003f9a:	0418      	lsls	r0, r3, #16
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	4302      	orrs	r2, r0
 8003fa8:	3340      	adds	r3, #64	; 0x40
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e267      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d075      	beq.n	8004102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004016:	4b88      	ldr	r3, [pc, #544]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b04      	cmp	r3, #4
 8004020:	d00c      	beq.n	800403c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004022:	4b85      	ldr	r3, [pc, #532]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402a:	2b08      	cmp	r3, #8
 800402c:	d112      	bne.n	8004054 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402e:	4b82      	ldr	r3, [pc, #520]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800403a:	d10b      	bne.n	8004054 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	4b7e      	ldr	r3, [pc, #504]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d05b      	beq.n	8004100 <HAL_RCC_OscConfig+0x108>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d157      	bne.n	8004100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e242      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d106      	bne.n	800406c <HAL_RCC_OscConfig+0x74>
 800405e:	4b76      	ldr	r3, [pc, #472]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a75      	ldr	r2, [pc, #468]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e01d      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x98>
 8004076:	4b70      	ldr	r3, [pc, #448]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6f      	ldr	r2, [pc, #444]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a6c      	ldr	r2, [pc, #432]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 8004090:	4b69      	ldr	r3, [pc, #420]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a68      	ldr	r2, [pc, #416]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b66      	ldr	r3, [pc, #408]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a65      	ldr	r2, [pc, #404]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe f9f0 	bl	8002494 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe f9ec 	bl	8002494 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e207      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b5b      	ldr	r3, [pc, #364]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0xc0>
 80040d6:	e014      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fe f9dc 	bl	8002494 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe f9d8 	bl	8002494 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e1f3      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	4b51      	ldr	r3, [pc, #324]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0xe8>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d063      	beq.n	80041d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800410e:	4b4a      	ldr	r3, [pc, #296]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b47      	ldr	r3, [pc, #284]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004122:	2b08      	cmp	r3, #8
 8004124:	d11c      	bne.n	8004160 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004126:	4b44      	ldr	r3, [pc, #272]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	4b41      	ldr	r3, [pc, #260]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_RCC_OscConfig+0x152>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e1c7      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414a:	4b3b      	ldr	r3, [pc, #236]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4937      	ldr	r1, [pc, #220]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415e:	e03a      	b.n	80041d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004168:	4b34      	ldr	r3, [pc, #208]	; (800423c <HAL_RCC_OscConfig+0x244>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fe f991 	bl	8002494 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004176:	f7fe f98d 	bl	8002494 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e1a8      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004188:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004194:	4b28      	ldr	r3, [pc, #160]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4925      	ldr	r1, [pc, #148]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	600b      	str	r3, [r1, #0]
 80041a8:	e015      	b.n	80041d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCC_OscConfig+0x244>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fe f970 	bl	8002494 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041b8:	f7fe f96c 	bl	8002494 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e187      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d036      	beq.n	8004250 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ea:	4b15      	ldr	r3, [pc, #84]	; (8004240 <HAL_RCC_OscConfig+0x248>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe f950 	bl	8002494 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041f8:	f7fe f94c 	bl	8002494 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e167      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_OscConfig+0x240>)
 800420c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x200>
 8004216:	e01b      	b.n	8004250 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <HAL_RCC_OscConfig+0x248>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7fe f939 	bl	8002494 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004224:	e00e      	b.n	8004244 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004226:	f7fe f935 	bl	8002494 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d907      	bls.n	8004244 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e150      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
 8004238:	40023800 	.word	0x40023800
 800423c:	42470000 	.word	0x42470000
 8004240:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004244:	4b88      	ldr	r3, [pc, #544]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1ea      	bne.n	8004226 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8097 	beq.w	800438c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004262:	4b81      	ldr	r3, [pc, #516]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10f      	bne.n	800428e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	4b7d      	ldr	r3, [pc, #500]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	4a7c      	ldr	r2, [pc, #496]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800427c:	6413      	str	r3, [r2, #64]	; 0x40
 800427e:	4b7a      	ldr	r3, [pc, #488]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428e:	4b77      	ldr	r3, [pc, #476]	; (800446c <HAL_RCC_OscConfig+0x474>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d118      	bne.n	80042cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800429a:	4b74      	ldr	r3, [pc, #464]	; (800446c <HAL_RCC_OscConfig+0x474>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a73      	ldr	r2, [pc, #460]	; (800446c <HAL_RCC_OscConfig+0x474>)
 80042a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a6:	f7fe f8f5 	bl	8002494 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ae:	f7fe f8f1 	bl	8002494 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e10c      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c0:	4b6a      	ldr	r3, [pc, #424]	; (800446c <HAL_RCC_OscConfig+0x474>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d106      	bne.n	80042e2 <HAL_RCC_OscConfig+0x2ea>
 80042d4:	4b64      	ldr	r3, [pc, #400]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	4a63      	ldr	r2, [pc, #396]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6713      	str	r3, [r2, #112]	; 0x70
 80042e0:	e01c      	b.n	800431c <HAL_RCC_OscConfig+0x324>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x30c>
 80042ea:	4b5f      	ldr	r3, [pc, #380]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a5e      	ldr	r2, [pc, #376]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70
 80042f6:	4b5c      	ldr	r3, [pc, #368]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4a5b      	ldr	r2, [pc, #364]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6713      	str	r3, [r2, #112]	; 0x70
 8004302:	e00b      	b.n	800431c <HAL_RCC_OscConfig+0x324>
 8004304:	4b58      	ldr	r3, [pc, #352]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a57      	ldr	r2, [pc, #348]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	; 0x70
 8004310:	4b55      	ldr	r3, [pc, #340]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a54      	ldr	r2, [pc, #336]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004316:	f023 0304 	bic.w	r3, r3, #4
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fe f8b6 	bl	8002494 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432a:	e00a      	b.n	8004342 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fe f8b2 	bl	8002494 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e0cb      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004342:	4b49      	ldr	r3, [pc, #292]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0ee      	beq.n	800432c <HAL_RCC_OscConfig+0x334>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004350:	f7fe f8a0 	bl	8002494 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004356:	e00a      	b.n	800436e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7fe f89c 	bl	8002494 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e0b5      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436e:	4b3e      	ldr	r3, [pc, #248]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ee      	bne.n	8004358 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800437a:	7dfb      	ldrb	r3, [r7, #23]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d105      	bne.n	800438c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004380:	4b39      	ldr	r3, [pc, #228]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	4a38      	ldr	r2, [pc, #224]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80a1 	beq.w	80044d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004396:	4b34      	ldr	r3, [pc, #208]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d05c      	beq.n	800445c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d141      	bne.n	800442e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	4b31      	ldr	r3, [pc, #196]	; (8004470 <HAL_RCC_OscConfig+0x478>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b0:	f7fe f870 	bl	8002494 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fe f86c 	bl	8002494 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e087      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	4b27      	ldr	r3, [pc, #156]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	019b      	lsls	r3, r3, #6
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	3b01      	subs	r3, #1
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	061b      	lsls	r3, r3, #24
 80043fa:	491b      	ldr	r1, [pc, #108]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x478>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fe f845 	bl	8002494 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440e:	f7fe f841 	bl	8002494 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e05c      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x416>
 800442c:	e054      	b.n	80044d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <HAL_RCC_OscConfig+0x478>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fe f82e 	bl	8002494 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fe f82a 	bl	8002494 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e045      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_RCC_OscConfig+0x470>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x444>
 800445a:	e03d      	b.n	80044d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e038      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
 8004468:	40023800 	.word	0x40023800
 800446c:	40007000 	.word	0x40007000
 8004470:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004474:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <HAL_RCC_OscConfig+0x4ec>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d028      	beq.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d121      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d11a      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044a4:	4013      	ands	r3, r2
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d111      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	3b01      	subs	r3, #1
 80044be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d107      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800

080044e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0cc      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044fc:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d90c      	bls.n	8004524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b63      	ldr	r3, [pc, #396]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0b8      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d020      	beq.n	8004572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800453c:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004546:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004554:	4b53      	ldr	r3, [pc, #332]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	4a52      	ldr	r2, [pc, #328]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800455e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004560:	4b50      	ldr	r3, [pc, #320]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	494d      	ldr	r1, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d044      	beq.n	8004608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d119      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d003      	beq.n	80045a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a6:	4b3f      	ldr	r3, [pc, #252]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e067      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4934      	ldr	r1, [pc, #208]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045d8:	f7fd ff5c 	bl	8002494 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fd ff58 	bl	8002494 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e04f      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d20c      	bcs.n	8004630 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e032      	b.n	8004696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4916      	ldr	r1, [pc, #88]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d009      	beq.n	800466e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	490e      	ldr	r1, [pc, #56]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800466e:	f000 f821 	bl	80046b4 <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	490a      	ldr	r1, [pc, #40]	; (80046a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	5ccb      	ldrb	r3, [r1, r3]
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a09      	ldr	r2, [pc, #36]	; (80046ac <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800468a:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fd febc 	bl	800240c <HAL_InitTick>

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023c00 	.word	0x40023c00
 80046a4:	40023800 	.word	0x40023800
 80046a8:	0800b728 	.word	0x0800b728
 80046ac:	20000028 	.word	0x20000028
 80046b0:	2000002c 	.word	0x2000002c

080046b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b8:	b090      	sub	sp, #64	; 0x40
 80046ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
 80046c0:	2300      	movs	r3, #0
 80046c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c4:	2300      	movs	r3, #0
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046cc:	4b59      	ldr	r3, [pc, #356]	; (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d00d      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x40>
 80046d8:	2b08      	cmp	r3, #8
 80046da:	f200 80a1 	bhi.w	8004820 <HAL_RCC_GetSysClockFreq+0x16c>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x34>
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d003      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x3a>
 80046e6:	e09b      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b53      	ldr	r3, [pc, #332]	; (8004838 <HAL_RCC_GetSysClockFreq+0x184>)
 80046ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046ec:	e09b      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ee:	4b53      	ldr	r3, [pc, #332]	; (800483c <HAL_RCC_GetSysClockFreq+0x188>)
 80046f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046f2:	e098      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f4:	4b4f      	ldr	r3, [pc, #316]	; (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046fe:	4b4d      	ldr	r3, [pc, #308]	; (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d028      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470a:	4b4a      	ldr	r3, [pc, #296]	; (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	2200      	movs	r2, #0
 8004712:	623b      	str	r3, [r7, #32]
 8004714:	627a      	str	r2, [r7, #36]	; 0x24
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800471c:	2100      	movs	r1, #0
 800471e:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCC_GetSysClockFreq+0x188>)
 8004720:	fb03 f201 	mul.w	r2, r3, r1
 8004724:	2300      	movs	r3, #0
 8004726:	fb00 f303 	mul.w	r3, r0, r3
 800472a:	4413      	add	r3, r2
 800472c:	4a43      	ldr	r2, [pc, #268]	; (800483c <HAL_RCC_GetSysClockFreq+0x188>)
 800472e:	fba0 1202 	umull	r1, r2, r0, r2
 8004732:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004734:	460a      	mov	r2, r1
 8004736:	62ba      	str	r2, [r7, #40]	; 0x28
 8004738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473a:	4413      	add	r3, r2
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004740:	2200      	movs	r2, #0
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	61fa      	str	r2, [r7, #28]
 8004746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800474a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800474e:	f7fc fa31 	bl	8000bb4 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4613      	mov	r3, r2
 8004758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475a:	e053      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475c:	4b35      	ldr	r3, [pc, #212]	; (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	2200      	movs	r2, #0
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	617a      	str	r2, [r7, #20]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800476e:	f04f 0b00 	mov.w	fp, #0
 8004772:	4652      	mov	r2, sl
 8004774:	465b      	mov	r3, fp
 8004776:	f04f 0000 	mov.w	r0, #0
 800477a:	f04f 0100 	mov.w	r1, #0
 800477e:	0159      	lsls	r1, r3, #5
 8004780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004784:	0150      	lsls	r0, r2, #5
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	ebb2 080a 	subs.w	r8, r2, sl
 800478e:	eb63 090b 	sbc.w	r9, r3, fp
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800479e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047a6:	ebb2 0408 	subs.w	r4, r2, r8
 80047aa:	eb63 0509 	sbc.w	r5, r3, r9
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	00eb      	lsls	r3, r5, #3
 80047b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047bc:	00e2      	lsls	r2, r4, #3
 80047be:	4614      	mov	r4, r2
 80047c0:	461d      	mov	r5, r3
 80047c2:	eb14 030a 	adds.w	r3, r4, sl
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	eb45 030b 	adc.w	r3, r5, fp
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047da:	4629      	mov	r1, r5
 80047dc:	028b      	lsls	r3, r1, #10
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e4:	4621      	mov	r1, r4
 80047e6:	028a      	lsls	r2, r1, #10
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ee:	2200      	movs	r2, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	60fa      	str	r2, [r7, #12]
 80047f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f8:	f7fc f9dc 	bl	8000bb4 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <HAL_RCC_GetSysClockFreq+0x180>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	3301      	adds	r3, #1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800481e:	e002      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetSysClockFreq+0x184>)
 8004822:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004828:	4618      	mov	r0, r3
 800482a:	3740      	adds	r7, #64	; 0x40
 800482c:	46bd      	mov	sp, r7
 800482e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800
 8004838:	00f42400 	.word	0x00f42400
 800483c:	017d7840 	.word	0x017d7840

08004840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004844:	4b03      	ldr	r3, [pc, #12]	; (8004854 <HAL_RCC_GetHCLKFreq+0x14>)
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000028 	.word	0x20000028

08004858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e041      	b.n	80048ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd f808 	bl	8001894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f000 fc5e 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e044      	b.n	800499a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d013      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_TIM_Base_Start_IT+0xb4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a17      	ldr	r2, [pc, #92]	; (80049b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x6c>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d111      	bne.n	8004988 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b06      	cmp	r3, #6
 8004974:	d010      	beq.n	8004998 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	e007      	b.n	8004998 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40014000 	.word	0x40014000

080049bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e041      	b.n	8004a52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f839 	bl	8004a5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 fbac 	bl	8005158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d109      	bne.n	8004a94 <HAL_TIM_PWM_Start+0x24>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e022      	b.n	8004ada <HAL_TIM_PWM_Start+0x6a>
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d109      	bne.n	8004aae <HAL_TIM_PWM_Start+0x3e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	bf14      	ite	ne
 8004aa6:	2301      	movne	r3, #1
 8004aa8:	2300      	moveq	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	e015      	b.n	8004ada <HAL_TIM_PWM_Start+0x6a>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d109      	bne.n	8004ac8 <HAL_TIM_PWM_Start+0x58>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	bf14      	ite	ne
 8004ac0:	2301      	movne	r3, #1
 8004ac2:	2300      	moveq	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e008      	b.n	8004ada <HAL_TIM_PWM_Start+0x6a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	bf14      	ite	ne
 8004ad4:	2301      	movne	r3, #1
 8004ad6:	2300      	moveq	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e068      	b.n	8004bb4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d104      	bne.n	8004af2 <HAL_TIM_PWM_Start+0x82>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af0:	e013      	b.n	8004b1a <HAL_TIM_PWM_Start+0xaa>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d104      	bne.n	8004b02 <HAL_TIM_PWM_Start+0x92>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b00:	e00b      	b.n	8004b1a <HAL_TIM_PWM_Start+0xaa>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d104      	bne.n	8004b12 <HAL_TIM_PWM_Start+0xa2>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b10:	e003      	b.n	8004b1a <HAL_TIM_PWM_Start+0xaa>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fdbe 	bl	80056a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <HAL_TIM_PWM_Start+0x14c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d107      	bne.n	8004b42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1d      	ldr	r2, [pc, #116]	; (8004bbc <HAL_TIM_PWM_Start+0x14c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d018      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x10e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b54:	d013      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x10e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <HAL_TIM_PWM_Start+0x150>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x10e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a17      	ldr	r2, [pc, #92]	; (8004bc4 <HAL_TIM_PWM_Start+0x154>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d009      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x10e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a16      	ldr	r2, [pc, #88]	; (8004bc8 <HAL_TIM_PWM_Start+0x158>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x10e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <HAL_TIM_PWM_Start+0x15c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d111      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b06      	cmp	r3, #6
 8004b8e:	d010      	beq.n	8004bb2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	e007      	b.n	8004bb2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	40014000 	.word	0x40014000

08004bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d122      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d11b      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0202 	mvn.w	r2, #2
 8004bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa81 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa73 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fa84 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d122      	bne.n	8004c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d11b      	bne.n	8004c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0204 	mvn.w	r2, #4
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa57 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa49 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa5a 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d122      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d11b      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0208 	mvn.w	r2, #8
 8004ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa2d 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004cc0:	e005      	b.n	8004cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa1f 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fa30 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d122      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b10      	cmp	r3, #16
 8004cee:	d11b      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0210 	mvn.w	r2, #16
 8004cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fa03 	bl	800511a <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f9f5 	bl	8005106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fa06 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0201 	mvn.w	r2, #1
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f9cf 	bl	80050f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b80      	cmp	r3, #128	; 0x80
 8004d60:	d10e      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6c:	2b80      	cmp	r3, #128	; 0x80
 8004d6e:	d107      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fd82 	bl	8005884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d10e      	bne.n	8004dac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	d107      	bne.n	8004dac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f9cb 	bl	8005142 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d10e      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d107      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0220 	mvn.w	r2, #32
 8004dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fd4c 	bl	8005870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e0ae      	b.n	8004f5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b0c      	cmp	r3, #12
 8004e0a:	f200 809f 	bhi.w	8004f4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e0e:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004f4d 	.word	0x08004f4d
 8004e1c:	08004f4d 	.word	0x08004f4d
 8004e20:	08004f4d 	.word	0x08004f4d
 8004e24:	08004e89 	.word	0x08004e89
 8004e28:	08004f4d 	.word	0x08004f4d
 8004e2c:	08004f4d 	.word	0x08004f4d
 8004e30:	08004f4d 	.word	0x08004f4d
 8004e34:	08004ecb 	.word	0x08004ecb
 8004e38:	08004f4d 	.word	0x08004f4d
 8004e3c:	08004f4d 	.word	0x08004f4d
 8004e40:	08004f4d 	.word	0x08004f4d
 8004e44:	08004f0b 	.word	0x08004f0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fa02 	bl	8005258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0208 	orr.w	r2, r2, #8
 8004e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0204 	bic.w	r2, r2, #4
 8004e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6999      	ldr	r1, [r3, #24]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	619a      	str	r2, [r3, #24]
      break;
 8004e86:	e064      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fa48 	bl	8005324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6999      	ldr	r1, [r3, #24]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	021a      	lsls	r2, r3, #8
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	619a      	str	r2, [r3, #24]
      break;
 8004ec8:	e043      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fa93 	bl	80053fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0208 	orr.w	r2, r2, #8
 8004ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0204 	bic.w	r2, r2, #4
 8004ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69d9      	ldr	r1, [r3, #28]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	61da      	str	r2, [r3, #28]
      break;
 8004f08:	e023      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fadd 	bl	80054d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69d9      	ldr	r1, [r3, #28]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	021a      	lsls	r2, r3, #8
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	61da      	str	r2, [r3, #28]
      break;
 8004f4a:	e002      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_TIM_ConfigClockSource+0x1c>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e0b4      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x186>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb8:	d03e      	beq.n	8005038 <HAL_TIM_ConfigClockSource+0xd4>
 8004fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbe:	f200 8087 	bhi.w	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc6:	f000 8086 	beq.w	80050d6 <HAL_TIM_ConfigClockSource+0x172>
 8004fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fce:	d87f      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b70      	cmp	r3, #112	; 0x70
 8004fd2:	d01a      	beq.n	800500a <HAL_TIM_ConfigClockSource+0xa6>
 8004fd4:	2b70      	cmp	r3, #112	; 0x70
 8004fd6:	d87b      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b60      	cmp	r3, #96	; 0x60
 8004fda:	d050      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x11a>
 8004fdc:	2b60      	cmp	r3, #96	; 0x60
 8004fde:	d877      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b50      	cmp	r3, #80	; 0x50
 8004fe2:	d03c      	beq.n	800505e <HAL_TIM_ConfigClockSource+0xfa>
 8004fe4:	2b50      	cmp	r3, #80	; 0x50
 8004fe6:	d873      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d058      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x13a>
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d86f      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b30      	cmp	r3, #48	; 0x30
 8004ff2:	d064      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x15a>
 8004ff4:	2b30      	cmp	r3, #48	; 0x30
 8004ff6:	d86b      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d060      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x15a>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d867      	bhi.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05c      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x15a>
 8005004:	2b10      	cmp	r3, #16
 8005006:	d05a      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x15a>
 8005008:	e062      	b.n	80050d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6899      	ldr	r1, [r3, #8]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f000 fb23 	bl	8005664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800502c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	609a      	str	r2, [r3, #8]
      break;
 8005036:	e04f      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	6899      	ldr	r1, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f000 fb0c 	bl	8005664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800505a:	609a      	str	r2, [r3, #8]
      break;
 800505c:	e03c      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	461a      	mov	r2, r3
 800506c:	f000 fa80 	bl	8005570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2150      	movs	r1, #80	; 0x50
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fad9 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 800507c:	e02c      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	461a      	mov	r2, r3
 800508c:	f000 fa9f 	bl	80055ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2160      	movs	r1, #96	; 0x60
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fac9 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 800509c:	e01c      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fa60 	bl	8005570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2140      	movs	r1, #64	; 0x40
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fab9 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 80050bc:	e00c      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f000 fab0 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 80050ce:	e003      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e000      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a34      	ldr	r2, [pc, #208]	; (800523c <TIM_Base_SetConfig+0xe4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00f      	beq.n	8005190 <TIM_Base_SetConfig+0x38>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005176:	d00b      	beq.n	8005190 <TIM_Base_SetConfig+0x38>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a31      	ldr	r2, [pc, #196]	; (8005240 <TIM_Base_SetConfig+0xe8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d007      	beq.n	8005190 <TIM_Base_SetConfig+0x38>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a30      	ldr	r2, [pc, #192]	; (8005244 <TIM_Base_SetConfig+0xec>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d003      	beq.n	8005190 <TIM_Base_SetConfig+0x38>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a2f      	ldr	r2, [pc, #188]	; (8005248 <TIM_Base_SetConfig+0xf0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d108      	bne.n	80051a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a25      	ldr	r2, [pc, #148]	; (800523c <TIM_Base_SetConfig+0xe4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01b      	beq.n	80051e2 <TIM_Base_SetConfig+0x8a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b0:	d017      	beq.n	80051e2 <TIM_Base_SetConfig+0x8a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a22      	ldr	r2, [pc, #136]	; (8005240 <TIM_Base_SetConfig+0xe8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <TIM_Base_SetConfig+0x8a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a21      	ldr	r2, [pc, #132]	; (8005244 <TIM_Base_SetConfig+0xec>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00f      	beq.n	80051e2 <TIM_Base_SetConfig+0x8a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a20      	ldr	r2, [pc, #128]	; (8005248 <TIM_Base_SetConfig+0xf0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00b      	beq.n	80051e2 <TIM_Base_SetConfig+0x8a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <TIM_Base_SetConfig+0xf4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d007      	beq.n	80051e2 <TIM_Base_SetConfig+0x8a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1e      	ldr	r2, [pc, #120]	; (8005250 <TIM_Base_SetConfig+0xf8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d003      	beq.n	80051e2 <TIM_Base_SetConfig+0x8a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <TIM_Base_SetConfig+0xfc>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d108      	bne.n	80051f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a08      	ldr	r2, [pc, #32]	; (800523c <TIM_Base_SetConfig+0xe4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d103      	bne.n	8005228 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	615a      	str	r2, [r3, #20]
}
 800522e:	bf00      	nop
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40010000 	.word	0x40010000
 8005240:	40000400 	.word	0x40000400
 8005244:	40000800 	.word	0x40000800
 8005248:	40000c00 	.word	0x40000c00
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800

08005258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0302 	bic.w	r3, r3, #2
 80052a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <TIM_OC1_SetConfig+0xc8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10c      	bne.n	80052ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0308 	bic.w	r3, r3, #8
 80052ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f023 0304 	bic.w	r3, r3, #4
 80052cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a13      	ldr	r2, [pc, #76]	; (8005320 <TIM_OC1_SetConfig+0xc8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d111      	bne.n	80052fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40010000 	.word	0x40010000

08005324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f023 0210 	bic.w	r2, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f023 0320 	bic.w	r3, r3, #32
 800536e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a1e      	ldr	r2, [pc, #120]	; (80053f8 <TIM_OC2_SetConfig+0xd4>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d10d      	bne.n	80053a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800538a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4313      	orrs	r3, r2
 8005396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800539e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <TIM_OC2_SetConfig+0xd4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d113      	bne.n	80053d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000

080053fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0303 	bic.w	r3, r3, #3
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1d      	ldr	r2, [pc, #116]	; (80054cc <TIM_OC3_SetConfig+0xd0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d10d      	bne.n	8005476 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	021b      	lsls	r3, r3, #8
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a14      	ldr	r2, [pc, #80]	; (80054cc <TIM_OC3_SetConfig+0xd0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d113      	bne.n	80054a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800548c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	621a      	str	r2, [r3, #32]
}
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	40010000 	.word	0x40010000

080054d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800551a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	031b      	lsls	r3, r3, #12
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a10      	ldr	r2, [pc, #64]	; (800556c <TIM_OC4_SetConfig+0x9c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d109      	bne.n	8005544 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	019b      	lsls	r3, r3, #6
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40010000 	.word	0x40010000

08005570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 030a 	bic.w	r3, r3, #10
 80055ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b087      	sub	sp, #28
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0210 	bic.w	r2, r3, #16
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800560a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	f043 0307 	orr.w	r3, r3, #7
 8005650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	609a      	str	r2, [r3, #8]
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	021a      	lsls	r2, r3, #8
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	431a      	orrs	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4313      	orrs	r3, r2
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	609a      	str	r2, [r3, #8]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2201      	movs	r2, #1
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1a      	ldr	r2, [r3, #32]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	401a      	ands	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	fa01 f303 	lsl.w	r3, r1, r3
 80056dc:	431a      	orrs	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005704:	2302      	movs	r3, #2
 8005706:	e050      	b.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1c      	ldr	r2, [pc, #112]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d018      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d013      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a18      	ldr	r2, [pc, #96]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a16      	ldr	r2, [pc, #88]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d009      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a15      	ldr	r2, [pc, #84]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d10c      	bne.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	4313      	orrs	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800
 80057c4:	40000c00 	.word	0x40000c00
 80057c8:	40014000 	.word	0x40014000

080057cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e03d      	b.n	8005864 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005898:	b084      	sub	sp, #16
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	f107 001c 	add.w	r0, r7, #28
 80058a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d122      	bne.n	80058f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d105      	bne.n	80058ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fbee 	bl	80070cc <USB_CoreReset>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
 80058f4:	e01a      	b.n	800592c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 fbe2 	bl	80070cc <USB_CoreReset>
 8005908:	4603      	mov	r3, r0
 800590a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800590c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
 800591e:	e005      	b.n	800592c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	2b01      	cmp	r3, #1
 8005930:	d10b      	bne.n	800594a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f043 0206 	orr.w	r2, r3, #6
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f043 0220 	orr.w	r2, r3, #32
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005956:	b004      	add	sp, #16
 8005958:	4770      	bx	lr
	...

0800595c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d165      	bne.n	8005a3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4a41      	ldr	r2, [pc, #260]	; (8005a78 <USB_SetTurnaroundTime+0x11c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d906      	bls.n	8005986 <USB_SetTurnaroundTime+0x2a>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a40      	ldr	r2, [pc, #256]	; (8005a7c <USB_SetTurnaroundTime+0x120>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d202      	bcs.n	8005986 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005980:	230f      	movs	r3, #15
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e062      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4a3c      	ldr	r2, [pc, #240]	; (8005a7c <USB_SetTurnaroundTime+0x120>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d306      	bcc.n	800599c <USB_SetTurnaroundTime+0x40>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4a3b      	ldr	r2, [pc, #236]	; (8005a80 <USB_SetTurnaroundTime+0x124>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d202      	bcs.n	800599c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005996:	230e      	movs	r3, #14
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e057      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4a38      	ldr	r2, [pc, #224]	; (8005a80 <USB_SetTurnaroundTime+0x124>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d306      	bcc.n	80059b2 <USB_SetTurnaroundTime+0x56>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4a37      	ldr	r2, [pc, #220]	; (8005a84 <USB_SetTurnaroundTime+0x128>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d202      	bcs.n	80059b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80059ac:	230d      	movs	r3, #13
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	e04c      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <USB_SetTurnaroundTime+0x128>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d306      	bcc.n	80059c8 <USB_SetTurnaroundTime+0x6c>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4a32      	ldr	r2, [pc, #200]	; (8005a88 <USB_SetTurnaroundTime+0x12c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d802      	bhi.n	80059c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80059c2:	230c      	movs	r3, #12
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e041      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4a2f      	ldr	r2, [pc, #188]	; (8005a88 <USB_SetTurnaroundTime+0x12c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d906      	bls.n	80059de <USB_SetTurnaroundTime+0x82>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4a2e      	ldr	r2, [pc, #184]	; (8005a8c <USB_SetTurnaroundTime+0x130>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d802      	bhi.n	80059de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80059d8:	230b      	movs	r3, #11
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e036      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4a2a      	ldr	r2, [pc, #168]	; (8005a8c <USB_SetTurnaroundTime+0x130>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d906      	bls.n	80059f4 <USB_SetTurnaroundTime+0x98>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4a29      	ldr	r2, [pc, #164]	; (8005a90 <USB_SetTurnaroundTime+0x134>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d802      	bhi.n	80059f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80059ee:	230a      	movs	r3, #10
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e02b      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4a26      	ldr	r2, [pc, #152]	; (8005a90 <USB_SetTurnaroundTime+0x134>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d906      	bls.n	8005a0a <USB_SetTurnaroundTime+0xae>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a25      	ldr	r2, [pc, #148]	; (8005a94 <USB_SetTurnaroundTime+0x138>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d202      	bcs.n	8005a0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a04:	2309      	movs	r3, #9
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e020      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <USB_SetTurnaroundTime+0x138>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d306      	bcc.n	8005a20 <USB_SetTurnaroundTime+0xc4>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4a20      	ldr	r2, [pc, #128]	; (8005a98 <USB_SetTurnaroundTime+0x13c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d802      	bhi.n	8005a20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e015      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4a1d      	ldr	r2, [pc, #116]	; (8005a98 <USB_SetTurnaroundTime+0x13c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d906      	bls.n	8005a36 <USB_SetTurnaroundTime+0xda>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <USB_SetTurnaroundTime+0x140>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d202      	bcs.n	8005a36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a30:	2307      	movs	r3, #7
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e00a      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a36:	2306      	movs	r3, #6
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	e007      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a42:	2309      	movs	r3, #9
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	e001      	b.n	8005a4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a48:	2309      	movs	r3, #9
 8005a4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	029b      	lsls	r3, r3, #10
 8005a60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	00d8acbf 	.word	0x00d8acbf
 8005a7c:	00e4e1c0 	.word	0x00e4e1c0
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	01067380 	.word	0x01067380
 8005a88:	011a499f 	.word	0x011a499f
 8005a8c:	01312cff 	.word	0x01312cff
 8005a90:	014ca43f 	.word	0x014ca43f
 8005a94:	016e3600 	.word	0x016e3600
 8005a98:	01a6ab1f 	.word	0x01a6ab1f
 8005a9c:	01e84800 	.word	0x01e84800

08005aa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f043 0201 	orr.w	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f023 0201 	bic.w	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d115      	bne.n	8005b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7fc fcca 	bl	80024ac <HAL_Delay>
      ms++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 fa45 	bl	8006fae <USB_GetMode>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d01e      	beq.n	8005b68 <USB_SetCurrentMode+0x84>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b31      	cmp	r3, #49	; 0x31
 8005b2e:	d9f0      	bls.n	8005b12 <USB_SetCurrentMode+0x2e>
 8005b30:	e01a      	b.n	8005b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d115      	bne.n	8005b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b44:	2001      	movs	r0, #1
 8005b46:	f7fc fcb1 	bl	80024ac <HAL_Delay>
      ms++;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f001 fa2c 	bl	8006fae <USB_GetMode>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <USB_SetCurrentMode+0x84>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b31      	cmp	r3, #49	; 0x31
 8005b60:	d9f0      	bls.n	8005b44 <USB_SetCurrentMode+0x60>
 8005b62:	e001      	b.n	8005b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e005      	b.n	8005b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b32      	cmp	r3, #50	; 0x32
 8005b6c:	d101      	bne.n	8005b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b7c:	b084      	sub	sp, #16
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b086      	sub	sp, #24
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	e009      	b.n	8005bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	3340      	adds	r3, #64	; 0x40
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	3301      	adds	r3, #1
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b0e      	cmp	r3, #14
 8005bb4:	d9f2      	bls.n	8005b9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d11c      	bne.n	8005bf6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bca:	f043 0302 	orr.w	r3, r3, #2
 8005bce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8005bf4:	e00b      	b.n	8005c0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c14:	461a      	mov	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c20:	4619      	mov	r1, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c28:	461a      	mov	r2, r3
 8005c2a:	680b      	ldr	r3, [r1, #0]
 8005c2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d10c      	bne.n	8005c4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d104      	bne.n	8005c44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f965 	bl	8005f0c <USB_SetDevSpeed>
 8005c42:	e008      	b.n	8005c56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c44:	2101      	movs	r1, #1
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f960 	bl	8005f0c <USB_SetDevSpeed>
 8005c4c:	e003      	b.n	8005c56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c4e:	2103      	movs	r1, #3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f95b 	bl	8005f0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c56:	2110      	movs	r1, #16
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f8f3 	bl	8005e44 <USB_FlushTxFifo>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f91f 	bl	8005eac <USB_FlushRxFifo>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	461a      	mov	r2, r3
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	e043      	b.n	8005d2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cb8:	d118      	bne.n	8005cec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e013      	b.n	8005cfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e008      	b.n	8005cfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3301      	adds	r3, #1
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d3b7      	bcc.n	8005ca2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	e043      	b.n	8005dc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4e:	d118      	bne.n	8005d82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	461a      	mov	r2, r3
 8005d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e013      	b.n	8005d94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e008      	b.n	8005d94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2300      	movs	r3, #0
 8005d92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	461a      	mov	r2, r3
 8005da2:	2300      	movs	r3, #0
 8005da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	461a      	mov	r2, r3
 8005db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005db8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d3b7      	bcc.n	8005d38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005de8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	f043 0210 	orr.w	r2, r3, #16
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <USB_DevInit+0x2c4>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f043 0208 	orr.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d107      	bne.n	8005e30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e28:	f043 0304 	orr.w	r3, r3, #4
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e3c:	b004      	add	sp, #16
 8005e3e:	4770      	bx	lr
 8005e40:	803c3800 	.word	0x803c3800

08005e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <USB_FlushTxFifo+0x64>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d901      	bls.n	8005e64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e01b      	b.n	8005e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	daf2      	bge.n	8005e52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	019b      	lsls	r3, r3, #6
 8005e74:	f043 0220 	orr.w	r2, r3, #32
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4a08      	ldr	r2, [pc, #32]	; (8005ea8 <USB_FlushTxFifo+0x64>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e006      	b.n	8005e9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	d0f0      	beq.n	8005e7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	00030d40 	.word	0x00030d40

08005eac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a11      	ldr	r2, [pc, #68]	; (8005f08 <USB_FlushRxFifo+0x5c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d901      	bls.n	8005eca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e018      	b.n	8005efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	daf2      	bge.n	8005eb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2210      	movs	r2, #16
 8005eda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <USB_FlushRxFifo+0x5c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e006      	b.n	8005efc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	d0f0      	beq.n	8005edc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	00030d40 	.word	0x00030d40

08005f0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b087      	sub	sp, #28
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0306 	and.w	r3, r3, #6
 8005f56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	75fb      	strb	r3, [r7, #23]
 8005f62:	e00a      	b.n	8005f7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d002      	beq.n	8005f70 <USB_GetDevSpeed+0x32>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2b06      	cmp	r3, #6
 8005f6e:	d102      	bne.n	8005f76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f70:	2302      	movs	r3, #2
 8005f72:	75fb      	strb	r3, [r7, #23]
 8005f74:	e001      	b.n	8005f7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f76:	230f      	movs	r3, #15
 8005f78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	371c      	adds	r7, #28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d13a      	bne.n	800601a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	68f9      	ldr	r1, [r7, #12]
 8005fbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d155      	bne.n	8006088 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	791b      	ldrb	r3, [r3, #4]
 8005ff6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ff8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	059b      	lsls	r3, r3, #22
 8005ffe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006000:	4313      	orrs	r3, r2
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	e036      	b.n	8006088 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	69da      	ldr	r2, [r3, #28]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	2101      	movs	r1, #1
 800602c:	fa01 f303 	lsl.w	r3, r1, r3
 8006030:	041b      	lsls	r3, r3, #16
 8006032:	68f9      	ldr	r1, [r7, #12]
 8006034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006038:	4313      	orrs	r3, r2
 800603a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d11a      	bne.n	8006088 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	791b      	ldrb	r3, [r3, #4]
 800606c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800606e:	430b      	orrs	r3, r1
 8006070:	4313      	orrs	r3, r2
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006086:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
	...

08006098 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	785b      	ldrb	r3, [r3, #1]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d161      	bne.n	8006178 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ca:	d11f      	bne.n	800610c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	0151      	lsls	r1, r2, #5
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	440a      	add	r2, r1
 80060e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	0151      	lsls	r1, r2, #5
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	440a      	add	r2, r1
 8006102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800610a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	2101      	movs	r1, #1
 800611e:	fa01 f303 	lsl.w	r3, r1, r3
 8006122:	b29b      	uxth	r3, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800612c:	4013      	ands	r3, r2
 800612e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	f003 030f 	and.w	r3, r3, #15
 8006140:	2101      	movs	r1, #1
 8006142:	fa01 f303 	lsl.w	r3, r1, r3
 8006146:	b29b      	uxth	r3, r3
 8006148:	43db      	mvns	r3, r3
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006150:	4013      	ands	r3, r2
 8006152:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	0159      	lsls	r1, r3, #5
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	440b      	add	r3, r1
 800616a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616e:	4619      	mov	r1, r3
 8006170:	4b35      	ldr	r3, [pc, #212]	; (8006248 <USB_DeactivateEndpoint+0x1b0>)
 8006172:	4013      	ands	r3, r2
 8006174:	600b      	str	r3, [r1, #0]
 8006176:	e060      	b.n	800623a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800618a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800618e:	d11f      	bne.n	80061d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	2101      	movs	r1, #1
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	041b      	lsls	r3, r3, #16
 80061e8:	43db      	mvns	r3, r3
 80061ea:	68f9      	ldr	r1, [r7, #12]
 80061ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f0:	4013      	ands	r3, r2
 80061f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fa:	69da      	ldr	r2, [r3, #28]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	2101      	movs	r1, #1
 8006206:	fa01 f303 	lsl.w	r3, r1, r3
 800620a:	041b      	lsls	r3, r3, #16
 800620c:	43db      	mvns	r3, r3
 800620e:	68f9      	ldr	r1, [r7, #12]
 8006210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006214:	4013      	ands	r3, r2
 8006216:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	0159      	lsls	r1, r3, #5
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	440b      	add	r3, r1
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	4619      	mov	r1, r3
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <USB_DeactivateEndpoint+0x1b4>)
 8006236:	4013      	ands	r3, r2
 8006238:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	ec337800 	.word	0xec337800
 800624c:	eff37800 	.word	0xeff37800

08006250 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	; 0x28
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	4613      	mov	r3, r2
 800625c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	2b01      	cmp	r3, #1
 800626e:	f040 815c 	bne.w	800652a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d132      	bne.n	80062e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800629c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	69fa      	ldr	r2, [r7, #28]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d8:	0cdb      	lsrs	r3, r3, #19
 80062da:	04db      	lsls	r3, r3, #19
 80062dc:	6113      	str	r3, [r2, #16]
 80062de:	e074      	b.n	80063ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fa:	0cdb      	lsrs	r3, r3, #19
 80062fc:	04db      	lsls	r3, r3, #19
 80062fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800631e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6999      	ldr	r1, [r3, #24]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	440b      	add	r3, r1
 800633c:	1e59      	subs	r1, r3, #1
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	fbb1 f3f3 	udiv	r3, r1, r3
 8006346:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006348:	4b9d      	ldr	r3, [pc, #628]	; (80065c0 <USB_EPStartXfer+0x370>)
 800634a:	400b      	ands	r3, r1
 800634c:	69b9      	ldr	r1, [r7, #24]
 800634e:	0148      	lsls	r0, r1, #5
 8006350:	69f9      	ldr	r1, [r7, #28]
 8006352:	4401      	add	r1, r0
 8006354:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006358:	4313      	orrs	r3, r2
 800635a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006372:	69b9      	ldr	r1, [r7, #24]
 8006374:	0148      	lsls	r0, r1, #5
 8006376:	69f9      	ldr	r1, [r7, #28]
 8006378:	4401      	add	r1, r0
 800637a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800637e:	4313      	orrs	r3, r2
 8006380:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	791b      	ldrb	r3, [r3, #4]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d11f      	bne.n	80063ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80063a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d14b      	bne.n	8006468 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	461a      	mov	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	791b      	ldrb	r3, [r3, #4]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d128      	bne.n	8006446 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006400:	2b00      	cmp	r3, #0
 8006402:	d110      	bne.n	8006426 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	69fa      	ldr	r2, [r7, #28]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	e00f      	b.n	8006446 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	4413      	add	r3, r2
 800642e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	0151      	lsls	r1, r2, #5
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	440a      	add	r2, r1
 800643c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006444:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006460:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	e133      	b.n	80066d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006482:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006486:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	791b      	ldrb	r3, [r3, #4]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d015      	beq.n	80064bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 811b 	beq.w	80066d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	2101      	movs	r1, #1
 80064ac:	fa01 f303 	lsl.w	r3, r1, r3
 80064b0:	69f9      	ldr	r1, [r7, #28]
 80064b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064b6:	4313      	orrs	r3, r2
 80064b8:	634b      	str	r3, [r1, #52]	; 0x34
 80064ba:	e109      	b.n	80066d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d110      	bne.n	80064ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69ba      	ldr	r2, [r7, #24]
 80064dc:	0151      	lsls	r1, r2, #5
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	440a      	add	r2, r1
 80064e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	e00f      	b.n	800650e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	440a      	add	r2, r1
 8006504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6919      	ldr	r1, [r3, #16]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	b298      	uxth	r0, r3
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	4603      	mov	r3, r0
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fade 	bl	8006ae4 <USB_WritePacket>
 8006528:	e0d2      	b.n	80066d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	0151      	lsls	r1, r2, #5
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	440a      	add	r2, r1
 8006540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006544:	0cdb      	lsrs	r3, r3, #19
 8006546:	04db      	lsls	r3, r3, #19
 8006548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	0151      	lsls	r1, r2, #5
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	440a      	add	r2, r1
 8006560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800656c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d126      	bne.n	80065c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658c:	69b9      	ldr	r1, [r7, #24]
 800658e:	0148      	lsls	r0, r1, #5
 8006590:	69f9      	ldr	r1, [r7, #28]
 8006592:	4401      	add	r1, r0
 8006594:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006598:	4313      	orrs	r3, r2
 800659a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ba:	6113      	str	r3, [r2, #16]
 80065bc:	e03a      	b.n	8006634 <USB_EPStartXfer+0x3e4>
 80065be:	bf00      	nop
 80065c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	699a      	ldr	r2, [r3, #24]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	1e5a      	subs	r2, r3, #1
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	8afa      	ldrh	r2, [r7, #22]
 80065e0:	fb03 f202 	mul.w	r2, r3, r2
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	8afb      	ldrh	r3, [r7, #22]
 80065f8:	04d9      	lsls	r1, r3, #19
 80065fa:	4b38      	ldr	r3, [pc, #224]	; (80066dc <USB_EPStartXfer+0x48c>)
 80065fc:	400b      	ands	r3, r1
 80065fe:	69b9      	ldr	r1, [r7, #24]
 8006600:	0148      	lsls	r0, r1, #5
 8006602:	69f9      	ldr	r1, [r7, #28]
 8006604:	4401      	add	r1, r0
 8006606:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800660a:	4313      	orrs	r3, r2
 800660c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006624:	69b9      	ldr	r1, [r7, #24]
 8006626:	0148      	lsls	r0, r1, #5
 8006628:	69f9      	ldr	r1, [r7, #28]
 800662a:	4401      	add	r1, r0
 800662c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006630:	4313      	orrs	r3, r2
 8006632:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d10d      	bne.n	8006656 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6919      	ldr	r1, [r3, #16]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006652:	460a      	mov	r2, r1
 8006654:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	791b      	ldrb	r3, [r3, #4]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d128      	bne.n	80066b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d110      	bne.n	8006690 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	440a      	add	r2, r1
 8006684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	e00f      	b.n	80066b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	1ff80000 	.word	0x1ff80000

080066e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	4613      	mov	r3, r2
 80066ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	f040 80ce 	bne.w	800689e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d132      	bne.n	8006770 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	440a      	add	r2, r1
 8006720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006724:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006728:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800672c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006748:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800674c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006768:	0cdb      	lsrs	r3, r3, #19
 800676a:	04db      	lsls	r3, r3, #19
 800676c:	6113      	str	r3, [r2, #16]
 800676e:	e04e      	b.n	800680e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678a:	0cdb      	lsrs	r3, r3, #19
 800678c:	04db      	lsls	r3, r3, #19
 800678e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	699a      	ldr	r2, [r3, #24]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d903      	bls.n	80067c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f4:	691a      	ldr	r2, [r3, #16]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067fe:	6939      	ldr	r1, [r7, #16]
 8006800:	0148      	lsls	r0, r1, #5
 8006802:	6979      	ldr	r1, [r7, #20]
 8006804:	4401      	add	r1, r0
 8006806:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800680a:	4313      	orrs	r3, r2
 800680c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d11e      	bne.n	8006852 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	461a      	mov	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	e097      	b.n	8006982 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006870:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8083 	beq.w	8006982 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	2101      	movs	r1, #1
 800688e:	fa01 f303 	lsl.w	r3, r1, r3
 8006892:	6979      	ldr	r1, [r7, #20]
 8006894:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006898:	4313      	orrs	r3, r2
 800689a:	634b      	str	r3, [r1, #52]	; 0x34
 800689c:	e071      	b.n	8006982 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068b8:	0cdb      	lsrs	r3, r3, #19
 80068ba:	04db      	lsls	r3, r3, #19
 80068bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	440a      	add	r2, r1
 8006910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006914:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006918:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006930:	6939      	ldr	r1, [r7, #16]
 8006932:	0148      	lsls	r0, r1, #5
 8006934:	6979      	ldr	r1, [r7, #20]
 8006936:	4401      	add	r1, r0
 8006938:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800693c:	4313      	orrs	r3, r2
 800693e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d10d      	bne.n	8006962 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6919      	ldr	r1, [r3, #16]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695e:	460a      	mov	r2, r1
 8006960:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	440a      	add	r2, r1
 8006978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006980:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d14a      	bne.n	8006a44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c6:	f040 8086 	bne.w	8006ad6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	7812      	ldrb	r2, [r2, #0]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d902      	bls.n	8006a28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
          break;
 8006a26:	e056      	b.n	8006ad6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a40:	d0e7      	beq.n	8006a12 <USB_EPStopXfer+0x82>
 8006a42:	e048      	b.n	8006ad6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5c:	d13b      	bne.n	8006ad6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d902      	bls.n	8006abc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8006aba:	e00c      	b.n	8006ad6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ad4:	d0e7      	beq.n	8006aa6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b089      	sub	sp, #36	; 0x24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4611      	mov	r1, r2
 8006af0:	461a      	mov	r2, r3
 8006af2:	460b      	mov	r3, r1
 8006af4:	71fb      	strb	r3, [r7, #7]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d123      	bne.n	8006b52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b0a:	88bb      	ldrh	r3, [r7, #4]
 8006b0c:	3303      	adds	r3, #3
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	e018      	b.n	8006b4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	031a      	lsls	r2, r3, #12
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b24:	461a      	mov	r2, r3
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3301      	adds	r3, #1
 8006b36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	3301      	adds	r3, #1
 8006b42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61bb      	str	r3, [r7, #24]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d3e2      	bcc.n	8006b18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3724      	adds	r7, #36	; 0x24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b08b      	sub	sp, #44	; 0x2c
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	089b      	lsrs	r3, r3, #2
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b86:	2300      	movs	r3, #0
 8006b88:	623b      	str	r3, [r7, #32]
 8006b8a:	e014      	b.n	8006bb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	3301      	adds	r3, #1
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	623b      	str	r3, [r7, #32]
 8006bb6:	6a3a      	ldr	r2, [r7, #32]
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d3e6      	bcc.n	8006b8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bbe:	8bfb      	ldrh	r3, [r7, #30]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01e      	beq.n	8006c02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f107 0310 	add.w	r3, r7, #16
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	701a      	strb	r2, [r3, #0]
      i++;
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	3301      	adds	r3, #1
 8006bee:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006bf6:	8bfb      	ldrh	r3, [r7, #30]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006bfc:	8bfb      	ldrh	r3, [r7, #30]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1ea      	bne.n	8006bd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	372c      	adds	r7, #44	; 0x2c
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d12c      	bne.n	8006c86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	db12      	blt.n	8006c64 <USB_EPSetStall+0x54>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00f      	beq.n	8006c64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	0151      	lsls	r1, r2, #5
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	440a      	add	r2, r1
 8006c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	e02b      	b.n	8006cde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	db12      	blt.n	8006cbe <USB_EPSetStall+0xae>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00f      	beq.n	8006cbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d128      	bne.n	8006d5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	0151      	lsls	r1, r2, #5
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	440a      	add	r2, r1
 8006d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	791b      	ldrb	r3, [r3, #4]
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d003      	beq.n	8006d38 <USB_EPClearStall+0x4c>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	791b      	ldrb	r3, [r3, #4]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d138      	bne.n	8006daa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	e027      	b.n	8006daa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	791b      	ldrb	r3, [r3, #4]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d003      	beq.n	8006d8a <USB_EPClearStall+0x9e>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	791b      	ldrb	r3, [r3, #4]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d10f      	bne.n	8006daa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006dda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	011b      	lsls	r3, r3, #4
 8006de8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006dec:	68f9      	ldr	r1, [r7, #12]
 8006dee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df2:	4313      	orrs	r3, r2
 8006df4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e1e:	f023 0303 	bic.w	r3, r3, #3
 8006e22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e32:	f023 0302 	bic.w	r3, r3, #2
 8006e36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e74:	f043 0302 	orr.w	r3, r3, #2
 8006e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	0c1b      	lsrs	r3, r3, #16
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	4013      	ands	r3, r2
 8006f04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	b29b      	uxth	r3, r3
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f26:	78fb      	ldrb	r3, [r7, #3]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	4013      	ands	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f44:	68bb      	ldr	r3, [r7, #8]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b087      	sub	sp, #28
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f82:	01db      	lsls	r3, r3, #7
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	f003 0301 	and.w	r3, r3, #1
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006fe8:	f023 0307 	bic.w	r3, r3, #7
 8006fec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007000:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	460b      	mov	r3, r1
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	333c      	adds	r3, #60	; 0x3c
 8007026:	3304      	adds	r3, #4
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	4a26      	ldr	r2, [pc, #152]	; (80070c8 <USB_EP0_OutStart+0xb8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d90a      	bls.n	800704a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007044:	d101      	bne.n	800704a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	e037      	b.n	80070ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007050:	461a      	mov	r2, r3
 8007052:	2300      	movs	r3, #0
 8007054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007064:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007078:	f043 0318 	orr.w	r3, r3, #24
 800707c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800708c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007090:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d10f      	bne.n	80070b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	461a      	mov	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80070b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	4f54300a 	.word	0x4f54300a

080070cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3301      	adds	r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4a13      	ldr	r2, [pc, #76]	; (8007130 <USB_CoreReset+0x64>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e01b      	b.n	8007122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	daf2      	bge.n	80070d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f043 0201 	orr.w	r2, r3, #1
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4a09      	ldr	r2, [pc, #36]	; (8007130 <USB_CoreReset+0x64>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d901      	bls.n	8007114 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e006      	b.n	8007122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	d0f0      	beq.n	8007102 <USB_CoreReset+0x36>

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	00030d40 	.word	0x00030d40

08007134 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007140:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007144:	f002 fc8a 	bl	8009a5c <USBD_static_malloc>
 8007148:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d109      	bne.n	8007164 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	32b0      	adds	r2, #176	; 0xb0
 800715a:	2100      	movs	r1, #0
 800715c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007160:	2302      	movs	r3, #2
 8007162:	e0d4      	b.n	800730e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007164:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007168:	2100      	movs	r1, #0
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f002 fce4 	bl	8009b38 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	32b0      	adds	r2, #176	; 0xb0
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	32b0      	adds	r2, #176	; 0xb0
 800718a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	7c1b      	ldrb	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d138      	bne.n	800720e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800719c:	4b5e      	ldr	r3, [pc, #376]	; (8007318 <USBD_CDC_Init+0x1e4>)
 800719e:	7819      	ldrb	r1, [r3, #0]
 80071a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071a4:	2202      	movs	r2, #2
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 fb35 	bl	8009816 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071ac:	4b5a      	ldr	r3, [pc, #360]	; (8007318 <USBD_CDC_Init+0x1e4>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 020f 	and.w	r2, r3, #15
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	3324      	adds	r3, #36	; 0x24
 80071c2:	2201      	movs	r2, #1
 80071c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071c6:	4b55      	ldr	r3, [pc, #340]	; (800731c <USBD_CDC_Init+0x1e8>)
 80071c8:	7819      	ldrb	r1, [r3, #0]
 80071ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ce:	2202      	movs	r2, #2
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f002 fb20 	bl	8009816 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071d6:	4b51      	ldr	r3, [pc, #324]	; (800731c <USBD_CDC_Init+0x1e8>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f003 020f 	and.w	r2, r3, #15
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071ee:	2201      	movs	r2, #1
 80071f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071f2:	4b4b      	ldr	r3, [pc, #300]	; (8007320 <USBD_CDC_Init+0x1ec>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	3326      	adds	r3, #38	; 0x26
 8007208:	2210      	movs	r2, #16
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	e035      	b.n	800727a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800720e:	4b42      	ldr	r3, [pc, #264]	; (8007318 <USBD_CDC_Init+0x1e4>)
 8007210:	7819      	ldrb	r1, [r3, #0]
 8007212:	2340      	movs	r3, #64	; 0x40
 8007214:	2202      	movs	r2, #2
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f002 fafd 	bl	8009816 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800721c:	4b3e      	ldr	r3, [pc, #248]	; (8007318 <USBD_CDC_Init+0x1e4>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f003 020f 	and.w	r2, r3, #15
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	3324      	adds	r3, #36	; 0x24
 8007232:	2201      	movs	r2, #1
 8007234:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007236:	4b39      	ldr	r3, [pc, #228]	; (800731c <USBD_CDC_Init+0x1e8>)
 8007238:	7819      	ldrb	r1, [r3, #0]
 800723a:	2340      	movs	r3, #64	; 0x40
 800723c:	2202      	movs	r2, #2
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f002 fae9 	bl	8009816 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007244:	4b35      	ldr	r3, [pc, #212]	; (800731c <USBD_CDC_Init+0x1e8>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	f003 020f 	and.w	r2, r3, #15
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800725c:	2201      	movs	r2, #1
 800725e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007260:	4b2f      	ldr	r3, [pc, #188]	; (8007320 <USBD_CDC_Init+0x1ec>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 020f 	and.w	r2, r3, #15
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	3326      	adds	r3, #38	; 0x26
 8007276:	2210      	movs	r2, #16
 8007278:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800727a:	4b29      	ldr	r3, [pc, #164]	; (8007320 <USBD_CDC_Init+0x1ec>)
 800727c:	7819      	ldrb	r1, [r3, #0]
 800727e:	2308      	movs	r3, #8
 8007280:	2203      	movs	r2, #3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f002 fac7 	bl	8009816 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007288:	4b25      	ldr	r3, [pc, #148]	; (8007320 <USBD_CDC_Init+0x1ec>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	3324      	adds	r3, #36	; 0x24
 800729e:	2201      	movs	r2, #1
 80072a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	33b0      	adds	r3, #176	; 0xb0
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80072d8:	2302      	movs	r3, #2
 80072da:	e018      	b.n	800730e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	7c1b      	ldrb	r3, [r3, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10a      	bne.n	80072fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072e4:	4b0d      	ldr	r3, [pc, #52]	; (800731c <USBD_CDC_Init+0x1e8>)
 80072e6:	7819      	ldrb	r1, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f002 fb7e 	bl	80099f4 <USBD_LL_PrepareReceive>
 80072f8:	e008      	b.n	800730c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072fa:	4b08      	ldr	r3, [pc, #32]	; (800731c <USBD_CDC_Init+0x1e8>)
 80072fc:	7819      	ldrb	r1, [r3, #0]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f002 fb74 	bl	80099f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	200000bb 	.word	0x200000bb
 800731c:	200000bc 	.word	0x200000bc
 8007320:	200000bd 	.word	0x200000bd

08007324 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007330:	4b3a      	ldr	r3, [pc, #232]	; (800741c <USBD_CDC_DeInit+0xf8>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f002 fa93 	bl	8009862 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800733c:	4b37      	ldr	r3, [pc, #220]	; (800741c <USBD_CDC_DeInit+0xf8>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	3324      	adds	r3, #36	; 0x24
 8007352:	2200      	movs	r2, #0
 8007354:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007356:	4b32      	ldr	r3, [pc, #200]	; (8007420 <USBD_CDC_DeInit+0xfc>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f002 fa80 	bl	8009862 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <USBD_CDC_DeInit+0xfc>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	f003 020f 	and.w	r2, r3, #15
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800737a:	2200      	movs	r2, #0
 800737c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800737e:	4b29      	ldr	r3, [pc, #164]	; (8007424 <USBD_CDC_DeInit+0x100>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f002 fa6c 	bl	8009862 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800738a:	4b26      	ldr	r3, [pc, #152]	; (8007424 <USBD_CDC_DeInit+0x100>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	f003 020f 	and.w	r2, r3, #15
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	3324      	adds	r3, #36	; 0x24
 80073a0:	2200      	movs	r2, #0
 80073a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80073a4:	4b1f      	ldr	r3, [pc, #124]	; (8007424 <USBD_CDC_DeInit+0x100>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	f003 020f 	and.w	r2, r3, #15
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	3326      	adds	r3, #38	; 0x26
 80073ba:	2200      	movs	r2, #0
 80073bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	32b0      	adds	r2, #176	; 0xb0
 80073c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01f      	beq.n	8007410 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	33b0      	adds	r3, #176	; 0xb0
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	32b0      	adds	r2, #176	; 0xb0
 80073ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f002 fb40 	bl	8009a78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	32b0      	adds	r2, #176	; 0xb0
 8007402:	2100      	movs	r1, #0
 8007404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	200000bb 	.word	0x200000bb
 8007420:	200000bc 	.word	0x200000bc
 8007424:	200000bd 	.word	0x200000bd

08007428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	32b0      	adds	r2, #176	; 0xb0
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007454:	2303      	movs	r3, #3
 8007456:	e0bf      	b.n	80075d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007460:	2b00      	cmp	r3, #0
 8007462:	d050      	beq.n	8007506 <USBD_CDC_Setup+0xde>
 8007464:	2b20      	cmp	r3, #32
 8007466:	f040 80af 	bne.w	80075c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	88db      	ldrh	r3, [r3, #6]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d03a      	beq.n	80074e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b25b      	sxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	da1b      	bge.n	80074b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	33b0      	adds	r3, #176	; 0xb0
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007492:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	88d2      	ldrh	r2, [r2, #6]
 8007498:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	88db      	ldrh	r3, [r3, #6]
 800749e:	2b07      	cmp	r3, #7
 80074a0:	bf28      	it	cs
 80074a2:	2307      	movcs	r3, #7
 80074a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	89fa      	ldrh	r2, [r7, #14]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 fd89 	bl	8008fc4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80074b2:	e090      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	785a      	ldrb	r2, [r3, #1]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	2b3f      	cmp	r3, #63	; 0x3f
 80074c4:	d803      	bhi.n	80074ce <USBD_CDC_Setup+0xa6>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	88db      	ldrh	r3, [r3, #6]
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	e000      	b.n	80074d0 <USBD_CDC_Setup+0xa8>
 80074ce:	2240      	movs	r2, #64	; 0x40
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80074d6:	6939      	ldr	r1, [r7, #16]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80074de:	461a      	mov	r2, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fd9b 	bl	800901c <USBD_CtlPrepareRx>
      break;
 80074e6:	e076      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	33b0      	adds	r3, #176	; 0xb0
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	7850      	ldrb	r0, [r2, #1]
 80074fe:	2200      	movs	r2, #0
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	4798      	blx	r3
      break;
 8007504:	e067      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	2b0b      	cmp	r3, #11
 800750c:	d851      	bhi.n	80075b2 <USBD_CDC_Setup+0x18a>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <USBD_CDC_Setup+0xec>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	08007545 	.word	0x08007545
 8007518:	080075c1 	.word	0x080075c1
 800751c:	080075b3 	.word	0x080075b3
 8007520:	080075b3 	.word	0x080075b3
 8007524:	080075b3 	.word	0x080075b3
 8007528:	080075b3 	.word	0x080075b3
 800752c:	080075b3 	.word	0x080075b3
 8007530:	080075b3 	.word	0x080075b3
 8007534:	080075b3 	.word	0x080075b3
 8007538:	080075b3 	.word	0x080075b3
 800753c:	0800756f 	.word	0x0800756f
 8007540:	08007599 	.word	0x08007599
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b03      	cmp	r3, #3
 800754e:	d107      	bne.n	8007560 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007550:	f107 030a 	add.w	r3, r7, #10
 8007554:	2202      	movs	r2, #2
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fd33 	bl	8008fc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800755e:	e032      	b.n	80075c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 fcbd 	bl	8008ee2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007568:	2303      	movs	r3, #3
 800756a:	75fb      	strb	r3, [r7, #23]
          break;
 800756c:	e02b      	b.n	80075c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b03      	cmp	r3, #3
 8007578:	d107      	bne.n	800758a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800757a:	f107 030d 	add.w	r3, r7, #13
 800757e:	2201      	movs	r2, #1
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 fd1e 	bl	8008fc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007588:	e01d      	b.n	80075c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 fca8 	bl	8008ee2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	75fb      	strb	r3, [r7, #23]
          break;
 8007596:	e016      	b.n	80075c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d00f      	beq.n	80075c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fc9b 	bl	8008ee2 <USBD_CtlError>
            ret = USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075b0:	e008      	b.n	80075c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 fc94 	bl	8008ee2 <USBD_CtlError>
          ret = USBD_FAIL;
 80075ba:	2303      	movs	r3, #3
 80075bc:	75fb      	strb	r3, [r7, #23]
          break;
 80075be:	e002      	b.n	80075c6 <USBD_CDC_Setup+0x19e>
          break;
 80075c0:	bf00      	nop
 80075c2:	e008      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>
          break;
 80075c4:	bf00      	nop
      }
      break;
 80075c6:	e006      	b.n	80075d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f001 fc89 	bl	8008ee2 <USBD_CtlError>
      ret = USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	75fb      	strb	r3, [r7, #23]
      break;
 80075d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32b0      	adds	r2, #176	; 0xb0
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007606:	2303      	movs	r3, #3
 8007608:	e065      	b.n	80076d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	32b0      	adds	r2, #176	; 0xb0
 8007614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007618:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	f003 020f 	and.w	r2, r3, #15
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	3318      	adds	r3, #24
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d02f      	beq.n	8007694 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	f003 020f 	and.w	r2, r3, #15
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	3318      	adds	r3, #24
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	f003 010f 	and.w	r1, r3, #15
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	460b      	mov	r3, r1
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	440b      	add	r3, r1
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4403      	add	r3, r0
 800765c:	3348      	adds	r3, #72	; 0x48
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	fbb2 f1f3 	udiv	r1, r2, r3
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800766a:	2b00      	cmp	r3, #0
 800766c:	d112      	bne.n	8007694 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	f003 020f 	and.w	r2, r3, #15
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	3318      	adds	r3, #24
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007686:	78f9      	ldrb	r1, [r7, #3]
 8007688:	2300      	movs	r3, #0
 800768a:	2200      	movs	r2, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f002 f990 	bl	80099b2 <USBD_LL_Transmit>
 8007692:	e01f      	b.n	80076d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	33b0      	adds	r3, #176	; 0xb0
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d010      	beq.n	80076d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	33b0      	adds	r3, #176	; 0xb0
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80076d0:	78fa      	ldrb	r2, [r7, #3]
 80076d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	32b0      	adds	r2, #176	; 0xb0
 80076f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	32b0      	adds	r2, #176	; 0xb0
 8007704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800770c:	2303      	movs	r3, #3
 800770e:	e01a      	b.n	8007746 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f002 f98e 	bl	8009a36 <USBD_LL_GetRxDataSize>
 800771a:	4602      	mov	r2, r0
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	33b0      	adds	r3, #176	; 0xb0
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007740:	4611      	mov	r1, r2
 8007742:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	32b0      	adds	r2, #176	; 0xb0
 8007760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007764:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800776c:	2303      	movs	r3, #3
 800776e:	e025      	b.n	80077bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	33b0      	adds	r3, #176	; 0xb0
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01a      	beq.n	80077ba <USBD_CDC_EP0_RxReady+0x6c>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800778a:	2bff      	cmp	r3, #255	; 0xff
 800778c:	d015      	beq.n	80077ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	33b0      	adds	r3, #176	; 0xb0
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80077a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077ae:	b292      	uxth	r2, r2
 80077b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	22ff      	movs	r2, #255	; 0xff
 80077b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077cc:	2182      	movs	r1, #130	; 0x82
 80077ce:	4818      	ldr	r0, [pc, #96]	; (8007830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077d0:	f000 fd4f 	bl	8008272 <USBD_GetEpDesc>
 80077d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077d6:	2101      	movs	r1, #1
 80077d8:	4815      	ldr	r0, [pc, #84]	; (8007830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077da:	f000 fd4a 	bl	8008272 <USBD_GetEpDesc>
 80077de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077e0:	2181      	movs	r1, #129	; 0x81
 80077e2:	4813      	ldr	r0, [pc, #76]	; (8007830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077e4:	f000 fd45 	bl	8008272 <USBD_GetEpDesc>
 80077e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2210      	movs	r2, #16
 80077f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2200      	movs	r2, #0
 8007800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007804:	711a      	strb	r2, [r3, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007818:	711a      	strb	r2, [r3, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2243      	movs	r2, #67	; 0x43
 8007822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007824:	4b02      	ldr	r3, [pc, #8]	; (8007830 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000078 	.word	0x20000078

08007834 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800783c:	2182      	movs	r1, #130	; 0x82
 800783e:	4818      	ldr	r0, [pc, #96]	; (80078a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007840:	f000 fd17 	bl	8008272 <USBD_GetEpDesc>
 8007844:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007846:	2101      	movs	r1, #1
 8007848:	4815      	ldr	r0, [pc, #84]	; (80078a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800784a:	f000 fd12 	bl	8008272 <USBD_GetEpDesc>
 800784e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007850:	2181      	movs	r1, #129	; 0x81
 8007852:	4813      	ldr	r0, [pc, #76]	; (80078a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007854:	f000 fd0d 	bl	8008272 <USBD_GetEpDesc>
 8007858:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2210      	movs	r2, #16
 8007864:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2200      	movs	r2, #0
 8007870:	711a      	strb	r2, [r3, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f042 0202 	orr.w	r2, r2, #2
 8007878:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	711a      	strb	r2, [r3, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f042 0202 	orr.w	r2, r2, #2
 800788c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2243      	movs	r2, #67	; 0x43
 8007892:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20000078 	.word	0x20000078

080078a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078ac:	2182      	movs	r1, #130	; 0x82
 80078ae:	4818      	ldr	r0, [pc, #96]	; (8007910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078b0:	f000 fcdf 	bl	8008272 <USBD_GetEpDesc>
 80078b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078b6:	2101      	movs	r1, #1
 80078b8:	4815      	ldr	r0, [pc, #84]	; (8007910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078ba:	f000 fcda 	bl	8008272 <USBD_GetEpDesc>
 80078be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078c0:	2181      	movs	r1, #129	; 0x81
 80078c2:	4813      	ldr	r0, [pc, #76]	; (8007910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078c4:	f000 fcd5 	bl	8008272 <USBD_GetEpDesc>
 80078c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	2210      	movs	r2, #16
 80078d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d006      	beq.n	80078ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2200      	movs	r2, #0
 80078e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e4:	711a      	strb	r2, [r3, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d006      	beq.n	80078fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f8:	711a      	strb	r2, [r3, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2243      	movs	r2, #67	; 0x43
 8007902:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007904:	4b02      	ldr	r3, [pc, #8]	; (8007910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20000078 	.word	0x20000078

08007914 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	220a      	movs	r2, #10
 8007920:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007922:	4b03      	ldr	r3, [pc, #12]	; (8007930 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20000034 	.word	0x20000034

08007934 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007944:	2303      	movs	r3, #3
 8007946:	e009      	b.n	800795c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	33b0      	adds	r3, #176	; 0xb0
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	32b0      	adds	r2, #176	; 0xb0
 800797e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007982:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800798a:	2303      	movs	r3, #3
 800798c:	e008      	b.n	80079a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	371c      	adds	r7, #28
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	32b0      	adds	r2, #176	; 0xb0
 80079c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e004      	b.n	80079da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	32b0      	adds	r2, #176	; 0xb0
 80079fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a00:	2301      	movs	r3, #1
 8007a02:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	32b0      	adds	r2, #176	; 0xb0
 8007a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e025      	b.n	8007a66 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d11f      	bne.n	8007a64 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <USBD_CDC_TransmitPacket+0x88>)
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4403      	add	r3, r0
 8007a46:	3318      	adds	r3, #24
 8007a48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007a4a:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <USBD_CDC_TransmitPacket+0x88>)
 8007a4c:	7819      	ldrb	r1, [r3, #0]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 ffa9 	bl	80099b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	200000bb 	.word	0x200000bb

08007a74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	32b0      	adds	r2, #176	; 0xb0
 8007a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	32b0      	adds	r2, #176	; 0xb0
 8007a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e018      	b.n	8007ad4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7c1b      	ldrb	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007aaa:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <USBD_CDC_ReceivePacket+0x68>)
 8007aac:	7819      	ldrb	r1, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 ff9b 	bl	80099f4 <USBD_LL_PrepareReceive>
 8007abe:	e008      	b.n	8007ad2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <USBD_CDC_ReceivePacket+0x68>)
 8007ac2:	7819      	ldrb	r1, [r3, #0]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007aca:	2340      	movs	r3, #64	; 0x40
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f001 ff91 	bl	80099f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	200000bc 	.word	0x200000bc

08007ae0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e01f      	b.n	8007b38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	79fa      	ldrb	r2, [r7, #7]
 8007b2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f001 fe0b 	bl	8009748 <USBD_LL_Init>
 8007b32:	4603      	mov	r3, r0
 8007b34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e025      	b.n	8007ba4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32ae      	adds	r2, #174	; 0xae
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	32ae      	adds	r2, #174	; 0xae
 8007b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b84:	f107 020e 	add.w	r2, r7, #14
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 fe13 	bl	80097e0 <USBD_LL_Start>
 8007bba:	4603      	mov	r3, r0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bcc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	4798      	blx	r3
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	4798      	blx	r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d001      	beq.n	8007c3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c56:	6839      	ldr	r1, [r7, #0]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 f908 	bl	8008e6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d01a      	beq.n	8007cb8 <USBD_LL_SetupStage+0x72>
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d822      	bhi.n	8007ccc <USBD_LL_SetupStage+0x86>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <USBD_LL_SetupStage+0x4a>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d00a      	beq.n	8007ca4 <USBD_LL_SetupStage+0x5e>
 8007c8e:	e01d      	b.n	8007ccc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fb5f 	bl	800835c <USBD_StdDevReq>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca2:	e020      	b.n	8007ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fbc7 	bl	8008440 <USBD_StdItfReq>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb6:	e016      	b.n	8007ce6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fc29 	bl	8008518 <USBD_StdEPReq>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cca:	e00c      	b.n	8007ce6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	4619      	mov	r1, r3
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 fde0 	bl	80098a0 <USBD_LL_StallEP>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	bf00      	nop
  }

  return ret;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d16e      	bne.n	8007de6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	f040 8098 	bne.w	8007e4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d913      	bls.n	8007d50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	68da      	ldr	r2, [r3, #12]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bf28      	it	cs
 8007d42:	4613      	movcs	r3, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f001 f984 	bl	8009056 <USBD_CtlContinueRx>
 8007d4e:	e07d      	b.n	8007e4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d014      	beq.n	8007d88 <USBD_LL_DataOutStage+0x98>
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d81d      	bhi.n	8007d9e <USBD_LL_DataOutStage+0xae>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <USBD_LL_DataOutStage+0x7c>
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d003      	beq.n	8007d72 <USBD_LL_DataOutStage+0x82>
 8007d6a:	e018      	b.n	8007d9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	75bb      	strb	r3, [r7, #22]
            break;
 8007d70:	e018      	b.n	8007da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fa5e 	bl	800823e <USBD_CoreFindIF>
 8007d82:	4603      	mov	r3, r0
 8007d84:	75bb      	strb	r3, [r7, #22]
            break;
 8007d86:	e00d      	b.n	8007da4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fa60 	bl	8008258 <USBD_CoreFindEP>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d9c:	e002      	b.n	8007da4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75bb      	strb	r3, [r7, #22]
            break;
 8007da2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007da4:	7dbb      	ldrb	r3, [r7, #22]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d119      	bne.n	8007dde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d113      	bne.n	8007dde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007db6:	7dba      	ldrb	r2, [r7, #22]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	32ae      	adds	r2, #174	; 0xae
 8007dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007dc6:	7dba      	ldrb	r2, [r7, #22]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dce:	7dba      	ldrb	r2, [r7, #22]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	32ae      	adds	r2, #174	; 0xae
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f001 f94a 	bl	8009078 <USBD_CtlSendStatus>
 8007de4:	e032      	b.n	8007e4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	4619      	mov	r1, r3
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fa31 	bl	8008258 <USBD_CoreFindEP>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007dfa:	7dbb      	ldrb	r3, [r7, #22]
 8007dfc:	2bff      	cmp	r3, #255	; 0xff
 8007dfe:	d025      	beq.n	8007e4c <USBD_LL_DataOutStage+0x15c>
 8007e00:	7dbb      	ldrb	r3, [r7, #22]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d122      	bne.n	8007e4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d117      	bne.n	8007e42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e12:	7dba      	ldrb	r2, [r7, #22]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	32ae      	adds	r2, #174	; 0xae
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00f      	beq.n	8007e42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e22:	7dba      	ldrb	r2, [r7, #22]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e2a:	7dba      	ldrb	r2, [r7, #22]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	32ae      	adds	r2, #174	; 0xae
 8007e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	7afa      	ldrb	r2, [r7, #11]
 8007e38:	4611      	mov	r1, r2
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	4798      	blx	r3
 8007e3e:	4603      	mov	r3, r0
 8007e40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	e000      	b.n	8007e4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b086      	sub	sp, #24
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	607a      	str	r2, [r7, #4]
 8007e62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e64:	7afb      	ldrb	r3, [r7, #11]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d16f      	bne.n	8007f4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3314      	adds	r3, #20
 8007e6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d15a      	bne.n	8007f30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d914      	bls.n	8007eb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	1ad2      	subs	r2, r2, r3
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f001 f8ac 	bl	8008ffa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f001 fda3 	bl	80099f4 <USBD_LL_PrepareReceive>
 8007eae:	e03f      	b.n	8007f30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d11c      	bne.n	8007ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d316      	bcc.n	8007ef6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d20f      	bcs.n	8007ef6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2100      	movs	r1, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f001 f88d 	bl	8008ffa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee8:	2300      	movs	r3, #0
 8007eea:	2200      	movs	r2, #0
 8007eec:	2100      	movs	r1, #0
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f001 fd80 	bl	80099f4 <USBD_LL_PrepareReceive>
 8007ef4:	e01c      	b.n	8007f30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d10f      	bne.n	8007f22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f22:	2180      	movs	r1, #128	; 0x80
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f001 fcbb 	bl	80098a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f001 f8b7 	bl	800909e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d03a      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fe42 	bl	8007bc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f48:	e032      	b.n	8007fb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	4619      	mov	r1, r3
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f97f 	bl	8008258 <USBD_CoreFindEP>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	2bff      	cmp	r3, #255	; 0xff
 8007f62:	d025      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d122      	bne.n	8007fb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b03      	cmp	r3, #3
 8007f74:	d11c      	bne.n	8007fb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f76:	7dfa      	ldrb	r2, [r7, #23]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	32ae      	adds	r2, #174	; 0xae
 8007f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d014      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f86:	7dfa      	ldrb	r2, [r7, #23]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f8e:	7dfa      	ldrb	r2, [r7, #23]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	32ae      	adds	r2, #174	; 0xae
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	7afa      	ldrb	r2, [r7, #11]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fa6:	7dbb      	ldrb	r3, [r7, #22]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fac:	7dbb      	ldrb	r3, [r7, #22]
 8007fae:	e000      	b.n	8007fb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d014      	beq.n	8008020 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6852      	ldr	r2, [r2, #4]
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	4611      	mov	r1, r2
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008020:	2340      	movs	r3, #64	; 0x40
 8008022:	2200      	movs	r2, #0
 8008024:	2100      	movs	r1, #0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fbf5 	bl	8009816 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2240      	movs	r2, #64	; 0x40
 8008038:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	2200      	movs	r2, #0
 8008040:	2180      	movs	r1, #128	; 0x80
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fbe7 	bl	8009816 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2240      	movs	r2, #64	; 0x40
 8008052:	621a      	str	r2, [r3, #32]

  return ret;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	460b      	mov	r3, r1
 8008068:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	78fa      	ldrb	r2, [r7, #3]
 800806e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808c:	b2da      	uxtb	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2204      	movs	r2, #4
 8008098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d106      	bne.n	80080cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d110      	bne.n	8008110 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810a:	69db      	ldr	r3, [r3, #28]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	460b      	mov	r3, r1
 8008124:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	32ae      	adds	r2, #174	; 0xae
 8008130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008138:	2303      	movs	r3, #3
 800813a:	e01c      	b.n	8008176 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b03      	cmp	r3, #3
 8008146:	d115      	bne.n	8008174 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	32ae      	adds	r2, #174	; 0xae
 8008152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	32ae      	adds	r2, #174	; 0xae
 8008166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	78fa      	ldrb	r2, [r7, #3]
 800816e:	4611      	mov	r1, r2
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3708      	adds	r7, #8
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	460b      	mov	r3, r1
 8008188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	32ae      	adds	r2, #174	; 0xae
 8008194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800819c:	2303      	movs	r3, #3
 800819e:	e01c      	b.n	80081da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d115      	bne.n	80081d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	32ae      	adds	r2, #174	; 0xae
 80081b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	32ae      	adds	r2, #174	; 0xae
 80081ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	78fa      	ldrb	r2, [r7, #3]
 80081d2:	4611      	mov	r1, r2
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00e      	beq.n	8008234 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6852      	ldr	r2, [r2, #4]
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	4611      	mov	r1, r2
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	460b      	mov	r3, r1
 8008248:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800824a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008264:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b086      	sub	sp, #24
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	b29a      	uxth	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	b29b      	uxth	r3, r3
 8008296:	429a      	cmp	r2, r3
 8008298:	d920      	bls.n	80082dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082a2:	e013      	b.n	80082cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082a4:	f107 030a 	add.w	r3, r7, #10
 80082a8:	4619      	mov	r1, r3
 80082aa:	6978      	ldr	r0, [r7, #20]
 80082ac:	f000 f81b 	bl	80082e6 <USBD_GetNextDesc>
 80082b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	2b05      	cmp	r3, #5
 80082b8:	d108      	bne.n	80082cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	789b      	ldrb	r3, [r3, #2]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d008      	beq.n	80082da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	885b      	ldrh	r3, [r3, #2]
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	897b      	ldrh	r3, [r7, #10]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d8e5      	bhi.n	80082a4 <USBD_GetEpDesc+0x32>
 80082d8:	e000      	b.n	80082dc <USBD_GetEpDesc+0x6a>
          break;
 80082da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082dc:	693b      	ldr	r3, [r7, #16]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082e6:	b480      	push	{r7}
 80082e8:	b085      	sub	sp, #20
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	881a      	ldrh	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	4413      	add	r3, r2
 8008300:	b29a      	uxth	r2, r3
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4413      	add	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008312:	68fb      	ldr	r3, [r7, #12]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	3301      	adds	r3, #1
 8008336:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800833e:	8a3b      	ldrh	r3, [r7, #16]
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	b21a      	sxth	r2, r3
 8008344:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008348:	4313      	orrs	r3, r2
 800834a:	b21b      	sxth	r3, r3
 800834c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800834e:	89fb      	ldrh	r3, [r7, #14]
}
 8008350:	4618      	mov	r0, r3
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008372:	2b40      	cmp	r3, #64	; 0x40
 8008374:	d005      	beq.n	8008382 <USBD_StdDevReq+0x26>
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	d857      	bhi.n	800842a <USBD_StdDevReq+0xce>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00f      	beq.n	800839e <USBD_StdDevReq+0x42>
 800837e:	2b20      	cmp	r3, #32
 8008380:	d153      	bne.n	800842a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	32ae      	adds	r2, #174	; 0xae
 800838c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
      break;
 800839c:	e04a      	b.n	8008434 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b09      	cmp	r3, #9
 80083a4:	d83b      	bhi.n	800841e <USBD_StdDevReq+0xc2>
 80083a6:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <USBD_StdDevReq+0x50>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	08008401 	.word	0x08008401
 80083b0:	08008415 	.word	0x08008415
 80083b4:	0800841f 	.word	0x0800841f
 80083b8:	0800840b 	.word	0x0800840b
 80083bc:	0800841f 	.word	0x0800841f
 80083c0:	080083df 	.word	0x080083df
 80083c4:	080083d5 	.word	0x080083d5
 80083c8:	0800841f 	.word	0x0800841f
 80083cc:	080083f7 	.word	0x080083f7
 80083d0:	080083e9 	.word	0x080083e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa3c 	bl	8008854 <USBD_GetDescriptor>
          break;
 80083dc:	e024      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fba1 	bl	8008b28 <USBD_SetAddress>
          break;
 80083e6:	e01f      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fbe0 	bl	8008bb0 <USBD_SetConfig>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]
          break;
 80083f4:	e018      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fc83 	bl	8008d04 <USBD_GetConfig>
          break;
 80083fe:	e013      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fcb4 	bl	8008d70 <USBD_GetStatus>
          break;
 8008408:	e00e      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fce3 	bl	8008dd8 <USBD_SetFeature>
          break;
 8008412:	e009      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fd07 	bl	8008e2a <USBD_ClrFeature>
          break;
 800841c:	e004      	b.n	8008428 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fd5e 	bl	8008ee2 <USBD_CtlError>
          break;
 8008426:	bf00      	nop
      }
      break;
 8008428:	e004      	b.n	8008434 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fd58 	bl	8008ee2 <USBD_CtlError>
      break;
 8008432:	bf00      	nop
  }

  return ret;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop

08008440 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d005      	beq.n	8008466 <USBD_StdItfReq+0x26>
 800845a:	2b40      	cmp	r3, #64	; 0x40
 800845c:	d852      	bhi.n	8008504 <USBD_StdItfReq+0xc4>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <USBD_StdItfReq+0x26>
 8008462:	2b20      	cmp	r3, #32
 8008464:	d14e      	bne.n	8008504 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846c:	b2db      	uxtb	r3, r3
 800846e:	3b01      	subs	r3, #1
 8008470:	2b02      	cmp	r3, #2
 8008472:	d840      	bhi.n	80084f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	889b      	ldrh	r3, [r3, #4]
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b01      	cmp	r3, #1
 800847c:	d836      	bhi.n	80084ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	889b      	ldrh	r3, [r3, #4]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff fed9 	bl	800823e <USBD_CoreFindIF>
 800848c:	4603      	mov	r3, r0
 800848e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2bff      	cmp	r3, #255	; 0xff
 8008494:	d01d      	beq.n	80084d2 <USBD_StdItfReq+0x92>
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d11a      	bne.n	80084d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800849c:	7bba      	ldrb	r2, [r7, #14]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	32ae      	adds	r2, #174	; 0xae
 80084a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00f      	beq.n	80084cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084ac:	7bba      	ldrb	r2, [r7, #14]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084b4:	7bba      	ldrb	r2, [r7, #14]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	32ae      	adds	r2, #174	; 0xae
 80084ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084ca:	e004      	b.n	80084d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d0:	e001      	b.n	80084d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	88db      	ldrh	r3, [r3, #6]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d110      	bne.n	8008500 <USBD_StdItfReq+0xc0>
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10d      	bne.n	8008500 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fdc7 	bl	8009078 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084ea:	e009      	b.n	8008500 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fcf7 	bl	8008ee2 <USBD_CtlError>
          break;
 80084f4:	e004      	b.n	8008500 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fcf2 	bl	8008ee2 <USBD_CtlError>
          break;
 80084fe:	e000      	b.n	8008502 <USBD_StdItfReq+0xc2>
          break;
 8008500:	bf00      	nop
      }
      break;
 8008502:	e004      	b.n	800850e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fceb 	bl	8008ee2 <USBD_CtlError>
      break;
 800850c:	bf00      	nop
  }

  return ret;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	889b      	ldrh	r3, [r3, #4]
 800852a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008534:	2b40      	cmp	r3, #64	; 0x40
 8008536:	d007      	beq.n	8008548 <USBD_StdEPReq+0x30>
 8008538:	2b40      	cmp	r3, #64	; 0x40
 800853a:	f200 817f 	bhi.w	800883c <USBD_StdEPReq+0x324>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d02a      	beq.n	8008598 <USBD_StdEPReq+0x80>
 8008542:	2b20      	cmp	r3, #32
 8008544:	f040 817a 	bne.w	800883c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff fe83 	bl	8008258 <USBD_CoreFindEP>
 8008552:	4603      	mov	r3, r0
 8008554:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008556:	7b7b      	ldrb	r3, [r7, #13]
 8008558:	2bff      	cmp	r3, #255	; 0xff
 800855a:	f000 8174 	beq.w	8008846 <USBD_StdEPReq+0x32e>
 800855e:	7b7b      	ldrb	r3, [r7, #13]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f040 8170 	bne.w	8008846 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008566:	7b7a      	ldrb	r2, [r7, #13]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800856e:	7b7a      	ldrb	r2, [r7, #13]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	32ae      	adds	r2, #174	; 0xae
 8008574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 8163 	beq.w	8008846 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008580:	7b7a      	ldrb	r2, [r7, #13]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	32ae      	adds	r2, #174	; 0xae
 8008586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008596:	e156      	b.n	8008846 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	2b03      	cmp	r3, #3
 800859e:	d008      	beq.n	80085b2 <USBD_StdEPReq+0x9a>
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	f300 8145 	bgt.w	8008830 <USBD_StdEPReq+0x318>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 809b 	beq.w	80086e2 <USBD_StdEPReq+0x1ca>
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d03c      	beq.n	800862a <USBD_StdEPReq+0x112>
 80085b0:	e13e      	b.n	8008830 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d002      	beq.n	80085c4 <USBD_StdEPReq+0xac>
 80085be:	2b03      	cmp	r3, #3
 80085c0:	d016      	beq.n	80085f0 <USBD_StdEPReq+0xd8>
 80085c2:	e02c      	b.n	800861e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <USBD_StdEPReq+0xce>
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b80      	cmp	r3, #128	; 0x80
 80085ce:	d00a      	beq.n	80085e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f001 f963 	bl	80098a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085da:	2180      	movs	r1, #128	; 0x80
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 f95f 	bl	80098a0 <USBD_LL_StallEP>
 80085e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085e4:	e020      	b.n	8008628 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fc7a 	bl	8008ee2 <USBD_CtlError>
              break;
 80085ee:	e01b      	b.n	8008628 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	885b      	ldrh	r3, [r3, #2]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10e      	bne.n	8008616 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00b      	beq.n	8008616 <USBD_StdEPReq+0xfe>
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b80      	cmp	r3, #128	; 0x80
 8008602:	d008      	beq.n	8008616 <USBD_StdEPReq+0xfe>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	88db      	ldrh	r3, [r3, #6]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d104      	bne.n	8008616 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 f945 	bl	80098a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fd2e 	bl	8009078 <USBD_CtlSendStatus>

              break;
 800861c:	e004      	b.n	8008628 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc5e 	bl	8008ee2 <USBD_CtlError>
              break;
 8008626:	bf00      	nop
          }
          break;
 8008628:	e107      	b.n	800883a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b02      	cmp	r3, #2
 8008634:	d002      	beq.n	800863c <USBD_StdEPReq+0x124>
 8008636:	2b03      	cmp	r3, #3
 8008638:	d016      	beq.n	8008668 <USBD_StdEPReq+0x150>
 800863a:	e04b      	b.n	80086d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00d      	beq.n	800865e <USBD_StdEPReq+0x146>
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b80      	cmp	r3, #128	; 0x80
 8008646:	d00a      	beq.n	800865e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 f927 	bl	80098a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008652:	2180      	movs	r1, #128	; 0x80
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f923 	bl	80098a0 <USBD_LL_StallEP>
 800865a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800865c:	e040      	b.n	80086e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fc3e 	bl	8008ee2 <USBD_CtlError>
              break;
 8008666:	e03b      	b.n	80086e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	885b      	ldrh	r3, [r3, #2]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d136      	bne.n	80086de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 f92d 	bl	80098de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fcf7 	bl	8009078 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff fde2 	bl	8008258 <USBD_CoreFindEP>
 8008694:	4603      	mov	r3, r0
 8008696:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008698:	7b7b      	ldrb	r3, [r7, #13]
 800869a:	2bff      	cmp	r3, #255	; 0xff
 800869c:	d01f      	beq.n	80086de <USBD_StdEPReq+0x1c6>
 800869e:	7b7b      	ldrb	r3, [r7, #13]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d11c      	bne.n	80086de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086a4:	7b7a      	ldrb	r2, [r7, #13]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086ac:	7b7a      	ldrb	r2, [r7, #13]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	32ae      	adds	r2, #174	; 0xae
 80086b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d010      	beq.n	80086de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086bc:	7b7a      	ldrb	r2, [r7, #13]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	32ae      	adds	r2, #174	; 0xae
 80086c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086d2:	e004      	b.n	80086de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fc03 	bl	8008ee2 <USBD_CtlError>
              break;
 80086dc:	e000      	b.n	80086e0 <USBD_StdEPReq+0x1c8>
              break;
 80086de:	bf00      	nop
          }
          break;
 80086e0:	e0ab      	b.n	800883a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d002      	beq.n	80086f4 <USBD_StdEPReq+0x1dc>
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d032      	beq.n	8008758 <USBD_StdEPReq+0x240>
 80086f2:	e097      	b.n	8008824 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <USBD_StdEPReq+0x1f2>
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	2b80      	cmp	r3, #128	; 0x80
 80086fe:	d004      	beq.n	800870a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fbed 	bl	8008ee2 <USBD_CtlError>
                break;
 8008708:	e091      	b.n	800882e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	da0b      	bge.n	800872a <USBD_StdEPReq+0x212>
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	3310      	adds	r3, #16
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	4413      	add	r3, r2
 8008726:	3304      	adds	r3, #4
 8008728:	e00b      	b.n	8008742 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	4413      	add	r3, r2
 8008740:	3304      	adds	r3, #4
 8008742:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2200      	movs	r2, #0
 8008748:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2202      	movs	r2, #2
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fc37 	bl	8008fc4 <USBD_CtlSendData>
              break;
 8008756:	e06a      	b.n	800882e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800875c:	2b00      	cmp	r3, #0
 800875e:	da11      	bge.n	8008784 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	f003 020f 	and.w	r2, r3, #15
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	440b      	add	r3, r1
 8008772:	3324      	adds	r3, #36	; 0x24
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d117      	bne.n	80087aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fbb0 	bl	8008ee2 <USBD_CtlError>
                  break;
 8008782:	e054      	b.n	800882e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	f003 020f 	and.w	r2, r3, #15
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	4613      	mov	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	440b      	add	r3, r1
 8008796:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d104      	bne.n	80087aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fb9d 	bl	8008ee2 <USBD_CtlError>
                  break;
 80087a8:	e041      	b.n	800882e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da0b      	bge.n	80087ca <USBD_StdEPReq+0x2b2>
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
 80087b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	3310      	adds	r3, #16
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	4413      	add	r3, r2
 80087c6:	3304      	adds	r3, #4
 80087c8:	e00b      	b.n	80087e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	3304      	adds	r3, #4
 80087e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <USBD_StdEPReq+0x2d8>
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b80      	cmp	r3, #128	; 0x80
 80087ee:	d103      	bne.n	80087f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	e00e      	b.n	8008816 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f001 f88d 	bl	800991c <USBD_LL_IsStallEP>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d003      	beq.n	8008810 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2201      	movs	r2, #1
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e002      	b.n	8008816 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2202      	movs	r2, #2
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fbd1 	bl	8008fc4 <USBD_CtlSendData>
              break;
 8008822:	e004      	b.n	800882e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fb5b 	bl	8008ee2 <USBD_CtlError>
              break;
 800882c:	bf00      	nop
          }
          break;
 800882e:	e004      	b.n	800883a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008830:	6839      	ldr	r1, [r7, #0]
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fb55 	bl	8008ee2 <USBD_CtlError>
          break;
 8008838:	bf00      	nop
      }
      break;
 800883a:	e005      	b.n	8008848 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fb4f 	bl	8008ee2 <USBD_CtlError>
      break;
 8008844:	e000      	b.n	8008848 <USBD_StdEPReq+0x330>
      break;
 8008846:	bf00      	nop
  }

  return ret;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008862:	2300      	movs	r3, #0
 8008864:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	885b      	ldrh	r3, [r3, #2]
 800886e:	0a1b      	lsrs	r3, r3, #8
 8008870:	b29b      	uxth	r3, r3
 8008872:	3b01      	subs	r3, #1
 8008874:	2b06      	cmp	r3, #6
 8008876:	f200 8128 	bhi.w	8008aca <USBD_GetDescriptor+0x276>
 800887a:	a201      	add	r2, pc, #4	; (adr r2, 8008880 <USBD_GetDescriptor+0x2c>)
 800887c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008880:	0800889d 	.word	0x0800889d
 8008884:	080088b5 	.word	0x080088b5
 8008888:	080088f5 	.word	0x080088f5
 800888c:	08008acb 	.word	0x08008acb
 8008890:	08008acb 	.word	0x08008acb
 8008894:	08008a6b 	.word	0x08008a6b
 8008898:	08008a97 	.word	0x08008a97
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	7c12      	ldrb	r2, [r2, #16]
 80088a8:	f107 0108 	add.w	r1, r7, #8
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
 80088b0:	60f8      	str	r0, [r7, #12]
      break;
 80088b2:	e112      	b.n	8008ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7c1b      	ldrb	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10d      	bne.n	80088d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c4:	f107 0208 	add.w	r2, r7, #8
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	2202      	movs	r2, #2
 80088d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088d6:	e100      	b.n	8008ada <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	f107 0208 	add.w	r2, r7, #8
 80088e4:	4610      	mov	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3301      	adds	r3, #1
 80088ee:	2202      	movs	r2, #2
 80088f0:	701a      	strb	r2, [r3, #0]
      break;
 80088f2:	e0f2      	b.n	8008ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	885b      	ldrh	r3, [r3, #2]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b05      	cmp	r3, #5
 80088fc:	f200 80ac 	bhi.w	8008a58 <USBD_GetDescriptor+0x204>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <USBD_GetDescriptor+0xb4>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	08008921 	.word	0x08008921
 800890c:	08008955 	.word	0x08008955
 8008910:	08008989 	.word	0x08008989
 8008914:	080089bd 	.word	0x080089bd
 8008918:	080089f1 	.word	0x080089f1
 800891c:	08008a25 	.word	0x08008a25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	7c12      	ldrb	r2, [r2, #16]
 8008938:	f107 0108 	add.w	r1, r7, #8
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008942:	e091      	b.n	8008a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 facb 	bl	8008ee2 <USBD_CtlError>
            err++;
 800894c:	7afb      	ldrb	r3, [r7, #11]
 800894e:	3301      	adds	r3, #1
 8008950:	72fb      	strb	r3, [r7, #11]
          break;
 8008952:	e089      	b.n	8008a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7c12      	ldrb	r2, [r2, #16]
 800896c:	f107 0108 	add.w	r1, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008976:	e077      	b.n	8008a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fab1 	bl	8008ee2 <USBD_CtlError>
            err++;
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	3301      	adds	r3, #1
 8008984:	72fb      	strb	r3, [r7, #11]
          break;
 8008986:	e06f      	b.n	8008a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00b      	beq.n	80089ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	7c12      	ldrb	r2, [r2, #16]
 80089a0:	f107 0108 	add.w	r1, r7, #8
 80089a4:	4610      	mov	r0, r2
 80089a6:	4798      	blx	r3
 80089a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089aa:	e05d      	b.n	8008a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fa97 	bl	8008ee2 <USBD_CtlError>
            err++;
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	3301      	adds	r3, #1
 80089b8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ba:	e055      	b.n	8008a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00b      	beq.n	80089e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	7c12      	ldrb	r2, [r2, #16]
 80089d4:	f107 0108 	add.w	r1, r7, #8
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089de:	e043      	b.n	8008a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa7d 	bl	8008ee2 <USBD_CtlError>
            err++;
 80089e8:	7afb      	ldrb	r3, [r7, #11]
 80089ea:	3301      	adds	r3, #1
 80089ec:	72fb      	strb	r3, [r7, #11]
          break;
 80089ee:	e03b      	b.n	8008a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00b      	beq.n	8008a14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	7c12      	ldrb	r2, [r2, #16]
 8008a08:	f107 0108 	add.w	r1, r7, #8
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4798      	blx	r3
 8008a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a12:	e029      	b.n	8008a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fa63 	bl	8008ee2 <USBD_CtlError>
            err++;
 8008a1c:	7afb      	ldrb	r3, [r7, #11]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	72fb      	strb	r3, [r7, #11]
          break;
 8008a22:	e021      	b.n	8008a68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	7c12      	ldrb	r2, [r2, #16]
 8008a3c:	f107 0108 	add.w	r1, r7, #8
 8008a40:	4610      	mov	r0, r2
 8008a42:	4798      	blx	r3
 8008a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a46:	e00f      	b.n	8008a68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fa49 	bl	8008ee2 <USBD_CtlError>
            err++;
 8008a50:	7afb      	ldrb	r3, [r7, #11]
 8008a52:	3301      	adds	r3, #1
 8008a54:	72fb      	strb	r3, [r7, #11]
          break;
 8008a56:	e007      	b.n	8008a68 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fa41 	bl	8008ee2 <USBD_CtlError>
          err++;
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	3301      	adds	r3, #1
 8008a64:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a66:	bf00      	nop
      }
      break;
 8008a68:	e037      	b.n	8008ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	7c1b      	ldrb	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d109      	bne.n	8008a86 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7a:	f107 0208 	add.w	r2, r7, #8
 8008a7e:	4610      	mov	r0, r2
 8008a80:	4798      	blx	r3
 8008a82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a84:	e029      	b.n	8008ada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fa2a 	bl	8008ee2 <USBD_CtlError>
        err++;
 8008a8e:	7afb      	ldrb	r3, [r7, #11]
 8008a90:	3301      	adds	r3, #1
 8008a92:	72fb      	strb	r3, [r7, #11]
      break;
 8008a94:	e021      	b.n	8008ada <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7c1b      	ldrb	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10d      	bne.n	8008aba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa6:	f107 0208 	add.w	r2, r7, #8
 8008aaa:	4610      	mov	r0, r2
 8008aac:	4798      	blx	r3
 8008aae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	2207      	movs	r2, #7
 8008ab6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ab8:	e00f      	b.n	8008ada <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fa10 	bl	8008ee2 <USBD_CtlError>
        err++;
 8008ac2:	7afb      	ldrb	r3, [r7, #11]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac8:	e007      	b.n	8008ada <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fa08 	bl	8008ee2 <USBD_CtlError>
      err++;
 8008ad2:	7afb      	ldrb	r3, [r7, #11]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad8:	bf00      	nop
  }

  if (err != 0U)
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d11e      	bne.n	8008b1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	88db      	ldrh	r3, [r3, #6]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d016      	beq.n	8008b16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ae8:	893b      	ldrh	r3, [r7, #8]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00e      	beq.n	8008b0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	88da      	ldrh	r2, [r3, #6]
 8008af2:	893b      	ldrh	r3, [r7, #8]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	bf28      	it	cs
 8008af8:	4613      	movcs	r3, r2
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008afe:	893b      	ldrh	r3, [r7, #8]
 8008b00:	461a      	mov	r2, r3
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fa5d 	bl	8008fc4 <USBD_CtlSendData>
 8008b0a:	e009      	b.n	8008b20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f9e7 	bl	8008ee2 <USBD_CtlError>
 8008b14:	e004      	b.n	8008b20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 faae 	bl	8009078 <USBD_CtlSendStatus>
 8008b1c:	e000      	b.n	8008b20 <USBD_GetDescriptor+0x2cc>
    return;
 8008b1e:	bf00      	nop
  }
}
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop

08008b28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	889b      	ldrh	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d131      	bne.n	8008b9e <USBD_SetAddress+0x76>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	88db      	ldrh	r3, [r3, #6]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d12d      	bne.n	8008b9e <USBD_SetAddress+0x76>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	885b      	ldrh	r3, [r3, #2]
 8008b46:	2b7f      	cmp	r3, #127	; 0x7f
 8008b48:	d829      	bhi.n	8008b9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	885b      	ldrh	r3, [r3, #2]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d104      	bne.n	8008b6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f9bc 	bl	8008ee2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6a:	e01d      	b.n	8008ba8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	7bfa      	ldrb	r2, [r7, #15]
 8008b70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fefb 	bl	8009974 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa7a 	bl	8009078 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d004      	beq.n	8008b94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b92:	e009      	b.n	8008ba8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9c:	e004      	b.n	8008ba8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f99e 	bl	8008ee2 <USBD_CtlError>
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	885b      	ldrh	r3, [r3, #2]
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	4b4e      	ldr	r3, [pc, #312]	; (8008d00 <USBD_SetConfig+0x150>)
 8008bc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bc8:	4b4d      	ldr	r3, [pc, #308]	; (8008d00 <USBD_SetConfig+0x150>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d905      	bls.n	8008bdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f985 	bl	8008ee2 <USBD_CtlError>
    return USBD_FAIL;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e08c      	b.n	8008cf6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d002      	beq.n	8008bee <USBD_SetConfig+0x3e>
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d029      	beq.n	8008c40 <USBD_SetConfig+0x90>
 8008bec:	e075      	b.n	8008cda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bee:	4b44      	ldr	r3, [pc, #272]	; (8008d00 <USBD_SetConfig+0x150>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d020      	beq.n	8008c38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008bf6:	4b42      	ldr	r3, [pc, #264]	; (8008d00 <USBD_SetConfig+0x150>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c00:	4b3f      	ldr	r3, [pc, #252]	; (8008d00 <USBD_SetConfig+0x150>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7fe ffe7 	bl	8007bda <USBD_SetClassConfig>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d008      	beq.n	8008c28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f962 	bl	8008ee2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2202      	movs	r2, #2
 8008c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c26:	e065      	b.n	8008cf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fa25 	bl	8009078 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2203      	movs	r2, #3
 8008c32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c36:	e05d      	b.n	8008cf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fa1d 	bl	8009078 <USBD_CtlSendStatus>
      break;
 8008c3e:	e059      	b.n	8008cf4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c40:	4b2f      	ldr	r3, [pc, #188]	; (8008d00 <USBD_SetConfig+0x150>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d112      	bne.n	8008c6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c50:	4b2b      	ldr	r3, [pc, #172]	; (8008d00 <USBD_SetConfig+0x150>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	461a      	mov	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c5a:	4b29      	ldr	r3, [pc, #164]	; (8008d00 <USBD_SetConfig+0x150>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fe ffd6 	bl	8007c12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fa06 	bl	8009078 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c6c:	e042      	b.n	8008cf4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c6e:	4b24      	ldr	r3, [pc, #144]	; (8008d00 <USBD_SetConfig+0x150>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d02a      	beq.n	8008cd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7fe ffc4 	bl	8007c12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c8a:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <USBD_SetConfig+0x150>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c94:	4b1a      	ldr	r3, [pc, #104]	; (8008d00 <USBD_SetConfig+0x150>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fe ff9d 	bl	8007bda <USBD_SetClassConfig>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00f      	beq.n	8008cca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f918 	bl	8008ee2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7fe ffa9 	bl	8007c12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cc8:	e014      	b.n	8008cf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f9d4 	bl	8009078 <USBD_CtlSendStatus>
      break;
 8008cd0:	e010      	b.n	8008cf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f9d0 	bl	8009078 <USBD_CtlSendStatus>
      break;
 8008cd8:	e00c      	b.n	8008cf4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f900 	bl	8008ee2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ce2:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <USBD_SetConfig+0x150>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7fe ff92 	bl	8007c12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf2:	bf00      	nop
  }

  return ret;
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	2000032c 	.word	0x2000032c

08008d04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	88db      	ldrh	r3, [r3, #6]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d004      	beq.n	8008d20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f8e2 	bl	8008ee2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d1e:	e023      	b.n	8008d68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	dc02      	bgt.n	8008d32 <USBD_GetConfig+0x2e>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dc03      	bgt.n	8008d38 <USBD_GetConfig+0x34>
 8008d30:	e015      	b.n	8008d5e <USBD_GetConfig+0x5a>
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d00b      	beq.n	8008d4e <USBD_GetConfig+0x4a>
 8008d36:	e012      	b.n	8008d5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3308      	adds	r3, #8
 8008d42:	2201      	movs	r2, #1
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f93c 	bl	8008fc4 <USBD_CtlSendData>
        break;
 8008d4c:	e00c      	b.n	8008d68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3304      	adds	r3, #4
 8008d52:	2201      	movs	r2, #1
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f934 	bl	8008fc4 <USBD_CtlSendData>
        break;
 8008d5c:	e004      	b.n	8008d68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f8be 	bl	8008ee2 <USBD_CtlError>
        break;
 8008d66:	bf00      	nop
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	3b01      	subs	r3, #1
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d81e      	bhi.n	8008dc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	88db      	ldrh	r3, [r3, #6]
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d004      	beq.n	8008d9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f8a5 	bl	8008ee2 <USBD_CtlError>
        break;
 8008d98:	e01a      	b.n	8008dd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d005      	beq.n	8008db6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f043 0202 	orr.w	r2, r3, #2
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	330c      	adds	r3, #12
 8008dba:	2202      	movs	r2, #2
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f900 	bl	8008fc4 <USBD_CtlSendData>
      break;
 8008dc4:	e004      	b.n	8008dd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f88a 	bl	8008ee2 <USBD_CtlError>
      break;
 8008dce:	bf00      	nop
  }
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	885b      	ldrh	r3, [r3, #2]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d107      	bne.n	8008dfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f940 	bl	8009078 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008df8:	e013      	b.n	8008e22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	885b      	ldrh	r3, [r3, #2]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d10b      	bne.n	8008e1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	889b      	ldrh	r3, [r3, #4]
 8008e06:	0a1b      	lsrs	r3, r3, #8
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f930 	bl	8009078 <USBD_CtlSendStatus>
}
 8008e18:	e003      	b.n	8008e22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f860 	bl	8008ee2 <USBD_CtlError>
}
 8008e22:	bf00      	nop
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d80b      	bhi.n	8008e5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	885b      	ldrh	r3, [r3, #2]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d10c      	bne.n	8008e64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f910 	bl	8009078 <USBD_CtlSendStatus>
      }
      break;
 8008e58:	e004      	b.n	8008e64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f840 	bl	8008ee2 <USBD_CtlError>
      break;
 8008e62:	e000      	b.n	8008e66 <USBD_ClrFeature+0x3c>
      break;
 8008e64:	bf00      	nop
  }
}
 8008e66:	bf00      	nop
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	781a      	ldrb	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	3301      	adds	r3, #1
 8008e88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	781a      	ldrb	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7ff fa41 	bl	8008320 <SWAPBYTE>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fa34 	bl	8008320 <SWAPBYTE>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f7ff fa27 	bl	8008320 <SWAPBYTE>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	80da      	strh	r2, [r3, #6]
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eec:	2180      	movs	r1, #128	; 0x80
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fcd6 	bl	80098a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fcd2 	bl	80098a0 <USBD_LL_StallEP>
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d036      	beq.n	8008f88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f1e:	6938      	ldr	r0, [r7, #16]
 8008f20:	f000 f836 	bl	8008f90 <USBD_GetLen>
 8008f24:	4603      	mov	r3, r0
 8008f26:	3301      	adds	r3, #1
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	4413      	add	r3, r2
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	7812      	ldrb	r2, [r2, #0]
 8008f3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f3e:	7dfb      	ldrb	r3, [r7, #23]
 8008f40:	3301      	adds	r3, #1
 8008f42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	4413      	add	r3, r2
 8008f4a:	2203      	movs	r2, #3
 8008f4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	3301      	adds	r3, #1
 8008f52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f54:	e013      	b.n	8008f7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	7812      	ldrb	r2, [r2, #0]
 8008f60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	3301      	adds	r3, #1
 8008f66:	613b      	str	r3, [r7, #16]
    idx++;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	4413      	add	r3, r2
 8008f74:	2200      	movs	r2, #0
 8008f76:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e7      	bne.n	8008f56 <USBD_GetString+0x52>
 8008f86:	e000      	b.n	8008f8a <USBD_GetString+0x86>
    return;
 8008f88:	bf00      	nop
  }
}
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fa0:	e005      	b.n	8008fae <USBD_GetLen+0x1e>
  {
    len++;
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	3301      	adds	r3, #1
 8008fac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1f5      	bne.n	8008fa2 <USBD_GetLen+0x12>
  }

  return len;
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 fce1 	bl	80099b2 <USBD_LL_Transmit>

  return USBD_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	2100      	movs	r1, #0
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 fcd0 	bl	80099b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2203      	movs	r2, #3
 800902c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	2100      	movs	r1, #0
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 fcd4 	bl	80099f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	2100      	movs	r1, #0
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 fcc3 	bl	80099f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2204      	movs	r2, #4
 8009084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009088:	2300      	movs	r3, #0
 800908a:	2200      	movs	r2, #0
 800908c:	2100      	movs	r1, #0
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fc8f 	bl	80099b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2205      	movs	r2, #5
 80090aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ae:	2300      	movs	r3, #0
 80090b0:	2200      	movs	r2, #0
 80090b2:	2100      	movs	r1, #0
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fc9d 	bl	80099f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090c8:	2200      	movs	r2, #0
 80090ca:	4912      	ldr	r1, [pc, #72]	; (8009114 <MX_USB_DEVICE_Init+0x50>)
 80090cc:	4812      	ldr	r0, [pc, #72]	; (8009118 <MX_USB_DEVICE_Init+0x54>)
 80090ce:	f7fe fd07 	bl	8007ae0 <USBD_Init>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090d8:	f7f8 fbae 	bl	8001838 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090dc:	490f      	ldr	r1, [pc, #60]	; (800911c <MX_USB_DEVICE_Init+0x58>)
 80090de:	480e      	ldr	r0, [pc, #56]	; (8009118 <MX_USB_DEVICE_Init+0x54>)
 80090e0:	f7fe fd2e 	bl	8007b40 <USBD_RegisterClass>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090ea:	f7f8 fba5 	bl	8001838 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090ee:	490c      	ldr	r1, [pc, #48]	; (8009120 <MX_USB_DEVICE_Init+0x5c>)
 80090f0:	4809      	ldr	r0, [pc, #36]	; (8009118 <MX_USB_DEVICE_Init+0x54>)
 80090f2:	f7fe fc1f 	bl	8007934 <USBD_CDC_RegisterInterface>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090fc:	f7f8 fb9c 	bl	8001838 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009100:	4805      	ldr	r0, [pc, #20]	; (8009118 <MX_USB_DEVICE_Init+0x54>)
 8009102:	f7fe fd53 	bl	8007bac <USBD_Start>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800910c:	f7f8 fb94 	bl	8001838 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009110:	bf00      	nop
 8009112:	bd80      	pop	{r7, pc}
 8009114:	200000d4 	.word	0x200000d4
 8009118:	20000330 	.word	0x20000330
 800911c:	20000040 	.word	0x20000040
 8009120:	200000c0 	.word	0x200000c0

08009124 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009128:	2200      	movs	r2, #0
 800912a:	4905      	ldr	r1, [pc, #20]	; (8009140 <CDC_Init_FS+0x1c>)
 800912c:	4805      	ldr	r0, [pc, #20]	; (8009144 <CDC_Init_FS+0x20>)
 800912e:	f7fe fc1b 	bl	8007968 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009132:	4905      	ldr	r1, [pc, #20]	; (8009148 <CDC_Init_FS+0x24>)
 8009134:	4803      	ldr	r0, [pc, #12]	; (8009144 <CDC_Init_FS+0x20>)
 8009136:	f7fe fc39 	bl	80079ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800913a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800913c:	4618      	mov	r0, r3
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000a0c 	.word	0x20000a0c
 8009144:	20000330 	.word	0x20000330
 8009148:	2000060c 	.word	0x2000060c

0800914c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009150:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009152:	4618      	mov	r0, r3
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	6039      	str	r1, [r7, #0]
 8009166:	71fb      	strb	r3, [r7, #7]
 8009168:	4613      	mov	r3, r2
 800916a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	2b23      	cmp	r3, #35	; 0x23
 8009170:	d84a      	bhi.n	8009208 <CDC_Control_FS+0xac>
 8009172:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <CDC_Control_FS+0x1c>)
 8009174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009178:	08009209 	.word	0x08009209
 800917c:	08009209 	.word	0x08009209
 8009180:	08009209 	.word	0x08009209
 8009184:	08009209 	.word	0x08009209
 8009188:	08009209 	.word	0x08009209
 800918c:	08009209 	.word	0x08009209
 8009190:	08009209 	.word	0x08009209
 8009194:	08009209 	.word	0x08009209
 8009198:	08009209 	.word	0x08009209
 800919c:	08009209 	.word	0x08009209
 80091a0:	08009209 	.word	0x08009209
 80091a4:	08009209 	.word	0x08009209
 80091a8:	08009209 	.word	0x08009209
 80091ac:	08009209 	.word	0x08009209
 80091b0:	08009209 	.word	0x08009209
 80091b4:	08009209 	.word	0x08009209
 80091b8:	08009209 	.word	0x08009209
 80091bc:	08009209 	.word	0x08009209
 80091c0:	08009209 	.word	0x08009209
 80091c4:	08009209 	.word	0x08009209
 80091c8:	08009209 	.word	0x08009209
 80091cc:	08009209 	.word	0x08009209
 80091d0:	08009209 	.word	0x08009209
 80091d4:	08009209 	.word	0x08009209
 80091d8:	08009209 	.word	0x08009209
 80091dc:	08009209 	.word	0x08009209
 80091e0:	08009209 	.word	0x08009209
 80091e4:	08009209 	.word	0x08009209
 80091e8:	08009209 	.word	0x08009209
 80091ec:	08009209 	.word	0x08009209
 80091f0:	08009209 	.word	0x08009209
 80091f4:	08009209 	.word	0x08009209
 80091f8:	08009209 	.word	0x08009209
 80091fc:	08009209 	.word	0x08009209
 8009200:	08009209 	.word	0x08009209
 8009204:	08009209 	.word	0x08009209
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009208:	bf00      	nop
  }

  return (USBD_OK);
 800920a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	4805      	ldr	r0, [pc, #20]	; (800923c <CDC_Receive_FS+0x24>)
 8009226:	f7fe fbc1 	bl	80079ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800922a:	4804      	ldr	r0, [pc, #16]	; (800923c <CDC_Receive_FS+0x24>)
 800922c:	f7fe fc22 	bl	8007a74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009230:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20000330 	.word	0x20000330

08009240 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009250:	4b0d      	ldr	r3, [pc, #52]	; (8009288 <CDC_Transmit_FS+0x48>)
 8009252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009256:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009262:	2301      	movs	r3, #1
 8009264:	e00b      	b.n	800927e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009266:	887b      	ldrh	r3, [r7, #2]
 8009268:	461a      	mov	r2, r3
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	4806      	ldr	r0, [pc, #24]	; (8009288 <CDC_Transmit_FS+0x48>)
 800926e:	f7fe fb7b 	bl	8007968 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009272:	4805      	ldr	r0, [pc, #20]	; (8009288 <CDC_Transmit_FS+0x48>)
 8009274:	f7fe fbb8 	bl	80079e8 <USBD_CDC_TransmitPacket>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000330 	.word	0x20000330

0800928c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800929e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	371c      	adds	r7, #28
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
	...

080092b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2212      	movs	r2, #18
 80092c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092c2:	4b03      	ldr	r3, [pc, #12]	; (80092d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	200000f0 	.word	0x200000f0

080092d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	6039      	str	r1, [r7, #0]
 80092de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2204      	movs	r2, #4
 80092e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092e6:	4b03      	ldr	r3, [pc, #12]	; (80092f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	20000104 	.word	0x20000104

080092f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	6039      	str	r1, [r7, #0]
 8009302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d105      	bne.n	8009316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	4907      	ldr	r1, [pc, #28]	; (800932c <USBD_FS_ProductStrDescriptor+0x34>)
 800930e:	4808      	ldr	r0, [pc, #32]	; (8009330 <USBD_FS_ProductStrDescriptor+0x38>)
 8009310:	f7ff fdf8 	bl	8008f04 <USBD_GetString>
 8009314:	e004      	b.n	8009320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	4904      	ldr	r1, [pc, #16]	; (800932c <USBD_FS_ProductStrDescriptor+0x34>)
 800931a:	4805      	ldr	r0, [pc, #20]	; (8009330 <USBD_FS_ProductStrDescriptor+0x38>)
 800931c:	f7ff fdf2 	bl	8008f04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000e0c 	.word	0x20000e0c
 8009330:	0800b6e0 	.word	0x0800b6e0

08009334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	4603      	mov	r3, r0
 800933c:	6039      	str	r1, [r7, #0]
 800933e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	4904      	ldr	r1, [pc, #16]	; (8009354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009344:	4804      	ldr	r0, [pc, #16]	; (8009358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009346:	f7ff fddd 	bl	8008f04 <USBD_GetString>
  return USBD_StrDesc;
 800934a:	4b02      	ldr	r3, [pc, #8]	; (8009354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800934c:	4618      	mov	r0, r3
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20000e0c 	.word	0x20000e0c
 8009358:	0800b6f8 	.word	0x0800b6f8

0800935c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	221a      	movs	r2, #26
 800936c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800936e:	f000 f843 	bl	80093f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009372:	4b02      	ldr	r3, [pc, #8]	; (800937c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20000108 	.word	0x20000108

08009380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d105      	bne.n	800939e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4907      	ldr	r1, [pc, #28]	; (80093b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009396:	4808      	ldr	r0, [pc, #32]	; (80093b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009398:	f7ff fdb4 	bl	8008f04 <USBD_GetString>
 800939c:	e004      	b.n	80093a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	4904      	ldr	r1, [pc, #16]	; (80093b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80093a2:	4805      	ldr	r0, [pc, #20]	; (80093b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093a4:	f7ff fdae 	bl	8008f04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a8:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	20000e0c 	.word	0x20000e0c
 80093b8:	0800b70c 	.word	0x0800b70c

080093bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	6039      	str	r1, [r7, #0]
 80093c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093c8:	79fb      	ldrb	r3, [r7, #7]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d105      	bne.n	80093da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	4907      	ldr	r1, [pc, #28]	; (80093f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093d2:	4808      	ldr	r0, [pc, #32]	; (80093f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093d4:	f7ff fd96 	bl	8008f04 <USBD_GetString>
 80093d8:	e004      	b.n	80093e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	4904      	ldr	r1, [pc, #16]	; (80093f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093de:	4805      	ldr	r0, [pc, #20]	; (80093f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093e0:	f7ff fd90 	bl	8008f04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093e4:	4b02      	ldr	r3, [pc, #8]	; (80093f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20000e0c 	.word	0x20000e0c
 80093f4:	0800b718 	.word	0x0800b718

080093f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093fe:	4b0f      	ldr	r3, [pc, #60]	; (800943c <Get_SerialNum+0x44>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009404:	4b0e      	ldr	r3, [pc, #56]	; (8009440 <Get_SerialNum+0x48>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800940a:	4b0e      	ldr	r3, [pc, #56]	; (8009444 <Get_SerialNum+0x4c>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4413      	add	r3, r2
 8009416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d009      	beq.n	8009432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800941e:	2208      	movs	r2, #8
 8009420:	4909      	ldr	r1, [pc, #36]	; (8009448 <Get_SerialNum+0x50>)
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 f814 	bl	8009450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009428:	2204      	movs	r2, #4
 800942a:	4908      	ldr	r1, [pc, #32]	; (800944c <Get_SerialNum+0x54>)
 800942c:	68b8      	ldr	r0, [r7, #8]
 800942e:	f000 f80f 	bl	8009450 <IntToUnicode>
  }
}
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	1fff7a10 	.word	0x1fff7a10
 8009440:	1fff7a14 	.word	0x1fff7a14
 8009444:	1fff7a18 	.word	0x1fff7a18
 8009448:	2000010a 	.word	0x2000010a
 800944c:	2000011a 	.word	0x2000011a

08009450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	4613      	mov	r3, r2
 800945c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009462:	2300      	movs	r3, #0
 8009464:	75fb      	strb	r3, [r7, #23]
 8009466:	e027      	b.n	80094b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	0f1b      	lsrs	r3, r3, #28
 800946c:	2b09      	cmp	r3, #9
 800946e:	d80b      	bhi.n	8009488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	0f1b      	lsrs	r3, r3, #28
 8009474:	b2da      	uxtb	r2, r3
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	4619      	mov	r1, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	440b      	add	r3, r1
 8009480:	3230      	adds	r2, #48	; 0x30
 8009482:	b2d2      	uxtb	r2, r2
 8009484:	701a      	strb	r2, [r3, #0]
 8009486:	e00a      	b.n	800949e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	0f1b      	lsrs	r3, r3, #28
 800948c:	b2da      	uxtb	r2, r3
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	4619      	mov	r1, r3
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	440b      	add	r3, r1
 8009498:	3237      	adds	r2, #55	; 0x37
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	3301      	adds	r3, #1
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	4413      	add	r3, r2
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
 80094b4:	3301      	adds	r3, #1
 80094b6:	75fb      	strb	r3, [r7, #23]
 80094b8:	7dfa      	ldrb	r2, [r7, #23]
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d3d3      	bcc.n	8009468 <IntToUnicode+0x18>
  }
}
 80094c0:	bf00      	nop
 80094c2:	bf00      	nop
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
	...

080094d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08a      	sub	sp, #40	; 0x28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	2200      	movs	r2, #0
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	605a      	str	r2, [r3, #4]
 80094e2:	609a      	str	r2, [r3, #8]
 80094e4:	60da      	str	r2, [r3, #12]
 80094e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094f0:	d13a      	bne.n	8009568 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094f2:	2300      	movs	r3, #0
 80094f4:	613b      	str	r3, [r7, #16]
 80094f6:	4b1e      	ldr	r3, [pc, #120]	; (8009570 <HAL_PCD_MspInit+0xa0>)
 80094f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fa:	4a1d      	ldr	r2, [pc, #116]	; (8009570 <HAL_PCD_MspInit+0xa0>)
 80094fc:	f043 0301 	orr.w	r3, r3, #1
 8009500:	6313      	str	r3, [r2, #48]	; 0x30
 8009502:	4b1b      	ldr	r3, [pc, #108]	; (8009570 <HAL_PCD_MspInit+0xa0>)
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	613b      	str	r3, [r7, #16]
 800950c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800950e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009514:	2302      	movs	r3, #2
 8009516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009518:	2300      	movs	r3, #0
 800951a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800951c:	2303      	movs	r3, #3
 800951e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009520:	230a      	movs	r3, #10
 8009522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009524:	f107 0314 	add.w	r3, r7, #20
 8009528:	4619      	mov	r1, r3
 800952a:	4812      	ldr	r0, [pc, #72]	; (8009574 <HAL_PCD_MspInit+0xa4>)
 800952c:	f7f9 f8f4 	bl	8002718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009530:	4b0f      	ldr	r3, [pc, #60]	; (8009570 <HAL_PCD_MspInit+0xa0>)
 8009532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009534:	4a0e      	ldr	r2, [pc, #56]	; (8009570 <HAL_PCD_MspInit+0xa0>)
 8009536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953a:	6353      	str	r3, [r2, #52]	; 0x34
 800953c:	2300      	movs	r3, #0
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <HAL_PCD_MspInit+0xa0>)
 8009542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009544:	4a0a      	ldr	r2, [pc, #40]	; (8009570 <HAL_PCD_MspInit+0xa0>)
 8009546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800954a:	6453      	str	r3, [r2, #68]	; 0x44
 800954c:	4b08      	ldr	r3, [pc, #32]	; (8009570 <HAL_PCD_MspInit+0xa0>)
 800954e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009558:	2200      	movs	r2, #0
 800955a:	2100      	movs	r1, #0
 800955c:	2043      	movs	r0, #67	; 0x43
 800955e:	f7f9 f8a4 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009562:	2043      	movs	r0, #67	; 0x43
 8009564:	f7f9 f8bd 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009568:	bf00      	nop
 800956a:	3728      	adds	r7, #40	; 0x28
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	40023800 	.word	0x40023800
 8009574:	40020000 	.word	0x40020000

08009578 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800958c:	4619      	mov	r1, r3
 800958e:	4610      	mov	r0, r2
 8009590:	f7fe fb59 	bl	8007c46 <USBD_LL_SetupStage>
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095ae:	78fa      	ldrb	r2, [r7, #3]
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	440b      	add	r3, r1
 80095bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	4619      	mov	r1, r3
 80095c6:	f7fe fb93 	bl	8007cf0 <USBD_LL_DataOutStage>
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	460b      	mov	r3, r1
 80095dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095e4:	78fa      	ldrb	r2, [r7, #3]
 80095e6:	6879      	ldr	r1, [r7, #4]
 80095e8:	4613      	mov	r3, r2
 80095ea:	00db      	lsls	r3, r3, #3
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	440b      	add	r3, r1
 80095f2:	334c      	adds	r3, #76	; 0x4c
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	78fb      	ldrb	r3, [r7, #3]
 80095f8:	4619      	mov	r1, r3
 80095fa:	f7fe fc2c 	bl	8007e56 <USBD_LL_DataInStage>
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b082      	sub	sp, #8
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fd60 	bl	80080da <USBD_LL_SOF>
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800962a:	2301      	movs	r3, #1
 800962c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d001      	beq.n	800963a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009636:	f7f8 f8ff 	bl	8001838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009640:	7bfa      	ldrb	r2, [r7, #15]
 8009642:	4611      	mov	r1, r2
 8009644:	4618      	mov	r0, r3
 8009646:	f7fe fd0a 	bl	800805e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe fcb2 	bl	8007fba <USBD_LL_Reset>
}
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fd05 	bl	800807e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	6812      	ldr	r2, [r2, #0]
 8009682:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009686:	f043 0301 	orr.w	r3, r3, #1
 800968a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d005      	beq.n	80096a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009694:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <HAL_PCD_SuspendCallback+0x48>)
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	4a03      	ldr	r2, [pc, #12]	; (80096a8 <HAL_PCD_SuspendCallback+0x48>)
 800969a:	f043 0306 	orr.w	r3, r3, #6
 800969e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	e000ed00 	.word	0xe000ed00

080096ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe fcf5 	bl	80080aa <USBD_LL_Resume>
}
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096da:	78fa      	ldrb	r2, [r7, #3]
 80096dc:	4611      	mov	r1, r2
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fd4d 	bl	800817e <USBD_LL_IsoOUTIncomplete>
}
 80096e4:	bf00      	nop
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	4611      	mov	r1, r2
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe fd09 	bl	800811a <USBD_LL_IsoINIncomplete>
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe fd5f 	bl	80081e2 <USBD_LL_DevConnected>
}
 8009724:	bf00      	nop
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800973a:	4618      	mov	r0, r3
 800973c:	f7fe fd5c 	bl	80081f8 <USBD_LL_DevDisconnected>
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d13c      	bne.n	80097d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009758:	4a20      	ldr	r2, [pc, #128]	; (80097dc <USBD_LL_Init+0x94>)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a1e      	ldr	r2, [pc, #120]	; (80097dc <USBD_LL_Init+0x94>)
 8009764:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009768:	4b1c      	ldr	r3, [pc, #112]	; (80097dc <USBD_LL_Init+0x94>)
 800976a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800976e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009770:	4b1a      	ldr	r3, [pc, #104]	; (80097dc <USBD_LL_Init+0x94>)
 8009772:	2204      	movs	r2, #4
 8009774:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009776:	4b19      	ldr	r3, [pc, #100]	; (80097dc <USBD_LL_Init+0x94>)
 8009778:	2202      	movs	r2, #2
 800977a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800977c:	4b17      	ldr	r3, [pc, #92]	; (80097dc <USBD_LL_Init+0x94>)
 800977e:	2200      	movs	r2, #0
 8009780:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009782:	4b16      	ldr	r3, [pc, #88]	; (80097dc <USBD_LL_Init+0x94>)
 8009784:	2202      	movs	r2, #2
 8009786:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009788:	4b14      	ldr	r3, [pc, #80]	; (80097dc <USBD_LL_Init+0x94>)
 800978a:	2200      	movs	r2, #0
 800978c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800978e:	4b13      	ldr	r3, [pc, #76]	; (80097dc <USBD_LL_Init+0x94>)
 8009790:	2200      	movs	r2, #0
 8009792:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009794:	4b11      	ldr	r3, [pc, #68]	; (80097dc <USBD_LL_Init+0x94>)
 8009796:	2200      	movs	r2, #0
 8009798:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800979a:	4b10      	ldr	r3, [pc, #64]	; (80097dc <USBD_LL_Init+0x94>)
 800979c:	2200      	movs	r2, #0
 800979e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80097a0:	4b0e      	ldr	r3, [pc, #56]	; (80097dc <USBD_LL_Init+0x94>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80097a6:	480d      	ldr	r0, [pc, #52]	; (80097dc <USBD_LL_Init+0x94>)
 80097a8:	f7f9 f9a9 	bl	8002afe <HAL_PCD_Init>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d001      	beq.n	80097b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80097b2:	f7f8 f841 	bl	8001838 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80097b6:	2180      	movs	r1, #128	; 0x80
 80097b8:	4808      	ldr	r0, [pc, #32]	; (80097dc <USBD_LL_Init+0x94>)
 80097ba:	f7fa fc00 	bl	8003fbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80097be:	2240      	movs	r2, #64	; 0x40
 80097c0:	2100      	movs	r1, #0
 80097c2:	4806      	ldr	r0, [pc, #24]	; (80097dc <USBD_LL_Init+0x94>)
 80097c4:	f7fa fbb4 	bl	8003f30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80097c8:	2280      	movs	r2, #128	; 0x80
 80097ca:	2101      	movs	r1, #1
 80097cc:	4803      	ldr	r0, [pc, #12]	; (80097dc <USBD_LL_Init+0x94>)
 80097ce:	f7fa fbaf 	bl	8003f30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	2000100c 	.word	0x2000100c

080097e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7f9 fa9e 	bl	8002d38 <HAL_PCD_Start>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	4618      	mov	r0, r3
 8009804:	f000 f942 	bl	8009a8c <USBD_Get_USB_Status>
 8009808:	4603      	mov	r3, r0
 800980a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800980c:	7bbb      	ldrb	r3, [r7, #14]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
 800981e:	4608      	mov	r0, r1
 8009820:	4611      	mov	r1, r2
 8009822:	461a      	mov	r2, r3
 8009824:	4603      	mov	r3, r0
 8009826:	70fb      	strb	r3, [r7, #3]
 8009828:	460b      	mov	r3, r1
 800982a:	70bb      	strb	r3, [r7, #2]
 800982c:	4613      	mov	r3, r2
 800982e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800983e:	78bb      	ldrb	r3, [r7, #2]
 8009840:	883a      	ldrh	r2, [r7, #0]
 8009842:	78f9      	ldrb	r1, [r7, #3]
 8009844:	f7f9 ff6f 	bl	8003726 <HAL_PCD_EP_Open>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f91c 	bl	8009a8c <USBD_Get_USB_Status>
 8009854:	4603      	mov	r3, r0
 8009856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009858:	7bbb      	ldrb	r3, [r7, #14]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	460b      	mov	r3, r1
 800986c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f7f9 ffb8 	bl	80037f6 <HAL_PCD_EP_Close>
 8009886:	4603      	mov	r3, r0
 8009888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	4618      	mov	r0, r3
 800988e:	f000 f8fd 	bl	8009a8c <USBD_Get_USB_Status>
 8009892:	4603      	mov	r3, r0
 8009894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009896:	7bbb      	ldrb	r3, [r7, #14]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098ba:	78fa      	ldrb	r2, [r7, #3]
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fa f890 	bl	80039e4 <HAL_PCD_EP_SetStall>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 f8de 	bl	8009a8c <USBD_Get_USB_Status>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	460b      	mov	r3, r1
 80098e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098f8:	78fa      	ldrb	r2, [r7, #3]
 80098fa:	4611      	mov	r1, r2
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fa f8d5 	bl	8003aac <HAL_PCD_EP_ClrStall>
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	4618      	mov	r0, r3
 800990a:	f000 f8bf 	bl	8009a8c <USBD_Get_USB_Status>
 800990e:	4603      	mov	r3, r0
 8009910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009912:	7bbb      	ldrb	r3, [r7, #14]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800992e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009934:	2b00      	cmp	r3, #0
 8009936:	da0b      	bge.n	8009950 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800993e:	68f9      	ldr	r1, [r7, #12]
 8009940:	4613      	mov	r3, r2
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	4413      	add	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	440b      	add	r3, r1
 800994a:	333e      	adds	r3, #62	; 0x3e
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	e00b      	b.n	8009968 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009956:	68f9      	ldr	r1, [r7, #12]
 8009958:	4613      	mov	r3, r2
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	440b      	add	r3, r1
 8009962:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009966:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009968:	4618      	mov	r0, r3
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800998e:	78fa      	ldrb	r2, [r7, #3]
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f7f9 fea2 	bl	80036dc <HAL_PCD_SetAddress>
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 f874 	bl	8009a8c <USBD_Get_USB_Status>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b086      	sub	sp, #24
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
 80099be:	460b      	mov	r3, r1
 80099c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099d0:	7af9      	ldrb	r1, [r7, #11]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	f7f9 ffbb 	bl	8003950 <HAL_PCD_EP_Transmit>
 80099da:	4603      	mov	r3, r0
 80099dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 f853 	bl	8009a8c <USBD_Get_USB_Status>
 80099e6:	4603      	mov	r3, r0
 80099e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	607a      	str	r2, [r7, #4]
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	460b      	mov	r3, r1
 8009a02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a12:	7af9      	ldrb	r1, [r7, #11]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	f7f9 ff37 	bl	800388a <HAL_PCD_EP_Receive>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a20:	7dfb      	ldrb	r3, [r7, #23]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f832 	bl	8009a8c <USBD_Get_USB_Status>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a48:	78fa      	ldrb	r2, [r7, #3]
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7f9 ff67 	bl	8003920 <HAL_PCD_EP_GetRxCount>
 8009a52:	4603      	mov	r3, r0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a64:	4b03      	ldr	r3, [pc, #12]	; (8009a74 <USBD_static_malloc+0x18>)
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20001518 	.word	0x20001518

08009a78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]

}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	4603      	mov	r3, r0
 8009a94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	2b03      	cmp	r3, #3
 8009a9e:	d817      	bhi.n	8009ad0 <USBD_Get_USB_Status+0x44>
 8009aa0:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <USBD_Get_USB_Status+0x1c>)
 8009aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa6:	bf00      	nop
 8009aa8:	08009ab9 	.word	0x08009ab9
 8009aac:	08009abf 	.word	0x08009abf
 8009ab0:	08009ac5 	.word	0x08009ac5
 8009ab4:	08009acb 	.word	0x08009acb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	73fb      	strb	r3, [r7, #15]
    break;
 8009abc:	e00b      	b.n	8009ad6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac2:	e008      	b.n	8009ad6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac8:	e005      	b.n	8009ad6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009aca:	2303      	movs	r3, #3
 8009acc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ace:	e002      	b.n	8009ad6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad4:	bf00      	nop
  }
  return usb_status;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <__errno>:
 8009ae4:	4b01      	ldr	r3, [pc, #4]	; (8009aec <__errno+0x8>)
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	20000124 	.word	0x20000124

08009af0 <__libc_init_array>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	4d0d      	ldr	r5, [pc, #52]	; (8009b28 <__libc_init_array+0x38>)
 8009af4:	4c0d      	ldr	r4, [pc, #52]	; (8009b2c <__libc_init_array+0x3c>)
 8009af6:	1b64      	subs	r4, r4, r5
 8009af8:	10a4      	asrs	r4, r4, #2
 8009afa:	2600      	movs	r6, #0
 8009afc:	42a6      	cmp	r6, r4
 8009afe:	d109      	bne.n	8009b14 <__libc_init_array+0x24>
 8009b00:	4d0b      	ldr	r5, [pc, #44]	; (8009b30 <__libc_init_array+0x40>)
 8009b02:	4c0c      	ldr	r4, [pc, #48]	; (8009b34 <__libc_init_array+0x44>)
 8009b04:	f001 fdde 	bl	800b6c4 <_init>
 8009b08:	1b64      	subs	r4, r4, r5
 8009b0a:	10a4      	asrs	r4, r4, #2
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	42a6      	cmp	r6, r4
 8009b10:	d105      	bne.n	8009b1e <__libc_init_array+0x2e>
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b18:	4798      	blx	r3
 8009b1a:	3601      	adds	r6, #1
 8009b1c:	e7ee      	b.n	8009afc <__libc_init_array+0xc>
 8009b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b22:	4798      	blx	r3
 8009b24:	3601      	adds	r6, #1
 8009b26:	e7f2      	b.n	8009b0e <__libc_init_array+0x1e>
 8009b28:	0800b960 	.word	0x0800b960
 8009b2c:	0800b960 	.word	0x0800b960
 8009b30:	0800b960 	.word	0x0800b960
 8009b34:	0800b964 	.word	0x0800b964

08009b38 <memset>:
 8009b38:	4402      	add	r2, r0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d100      	bne.n	8009b42 <memset+0xa>
 8009b40:	4770      	bx	lr
 8009b42:	f803 1b01 	strb.w	r1, [r3], #1
 8009b46:	e7f9      	b.n	8009b3c <memset+0x4>

08009b48 <atan>:
 8009b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	ec55 4b10 	vmov	r4, r5, d0
 8009b50:	4bc3      	ldr	r3, [pc, #780]	; (8009e60 <atan+0x318>)
 8009b52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b56:	429e      	cmp	r6, r3
 8009b58:	46ab      	mov	fp, r5
 8009b5a:	dd18      	ble.n	8009b8e <atan+0x46>
 8009b5c:	4bc1      	ldr	r3, [pc, #772]	; (8009e64 <atan+0x31c>)
 8009b5e:	429e      	cmp	r6, r3
 8009b60:	dc01      	bgt.n	8009b66 <atan+0x1e>
 8009b62:	d109      	bne.n	8009b78 <atan+0x30>
 8009b64:	b144      	cbz	r4, 8009b78 <atan+0x30>
 8009b66:	4622      	mov	r2, r4
 8009b68:	462b      	mov	r3, r5
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7f6 fb43 	bl	80001f8 <__adddf3>
 8009b72:	4604      	mov	r4, r0
 8009b74:	460d      	mov	r5, r1
 8009b76:	e006      	b.n	8009b86 <atan+0x3e>
 8009b78:	f1bb 0f00 	cmp.w	fp, #0
 8009b7c:	f300 8131 	bgt.w	8009de2 <atan+0x29a>
 8009b80:	a59b      	add	r5, pc, #620	; (adr r5, 8009df0 <atan+0x2a8>)
 8009b82:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b86:	ec45 4b10 	vmov	d0, r4, r5
 8009b8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8e:	4bb6      	ldr	r3, [pc, #728]	; (8009e68 <atan+0x320>)
 8009b90:	429e      	cmp	r6, r3
 8009b92:	dc14      	bgt.n	8009bbe <atan+0x76>
 8009b94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009b98:	429e      	cmp	r6, r3
 8009b9a:	dc0d      	bgt.n	8009bb8 <atan+0x70>
 8009b9c:	a396      	add	r3, pc, #600	; (adr r3, 8009df8 <atan+0x2b0>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	ee10 0a10 	vmov	r0, s0
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f7f6 fb26 	bl	80001f8 <__adddf3>
 8009bac:	4baf      	ldr	r3, [pc, #700]	; (8009e6c <atan+0x324>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f7f6 ff68 	bl	8000a84 <__aeabi_dcmpgt>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d1e6      	bne.n	8009b86 <atan+0x3e>
 8009bb8:	f04f 3aff 	mov.w	sl, #4294967295
 8009bbc:	e02b      	b.n	8009c16 <atan+0xce>
 8009bbe:	f000 f9b7 	bl	8009f30 <fabs>
 8009bc2:	4bab      	ldr	r3, [pc, #684]	; (8009e70 <atan+0x328>)
 8009bc4:	429e      	cmp	r6, r3
 8009bc6:	ec55 4b10 	vmov	r4, r5, d0
 8009bca:	f300 80bf 	bgt.w	8009d4c <atan+0x204>
 8009bce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009bd2:	429e      	cmp	r6, r3
 8009bd4:	f300 80a0 	bgt.w	8009d18 <atan+0x1d0>
 8009bd8:	ee10 2a10 	vmov	r2, s0
 8009bdc:	ee10 0a10 	vmov	r0, s0
 8009be0:	462b      	mov	r3, r5
 8009be2:	4629      	mov	r1, r5
 8009be4:	f7f6 fb08 	bl	80001f8 <__adddf3>
 8009be8:	4ba0      	ldr	r3, [pc, #640]	; (8009e6c <atan+0x324>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	f7f6 fb02 	bl	80001f4 <__aeabi_dsub>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7f6 fafb 	bl	80001f8 <__adddf3>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	4630      	mov	r0, r6
 8009c08:	4639      	mov	r1, r7
 8009c0a:	f7f6 fdd5 	bl	80007b8 <__aeabi_ddiv>
 8009c0e:	f04f 0a00 	mov.w	sl, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	460d      	mov	r5, r1
 8009c16:	4622      	mov	r2, r4
 8009c18:	462b      	mov	r3, r5
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	f7f6 fca1 	bl	8000564 <__aeabi_dmul>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4680      	mov	r8, r0
 8009c28:	4689      	mov	r9, r1
 8009c2a:	f7f6 fc9b 	bl	8000564 <__aeabi_dmul>
 8009c2e:	a374      	add	r3, pc, #464	; (adr r3, 8009e00 <atan+0x2b8>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	4606      	mov	r6, r0
 8009c36:	460f      	mov	r7, r1
 8009c38:	f7f6 fc94 	bl	8000564 <__aeabi_dmul>
 8009c3c:	a372      	add	r3, pc, #456	; (adr r3, 8009e08 <atan+0x2c0>)
 8009c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c42:	f7f6 fad9 	bl	80001f8 <__adddf3>
 8009c46:	4632      	mov	r2, r6
 8009c48:	463b      	mov	r3, r7
 8009c4a:	f7f6 fc8b 	bl	8000564 <__aeabi_dmul>
 8009c4e:	a370      	add	r3, pc, #448	; (adr r3, 8009e10 <atan+0x2c8>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f7f6 fad0 	bl	80001f8 <__adddf3>
 8009c58:	4632      	mov	r2, r6
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	f7f6 fc82 	bl	8000564 <__aeabi_dmul>
 8009c60:	a36d      	add	r3, pc, #436	; (adr r3, 8009e18 <atan+0x2d0>)
 8009c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c66:	f7f6 fac7 	bl	80001f8 <__adddf3>
 8009c6a:	4632      	mov	r2, r6
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	f7f6 fc79 	bl	8000564 <__aeabi_dmul>
 8009c72:	a36b      	add	r3, pc, #428	; (adr r3, 8009e20 <atan+0x2d8>)
 8009c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c78:	f7f6 fabe 	bl	80001f8 <__adddf3>
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	463b      	mov	r3, r7
 8009c80:	f7f6 fc70 	bl	8000564 <__aeabi_dmul>
 8009c84:	a368      	add	r3, pc, #416	; (adr r3, 8009e28 <atan+0x2e0>)
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	f7f6 fab5 	bl	80001f8 <__adddf3>
 8009c8e:	4642      	mov	r2, r8
 8009c90:	464b      	mov	r3, r9
 8009c92:	f7f6 fc67 	bl	8000564 <__aeabi_dmul>
 8009c96:	a366      	add	r3, pc, #408	; (adr r3, 8009e30 <atan+0x2e8>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4689      	mov	r9, r1
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	f7f6 fc5e 	bl	8000564 <__aeabi_dmul>
 8009ca8:	a363      	add	r3, pc, #396	; (adr r3, 8009e38 <atan+0x2f0>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 faa1 	bl	80001f4 <__aeabi_dsub>
 8009cb2:	4632      	mov	r2, r6
 8009cb4:	463b      	mov	r3, r7
 8009cb6:	f7f6 fc55 	bl	8000564 <__aeabi_dmul>
 8009cba:	a361      	add	r3, pc, #388	; (adr r3, 8009e40 <atan+0x2f8>)
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f7f6 fa98 	bl	80001f4 <__aeabi_dsub>
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	f7f6 fc4c 	bl	8000564 <__aeabi_dmul>
 8009ccc:	a35e      	add	r3, pc, #376	; (adr r3, 8009e48 <atan+0x300>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fa8f 	bl	80001f4 <__aeabi_dsub>
 8009cd6:	4632      	mov	r2, r6
 8009cd8:	463b      	mov	r3, r7
 8009cda:	f7f6 fc43 	bl	8000564 <__aeabi_dmul>
 8009cde:	a35c      	add	r3, pc, #368	; (adr r3, 8009e50 <atan+0x308>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 fa86 	bl	80001f4 <__aeabi_dsub>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	f7f6 fc3a 	bl	8000564 <__aeabi_dmul>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	f7f6 fa7e 	bl	80001f8 <__adddf3>
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	462b      	mov	r3, r5
 8009d00:	f7f6 fc30 	bl	8000564 <__aeabi_dmul>
 8009d04:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	d14b      	bne.n	8009da6 <atan+0x25e>
 8009d0e:	4620      	mov	r0, r4
 8009d10:	4629      	mov	r1, r5
 8009d12:	f7f6 fa6f 	bl	80001f4 <__aeabi_dsub>
 8009d16:	e72c      	b.n	8009b72 <atan+0x2a>
 8009d18:	ee10 0a10 	vmov	r0, s0
 8009d1c:	4b53      	ldr	r3, [pc, #332]	; (8009e6c <atan+0x324>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	4629      	mov	r1, r5
 8009d22:	f7f6 fa67 	bl	80001f4 <__aeabi_dsub>
 8009d26:	4b51      	ldr	r3, [pc, #324]	; (8009e6c <atan+0x324>)
 8009d28:	4606      	mov	r6, r0
 8009d2a:	460f      	mov	r7, r1
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7f6 fa61 	bl	80001f8 <__adddf3>
 8009d36:	4602      	mov	r2, r0
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	f7f6 fd3b 	bl	80007b8 <__aeabi_ddiv>
 8009d42:	f04f 0a01 	mov.w	sl, #1
 8009d46:	4604      	mov	r4, r0
 8009d48:	460d      	mov	r5, r1
 8009d4a:	e764      	b.n	8009c16 <atan+0xce>
 8009d4c:	4b49      	ldr	r3, [pc, #292]	; (8009e74 <atan+0x32c>)
 8009d4e:	429e      	cmp	r6, r3
 8009d50:	da1d      	bge.n	8009d8e <atan+0x246>
 8009d52:	ee10 0a10 	vmov	r0, s0
 8009d56:	4b48      	ldr	r3, [pc, #288]	; (8009e78 <atan+0x330>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7f6 fa4a 	bl	80001f4 <__aeabi_dsub>
 8009d60:	4b45      	ldr	r3, [pc, #276]	; (8009e78 <atan+0x330>)
 8009d62:	4606      	mov	r6, r0
 8009d64:	460f      	mov	r7, r1
 8009d66:	2200      	movs	r2, #0
 8009d68:	4620      	mov	r0, r4
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	f7f6 fbfa 	bl	8000564 <__aeabi_dmul>
 8009d70:	4b3e      	ldr	r3, [pc, #248]	; (8009e6c <atan+0x324>)
 8009d72:	2200      	movs	r2, #0
 8009d74:	f7f6 fa40 	bl	80001f8 <__adddf3>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 fd1a 	bl	80007b8 <__aeabi_ddiv>
 8009d84:	f04f 0a02 	mov.w	sl, #2
 8009d88:	4604      	mov	r4, r0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	e743      	b.n	8009c16 <atan+0xce>
 8009d8e:	462b      	mov	r3, r5
 8009d90:	ee10 2a10 	vmov	r2, s0
 8009d94:	4939      	ldr	r1, [pc, #228]	; (8009e7c <atan+0x334>)
 8009d96:	2000      	movs	r0, #0
 8009d98:	f7f6 fd0e 	bl	80007b8 <__aeabi_ddiv>
 8009d9c:	f04f 0a03 	mov.w	sl, #3
 8009da0:	4604      	mov	r4, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	e737      	b.n	8009c16 <atan+0xce>
 8009da6:	4b36      	ldr	r3, [pc, #216]	; (8009e80 <atan+0x338>)
 8009da8:	4e36      	ldr	r6, [pc, #216]	; (8009e84 <atan+0x33c>)
 8009daa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009dae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009db2:	e9da 2300 	ldrd	r2, r3, [sl]
 8009db6:	f7f6 fa1d 	bl	80001f4 <__aeabi_dsub>
 8009dba:	4622      	mov	r2, r4
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	f7f6 fa19 	bl	80001f4 <__aeabi_dsub>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009dca:	f7f6 fa13 	bl	80001f4 <__aeabi_dsub>
 8009dce:	f1bb 0f00 	cmp.w	fp, #0
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	460d      	mov	r5, r1
 8009dd6:	f6bf aed6 	bge.w	8009b86 <atan+0x3e>
 8009dda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dde:	461d      	mov	r5, r3
 8009de0:	e6d1      	b.n	8009b86 <atan+0x3e>
 8009de2:	a51d      	add	r5, pc, #116	; (adr r5, 8009e58 <atan+0x310>)
 8009de4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009de8:	e6cd      	b.n	8009b86 <atan+0x3e>
 8009dea:	bf00      	nop
 8009dec:	f3af 8000 	nop.w
 8009df0:	54442d18 	.word	0x54442d18
 8009df4:	bff921fb 	.word	0xbff921fb
 8009df8:	8800759c 	.word	0x8800759c
 8009dfc:	7e37e43c 	.word	0x7e37e43c
 8009e00:	e322da11 	.word	0xe322da11
 8009e04:	3f90ad3a 	.word	0x3f90ad3a
 8009e08:	24760deb 	.word	0x24760deb
 8009e0c:	3fa97b4b 	.word	0x3fa97b4b
 8009e10:	a0d03d51 	.word	0xa0d03d51
 8009e14:	3fb10d66 	.word	0x3fb10d66
 8009e18:	c54c206e 	.word	0xc54c206e
 8009e1c:	3fb745cd 	.word	0x3fb745cd
 8009e20:	920083ff 	.word	0x920083ff
 8009e24:	3fc24924 	.word	0x3fc24924
 8009e28:	5555550d 	.word	0x5555550d
 8009e2c:	3fd55555 	.word	0x3fd55555
 8009e30:	2c6a6c2f 	.word	0x2c6a6c2f
 8009e34:	bfa2b444 	.word	0xbfa2b444
 8009e38:	52defd9a 	.word	0x52defd9a
 8009e3c:	3fadde2d 	.word	0x3fadde2d
 8009e40:	af749a6d 	.word	0xaf749a6d
 8009e44:	3fb3b0f2 	.word	0x3fb3b0f2
 8009e48:	fe231671 	.word	0xfe231671
 8009e4c:	3fbc71c6 	.word	0x3fbc71c6
 8009e50:	9998ebc4 	.word	0x9998ebc4
 8009e54:	3fc99999 	.word	0x3fc99999
 8009e58:	54442d18 	.word	0x54442d18
 8009e5c:	3ff921fb 	.word	0x3ff921fb
 8009e60:	440fffff 	.word	0x440fffff
 8009e64:	7ff00000 	.word	0x7ff00000
 8009e68:	3fdbffff 	.word	0x3fdbffff
 8009e6c:	3ff00000 	.word	0x3ff00000
 8009e70:	3ff2ffff 	.word	0x3ff2ffff
 8009e74:	40038000 	.word	0x40038000
 8009e78:	3ff80000 	.word	0x3ff80000
 8009e7c:	bff00000 	.word	0xbff00000
 8009e80:	0800b758 	.word	0x0800b758
 8009e84:	0800b738 	.word	0x0800b738

08009e88 <cos>:
 8009e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e8a:	ec53 2b10 	vmov	r2, r3, d0
 8009e8e:	4826      	ldr	r0, [pc, #152]	; (8009f28 <cos+0xa0>)
 8009e90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e94:	4281      	cmp	r1, r0
 8009e96:	dc06      	bgt.n	8009ea6 <cos+0x1e>
 8009e98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009f20 <cos+0x98>
 8009e9c:	b005      	add	sp, #20
 8009e9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ea2:	f000 be29 	b.w	800aaf8 <__kernel_cos>
 8009ea6:	4821      	ldr	r0, [pc, #132]	; (8009f2c <cos+0xa4>)
 8009ea8:	4281      	cmp	r1, r0
 8009eaa:	dd09      	ble.n	8009ec0 <cos+0x38>
 8009eac:	ee10 0a10 	vmov	r0, s0
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	f7f6 f99f 	bl	80001f4 <__aeabi_dsub>
 8009eb6:	ec41 0b10 	vmov	d0, r0, r1
 8009eba:	b005      	add	sp, #20
 8009ebc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ec0:	4668      	mov	r0, sp
 8009ec2:	f000 fb59 	bl	800a578 <__ieee754_rem_pio2>
 8009ec6:	f000 0003 	and.w	r0, r0, #3
 8009eca:	2801      	cmp	r0, #1
 8009ecc:	d00b      	beq.n	8009ee6 <cos+0x5e>
 8009ece:	2802      	cmp	r0, #2
 8009ed0:	d016      	beq.n	8009f00 <cos+0x78>
 8009ed2:	b9e0      	cbnz	r0, 8009f0e <cos+0x86>
 8009ed4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ed8:	ed9d 0b00 	vldr	d0, [sp]
 8009edc:	f000 fe0c 	bl	800aaf8 <__kernel_cos>
 8009ee0:	ec51 0b10 	vmov	r0, r1, d0
 8009ee4:	e7e7      	b.n	8009eb6 <cos+0x2e>
 8009ee6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009eea:	ed9d 0b00 	vldr	d0, [sp]
 8009eee:	f001 fa1b 	bl	800b328 <__kernel_sin>
 8009ef2:	ec53 2b10 	vmov	r2, r3, d0
 8009ef6:	ee10 0a10 	vmov	r0, s0
 8009efa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009efe:	e7da      	b.n	8009eb6 <cos+0x2e>
 8009f00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f04:	ed9d 0b00 	vldr	d0, [sp]
 8009f08:	f000 fdf6 	bl	800aaf8 <__kernel_cos>
 8009f0c:	e7f1      	b.n	8009ef2 <cos+0x6a>
 8009f0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f12:	ed9d 0b00 	vldr	d0, [sp]
 8009f16:	2001      	movs	r0, #1
 8009f18:	f001 fa06 	bl	800b328 <__kernel_sin>
 8009f1c:	e7e0      	b.n	8009ee0 <cos+0x58>
 8009f1e:	bf00      	nop
	...
 8009f28:	3fe921fb 	.word	0x3fe921fb
 8009f2c:	7fefffff 	.word	0x7fefffff

08009f30 <fabs>:
 8009f30:	ec51 0b10 	vmov	r0, r1, d0
 8009f34:	ee10 2a10 	vmov	r2, s0
 8009f38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f3c:	ec43 2b10 	vmov	d0, r2, r3
 8009f40:	4770      	bx	lr
 8009f42:	0000      	movs	r0, r0
 8009f44:	0000      	movs	r0, r0
	...

08009f48 <sin>:
 8009f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f4a:	ec53 2b10 	vmov	r2, r3, d0
 8009f4e:	4828      	ldr	r0, [pc, #160]	; (8009ff0 <sin+0xa8>)
 8009f50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f54:	4281      	cmp	r1, r0
 8009f56:	dc07      	bgt.n	8009f68 <sin+0x20>
 8009f58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009fe8 <sin+0xa0>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	b005      	add	sp, #20
 8009f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f64:	f001 b9e0 	b.w	800b328 <__kernel_sin>
 8009f68:	4822      	ldr	r0, [pc, #136]	; (8009ff4 <sin+0xac>)
 8009f6a:	4281      	cmp	r1, r0
 8009f6c:	dd09      	ble.n	8009f82 <sin+0x3a>
 8009f6e:	ee10 0a10 	vmov	r0, s0
 8009f72:	4619      	mov	r1, r3
 8009f74:	f7f6 f93e 	bl	80001f4 <__aeabi_dsub>
 8009f78:	ec41 0b10 	vmov	d0, r0, r1
 8009f7c:	b005      	add	sp, #20
 8009f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f82:	4668      	mov	r0, sp
 8009f84:	f000 faf8 	bl	800a578 <__ieee754_rem_pio2>
 8009f88:	f000 0003 	and.w	r0, r0, #3
 8009f8c:	2801      	cmp	r0, #1
 8009f8e:	d00c      	beq.n	8009faa <sin+0x62>
 8009f90:	2802      	cmp	r0, #2
 8009f92:	d011      	beq.n	8009fb8 <sin+0x70>
 8009f94:	b9f0      	cbnz	r0, 8009fd4 <sin+0x8c>
 8009f96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f9a:	ed9d 0b00 	vldr	d0, [sp]
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	f001 f9c2 	bl	800b328 <__kernel_sin>
 8009fa4:	ec51 0b10 	vmov	r0, r1, d0
 8009fa8:	e7e6      	b.n	8009f78 <sin+0x30>
 8009faa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fae:	ed9d 0b00 	vldr	d0, [sp]
 8009fb2:	f000 fda1 	bl	800aaf8 <__kernel_cos>
 8009fb6:	e7f5      	b.n	8009fa4 <sin+0x5c>
 8009fb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fbc:	ed9d 0b00 	vldr	d0, [sp]
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	f001 f9b1 	bl	800b328 <__kernel_sin>
 8009fc6:	ec53 2b10 	vmov	r2, r3, d0
 8009fca:	ee10 0a10 	vmov	r0, s0
 8009fce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009fd2:	e7d1      	b.n	8009f78 <sin+0x30>
 8009fd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fd8:	ed9d 0b00 	vldr	d0, [sp]
 8009fdc:	f000 fd8c 	bl	800aaf8 <__kernel_cos>
 8009fe0:	e7f1      	b.n	8009fc6 <sin+0x7e>
 8009fe2:	bf00      	nop
 8009fe4:	f3af 8000 	nop.w
	...
 8009ff0:	3fe921fb 	.word	0x3fe921fb
 8009ff4:	7fefffff 	.word	0x7fefffff

08009ff8 <acos>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	ed2d 8b02 	vpush	{d8}
 8009ffe:	ec55 4b10 	vmov	r4, r5, d0
 800a002:	f000 f859 	bl	800a0b8 <__ieee754_acos>
 800a006:	4622      	mov	r2, r4
 800a008:	462b      	mov	r3, r5
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	eeb0 8a40 	vmov.f32	s16, s0
 800a012:	eef0 8a60 	vmov.f32	s17, s1
 800a016:	f7f6 fd3f 	bl	8000a98 <__aeabi_dcmpun>
 800a01a:	b9a8      	cbnz	r0, 800a048 <acos+0x50>
 800a01c:	ec45 4b10 	vmov	d0, r4, r5
 800a020:	f7ff ff86 	bl	8009f30 <fabs>
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <acos+0x60>)
 800a026:	ec51 0b10 	vmov	r0, r1, d0
 800a02a:	2200      	movs	r2, #0
 800a02c:	f7f6 fd2a 	bl	8000a84 <__aeabi_dcmpgt>
 800a030:	b150      	cbz	r0, 800a048 <acos+0x50>
 800a032:	f7ff fd57 	bl	8009ae4 <__errno>
 800a036:	ecbd 8b02 	vpop	{d8}
 800a03a:	2321      	movs	r3, #33	; 0x21
 800a03c:	6003      	str	r3, [r0, #0]
 800a03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a042:	4806      	ldr	r0, [pc, #24]	; (800a05c <acos+0x64>)
 800a044:	f001 bab0 	b.w	800b5a8 <nan>
 800a048:	eeb0 0a48 	vmov.f32	s0, s16
 800a04c:	eef0 0a68 	vmov.f32	s1, s17
 800a050:	ecbd 8b02 	vpop	{d8}
 800a054:	bd38      	pop	{r3, r4, r5, pc}
 800a056:	bf00      	nop
 800a058:	3ff00000 	.word	0x3ff00000
 800a05c:	0800b778 	.word	0x0800b778

0800a060 <sqrt>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	ed2d 8b02 	vpush	{d8}
 800a066:	ec55 4b10 	vmov	r4, r5, d0
 800a06a:	f000 fc91 	bl	800a990 <__ieee754_sqrt>
 800a06e:	4622      	mov	r2, r4
 800a070:	462b      	mov	r3, r5
 800a072:	4620      	mov	r0, r4
 800a074:	4629      	mov	r1, r5
 800a076:	eeb0 8a40 	vmov.f32	s16, s0
 800a07a:	eef0 8a60 	vmov.f32	s17, s1
 800a07e:	f7f6 fd0b 	bl	8000a98 <__aeabi_dcmpun>
 800a082:	b990      	cbnz	r0, 800a0aa <sqrt+0x4a>
 800a084:	2200      	movs	r2, #0
 800a086:	2300      	movs	r3, #0
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 fcdc 	bl	8000a48 <__aeabi_dcmplt>
 800a090:	b158      	cbz	r0, 800a0aa <sqrt+0x4a>
 800a092:	f7ff fd27 	bl	8009ae4 <__errno>
 800a096:	2321      	movs	r3, #33	; 0x21
 800a098:	6003      	str	r3, [r0, #0]
 800a09a:	2200      	movs	r2, #0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4610      	mov	r0, r2
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	f7f6 fb89 	bl	80007b8 <__aeabi_ddiv>
 800a0a6:	ec41 0b18 	vmov	d8, r0, r1
 800a0aa:	eeb0 0a48 	vmov.f32	s0, s16
 800a0ae:	eef0 0a68 	vmov.f32	s1, s17
 800a0b2:	ecbd 8b02 	vpop	{d8}
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}

0800a0b8 <__ieee754_acos>:
 800a0b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	ec55 4b10 	vmov	r4, r5, d0
 800a0c0:	49b7      	ldr	r1, [pc, #732]	; (800a3a0 <__ieee754_acos+0x2e8>)
 800a0c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a0c6:	428b      	cmp	r3, r1
 800a0c8:	dd1b      	ble.n	800a102 <__ieee754_acos+0x4a>
 800a0ca:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a0ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a0d2:	4323      	orrs	r3, r4
 800a0d4:	d106      	bne.n	800a0e4 <__ieee754_acos+0x2c>
 800a0d6:	2d00      	cmp	r5, #0
 800a0d8:	f300 8211 	bgt.w	800a4fe <__ieee754_acos+0x446>
 800a0dc:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800a338 <__ieee754_acos+0x280>
 800a0e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e4:	ee10 2a10 	vmov	r2, s0
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	ee10 0a10 	vmov	r0, s0
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f7f6 f880 	bl	80001f4 <__aeabi_dsub>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	f7f6 fb5e 	bl	80007b8 <__aeabi_ddiv>
 800a0fc:	ec41 0b10 	vmov	d0, r0, r1
 800a100:	e7ee      	b.n	800a0e0 <__ieee754_acos+0x28>
 800a102:	49a8      	ldr	r1, [pc, #672]	; (800a3a4 <__ieee754_acos+0x2ec>)
 800a104:	428b      	cmp	r3, r1
 800a106:	f300 8087 	bgt.w	800a218 <__ieee754_acos+0x160>
 800a10a:	4aa7      	ldr	r2, [pc, #668]	; (800a3a8 <__ieee754_acos+0x2f0>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	f340 81f9 	ble.w	800a504 <__ieee754_acos+0x44c>
 800a112:	ee10 2a10 	vmov	r2, s0
 800a116:	ee10 0a10 	vmov	r0, s0
 800a11a:	462b      	mov	r3, r5
 800a11c:	4629      	mov	r1, r5
 800a11e:	f7f6 fa21 	bl	8000564 <__aeabi_dmul>
 800a122:	a387      	add	r3, pc, #540	; (adr r3, 800a340 <__ieee754_acos+0x288>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	4606      	mov	r6, r0
 800a12a:	460f      	mov	r7, r1
 800a12c:	f7f6 fa1a 	bl	8000564 <__aeabi_dmul>
 800a130:	a385      	add	r3, pc, #532	; (adr r3, 800a348 <__ieee754_acos+0x290>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 f85f 	bl	80001f8 <__adddf3>
 800a13a:	4632      	mov	r2, r6
 800a13c:	463b      	mov	r3, r7
 800a13e:	f7f6 fa11 	bl	8000564 <__aeabi_dmul>
 800a142:	a383      	add	r3, pc, #524	; (adr r3, 800a350 <__ieee754_acos+0x298>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	f7f6 f854 	bl	80001f4 <__aeabi_dsub>
 800a14c:	4632      	mov	r2, r6
 800a14e:	463b      	mov	r3, r7
 800a150:	f7f6 fa08 	bl	8000564 <__aeabi_dmul>
 800a154:	a380      	add	r3, pc, #512	; (adr r3, 800a358 <__ieee754_acos+0x2a0>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	f7f6 f84d 	bl	80001f8 <__adddf3>
 800a15e:	4632      	mov	r2, r6
 800a160:	463b      	mov	r3, r7
 800a162:	f7f6 f9ff 	bl	8000564 <__aeabi_dmul>
 800a166:	a37e      	add	r3, pc, #504	; (adr r3, 800a360 <__ieee754_acos+0x2a8>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f7f6 f842 	bl	80001f4 <__aeabi_dsub>
 800a170:	4632      	mov	r2, r6
 800a172:	463b      	mov	r3, r7
 800a174:	f7f6 f9f6 	bl	8000564 <__aeabi_dmul>
 800a178:	a37b      	add	r3, pc, #492	; (adr r3, 800a368 <__ieee754_acos+0x2b0>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 f83b 	bl	80001f8 <__adddf3>
 800a182:	4632      	mov	r2, r6
 800a184:	463b      	mov	r3, r7
 800a186:	f7f6 f9ed 	bl	8000564 <__aeabi_dmul>
 800a18a:	a379      	add	r3, pc, #484	; (adr r3, 800a370 <__ieee754_acos+0x2b8>)
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	4680      	mov	r8, r0
 800a192:	4689      	mov	r9, r1
 800a194:	4630      	mov	r0, r6
 800a196:	4639      	mov	r1, r7
 800a198:	f7f6 f9e4 	bl	8000564 <__aeabi_dmul>
 800a19c:	a376      	add	r3, pc, #472	; (adr r3, 800a378 <__ieee754_acos+0x2c0>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f7f6 f827 	bl	80001f4 <__aeabi_dsub>
 800a1a6:	4632      	mov	r2, r6
 800a1a8:	463b      	mov	r3, r7
 800a1aa:	f7f6 f9db 	bl	8000564 <__aeabi_dmul>
 800a1ae:	a374      	add	r3, pc, #464	; (adr r3, 800a380 <__ieee754_acos+0x2c8>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f7f6 f820 	bl	80001f8 <__adddf3>
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	463b      	mov	r3, r7
 800a1bc:	f7f6 f9d2 	bl	8000564 <__aeabi_dmul>
 800a1c0:	a371      	add	r3, pc, #452	; (adr r3, 800a388 <__ieee754_acos+0x2d0>)
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	f7f6 f815 	bl	80001f4 <__aeabi_dsub>
 800a1ca:	4632      	mov	r2, r6
 800a1cc:	463b      	mov	r3, r7
 800a1ce:	f7f6 f9c9 	bl	8000564 <__aeabi_dmul>
 800a1d2:	4b76      	ldr	r3, [pc, #472]	; (800a3ac <__ieee754_acos+0x2f4>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f7f6 f80f 	bl	80001f8 <__adddf3>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4640      	mov	r0, r8
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	f7f6 fae9 	bl	80007b8 <__aeabi_ddiv>
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	f7f6 f9bb 	bl	8000564 <__aeabi_dmul>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	a167      	add	r1, pc, #412	; (adr r1, 800a390 <__ieee754_acos+0x2d8>)
 800a1f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f8:	f7f5 fffc 	bl	80001f4 <__aeabi_dsub>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4620      	mov	r0, r4
 800a202:	4629      	mov	r1, r5
 800a204:	f7f5 fff6 	bl	80001f4 <__aeabi_dsub>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	a162      	add	r1, pc, #392	; (adr r1, 800a398 <__ieee754_acos+0x2e0>)
 800a20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a212:	f7f5 ffef 	bl	80001f4 <__aeabi_dsub>
 800a216:	e771      	b.n	800a0fc <__ieee754_acos+0x44>
 800a218:	2d00      	cmp	r5, #0
 800a21a:	f280 80cb 	bge.w	800a3b4 <__ieee754_acos+0x2fc>
 800a21e:	ee10 0a10 	vmov	r0, s0
 800a222:	4b62      	ldr	r3, [pc, #392]	; (800a3ac <__ieee754_acos+0x2f4>)
 800a224:	2200      	movs	r2, #0
 800a226:	4629      	mov	r1, r5
 800a228:	f7f5 ffe6 	bl	80001f8 <__adddf3>
 800a22c:	4b60      	ldr	r3, [pc, #384]	; (800a3b0 <__ieee754_acos+0x2f8>)
 800a22e:	2200      	movs	r2, #0
 800a230:	f7f6 f998 	bl	8000564 <__aeabi_dmul>
 800a234:	a342      	add	r3, pc, #264	; (adr r3, 800a340 <__ieee754_acos+0x288>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	4604      	mov	r4, r0
 800a23c:	460d      	mov	r5, r1
 800a23e:	f7f6 f991 	bl	8000564 <__aeabi_dmul>
 800a242:	a341      	add	r3, pc, #260	; (adr r3, 800a348 <__ieee754_acos+0x290>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f7f5 ffd6 	bl	80001f8 <__adddf3>
 800a24c:	4622      	mov	r2, r4
 800a24e:	462b      	mov	r3, r5
 800a250:	f7f6 f988 	bl	8000564 <__aeabi_dmul>
 800a254:	a33e      	add	r3, pc, #248	; (adr r3, 800a350 <__ieee754_acos+0x298>)
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	f7f5 ffcb 	bl	80001f4 <__aeabi_dsub>
 800a25e:	4622      	mov	r2, r4
 800a260:	462b      	mov	r3, r5
 800a262:	f7f6 f97f 	bl	8000564 <__aeabi_dmul>
 800a266:	a33c      	add	r3, pc, #240	; (adr r3, 800a358 <__ieee754_acos+0x2a0>)
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	f7f5 ffc4 	bl	80001f8 <__adddf3>
 800a270:	4622      	mov	r2, r4
 800a272:	462b      	mov	r3, r5
 800a274:	f7f6 f976 	bl	8000564 <__aeabi_dmul>
 800a278:	a339      	add	r3, pc, #228	; (adr r3, 800a360 <__ieee754_acos+0x2a8>)
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f7f5 ffb9 	bl	80001f4 <__aeabi_dsub>
 800a282:	4622      	mov	r2, r4
 800a284:	462b      	mov	r3, r5
 800a286:	f7f6 f96d 	bl	8000564 <__aeabi_dmul>
 800a28a:	a337      	add	r3, pc, #220	; (adr r3, 800a368 <__ieee754_acos+0x2b0>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f7f5 ffb2 	bl	80001f8 <__adddf3>
 800a294:	4622      	mov	r2, r4
 800a296:	462b      	mov	r3, r5
 800a298:	f7f6 f964 	bl	8000564 <__aeabi_dmul>
 800a29c:	ec45 4b10 	vmov	d0, r4, r5
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	4689      	mov	r9, r1
 800a2a4:	f000 fb74 	bl	800a990 <__ieee754_sqrt>
 800a2a8:	a331      	add	r3, pc, #196	; (adr r3, 800a370 <__ieee754_acos+0x2b8>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	ec57 6b10 	vmov	r6, r7, d0
 800a2b6:	f7f6 f955 	bl	8000564 <__aeabi_dmul>
 800a2ba:	a32f      	add	r3, pc, #188	; (adr r3, 800a378 <__ieee754_acos+0x2c0>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7f5 ff98 	bl	80001f4 <__aeabi_dsub>
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	f7f6 f94c 	bl	8000564 <__aeabi_dmul>
 800a2cc:	a32c      	add	r3, pc, #176	; (adr r3, 800a380 <__ieee754_acos+0x2c8>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7f5 ff91 	bl	80001f8 <__adddf3>
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	462b      	mov	r3, r5
 800a2da:	f7f6 f943 	bl	8000564 <__aeabi_dmul>
 800a2de:	a32a      	add	r3, pc, #168	; (adr r3, 800a388 <__ieee754_acos+0x2d0>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f5 ff86 	bl	80001f4 <__aeabi_dsub>
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	f7f6 f93a 	bl	8000564 <__aeabi_dmul>
 800a2f0:	4b2e      	ldr	r3, [pc, #184]	; (800a3ac <__ieee754_acos+0x2f4>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f7f5 ff80 	bl	80001f8 <__adddf3>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	4649      	mov	r1, r9
 800a300:	f7f6 fa5a 	bl	80007b8 <__aeabi_ddiv>
 800a304:	4632      	mov	r2, r6
 800a306:	463b      	mov	r3, r7
 800a308:	f7f6 f92c 	bl	8000564 <__aeabi_dmul>
 800a30c:	a320      	add	r3, pc, #128	; (adr r3, 800a390 <__ieee754_acos+0x2d8>)
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f7f5 ff6f 	bl	80001f4 <__aeabi_dsub>
 800a316:	4632      	mov	r2, r6
 800a318:	463b      	mov	r3, r7
 800a31a:	f7f5 ff6d 	bl	80001f8 <__adddf3>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	f7f5 ff69 	bl	80001f8 <__adddf3>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	a103      	add	r1, pc, #12	; (adr r1, 800a338 <__ieee754_acos+0x280>)
 800a32c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a330:	e76f      	b.n	800a212 <__ieee754_acos+0x15a>
 800a332:	bf00      	nop
 800a334:	f3af 8000 	nop.w
 800a338:	54442d18 	.word	0x54442d18
 800a33c:	400921fb 	.word	0x400921fb
 800a340:	0dfdf709 	.word	0x0dfdf709
 800a344:	3f023de1 	.word	0x3f023de1
 800a348:	7501b288 	.word	0x7501b288
 800a34c:	3f49efe0 	.word	0x3f49efe0
 800a350:	b5688f3b 	.word	0xb5688f3b
 800a354:	3fa48228 	.word	0x3fa48228
 800a358:	0e884455 	.word	0x0e884455
 800a35c:	3fc9c155 	.word	0x3fc9c155
 800a360:	03eb6f7d 	.word	0x03eb6f7d
 800a364:	3fd4d612 	.word	0x3fd4d612
 800a368:	55555555 	.word	0x55555555
 800a36c:	3fc55555 	.word	0x3fc55555
 800a370:	b12e9282 	.word	0xb12e9282
 800a374:	3fb3b8c5 	.word	0x3fb3b8c5
 800a378:	1b8d0159 	.word	0x1b8d0159
 800a37c:	3fe6066c 	.word	0x3fe6066c
 800a380:	9c598ac8 	.word	0x9c598ac8
 800a384:	40002ae5 	.word	0x40002ae5
 800a388:	1c8a2d4b 	.word	0x1c8a2d4b
 800a38c:	40033a27 	.word	0x40033a27
 800a390:	33145c07 	.word	0x33145c07
 800a394:	3c91a626 	.word	0x3c91a626
 800a398:	54442d18 	.word	0x54442d18
 800a39c:	3ff921fb 	.word	0x3ff921fb
 800a3a0:	3fefffff 	.word	0x3fefffff
 800a3a4:	3fdfffff 	.word	0x3fdfffff
 800a3a8:	3c600000 	.word	0x3c600000
 800a3ac:	3ff00000 	.word	0x3ff00000
 800a3b0:	3fe00000 	.word	0x3fe00000
 800a3b4:	ee10 2a10 	vmov	r2, s0
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	496d      	ldr	r1, [pc, #436]	; (800a570 <__ieee754_acos+0x4b8>)
 800a3bc:	2000      	movs	r0, #0
 800a3be:	f7f5 ff19 	bl	80001f4 <__aeabi_dsub>
 800a3c2:	4b6c      	ldr	r3, [pc, #432]	; (800a574 <__ieee754_acos+0x4bc>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f7f6 f8cd 	bl	8000564 <__aeabi_dmul>
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	ec45 4b10 	vmov	d0, r4, r5
 800a3d2:	f000 fadd 	bl	800a990 <__ieee754_sqrt>
 800a3d6:	a34e      	add	r3, pc, #312	; (adr r3, 800a510 <__ieee754_acos+0x458>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	4620      	mov	r0, r4
 800a3de:	4629      	mov	r1, r5
 800a3e0:	ec59 8b10 	vmov	r8, r9, d0
 800a3e4:	f7f6 f8be 	bl	8000564 <__aeabi_dmul>
 800a3e8:	a34b      	add	r3, pc, #300	; (adr r3, 800a518 <__ieee754_acos+0x460>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f7f5 ff03 	bl	80001f8 <__adddf3>
 800a3f2:	4622      	mov	r2, r4
 800a3f4:	462b      	mov	r3, r5
 800a3f6:	f7f6 f8b5 	bl	8000564 <__aeabi_dmul>
 800a3fa:	a349      	add	r3, pc, #292	; (adr r3, 800a520 <__ieee754_acos+0x468>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f5 fef8 	bl	80001f4 <__aeabi_dsub>
 800a404:	4622      	mov	r2, r4
 800a406:	462b      	mov	r3, r5
 800a408:	f7f6 f8ac 	bl	8000564 <__aeabi_dmul>
 800a40c:	a346      	add	r3, pc, #280	; (adr r3, 800a528 <__ieee754_acos+0x470>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f5 fef1 	bl	80001f8 <__adddf3>
 800a416:	4622      	mov	r2, r4
 800a418:	462b      	mov	r3, r5
 800a41a:	f7f6 f8a3 	bl	8000564 <__aeabi_dmul>
 800a41e:	a344      	add	r3, pc, #272	; (adr r3, 800a530 <__ieee754_acos+0x478>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f7f5 fee6 	bl	80001f4 <__aeabi_dsub>
 800a428:	4622      	mov	r2, r4
 800a42a:	462b      	mov	r3, r5
 800a42c:	f7f6 f89a 	bl	8000564 <__aeabi_dmul>
 800a430:	a341      	add	r3, pc, #260	; (adr r3, 800a538 <__ieee754_acos+0x480>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	f7f5 fedf 	bl	80001f8 <__adddf3>
 800a43a:	4622      	mov	r2, r4
 800a43c:	462b      	mov	r3, r5
 800a43e:	f7f6 f891 	bl	8000564 <__aeabi_dmul>
 800a442:	a33f      	add	r3, pc, #252	; (adr r3, 800a540 <__ieee754_acos+0x488>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	4682      	mov	sl, r0
 800a44a:	468b      	mov	fp, r1
 800a44c:	4620      	mov	r0, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f6 f888 	bl	8000564 <__aeabi_dmul>
 800a454:	a33c      	add	r3, pc, #240	; (adr r3, 800a548 <__ieee754_acos+0x490>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	f7f5 fecb 	bl	80001f4 <__aeabi_dsub>
 800a45e:	4622      	mov	r2, r4
 800a460:	462b      	mov	r3, r5
 800a462:	f7f6 f87f 	bl	8000564 <__aeabi_dmul>
 800a466:	a33a      	add	r3, pc, #232	; (adr r3, 800a550 <__ieee754_acos+0x498>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f7f5 fec4 	bl	80001f8 <__adddf3>
 800a470:	4622      	mov	r2, r4
 800a472:	462b      	mov	r3, r5
 800a474:	f7f6 f876 	bl	8000564 <__aeabi_dmul>
 800a478:	a337      	add	r3, pc, #220	; (adr r3, 800a558 <__ieee754_acos+0x4a0>)
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f7f5 feb9 	bl	80001f4 <__aeabi_dsub>
 800a482:	4622      	mov	r2, r4
 800a484:	462b      	mov	r3, r5
 800a486:	f7f6 f86d 	bl	8000564 <__aeabi_dmul>
 800a48a:	4b39      	ldr	r3, [pc, #228]	; (800a570 <__ieee754_acos+0x4b8>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	f7f5 feb3 	bl	80001f8 <__adddf3>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4650      	mov	r0, sl
 800a498:	4659      	mov	r1, fp
 800a49a:	f7f6 f98d 	bl	80007b8 <__aeabi_ddiv>
 800a49e:	4642      	mov	r2, r8
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	f7f6 f85f 	bl	8000564 <__aeabi_dmul>
 800a4a6:	2600      	movs	r6, #0
 800a4a8:	4682      	mov	sl, r0
 800a4aa:	468b      	mov	fp, r1
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	f7f6 f856 	bl	8000564 <__aeabi_dmul>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f7f5 fe98 	bl	80001f4 <__aeabi_dsub>
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	464b      	mov	r3, r9
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	4649      	mov	r1, r9
 800a4d0:	f7f5 fe92 	bl	80001f8 <__adddf3>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f7f6 f96c 	bl	80007b8 <__aeabi_ddiv>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	4659      	mov	r1, fp
 800a4e8:	f7f5 fe86 	bl	80001f8 <__adddf3>
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	464b      	mov	r3, r9
 800a4f0:	f7f5 fe82 	bl	80001f8 <__adddf3>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	f7f5 fe7e 	bl	80001f8 <__adddf3>
 800a4fc:	e5fe      	b.n	800a0fc <__ieee754_acos+0x44>
 800a4fe:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a560 <__ieee754_acos+0x4a8>
 800a502:	e5ed      	b.n	800a0e0 <__ieee754_acos+0x28>
 800a504:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a568 <__ieee754_acos+0x4b0>
 800a508:	e5ea      	b.n	800a0e0 <__ieee754_acos+0x28>
 800a50a:	bf00      	nop
 800a50c:	f3af 8000 	nop.w
 800a510:	0dfdf709 	.word	0x0dfdf709
 800a514:	3f023de1 	.word	0x3f023de1
 800a518:	7501b288 	.word	0x7501b288
 800a51c:	3f49efe0 	.word	0x3f49efe0
 800a520:	b5688f3b 	.word	0xb5688f3b
 800a524:	3fa48228 	.word	0x3fa48228
 800a528:	0e884455 	.word	0x0e884455
 800a52c:	3fc9c155 	.word	0x3fc9c155
 800a530:	03eb6f7d 	.word	0x03eb6f7d
 800a534:	3fd4d612 	.word	0x3fd4d612
 800a538:	55555555 	.word	0x55555555
 800a53c:	3fc55555 	.word	0x3fc55555
 800a540:	b12e9282 	.word	0xb12e9282
 800a544:	3fb3b8c5 	.word	0x3fb3b8c5
 800a548:	1b8d0159 	.word	0x1b8d0159
 800a54c:	3fe6066c 	.word	0x3fe6066c
 800a550:	9c598ac8 	.word	0x9c598ac8
 800a554:	40002ae5 	.word	0x40002ae5
 800a558:	1c8a2d4b 	.word	0x1c8a2d4b
 800a55c:	40033a27 	.word	0x40033a27
	...
 800a568:	54442d18 	.word	0x54442d18
 800a56c:	3ff921fb 	.word	0x3ff921fb
 800a570:	3ff00000 	.word	0x3ff00000
 800a574:	3fe00000 	.word	0x3fe00000

0800a578 <__ieee754_rem_pio2>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	ed2d 8b02 	vpush	{d8}
 800a580:	ec55 4b10 	vmov	r4, r5, d0
 800a584:	4bca      	ldr	r3, [pc, #808]	; (800a8b0 <__ieee754_rem_pio2+0x338>)
 800a586:	b08b      	sub	sp, #44	; 0x2c
 800a588:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a58c:	4598      	cmp	r8, r3
 800a58e:	4682      	mov	sl, r0
 800a590:	9502      	str	r5, [sp, #8]
 800a592:	dc08      	bgt.n	800a5a6 <__ieee754_rem_pio2+0x2e>
 800a594:	2200      	movs	r2, #0
 800a596:	2300      	movs	r3, #0
 800a598:	ed80 0b00 	vstr	d0, [r0]
 800a59c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a5a0:	f04f 0b00 	mov.w	fp, #0
 800a5a4:	e028      	b.n	800a5f8 <__ieee754_rem_pio2+0x80>
 800a5a6:	4bc3      	ldr	r3, [pc, #780]	; (800a8b4 <__ieee754_rem_pio2+0x33c>)
 800a5a8:	4598      	cmp	r8, r3
 800a5aa:	dc78      	bgt.n	800a69e <__ieee754_rem_pio2+0x126>
 800a5ac:	9b02      	ldr	r3, [sp, #8]
 800a5ae:	4ec2      	ldr	r6, [pc, #776]	; (800a8b8 <__ieee754_rem_pio2+0x340>)
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	ee10 0a10 	vmov	r0, s0
 800a5b6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a878 <__ieee754_rem_pio2+0x300>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	4629      	mov	r1, r5
 800a5be:	dd39      	ble.n	800a634 <__ieee754_rem_pio2+0xbc>
 800a5c0:	f7f5 fe18 	bl	80001f4 <__aeabi_dsub>
 800a5c4:	45b0      	cmp	r8, r6
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	460d      	mov	r5, r1
 800a5ca:	d01b      	beq.n	800a604 <__ieee754_rem_pio2+0x8c>
 800a5cc:	a3ac      	add	r3, pc, #688	; (adr r3, 800a880 <__ieee754_rem_pio2+0x308>)
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	f7f5 fe0f 	bl	80001f4 <__aeabi_dsub>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	e9ca 2300 	strd	r2, r3, [sl]
 800a5de:	4620      	mov	r0, r4
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	f7f5 fe07 	bl	80001f4 <__aeabi_dsub>
 800a5e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a880 <__ieee754_rem_pio2+0x308>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f7f5 fe02 	bl	80001f4 <__aeabi_dsub>
 800a5f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5f4:	f04f 0b01 	mov.w	fp, #1
 800a5f8:	4658      	mov	r0, fp
 800a5fa:	b00b      	add	sp, #44	; 0x2c
 800a5fc:	ecbd 8b02 	vpop	{d8}
 800a600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a604:	a3a0      	add	r3, pc, #640	; (adr r3, 800a888 <__ieee754_rem_pio2+0x310>)
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	f7f5 fdf3 	bl	80001f4 <__aeabi_dsub>
 800a60e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a890 <__ieee754_rem_pio2+0x318>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	4604      	mov	r4, r0
 800a616:	460d      	mov	r5, r1
 800a618:	f7f5 fdec 	bl	80001f4 <__aeabi_dsub>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	e9ca 2300 	strd	r2, r3, [sl]
 800a624:	4620      	mov	r0, r4
 800a626:	4629      	mov	r1, r5
 800a628:	f7f5 fde4 	bl	80001f4 <__aeabi_dsub>
 800a62c:	a398      	add	r3, pc, #608	; (adr r3, 800a890 <__ieee754_rem_pio2+0x318>)
 800a62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a632:	e7db      	b.n	800a5ec <__ieee754_rem_pio2+0x74>
 800a634:	f7f5 fde0 	bl	80001f8 <__adddf3>
 800a638:	45b0      	cmp	r8, r6
 800a63a:	4604      	mov	r4, r0
 800a63c:	460d      	mov	r5, r1
 800a63e:	d016      	beq.n	800a66e <__ieee754_rem_pio2+0xf6>
 800a640:	a38f      	add	r3, pc, #572	; (adr r3, 800a880 <__ieee754_rem_pio2+0x308>)
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f7f5 fdd7 	bl	80001f8 <__adddf3>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	e9ca 2300 	strd	r2, r3, [sl]
 800a652:	4620      	mov	r0, r4
 800a654:	4629      	mov	r1, r5
 800a656:	f7f5 fdcd 	bl	80001f4 <__aeabi_dsub>
 800a65a:	a389      	add	r3, pc, #548	; (adr r3, 800a880 <__ieee754_rem_pio2+0x308>)
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	f7f5 fdca 	bl	80001f8 <__adddf3>
 800a664:	f04f 3bff 	mov.w	fp, #4294967295
 800a668:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a66c:	e7c4      	b.n	800a5f8 <__ieee754_rem_pio2+0x80>
 800a66e:	a386      	add	r3, pc, #536	; (adr r3, 800a888 <__ieee754_rem_pio2+0x310>)
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	f7f5 fdc0 	bl	80001f8 <__adddf3>
 800a678:	a385      	add	r3, pc, #532	; (adr r3, 800a890 <__ieee754_rem_pio2+0x318>)
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	4604      	mov	r4, r0
 800a680:	460d      	mov	r5, r1
 800a682:	f7f5 fdb9 	bl	80001f8 <__adddf3>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	e9ca 2300 	strd	r2, r3, [sl]
 800a68e:	4620      	mov	r0, r4
 800a690:	4629      	mov	r1, r5
 800a692:	f7f5 fdaf 	bl	80001f4 <__aeabi_dsub>
 800a696:	a37e      	add	r3, pc, #504	; (adr r3, 800a890 <__ieee754_rem_pio2+0x318>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	e7e0      	b.n	800a660 <__ieee754_rem_pio2+0xe8>
 800a69e:	4b87      	ldr	r3, [pc, #540]	; (800a8bc <__ieee754_rem_pio2+0x344>)
 800a6a0:	4598      	cmp	r8, r3
 800a6a2:	f300 80d9 	bgt.w	800a858 <__ieee754_rem_pio2+0x2e0>
 800a6a6:	f7ff fc43 	bl	8009f30 <fabs>
 800a6aa:	ec55 4b10 	vmov	r4, r5, d0
 800a6ae:	ee10 0a10 	vmov	r0, s0
 800a6b2:	a379      	add	r3, pc, #484	; (adr r3, 800a898 <__ieee754_rem_pio2+0x320>)
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	f7f5 ff53 	bl	8000564 <__aeabi_dmul>
 800a6be:	4b80      	ldr	r3, [pc, #512]	; (800a8c0 <__ieee754_rem_pio2+0x348>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f7f5 fd99 	bl	80001f8 <__adddf3>
 800a6c6:	f7f6 f9fd 	bl	8000ac4 <__aeabi_d2iz>
 800a6ca:	4683      	mov	fp, r0
 800a6cc:	f7f5 fee0 	bl	8000490 <__aeabi_i2d>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	ec43 2b18 	vmov	d8, r2, r3
 800a6d8:	a367      	add	r3, pc, #412	; (adr r3, 800a878 <__ieee754_rem_pio2+0x300>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f5 ff41 	bl	8000564 <__aeabi_dmul>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	f7f5 fd83 	bl	80001f4 <__aeabi_dsub>
 800a6ee:	a364      	add	r3, pc, #400	; (adr r3, 800a880 <__ieee754_rem_pio2+0x308>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	4606      	mov	r6, r0
 800a6f6:	460f      	mov	r7, r1
 800a6f8:	ec51 0b18 	vmov	r0, r1, d8
 800a6fc:	f7f5 ff32 	bl	8000564 <__aeabi_dmul>
 800a700:	f1bb 0f1f 	cmp.w	fp, #31
 800a704:	4604      	mov	r4, r0
 800a706:	460d      	mov	r5, r1
 800a708:	dc0d      	bgt.n	800a726 <__ieee754_rem_pio2+0x1ae>
 800a70a:	4b6e      	ldr	r3, [pc, #440]	; (800a8c4 <__ieee754_rem_pio2+0x34c>)
 800a70c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a714:	4543      	cmp	r3, r8
 800a716:	d006      	beq.n	800a726 <__ieee754_rem_pio2+0x1ae>
 800a718:	4622      	mov	r2, r4
 800a71a:	462b      	mov	r3, r5
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f5 fd68 	bl	80001f4 <__aeabi_dsub>
 800a724:	e00f      	b.n	800a746 <__ieee754_rem_pio2+0x1ce>
 800a726:	462b      	mov	r3, r5
 800a728:	4622      	mov	r2, r4
 800a72a:	4630      	mov	r0, r6
 800a72c:	4639      	mov	r1, r7
 800a72e:	f7f5 fd61 	bl	80001f4 <__aeabi_dsub>
 800a732:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a736:	9303      	str	r3, [sp, #12]
 800a738:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a73c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a740:	f1b8 0f10 	cmp.w	r8, #16
 800a744:	dc02      	bgt.n	800a74c <__ieee754_rem_pio2+0x1d4>
 800a746:	e9ca 0100 	strd	r0, r1, [sl]
 800a74a:	e039      	b.n	800a7c0 <__ieee754_rem_pio2+0x248>
 800a74c:	a34e      	add	r3, pc, #312	; (adr r3, 800a888 <__ieee754_rem_pio2+0x310>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	ec51 0b18 	vmov	r0, r1, d8
 800a756:	f7f5 ff05 	bl	8000564 <__aeabi_dmul>
 800a75a:	4604      	mov	r4, r0
 800a75c:	460d      	mov	r5, r1
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4630      	mov	r0, r6
 800a764:	4639      	mov	r1, r7
 800a766:	f7f5 fd45 	bl	80001f4 <__aeabi_dsub>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4680      	mov	r8, r0
 800a770:	4689      	mov	r9, r1
 800a772:	4630      	mov	r0, r6
 800a774:	4639      	mov	r1, r7
 800a776:	f7f5 fd3d 	bl	80001f4 <__aeabi_dsub>
 800a77a:	4622      	mov	r2, r4
 800a77c:	462b      	mov	r3, r5
 800a77e:	f7f5 fd39 	bl	80001f4 <__aeabi_dsub>
 800a782:	a343      	add	r3, pc, #268	; (adr r3, 800a890 <__ieee754_rem_pio2+0x318>)
 800a784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a788:	4604      	mov	r4, r0
 800a78a:	460d      	mov	r5, r1
 800a78c:	ec51 0b18 	vmov	r0, r1, d8
 800a790:	f7f5 fee8 	bl	8000564 <__aeabi_dmul>
 800a794:	4622      	mov	r2, r4
 800a796:	462b      	mov	r3, r5
 800a798:	f7f5 fd2c 	bl	80001f4 <__aeabi_dsub>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4604      	mov	r4, r0
 800a7a2:	460d      	mov	r5, r1
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	f7f5 fd24 	bl	80001f4 <__aeabi_dsub>
 800a7ac:	9a03      	ldr	r2, [sp, #12]
 800a7ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7b2:	1ad3      	subs	r3, r2, r3
 800a7b4:	2b31      	cmp	r3, #49	; 0x31
 800a7b6:	dc24      	bgt.n	800a802 <__ieee754_rem_pio2+0x28a>
 800a7b8:	e9ca 0100 	strd	r0, r1, [sl]
 800a7bc:	4646      	mov	r6, r8
 800a7be:	464f      	mov	r7, r9
 800a7c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	4642      	mov	r2, r8
 800a7c8:	464b      	mov	r3, r9
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f7f5 fd12 	bl	80001f4 <__aeabi_dsub>
 800a7d0:	462b      	mov	r3, r5
 800a7d2:	4622      	mov	r2, r4
 800a7d4:	f7f5 fd0e 	bl	80001f4 <__aeabi_dsub>
 800a7d8:	9b02      	ldr	r3, [sp, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a7e0:	f6bf af0a 	bge.w	800a5f8 <__ieee754_rem_pio2+0x80>
 800a7e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a7e8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a7ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7f0:	f8ca 8000 	str.w	r8, [sl]
 800a7f4:	f8ca 0008 	str.w	r0, [sl, #8]
 800a7f8:	f8ca 300c 	str.w	r3, [sl, #12]
 800a7fc:	f1cb 0b00 	rsb	fp, fp, #0
 800a800:	e6fa      	b.n	800a5f8 <__ieee754_rem_pio2+0x80>
 800a802:	a327      	add	r3, pc, #156	; (adr r3, 800a8a0 <__ieee754_rem_pio2+0x328>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	ec51 0b18 	vmov	r0, r1, d8
 800a80c:	f7f5 feaa 	bl	8000564 <__aeabi_dmul>
 800a810:	4604      	mov	r4, r0
 800a812:	460d      	mov	r5, r1
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	4640      	mov	r0, r8
 800a81a:	4649      	mov	r1, r9
 800a81c:	f7f5 fcea 	bl	80001f4 <__aeabi_dsub>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	4606      	mov	r6, r0
 800a826:	460f      	mov	r7, r1
 800a828:	4640      	mov	r0, r8
 800a82a:	4649      	mov	r1, r9
 800a82c:	f7f5 fce2 	bl	80001f4 <__aeabi_dsub>
 800a830:	4622      	mov	r2, r4
 800a832:	462b      	mov	r3, r5
 800a834:	f7f5 fcde 	bl	80001f4 <__aeabi_dsub>
 800a838:	a31b      	add	r3, pc, #108	; (adr r3, 800a8a8 <__ieee754_rem_pio2+0x330>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	ec51 0b18 	vmov	r0, r1, d8
 800a846:	f7f5 fe8d 	bl	8000564 <__aeabi_dmul>
 800a84a:	4622      	mov	r2, r4
 800a84c:	462b      	mov	r3, r5
 800a84e:	f7f5 fcd1 	bl	80001f4 <__aeabi_dsub>
 800a852:	4604      	mov	r4, r0
 800a854:	460d      	mov	r5, r1
 800a856:	e75f      	b.n	800a718 <__ieee754_rem_pio2+0x1a0>
 800a858:	4b1b      	ldr	r3, [pc, #108]	; (800a8c8 <__ieee754_rem_pio2+0x350>)
 800a85a:	4598      	cmp	r8, r3
 800a85c:	dd36      	ble.n	800a8cc <__ieee754_rem_pio2+0x354>
 800a85e:	ee10 2a10 	vmov	r2, s0
 800a862:	462b      	mov	r3, r5
 800a864:	4620      	mov	r0, r4
 800a866:	4629      	mov	r1, r5
 800a868:	f7f5 fcc4 	bl	80001f4 <__aeabi_dsub>
 800a86c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a870:	e9ca 0100 	strd	r0, r1, [sl]
 800a874:	e694      	b.n	800a5a0 <__ieee754_rem_pio2+0x28>
 800a876:	bf00      	nop
 800a878:	54400000 	.word	0x54400000
 800a87c:	3ff921fb 	.word	0x3ff921fb
 800a880:	1a626331 	.word	0x1a626331
 800a884:	3dd0b461 	.word	0x3dd0b461
 800a888:	1a600000 	.word	0x1a600000
 800a88c:	3dd0b461 	.word	0x3dd0b461
 800a890:	2e037073 	.word	0x2e037073
 800a894:	3ba3198a 	.word	0x3ba3198a
 800a898:	6dc9c883 	.word	0x6dc9c883
 800a89c:	3fe45f30 	.word	0x3fe45f30
 800a8a0:	2e000000 	.word	0x2e000000
 800a8a4:	3ba3198a 	.word	0x3ba3198a
 800a8a8:	252049c1 	.word	0x252049c1
 800a8ac:	397b839a 	.word	0x397b839a
 800a8b0:	3fe921fb 	.word	0x3fe921fb
 800a8b4:	4002d97b 	.word	0x4002d97b
 800a8b8:	3ff921fb 	.word	0x3ff921fb
 800a8bc:	413921fb 	.word	0x413921fb
 800a8c0:	3fe00000 	.word	0x3fe00000
 800a8c4:	0800b77c 	.word	0x0800b77c
 800a8c8:	7fefffff 	.word	0x7fefffff
 800a8cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a8d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a8d4:	ee10 0a10 	vmov	r0, s0
 800a8d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a8dc:	ee10 6a10 	vmov	r6, s0
 800a8e0:	460f      	mov	r7, r1
 800a8e2:	f7f6 f8ef 	bl	8000ac4 <__aeabi_d2iz>
 800a8e6:	f7f5 fdd3 	bl	8000490 <__aeabi_i2d>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a8f6:	f7f5 fc7d 	bl	80001f4 <__aeabi_dsub>
 800a8fa:	4b23      	ldr	r3, [pc, #140]	; (800a988 <__ieee754_rem_pio2+0x410>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f7f5 fe31 	bl	8000564 <__aeabi_dmul>
 800a902:	460f      	mov	r7, r1
 800a904:	4606      	mov	r6, r0
 800a906:	f7f6 f8dd 	bl	8000ac4 <__aeabi_d2iz>
 800a90a:	f7f5 fdc1 	bl	8000490 <__aeabi_i2d>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	4630      	mov	r0, r6
 800a914:	4639      	mov	r1, r7
 800a916:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a91a:	f7f5 fc6b 	bl	80001f4 <__aeabi_dsub>
 800a91e:	4b1a      	ldr	r3, [pc, #104]	; (800a988 <__ieee754_rem_pio2+0x410>)
 800a920:	2200      	movs	r2, #0
 800a922:	f7f5 fe1f 	bl	8000564 <__aeabi_dmul>
 800a926:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a92a:	ad04      	add	r5, sp, #16
 800a92c:	f04f 0803 	mov.w	r8, #3
 800a930:	46a9      	mov	r9, r5
 800a932:	2600      	movs	r6, #0
 800a934:	2700      	movs	r7, #0
 800a936:	4632      	mov	r2, r6
 800a938:	463b      	mov	r3, r7
 800a93a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a93e:	46c3      	mov	fp, r8
 800a940:	3d08      	subs	r5, #8
 800a942:	f108 38ff 	add.w	r8, r8, #4294967295
 800a946:	f7f6 f875 	bl	8000a34 <__aeabi_dcmpeq>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d1f3      	bne.n	800a936 <__ieee754_rem_pio2+0x3be>
 800a94e:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <__ieee754_rem_pio2+0x414>)
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	2302      	movs	r3, #2
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	4622      	mov	r2, r4
 800a958:	465b      	mov	r3, fp
 800a95a:	4651      	mov	r1, sl
 800a95c:	4648      	mov	r0, r9
 800a95e:	f000 f993 	bl	800ac88 <__kernel_rem_pio2>
 800a962:	9b02      	ldr	r3, [sp, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	4683      	mov	fp, r0
 800a968:	f6bf ae46 	bge.w	800a5f8 <__ieee754_rem_pio2+0x80>
 800a96c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a974:	e9ca 2300 	strd	r2, r3, [sl]
 800a978:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a97c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a980:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a984:	e73a      	b.n	800a7fc <__ieee754_rem_pio2+0x284>
 800a986:	bf00      	nop
 800a988:	41700000 	.word	0x41700000
 800a98c:	0800b7fc 	.word	0x0800b7fc

0800a990 <__ieee754_sqrt>:
 800a990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a994:	ec55 4b10 	vmov	r4, r5, d0
 800a998:	4e55      	ldr	r6, [pc, #340]	; (800aaf0 <__ieee754_sqrt+0x160>)
 800a99a:	43ae      	bics	r6, r5
 800a99c:	ee10 0a10 	vmov	r0, s0
 800a9a0:	ee10 3a10 	vmov	r3, s0
 800a9a4:	462a      	mov	r2, r5
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	d110      	bne.n	800a9cc <__ieee754_sqrt+0x3c>
 800a9aa:	ee10 2a10 	vmov	r2, s0
 800a9ae:	462b      	mov	r3, r5
 800a9b0:	f7f5 fdd8 	bl	8000564 <__aeabi_dmul>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	4629      	mov	r1, r5
 800a9bc:	f7f5 fc1c 	bl	80001f8 <__adddf3>
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	ec45 4b10 	vmov	d0, r4, r5
 800a9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	dc10      	bgt.n	800a9f2 <__ieee754_sqrt+0x62>
 800a9d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a9d4:	4330      	orrs	r0, r6
 800a9d6:	d0f5      	beq.n	800a9c4 <__ieee754_sqrt+0x34>
 800a9d8:	b15d      	cbz	r5, 800a9f2 <__ieee754_sqrt+0x62>
 800a9da:	ee10 2a10 	vmov	r2, s0
 800a9de:	462b      	mov	r3, r5
 800a9e0:	ee10 0a10 	vmov	r0, s0
 800a9e4:	f7f5 fc06 	bl	80001f4 <__aeabi_dsub>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	f7f5 fee4 	bl	80007b8 <__aeabi_ddiv>
 800a9f0:	e7e6      	b.n	800a9c0 <__ieee754_sqrt+0x30>
 800a9f2:	1512      	asrs	r2, r2, #20
 800a9f4:	d074      	beq.n	800aae0 <__ieee754_sqrt+0x150>
 800a9f6:	07d4      	lsls	r4, r2, #31
 800a9f8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a9fc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800aa00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800aa04:	bf5e      	ittt	pl
 800aa06:	0fda      	lsrpl	r2, r3, #31
 800aa08:	005b      	lslpl	r3, r3, #1
 800aa0a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800aa0e:	2400      	movs	r4, #0
 800aa10:	0fda      	lsrs	r2, r3, #31
 800aa12:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800aa16:	107f      	asrs	r7, r7, #1
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	2516      	movs	r5, #22
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800aa22:	1886      	adds	r6, r0, r2
 800aa24:	428e      	cmp	r6, r1
 800aa26:	bfde      	ittt	le
 800aa28:	1b89      	suble	r1, r1, r6
 800aa2a:	18b0      	addle	r0, r6, r2
 800aa2c:	18a4      	addle	r4, r4, r2
 800aa2e:	0049      	lsls	r1, r1, #1
 800aa30:	3d01      	subs	r5, #1
 800aa32:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800aa36:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800aa3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa3e:	d1f0      	bne.n	800aa22 <__ieee754_sqrt+0x92>
 800aa40:	462a      	mov	r2, r5
 800aa42:	f04f 0e20 	mov.w	lr, #32
 800aa46:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa4a:	4281      	cmp	r1, r0
 800aa4c:	eb06 0c05 	add.w	ip, r6, r5
 800aa50:	dc02      	bgt.n	800aa58 <__ieee754_sqrt+0xc8>
 800aa52:	d113      	bne.n	800aa7c <__ieee754_sqrt+0xec>
 800aa54:	459c      	cmp	ip, r3
 800aa56:	d811      	bhi.n	800aa7c <__ieee754_sqrt+0xec>
 800aa58:	f1bc 0f00 	cmp.w	ip, #0
 800aa5c:	eb0c 0506 	add.w	r5, ip, r6
 800aa60:	da43      	bge.n	800aaea <__ieee754_sqrt+0x15a>
 800aa62:	2d00      	cmp	r5, #0
 800aa64:	db41      	blt.n	800aaea <__ieee754_sqrt+0x15a>
 800aa66:	f100 0801 	add.w	r8, r0, #1
 800aa6a:	1a09      	subs	r1, r1, r0
 800aa6c:	459c      	cmp	ip, r3
 800aa6e:	bf88      	it	hi
 800aa70:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800aa74:	eba3 030c 	sub.w	r3, r3, ip
 800aa78:	4432      	add	r2, r6
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aa80:	f1be 0e01 	subs.w	lr, lr, #1
 800aa84:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800aa88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa8c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aa90:	d1db      	bne.n	800aa4a <__ieee754_sqrt+0xba>
 800aa92:	430b      	orrs	r3, r1
 800aa94:	d006      	beq.n	800aaa4 <__ieee754_sqrt+0x114>
 800aa96:	1c50      	adds	r0, r2, #1
 800aa98:	bf13      	iteet	ne
 800aa9a:	3201      	addne	r2, #1
 800aa9c:	3401      	addeq	r4, #1
 800aa9e:	4672      	moveq	r2, lr
 800aaa0:	f022 0201 	bicne.w	r2, r2, #1
 800aaa4:	1063      	asrs	r3, r4, #1
 800aaa6:	0852      	lsrs	r2, r2, #1
 800aaa8:	07e1      	lsls	r1, r4, #31
 800aaaa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aaae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aab2:	bf48      	it	mi
 800aab4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800aab8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800aabc:	4614      	mov	r4, r2
 800aabe:	e781      	b.n	800a9c4 <__ieee754_sqrt+0x34>
 800aac0:	0ad9      	lsrs	r1, r3, #11
 800aac2:	3815      	subs	r0, #21
 800aac4:	055b      	lsls	r3, r3, #21
 800aac6:	2900      	cmp	r1, #0
 800aac8:	d0fa      	beq.n	800aac0 <__ieee754_sqrt+0x130>
 800aaca:	02cd      	lsls	r5, r1, #11
 800aacc:	d50a      	bpl.n	800aae4 <__ieee754_sqrt+0x154>
 800aace:	f1c2 0420 	rsb	r4, r2, #32
 800aad2:	fa23 f404 	lsr.w	r4, r3, r4
 800aad6:	1e55      	subs	r5, r2, #1
 800aad8:	4093      	lsls	r3, r2
 800aada:	4321      	orrs	r1, r4
 800aadc:	1b42      	subs	r2, r0, r5
 800aade:	e78a      	b.n	800a9f6 <__ieee754_sqrt+0x66>
 800aae0:	4610      	mov	r0, r2
 800aae2:	e7f0      	b.n	800aac6 <__ieee754_sqrt+0x136>
 800aae4:	0049      	lsls	r1, r1, #1
 800aae6:	3201      	adds	r2, #1
 800aae8:	e7ef      	b.n	800aaca <__ieee754_sqrt+0x13a>
 800aaea:	4680      	mov	r8, r0
 800aaec:	e7bd      	b.n	800aa6a <__ieee754_sqrt+0xda>
 800aaee:	bf00      	nop
 800aaf0:	7ff00000 	.word	0x7ff00000
 800aaf4:	00000000 	.word	0x00000000

0800aaf8 <__kernel_cos>:
 800aaf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	ec57 6b10 	vmov	r6, r7, d0
 800ab00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ab04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ab08:	ed8d 1b00 	vstr	d1, [sp]
 800ab0c:	da07      	bge.n	800ab1e <__kernel_cos+0x26>
 800ab0e:	ee10 0a10 	vmov	r0, s0
 800ab12:	4639      	mov	r1, r7
 800ab14:	f7f5 ffd6 	bl	8000ac4 <__aeabi_d2iz>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	f000 8088 	beq.w	800ac2e <__kernel_cos+0x136>
 800ab1e:	4632      	mov	r2, r6
 800ab20:	463b      	mov	r3, r7
 800ab22:	4630      	mov	r0, r6
 800ab24:	4639      	mov	r1, r7
 800ab26:	f7f5 fd1d 	bl	8000564 <__aeabi_dmul>
 800ab2a:	4b51      	ldr	r3, [pc, #324]	; (800ac70 <__kernel_cos+0x178>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4604      	mov	r4, r0
 800ab30:	460d      	mov	r5, r1
 800ab32:	f7f5 fd17 	bl	8000564 <__aeabi_dmul>
 800ab36:	a340      	add	r3, pc, #256	; (adr r3, 800ac38 <__kernel_cos+0x140>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	4682      	mov	sl, r0
 800ab3e:	468b      	mov	fp, r1
 800ab40:	4620      	mov	r0, r4
 800ab42:	4629      	mov	r1, r5
 800ab44:	f7f5 fd0e 	bl	8000564 <__aeabi_dmul>
 800ab48:	a33d      	add	r3, pc, #244	; (adr r3, 800ac40 <__kernel_cos+0x148>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fb53 	bl	80001f8 <__adddf3>
 800ab52:	4622      	mov	r2, r4
 800ab54:	462b      	mov	r3, r5
 800ab56:	f7f5 fd05 	bl	8000564 <__aeabi_dmul>
 800ab5a:	a33b      	add	r3, pc, #236	; (adr r3, 800ac48 <__kernel_cos+0x150>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f7f5 fb48 	bl	80001f4 <__aeabi_dsub>
 800ab64:	4622      	mov	r2, r4
 800ab66:	462b      	mov	r3, r5
 800ab68:	f7f5 fcfc 	bl	8000564 <__aeabi_dmul>
 800ab6c:	a338      	add	r3, pc, #224	; (adr r3, 800ac50 <__kernel_cos+0x158>)
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	f7f5 fb41 	bl	80001f8 <__adddf3>
 800ab76:	4622      	mov	r2, r4
 800ab78:	462b      	mov	r3, r5
 800ab7a:	f7f5 fcf3 	bl	8000564 <__aeabi_dmul>
 800ab7e:	a336      	add	r3, pc, #216	; (adr r3, 800ac58 <__kernel_cos+0x160>)
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f7f5 fb36 	bl	80001f4 <__aeabi_dsub>
 800ab88:	4622      	mov	r2, r4
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	f7f5 fcea 	bl	8000564 <__aeabi_dmul>
 800ab90:	a333      	add	r3, pc, #204	; (adr r3, 800ac60 <__kernel_cos+0x168>)
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	f7f5 fb2f 	bl	80001f8 <__adddf3>
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	462b      	mov	r3, r5
 800ab9e:	f7f5 fce1 	bl	8000564 <__aeabi_dmul>
 800aba2:	4622      	mov	r2, r4
 800aba4:	462b      	mov	r3, r5
 800aba6:	f7f5 fcdd 	bl	8000564 <__aeabi_dmul>
 800abaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abae:	4604      	mov	r4, r0
 800abb0:	460d      	mov	r5, r1
 800abb2:	4630      	mov	r0, r6
 800abb4:	4639      	mov	r1, r7
 800abb6:	f7f5 fcd5 	bl	8000564 <__aeabi_dmul>
 800abba:	460b      	mov	r3, r1
 800abbc:	4602      	mov	r2, r0
 800abbe:	4629      	mov	r1, r5
 800abc0:	4620      	mov	r0, r4
 800abc2:	f7f5 fb17 	bl	80001f4 <__aeabi_dsub>
 800abc6:	4b2b      	ldr	r3, [pc, #172]	; (800ac74 <__kernel_cos+0x17c>)
 800abc8:	4598      	cmp	r8, r3
 800abca:	4606      	mov	r6, r0
 800abcc:	460f      	mov	r7, r1
 800abce:	dc10      	bgt.n	800abf2 <__kernel_cos+0xfa>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4650      	mov	r0, sl
 800abd6:	4659      	mov	r1, fp
 800abd8:	f7f5 fb0c 	bl	80001f4 <__aeabi_dsub>
 800abdc:	460b      	mov	r3, r1
 800abde:	4926      	ldr	r1, [pc, #152]	; (800ac78 <__kernel_cos+0x180>)
 800abe0:	4602      	mov	r2, r0
 800abe2:	2000      	movs	r0, #0
 800abe4:	f7f5 fb06 	bl	80001f4 <__aeabi_dsub>
 800abe8:	ec41 0b10 	vmov	d0, r0, r1
 800abec:	b003      	add	sp, #12
 800abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf2:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <__kernel_cos+0x184>)
 800abf4:	4920      	ldr	r1, [pc, #128]	; (800ac78 <__kernel_cos+0x180>)
 800abf6:	4598      	cmp	r8, r3
 800abf8:	bfcc      	ite	gt
 800abfa:	4d21      	ldrgt	r5, [pc, #132]	; (800ac80 <__kernel_cos+0x188>)
 800abfc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ac00:	2400      	movs	r4, #0
 800ac02:	4622      	mov	r2, r4
 800ac04:	462b      	mov	r3, r5
 800ac06:	2000      	movs	r0, #0
 800ac08:	f7f5 faf4 	bl	80001f4 <__aeabi_dsub>
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	4680      	mov	r8, r0
 800ac10:	4689      	mov	r9, r1
 800ac12:	462b      	mov	r3, r5
 800ac14:	4650      	mov	r0, sl
 800ac16:	4659      	mov	r1, fp
 800ac18:	f7f5 faec 	bl	80001f4 <__aeabi_dsub>
 800ac1c:	4632      	mov	r2, r6
 800ac1e:	463b      	mov	r3, r7
 800ac20:	f7f5 fae8 	bl	80001f4 <__aeabi_dsub>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4640      	mov	r0, r8
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	e7da      	b.n	800abe4 <__kernel_cos+0xec>
 800ac2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ac68 <__kernel_cos+0x170>
 800ac32:	e7db      	b.n	800abec <__kernel_cos+0xf4>
 800ac34:	f3af 8000 	nop.w
 800ac38:	be8838d4 	.word	0xbe8838d4
 800ac3c:	bda8fae9 	.word	0xbda8fae9
 800ac40:	bdb4b1c4 	.word	0xbdb4b1c4
 800ac44:	3e21ee9e 	.word	0x3e21ee9e
 800ac48:	809c52ad 	.word	0x809c52ad
 800ac4c:	3e927e4f 	.word	0x3e927e4f
 800ac50:	19cb1590 	.word	0x19cb1590
 800ac54:	3efa01a0 	.word	0x3efa01a0
 800ac58:	16c15177 	.word	0x16c15177
 800ac5c:	3f56c16c 	.word	0x3f56c16c
 800ac60:	5555554c 	.word	0x5555554c
 800ac64:	3fa55555 	.word	0x3fa55555
 800ac68:	00000000 	.word	0x00000000
 800ac6c:	3ff00000 	.word	0x3ff00000
 800ac70:	3fe00000 	.word	0x3fe00000
 800ac74:	3fd33332 	.word	0x3fd33332
 800ac78:	3ff00000 	.word	0x3ff00000
 800ac7c:	3fe90000 	.word	0x3fe90000
 800ac80:	3fd20000 	.word	0x3fd20000
 800ac84:	00000000 	.word	0x00000000

0800ac88 <__kernel_rem_pio2>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	ed2d 8b02 	vpush	{d8}
 800ac90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ac94:	f112 0f14 	cmn.w	r2, #20
 800ac98:	9308      	str	r3, [sp, #32]
 800ac9a:	9101      	str	r1, [sp, #4]
 800ac9c:	4bc4      	ldr	r3, [pc, #784]	; (800afb0 <__kernel_rem_pio2+0x328>)
 800ac9e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800aca0:	900b      	str	r0, [sp, #44]	; 0x2c
 800aca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aca6:	9302      	str	r3, [sp, #8]
 800aca8:	9b08      	ldr	r3, [sp, #32]
 800acaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800acae:	bfa8      	it	ge
 800acb0:	1ed4      	subge	r4, r2, #3
 800acb2:	9306      	str	r3, [sp, #24]
 800acb4:	bfb2      	itee	lt
 800acb6:	2400      	movlt	r4, #0
 800acb8:	2318      	movge	r3, #24
 800acba:	fb94 f4f3 	sdivge	r4, r4, r3
 800acbe:	f06f 0317 	mvn.w	r3, #23
 800acc2:	fb04 3303 	mla	r3, r4, r3, r3
 800acc6:	eb03 0a02 	add.w	sl, r3, r2
 800acca:	9b02      	ldr	r3, [sp, #8]
 800accc:	9a06      	ldr	r2, [sp, #24]
 800acce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800afa0 <__kernel_rem_pio2+0x318>
 800acd2:	eb03 0802 	add.w	r8, r3, r2
 800acd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800acd8:	1aa7      	subs	r7, r4, r2
 800acda:	ae22      	add	r6, sp, #136	; 0x88
 800acdc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ace0:	2500      	movs	r5, #0
 800ace2:	4545      	cmp	r5, r8
 800ace4:	dd13      	ble.n	800ad0e <__kernel_rem_pio2+0x86>
 800ace6:	9b08      	ldr	r3, [sp, #32]
 800ace8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800afa0 <__kernel_rem_pio2+0x318>
 800acec:	aa22      	add	r2, sp, #136	; 0x88
 800acee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800acf2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	9b02      	ldr	r3, [sp, #8]
 800acfc:	4598      	cmp	r8, r3
 800acfe:	dc2f      	bgt.n	800ad60 <__kernel_rem_pio2+0xd8>
 800ad00:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ad04:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ad08:	462f      	mov	r7, r5
 800ad0a:	2600      	movs	r6, #0
 800ad0c:	e01b      	b.n	800ad46 <__kernel_rem_pio2+0xbe>
 800ad0e:	42ef      	cmn	r7, r5
 800ad10:	d407      	bmi.n	800ad22 <__kernel_rem_pio2+0x9a>
 800ad12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad16:	f7f5 fbbb 	bl	8000490 <__aeabi_i2d>
 800ad1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad1e:	3501      	adds	r5, #1
 800ad20:	e7df      	b.n	800ace2 <__kernel_rem_pio2+0x5a>
 800ad22:	ec51 0b18 	vmov	r0, r1, d8
 800ad26:	e7f8      	b.n	800ad1a <__kernel_rem_pio2+0x92>
 800ad28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ad30:	f7f5 fc18 	bl	8000564 <__aeabi_dmul>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad3c:	f7f5 fa5c 	bl	80001f8 <__adddf3>
 800ad40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad44:	3601      	adds	r6, #1
 800ad46:	9b06      	ldr	r3, [sp, #24]
 800ad48:	429e      	cmp	r6, r3
 800ad4a:	f1a7 0708 	sub.w	r7, r7, #8
 800ad4e:	ddeb      	ble.n	800ad28 <__kernel_rem_pio2+0xa0>
 800ad50:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ad54:	f108 0801 	add.w	r8, r8, #1
 800ad58:	ecab 7b02 	vstmia	fp!, {d7}
 800ad5c:	3508      	adds	r5, #8
 800ad5e:	e7cc      	b.n	800acfa <__kernel_rem_pio2+0x72>
 800ad60:	9b02      	ldr	r3, [sp, #8]
 800ad62:	aa0e      	add	r2, sp, #56	; 0x38
 800ad64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad68:	930d      	str	r3, [sp, #52]	; 0x34
 800ad6a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ad6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad70:	9c02      	ldr	r4, [sp, #8]
 800ad72:	930c      	str	r3, [sp, #48]	; 0x30
 800ad74:	00e3      	lsls	r3, r4, #3
 800ad76:	930a      	str	r3, [sp, #40]	; 0x28
 800ad78:	ab9a      	add	r3, sp, #616	; 0x268
 800ad7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad7e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ad82:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ad86:	ab72      	add	r3, sp, #456	; 0x1c8
 800ad88:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ad8c:	46c3      	mov	fp, r8
 800ad8e:	46a1      	mov	r9, r4
 800ad90:	f1b9 0f00 	cmp.w	r9, #0
 800ad94:	f1a5 0508 	sub.w	r5, r5, #8
 800ad98:	dc77      	bgt.n	800ae8a <__kernel_rem_pio2+0x202>
 800ad9a:	ec47 6b10 	vmov	d0, r6, r7
 800ad9e:	4650      	mov	r0, sl
 800ada0:	f000 fc0a 	bl	800b5b8 <scalbn>
 800ada4:	ec57 6b10 	vmov	r6, r7, d0
 800ada8:	2200      	movs	r2, #0
 800adaa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800adae:	ee10 0a10 	vmov	r0, s0
 800adb2:	4639      	mov	r1, r7
 800adb4:	f7f5 fbd6 	bl	8000564 <__aeabi_dmul>
 800adb8:	ec41 0b10 	vmov	d0, r0, r1
 800adbc:	f000 fb74 	bl	800b4a8 <floor>
 800adc0:	4b7c      	ldr	r3, [pc, #496]	; (800afb4 <__kernel_rem_pio2+0x32c>)
 800adc2:	ec51 0b10 	vmov	r0, r1, d0
 800adc6:	2200      	movs	r2, #0
 800adc8:	f7f5 fbcc 	bl	8000564 <__aeabi_dmul>
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 fa0e 	bl	80001f4 <__aeabi_dsub>
 800add8:	460f      	mov	r7, r1
 800adda:	4606      	mov	r6, r0
 800addc:	f7f5 fe72 	bl	8000ac4 <__aeabi_d2iz>
 800ade0:	9004      	str	r0, [sp, #16]
 800ade2:	f7f5 fb55 	bl	8000490 <__aeabi_i2d>
 800ade6:	4602      	mov	r2, r0
 800ade8:	460b      	mov	r3, r1
 800adea:	4630      	mov	r0, r6
 800adec:	4639      	mov	r1, r7
 800adee:	f7f5 fa01 	bl	80001f4 <__aeabi_dsub>
 800adf2:	f1ba 0f00 	cmp.w	sl, #0
 800adf6:	4606      	mov	r6, r0
 800adf8:	460f      	mov	r7, r1
 800adfa:	dd6d      	ble.n	800aed8 <__kernel_rem_pio2+0x250>
 800adfc:	1e62      	subs	r2, r4, #1
 800adfe:	ab0e      	add	r3, sp, #56	; 0x38
 800ae00:	9d04      	ldr	r5, [sp, #16]
 800ae02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ae06:	f1ca 0118 	rsb	r1, sl, #24
 800ae0a:	fa40 f301 	asr.w	r3, r0, r1
 800ae0e:	441d      	add	r5, r3
 800ae10:	408b      	lsls	r3, r1
 800ae12:	1ac0      	subs	r0, r0, r3
 800ae14:	ab0e      	add	r3, sp, #56	; 0x38
 800ae16:	9504      	str	r5, [sp, #16]
 800ae18:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ae1c:	f1ca 0317 	rsb	r3, sl, #23
 800ae20:	fa40 fb03 	asr.w	fp, r0, r3
 800ae24:	f1bb 0f00 	cmp.w	fp, #0
 800ae28:	dd65      	ble.n	800aef6 <__kernel_rem_pio2+0x26e>
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	3301      	adds	r3, #1
 800ae30:	9304      	str	r3, [sp, #16]
 800ae32:	4615      	mov	r5, r2
 800ae34:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ae38:	4294      	cmp	r4, r2
 800ae3a:	f300 809c 	bgt.w	800af76 <__kernel_rem_pio2+0x2ee>
 800ae3e:	f1ba 0f00 	cmp.w	sl, #0
 800ae42:	dd07      	ble.n	800ae54 <__kernel_rem_pio2+0x1cc>
 800ae44:	f1ba 0f01 	cmp.w	sl, #1
 800ae48:	f000 80c0 	beq.w	800afcc <__kernel_rem_pio2+0x344>
 800ae4c:	f1ba 0f02 	cmp.w	sl, #2
 800ae50:	f000 80c6 	beq.w	800afe0 <__kernel_rem_pio2+0x358>
 800ae54:	f1bb 0f02 	cmp.w	fp, #2
 800ae58:	d14d      	bne.n	800aef6 <__kernel_rem_pio2+0x26e>
 800ae5a:	4632      	mov	r2, r6
 800ae5c:	463b      	mov	r3, r7
 800ae5e:	4956      	ldr	r1, [pc, #344]	; (800afb8 <__kernel_rem_pio2+0x330>)
 800ae60:	2000      	movs	r0, #0
 800ae62:	f7f5 f9c7 	bl	80001f4 <__aeabi_dsub>
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	2d00      	cmp	r5, #0
 800ae6c:	d043      	beq.n	800aef6 <__kernel_rem_pio2+0x26e>
 800ae6e:	4650      	mov	r0, sl
 800ae70:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800afa8 <__kernel_rem_pio2+0x320>
 800ae74:	f000 fba0 	bl	800b5b8 <scalbn>
 800ae78:	4630      	mov	r0, r6
 800ae7a:	4639      	mov	r1, r7
 800ae7c:	ec53 2b10 	vmov	r2, r3, d0
 800ae80:	f7f5 f9b8 	bl	80001f4 <__aeabi_dsub>
 800ae84:	4606      	mov	r6, r0
 800ae86:	460f      	mov	r7, r1
 800ae88:	e035      	b.n	800aef6 <__kernel_rem_pio2+0x26e>
 800ae8a:	4b4c      	ldr	r3, [pc, #304]	; (800afbc <__kernel_rem_pio2+0x334>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	4630      	mov	r0, r6
 800ae90:	4639      	mov	r1, r7
 800ae92:	f7f5 fb67 	bl	8000564 <__aeabi_dmul>
 800ae96:	f7f5 fe15 	bl	8000ac4 <__aeabi_d2iz>
 800ae9a:	f7f5 faf9 	bl	8000490 <__aeabi_i2d>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	460b      	mov	r3, r1
 800aea2:	ec43 2b18 	vmov	d8, r2, r3
 800aea6:	4b46      	ldr	r3, [pc, #280]	; (800afc0 <__kernel_rem_pio2+0x338>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f7f5 fb5b 	bl	8000564 <__aeabi_dmul>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	f7f5 f99d 	bl	80001f4 <__aeabi_dsub>
 800aeba:	f7f5 fe03 	bl	8000ac4 <__aeabi_d2iz>
 800aebe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aec2:	f84b 0b04 	str.w	r0, [fp], #4
 800aec6:	ec51 0b18 	vmov	r0, r1, d8
 800aeca:	f7f5 f995 	bl	80001f8 <__adddf3>
 800aece:	f109 39ff 	add.w	r9, r9, #4294967295
 800aed2:	4606      	mov	r6, r0
 800aed4:	460f      	mov	r7, r1
 800aed6:	e75b      	b.n	800ad90 <__kernel_rem_pio2+0x108>
 800aed8:	d106      	bne.n	800aee8 <__kernel_rem_pio2+0x260>
 800aeda:	1e63      	subs	r3, r4, #1
 800aedc:	aa0e      	add	r2, sp, #56	; 0x38
 800aede:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aee2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800aee6:	e79d      	b.n	800ae24 <__kernel_rem_pio2+0x19c>
 800aee8:	4b36      	ldr	r3, [pc, #216]	; (800afc4 <__kernel_rem_pio2+0x33c>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	f7f5 fdc0 	bl	8000a70 <__aeabi_dcmpge>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d13d      	bne.n	800af70 <__kernel_rem_pio2+0x2e8>
 800aef4:	4683      	mov	fp, r0
 800aef6:	2200      	movs	r2, #0
 800aef8:	2300      	movs	r3, #0
 800aefa:	4630      	mov	r0, r6
 800aefc:	4639      	mov	r1, r7
 800aefe:	f7f5 fd99 	bl	8000a34 <__aeabi_dcmpeq>
 800af02:	2800      	cmp	r0, #0
 800af04:	f000 80c0 	beq.w	800b088 <__kernel_rem_pio2+0x400>
 800af08:	1e65      	subs	r5, r4, #1
 800af0a:	462b      	mov	r3, r5
 800af0c:	2200      	movs	r2, #0
 800af0e:	9902      	ldr	r1, [sp, #8]
 800af10:	428b      	cmp	r3, r1
 800af12:	da6c      	bge.n	800afee <__kernel_rem_pio2+0x366>
 800af14:	2a00      	cmp	r2, #0
 800af16:	f000 8089 	beq.w	800b02c <__kernel_rem_pio2+0x3a4>
 800af1a:	ab0e      	add	r3, sp, #56	; 0x38
 800af1c:	f1aa 0a18 	sub.w	sl, sl, #24
 800af20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 80ad 	beq.w	800b084 <__kernel_rem_pio2+0x3fc>
 800af2a:	4650      	mov	r0, sl
 800af2c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800afa8 <__kernel_rem_pio2+0x320>
 800af30:	f000 fb42 	bl	800b5b8 <scalbn>
 800af34:	ab9a      	add	r3, sp, #616	; 0x268
 800af36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800af3a:	ec57 6b10 	vmov	r6, r7, d0
 800af3e:	00ec      	lsls	r4, r5, #3
 800af40:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800af44:	46aa      	mov	sl, r5
 800af46:	f1ba 0f00 	cmp.w	sl, #0
 800af4a:	f280 80d6 	bge.w	800b0fa <__kernel_rem_pio2+0x472>
 800af4e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800afa0 <__kernel_rem_pio2+0x318>
 800af52:	462e      	mov	r6, r5
 800af54:	2e00      	cmp	r6, #0
 800af56:	f2c0 8104 	blt.w	800b162 <__kernel_rem_pio2+0x4da>
 800af5a:	ab72      	add	r3, sp, #456	; 0x1c8
 800af5c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800af60:	f8df a064 	ldr.w	sl, [pc, #100]	; 800afc8 <__kernel_rem_pio2+0x340>
 800af64:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800af68:	f04f 0800 	mov.w	r8, #0
 800af6c:	1baf      	subs	r7, r5, r6
 800af6e:	e0ea      	b.n	800b146 <__kernel_rem_pio2+0x4be>
 800af70:	f04f 0b02 	mov.w	fp, #2
 800af74:	e759      	b.n	800ae2a <__kernel_rem_pio2+0x1a2>
 800af76:	f8d8 3000 	ldr.w	r3, [r8]
 800af7a:	b955      	cbnz	r5, 800af92 <__kernel_rem_pio2+0x30a>
 800af7c:	b123      	cbz	r3, 800af88 <__kernel_rem_pio2+0x300>
 800af7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800af82:	f8c8 3000 	str.w	r3, [r8]
 800af86:	2301      	movs	r3, #1
 800af88:	3201      	adds	r2, #1
 800af8a:	f108 0804 	add.w	r8, r8, #4
 800af8e:	461d      	mov	r5, r3
 800af90:	e752      	b.n	800ae38 <__kernel_rem_pio2+0x1b0>
 800af92:	1acb      	subs	r3, r1, r3
 800af94:	f8c8 3000 	str.w	r3, [r8]
 800af98:	462b      	mov	r3, r5
 800af9a:	e7f5      	b.n	800af88 <__kernel_rem_pio2+0x300>
 800af9c:	f3af 8000 	nop.w
	...
 800afac:	3ff00000 	.word	0x3ff00000
 800afb0:	0800b948 	.word	0x0800b948
 800afb4:	40200000 	.word	0x40200000
 800afb8:	3ff00000 	.word	0x3ff00000
 800afbc:	3e700000 	.word	0x3e700000
 800afc0:	41700000 	.word	0x41700000
 800afc4:	3fe00000 	.word	0x3fe00000
 800afc8:	0800b908 	.word	0x0800b908
 800afcc:	1e62      	subs	r2, r4, #1
 800afce:	ab0e      	add	r3, sp, #56	; 0x38
 800afd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800afd8:	a90e      	add	r1, sp, #56	; 0x38
 800afda:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800afde:	e739      	b.n	800ae54 <__kernel_rem_pio2+0x1cc>
 800afe0:	1e62      	subs	r2, r4, #1
 800afe2:	ab0e      	add	r3, sp, #56	; 0x38
 800afe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800afec:	e7f4      	b.n	800afd8 <__kernel_rem_pio2+0x350>
 800afee:	a90e      	add	r1, sp, #56	; 0x38
 800aff0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	430a      	orrs	r2, r1
 800aff8:	e789      	b.n	800af0e <__kernel_rem_pio2+0x286>
 800affa:	3301      	adds	r3, #1
 800affc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b000:	2900      	cmp	r1, #0
 800b002:	d0fa      	beq.n	800affa <__kernel_rem_pio2+0x372>
 800b004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b006:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b00a:	446a      	add	r2, sp
 800b00c:	3a98      	subs	r2, #152	; 0x98
 800b00e:	920a      	str	r2, [sp, #40]	; 0x28
 800b010:	9a08      	ldr	r2, [sp, #32]
 800b012:	18e3      	adds	r3, r4, r3
 800b014:	18a5      	adds	r5, r4, r2
 800b016:	aa22      	add	r2, sp, #136	; 0x88
 800b018:	f104 0801 	add.w	r8, r4, #1
 800b01c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b020:	9304      	str	r3, [sp, #16]
 800b022:	9b04      	ldr	r3, [sp, #16]
 800b024:	4543      	cmp	r3, r8
 800b026:	da04      	bge.n	800b032 <__kernel_rem_pio2+0x3aa>
 800b028:	461c      	mov	r4, r3
 800b02a:	e6a3      	b.n	800ad74 <__kernel_rem_pio2+0xec>
 800b02c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b02e:	2301      	movs	r3, #1
 800b030:	e7e4      	b.n	800affc <__kernel_rem_pio2+0x374>
 800b032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b034:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b038:	f7f5 fa2a 	bl	8000490 <__aeabi_i2d>
 800b03c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b042:	46ab      	mov	fp, r5
 800b044:	461c      	mov	r4, r3
 800b046:	f04f 0900 	mov.w	r9, #0
 800b04a:	2600      	movs	r6, #0
 800b04c:	2700      	movs	r7, #0
 800b04e:	9b06      	ldr	r3, [sp, #24]
 800b050:	4599      	cmp	r9, r3
 800b052:	dd06      	ble.n	800b062 <__kernel_rem_pio2+0x3da>
 800b054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b056:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b05a:	f108 0801 	add.w	r8, r8, #1
 800b05e:	930a      	str	r3, [sp, #40]	; 0x28
 800b060:	e7df      	b.n	800b022 <__kernel_rem_pio2+0x39a>
 800b062:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b066:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b06a:	f7f5 fa7b 	bl	8000564 <__aeabi_dmul>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	4630      	mov	r0, r6
 800b074:	4639      	mov	r1, r7
 800b076:	f7f5 f8bf 	bl	80001f8 <__adddf3>
 800b07a:	f109 0901 	add.w	r9, r9, #1
 800b07e:	4606      	mov	r6, r0
 800b080:	460f      	mov	r7, r1
 800b082:	e7e4      	b.n	800b04e <__kernel_rem_pio2+0x3c6>
 800b084:	3d01      	subs	r5, #1
 800b086:	e748      	b.n	800af1a <__kernel_rem_pio2+0x292>
 800b088:	ec47 6b10 	vmov	d0, r6, r7
 800b08c:	f1ca 0000 	rsb	r0, sl, #0
 800b090:	f000 fa92 	bl	800b5b8 <scalbn>
 800b094:	ec57 6b10 	vmov	r6, r7, d0
 800b098:	4ba0      	ldr	r3, [pc, #640]	; (800b31c <__kernel_rem_pio2+0x694>)
 800b09a:	ee10 0a10 	vmov	r0, s0
 800b09e:	2200      	movs	r2, #0
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	f7f5 fce5 	bl	8000a70 <__aeabi_dcmpge>
 800b0a6:	b1f8      	cbz	r0, 800b0e8 <__kernel_rem_pio2+0x460>
 800b0a8:	4b9d      	ldr	r3, [pc, #628]	; (800b320 <__kernel_rem_pio2+0x698>)
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	4639      	mov	r1, r7
 800b0b0:	f7f5 fa58 	bl	8000564 <__aeabi_dmul>
 800b0b4:	f7f5 fd06 	bl	8000ac4 <__aeabi_d2iz>
 800b0b8:	4680      	mov	r8, r0
 800b0ba:	f7f5 f9e9 	bl	8000490 <__aeabi_i2d>
 800b0be:	4b97      	ldr	r3, [pc, #604]	; (800b31c <__kernel_rem_pio2+0x694>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f7f5 fa4f 	bl	8000564 <__aeabi_dmul>
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7f5 f891 	bl	80001f4 <__aeabi_dsub>
 800b0d2:	f7f5 fcf7 	bl	8000ac4 <__aeabi_d2iz>
 800b0d6:	1c65      	adds	r5, r4, #1
 800b0d8:	ab0e      	add	r3, sp, #56	; 0x38
 800b0da:	f10a 0a18 	add.w	sl, sl, #24
 800b0de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b0e2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b0e6:	e720      	b.n	800af2a <__kernel_rem_pio2+0x2a2>
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	f7f5 fcea 	bl	8000ac4 <__aeabi_d2iz>
 800b0f0:	ab0e      	add	r3, sp, #56	; 0x38
 800b0f2:	4625      	mov	r5, r4
 800b0f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b0f8:	e717      	b.n	800af2a <__kernel_rem_pio2+0x2a2>
 800b0fa:	ab0e      	add	r3, sp, #56	; 0x38
 800b0fc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b100:	f7f5 f9c6 	bl	8000490 <__aeabi_i2d>
 800b104:	4632      	mov	r2, r6
 800b106:	463b      	mov	r3, r7
 800b108:	f7f5 fa2c 	bl	8000564 <__aeabi_dmul>
 800b10c:	4b84      	ldr	r3, [pc, #528]	; (800b320 <__kernel_rem_pio2+0x698>)
 800b10e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b112:	2200      	movs	r2, #0
 800b114:	4630      	mov	r0, r6
 800b116:	4639      	mov	r1, r7
 800b118:	f7f5 fa24 	bl	8000564 <__aeabi_dmul>
 800b11c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b120:	4606      	mov	r6, r0
 800b122:	460f      	mov	r7, r1
 800b124:	e70f      	b.n	800af46 <__kernel_rem_pio2+0x2be>
 800b126:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b12a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b12e:	f7f5 fa19 	bl	8000564 <__aeabi_dmul>
 800b132:	4602      	mov	r2, r0
 800b134:	460b      	mov	r3, r1
 800b136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b13a:	f7f5 f85d 	bl	80001f8 <__adddf3>
 800b13e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b142:	f108 0801 	add.w	r8, r8, #1
 800b146:	9b02      	ldr	r3, [sp, #8]
 800b148:	4598      	cmp	r8, r3
 800b14a:	dc01      	bgt.n	800b150 <__kernel_rem_pio2+0x4c8>
 800b14c:	45b8      	cmp	r8, r7
 800b14e:	ddea      	ble.n	800b126 <__kernel_rem_pio2+0x49e>
 800b150:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b154:	ab4a      	add	r3, sp, #296	; 0x128
 800b156:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b15a:	ed87 7b00 	vstr	d7, [r7]
 800b15e:	3e01      	subs	r6, #1
 800b160:	e6f8      	b.n	800af54 <__kernel_rem_pio2+0x2cc>
 800b162:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b164:	2b02      	cmp	r3, #2
 800b166:	dc0b      	bgt.n	800b180 <__kernel_rem_pio2+0x4f8>
 800b168:	2b00      	cmp	r3, #0
 800b16a:	dc35      	bgt.n	800b1d8 <__kernel_rem_pio2+0x550>
 800b16c:	d059      	beq.n	800b222 <__kernel_rem_pio2+0x59a>
 800b16e:	9b04      	ldr	r3, [sp, #16]
 800b170:	f003 0007 	and.w	r0, r3, #7
 800b174:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b178:	ecbd 8b02 	vpop	{d8}
 800b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b180:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b182:	2b03      	cmp	r3, #3
 800b184:	d1f3      	bne.n	800b16e <__kernel_rem_pio2+0x4e6>
 800b186:	ab4a      	add	r3, sp, #296	; 0x128
 800b188:	4423      	add	r3, r4
 800b18a:	9306      	str	r3, [sp, #24]
 800b18c:	461c      	mov	r4, r3
 800b18e:	469a      	mov	sl, r3
 800b190:	9502      	str	r5, [sp, #8]
 800b192:	9b02      	ldr	r3, [sp, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	f1aa 0a08 	sub.w	sl, sl, #8
 800b19a:	dc6b      	bgt.n	800b274 <__kernel_rem_pio2+0x5ec>
 800b19c:	46aa      	mov	sl, r5
 800b19e:	f1ba 0f01 	cmp.w	sl, #1
 800b1a2:	f1a4 0408 	sub.w	r4, r4, #8
 800b1a6:	f300 8085 	bgt.w	800b2b4 <__kernel_rem_pio2+0x62c>
 800b1aa:	9c06      	ldr	r4, [sp, #24]
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	3408      	adds	r4, #8
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	2d01      	cmp	r5, #1
 800b1b4:	f300 809d 	bgt.w	800b2f2 <__kernel_rem_pio2+0x66a>
 800b1b8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b1bc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b1c0:	f1bb 0f00 	cmp.w	fp, #0
 800b1c4:	f040 809b 	bne.w	800b2fe <__kernel_rem_pio2+0x676>
 800b1c8:	9b01      	ldr	r3, [sp, #4]
 800b1ca:	e9c3 5600 	strd	r5, r6, [r3]
 800b1ce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b1d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b1d6:	e7ca      	b.n	800b16e <__kernel_rem_pio2+0x4e6>
 800b1d8:	3408      	adds	r4, #8
 800b1da:	ab4a      	add	r3, sp, #296	; 0x128
 800b1dc:	441c      	add	r4, r3
 800b1de:	462e      	mov	r6, r5
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	2e00      	cmp	r6, #0
 800b1e6:	da36      	bge.n	800b256 <__kernel_rem_pio2+0x5ce>
 800b1e8:	f1bb 0f00 	cmp.w	fp, #0
 800b1ec:	d039      	beq.n	800b262 <__kernel_rem_pio2+0x5da>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1f4:	9c01      	ldr	r4, [sp, #4]
 800b1f6:	e9c4 2300 	strd	r2, r3, [r4]
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b202:	f7f4 fff7 	bl	80001f4 <__aeabi_dsub>
 800b206:	ae4c      	add	r6, sp, #304	; 0x130
 800b208:	2401      	movs	r4, #1
 800b20a:	42a5      	cmp	r5, r4
 800b20c:	da2c      	bge.n	800b268 <__kernel_rem_pio2+0x5e0>
 800b20e:	f1bb 0f00 	cmp.w	fp, #0
 800b212:	d002      	beq.n	800b21a <__kernel_rem_pio2+0x592>
 800b214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b218:	4619      	mov	r1, r3
 800b21a:	9b01      	ldr	r3, [sp, #4]
 800b21c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b220:	e7a5      	b.n	800b16e <__kernel_rem_pio2+0x4e6>
 800b222:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b226:	eb0d 0403 	add.w	r4, sp, r3
 800b22a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b22e:	2000      	movs	r0, #0
 800b230:	2100      	movs	r1, #0
 800b232:	2d00      	cmp	r5, #0
 800b234:	da09      	bge.n	800b24a <__kernel_rem_pio2+0x5c2>
 800b236:	f1bb 0f00 	cmp.w	fp, #0
 800b23a:	d002      	beq.n	800b242 <__kernel_rem_pio2+0x5ba>
 800b23c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b240:	4619      	mov	r1, r3
 800b242:	9b01      	ldr	r3, [sp, #4]
 800b244:	e9c3 0100 	strd	r0, r1, [r3]
 800b248:	e791      	b.n	800b16e <__kernel_rem_pio2+0x4e6>
 800b24a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b24e:	f7f4 ffd3 	bl	80001f8 <__adddf3>
 800b252:	3d01      	subs	r5, #1
 800b254:	e7ed      	b.n	800b232 <__kernel_rem_pio2+0x5aa>
 800b256:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b25a:	f7f4 ffcd 	bl	80001f8 <__adddf3>
 800b25e:	3e01      	subs	r6, #1
 800b260:	e7c0      	b.n	800b1e4 <__kernel_rem_pio2+0x55c>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	e7c5      	b.n	800b1f4 <__kernel_rem_pio2+0x56c>
 800b268:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b26c:	f7f4 ffc4 	bl	80001f8 <__adddf3>
 800b270:	3401      	adds	r4, #1
 800b272:	e7ca      	b.n	800b20a <__kernel_rem_pio2+0x582>
 800b274:	e9da 8900 	ldrd	r8, r9, [sl]
 800b278:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b27c:	9b02      	ldr	r3, [sp, #8]
 800b27e:	3b01      	subs	r3, #1
 800b280:	9302      	str	r3, [sp, #8]
 800b282:	4632      	mov	r2, r6
 800b284:	463b      	mov	r3, r7
 800b286:	4640      	mov	r0, r8
 800b288:	4649      	mov	r1, r9
 800b28a:	f7f4 ffb5 	bl	80001f8 <__adddf3>
 800b28e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4640      	mov	r0, r8
 800b298:	4649      	mov	r1, r9
 800b29a:	f7f4 ffab 	bl	80001f4 <__aeabi_dsub>
 800b29e:	4632      	mov	r2, r6
 800b2a0:	463b      	mov	r3, r7
 800b2a2:	f7f4 ffa9 	bl	80001f8 <__adddf3>
 800b2a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b2aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b2ae:	ed8a 7b00 	vstr	d7, [sl]
 800b2b2:	e76e      	b.n	800b192 <__kernel_rem_pio2+0x50a>
 800b2b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b2b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b2bc:	4640      	mov	r0, r8
 800b2be:	4632      	mov	r2, r6
 800b2c0:	463b      	mov	r3, r7
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	f7f4 ff98 	bl	80001f8 <__adddf3>
 800b2c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	4640      	mov	r0, r8
 800b2d2:	4649      	mov	r1, r9
 800b2d4:	f7f4 ff8e 	bl	80001f4 <__aeabi_dsub>
 800b2d8:	4632      	mov	r2, r6
 800b2da:	463b      	mov	r3, r7
 800b2dc:	f7f4 ff8c 	bl	80001f8 <__adddf3>
 800b2e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2e8:	ed84 7b00 	vstr	d7, [r4]
 800b2ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2f0:	e755      	b.n	800b19e <__kernel_rem_pio2+0x516>
 800b2f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2f6:	f7f4 ff7f 	bl	80001f8 <__adddf3>
 800b2fa:	3d01      	subs	r5, #1
 800b2fc:	e759      	b.n	800b1b2 <__kernel_rem_pio2+0x52a>
 800b2fe:	9b01      	ldr	r3, [sp, #4]
 800b300:	9a01      	ldr	r2, [sp, #4]
 800b302:	601d      	str	r5, [r3, #0]
 800b304:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b308:	605c      	str	r4, [r3, #4]
 800b30a:	609f      	str	r7, [r3, #8]
 800b30c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b310:	60d3      	str	r3, [r2, #12]
 800b312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b316:	6110      	str	r0, [r2, #16]
 800b318:	6153      	str	r3, [r2, #20]
 800b31a:	e728      	b.n	800b16e <__kernel_rem_pio2+0x4e6>
 800b31c:	41700000 	.word	0x41700000
 800b320:	3e700000 	.word	0x3e700000
 800b324:	00000000 	.word	0x00000000

0800b328 <__kernel_sin>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	ed2d 8b04 	vpush	{d8-d9}
 800b330:	eeb0 8a41 	vmov.f32	s16, s2
 800b334:	eef0 8a61 	vmov.f32	s17, s3
 800b338:	ec55 4b10 	vmov	r4, r5, d0
 800b33c:	b083      	sub	sp, #12
 800b33e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b342:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b346:	9001      	str	r0, [sp, #4]
 800b348:	da06      	bge.n	800b358 <__kernel_sin+0x30>
 800b34a:	ee10 0a10 	vmov	r0, s0
 800b34e:	4629      	mov	r1, r5
 800b350:	f7f5 fbb8 	bl	8000ac4 <__aeabi_d2iz>
 800b354:	2800      	cmp	r0, #0
 800b356:	d051      	beq.n	800b3fc <__kernel_sin+0xd4>
 800b358:	4622      	mov	r2, r4
 800b35a:	462b      	mov	r3, r5
 800b35c:	4620      	mov	r0, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	f7f5 f900 	bl	8000564 <__aeabi_dmul>
 800b364:	4682      	mov	sl, r0
 800b366:	468b      	mov	fp, r1
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4620      	mov	r0, r4
 800b36e:	4629      	mov	r1, r5
 800b370:	f7f5 f8f8 	bl	8000564 <__aeabi_dmul>
 800b374:	a341      	add	r3, pc, #260	; (adr r3, 800b47c <__kernel_sin+0x154>)
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	4680      	mov	r8, r0
 800b37c:	4689      	mov	r9, r1
 800b37e:	4650      	mov	r0, sl
 800b380:	4659      	mov	r1, fp
 800b382:	f7f5 f8ef 	bl	8000564 <__aeabi_dmul>
 800b386:	a33f      	add	r3, pc, #252	; (adr r3, 800b484 <__kernel_sin+0x15c>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7f4 ff32 	bl	80001f4 <__aeabi_dsub>
 800b390:	4652      	mov	r2, sl
 800b392:	465b      	mov	r3, fp
 800b394:	f7f5 f8e6 	bl	8000564 <__aeabi_dmul>
 800b398:	a33c      	add	r3, pc, #240	; (adr r3, 800b48c <__kernel_sin+0x164>)
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	f7f4 ff2b 	bl	80001f8 <__adddf3>
 800b3a2:	4652      	mov	r2, sl
 800b3a4:	465b      	mov	r3, fp
 800b3a6:	f7f5 f8dd 	bl	8000564 <__aeabi_dmul>
 800b3aa:	a33a      	add	r3, pc, #232	; (adr r3, 800b494 <__kernel_sin+0x16c>)
 800b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b0:	f7f4 ff20 	bl	80001f4 <__aeabi_dsub>
 800b3b4:	4652      	mov	r2, sl
 800b3b6:	465b      	mov	r3, fp
 800b3b8:	f7f5 f8d4 	bl	8000564 <__aeabi_dmul>
 800b3bc:	a337      	add	r3, pc, #220	; (adr r3, 800b49c <__kernel_sin+0x174>)
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	f7f4 ff19 	bl	80001f8 <__adddf3>
 800b3c6:	9b01      	ldr	r3, [sp, #4]
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	460f      	mov	r7, r1
 800b3cc:	b9eb      	cbnz	r3, 800b40a <__kernel_sin+0xe2>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4650      	mov	r0, sl
 800b3d4:	4659      	mov	r1, fp
 800b3d6:	f7f5 f8c5 	bl	8000564 <__aeabi_dmul>
 800b3da:	a325      	add	r3, pc, #148	; (adr r3, 800b470 <__kernel_sin+0x148>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f7f4 ff08 	bl	80001f4 <__aeabi_dsub>
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	464b      	mov	r3, r9
 800b3e8:	f7f5 f8bc 	bl	8000564 <__aeabi_dmul>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f7f4 ff00 	bl	80001f8 <__adddf3>
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	460d      	mov	r5, r1
 800b3fc:	ec45 4b10 	vmov	d0, r4, r5
 800b400:	b003      	add	sp, #12
 800b402:	ecbd 8b04 	vpop	{d8-d9}
 800b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40a:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <__kernel_sin+0x150>)
 800b40c:	ec51 0b18 	vmov	r0, r1, d8
 800b410:	2200      	movs	r2, #0
 800b412:	f7f5 f8a7 	bl	8000564 <__aeabi_dmul>
 800b416:	4632      	mov	r2, r6
 800b418:	ec41 0b19 	vmov	d9, r0, r1
 800b41c:	463b      	mov	r3, r7
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	f7f5 f89f 	bl	8000564 <__aeabi_dmul>
 800b426:	4602      	mov	r2, r0
 800b428:	460b      	mov	r3, r1
 800b42a:	ec51 0b19 	vmov	r0, r1, d9
 800b42e:	f7f4 fee1 	bl	80001f4 <__aeabi_dsub>
 800b432:	4652      	mov	r2, sl
 800b434:	465b      	mov	r3, fp
 800b436:	f7f5 f895 	bl	8000564 <__aeabi_dmul>
 800b43a:	ec53 2b18 	vmov	r2, r3, d8
 800b43e:	f7f4 fed9 	bl	80001f4 <__aeabi_dsub>
 800b442:	a30b      	add	r3, pc, #44	; (adr r3, 800b470 <__kernel_sin+0x148>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	4606      	mov	r6, r0
 800b44a:	460f      	mov	r7, r1
 800b44c:	4640      	mov	r0, r8
 800b44e:	4649      	mov	r1, r9
 800b450:	f7f5 f888 	bl	8000564 <__aeabi_dmul>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	4630      	mov	r0, r6
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f4 fecc 	bl	80001f8 <__adddf3>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4620      	mov	r0, r4
 800b466:	4629      	mov	r1, r5
 800b468:	f7f4 fec4 	bl	80001f4 <__aeabi_dsub>
 800b46c:	e7c4      	b.n	800b3f8 <__kernel_sin+0xd0>
 800b46e:	bf00      	nop
 800b470:	55555549 	.word	0x55555549
 800b474:	3fc55555 	.word	0x3fc55555
 800b478:	3fe00000 	.word	0x3fe00000
 800b47c:	5acfd57c 	.word	0x5acfd57c
 800b480:	3de5d93a 	.word	0x3de5d93a
 800b484:	8a2b9ceb 	.word	0x8a2b9ceb
 800b488:	3e5ae5e6 	.word	0x3e5ae5e6
 800b48c:	57b1fe7d 	.word	0x57b1fe7d
 800b490:	3ec71de3 	.word	0x3ec71de3
 800b494:	19c161d5 	.word	0x19c161d5
 800b498:	3f2a01a0 	.word	0x3f2a01a0
 800b49c:	1110f8a6 	.word	0x1110f8a6
 800b4a0:	3f811111 	.word	0x3f811111
 800b4a4:	00000000 	.word	0x00000000

0800b4a8 <floor>:
 800b4a8:	ec51 0b10 	vmov	r0, r1, d0
 800b4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b4b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b4b8:	2e13      	cmp	r6, #19
 800b4ba:	ee10 5a10 	vmov	r5, s0
 800b4be:	ee10 8a10 	vmov	r8, s0
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	dc32      	bgt.n	800b52c <floor+0x84>
 800b4c6:	2e00      	cmp	r6, #0
 800b4c8:	da14      	bge.n	800b4f4 <floor+0x4c>
 800b4ca:	a333      	add	r3, pc, #204	; (adr r3, 800b598 <floor+0xf0>)
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f7f4 fe92 	bl	80001f8 <__adddf3>
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f7f5 fad4 	bl	8000a84 <__aeabi_dcmpgt>
 800b4dc:	b138      	cbz	r0, 800b4ee <floor+0x46>
 800b4de:	2c00      	cmp	r4, #0
 800b4e0:	da57      	bge.n	800b592 <floor+0xea>
 800b4e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b4e6:	431d      	orrs	r5, r3
 800b4e8:	d001      	beq.n	800b4ee <floor+0x46>
 800b4ea:	4c2d      	ldr	r4, [pc, #180]	; (800b5a0 <floor+0xf8>)
 800b4ec:	2500      	movs	r5, #0
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	e025      	b.n	800b540 <floor+0x98>
 800b4f4:	4f2b      	ldr	r7, [pc, #172]	; (800b5a4 <floor+0xfc>)
 800b4f6:	4137      	asrs	r7, r6
 800b4f8:	ea01 0307 	and.w	r3, r1, r7
 800b4fc:	4303      	orrs	r3, r0
 800b4fe:	d01f      	beq.n	800b540 <floor+0x98>
 800b500:	a325      	add	r3, pc, #148	; (adr r3, 800b598 <floor+0xf0>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f4 fe77 	bl	80001f8 <__adddf3>
 800b50a:	2200      	movs	r2, #0
 800b50c:	2300      	movs	r3, #0
 800b50e:	f7f5 fab9 	bl	8000a84 <__aeabi_dcmpgt>
 800b512:	2800      	cmp	r0, #0
 800b514:	d0eb      	beq.n	800b4ee <floor+0x46>
 800b516:	2c00      	cmp	r4, #0
 800b518:	bfbe      	ittt	lt
 800b51a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b51e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b522:	19a4      	addlt	r4, r4, r6
 800b524:	ea24 0407 	bic.w	r4, r4, r7
 800b528:	2500      	movs	r5, #0
 800b52a:	e7e0      	b.n	800b4ee <floor+0x46>
 800b52c:	2e33      	cmp	r6, #51	; 0x33
 800b52e:	dd0b      	ble.n	800b548 <floor+0xa0>
 800b530:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b534:	d104      	bne.n	800b540 <floor+0x98>
 800b536:	ee10 2a10 	vmov	r2, s0
 800b53a:	460b      	mov	r3, r1
 800b53c:	f7f4 fe5c 	bl	80001f8 <__adddf3>
 800b540:	ec41 0b10 	vmov	d0, r0, r1
 800b544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b548:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b54c:	f04f 33ff 	mov.w	r3, #4294967295
 800b550:	fa23 f707 	lsr.w	r7, r3, r7
 800b554:	4207      	tst	r7, r0
 800b556:	d0f3      	beq.n	800b540 <floor+0x98>
 800b558:	a30f      	add	r3, pc, #60	; (adr r3, 800b598 <floor+0xf0>)
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	f7f4 fe4b 	bl	80001f8 <__adddf3>
 800b562:	2200      	movs	r2, #0
 800b564:	2300      	movs	r3, #0
 800b566:	f7f5 fa8d 	bl	8000a84 <__aeabi_dcmpgt>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d0bf      	beq.n	800b4ee <floor+0x46>
 800b56e:	2c00      	cmp	r4, #0
 800b570:	da02      	bge.n	800b578 <floor+0xd0>
 800b572:	2e14      	cmp	r6, #20
 800b574:	d103      	bne.n	800b57e <floor+0xd6>
 800b576:	3401      	adds	r4, #1
 800b578:	ea25 0507 	bic.w	r5, r5, r7
 800b57c:	e7b7      	b.n	800b4ee <floor+0x46>
 800b57e:	2301      	movs	r3, #1
 800b580:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b584:	fa03 f606 	lsl.w	r6, r3, r6
 800b588:	4435      	add	r5, r6
 800b58a:	4545      	cmp	r5, r8
 800b58c:	bf38      	it	cc
 800b58e:	18e4      	addcc	r4, r4, r3
 800b590:	e7f2      	b.n	800b578 <floor+0xd0>
 800b592:	2500      	movs	r5, #0
 800b594:	462c      	mov	r4, r5
 800b596:	e7aa      	b.n	800b4ee <floor+0x46>
 800b598:	8800759c 	.word	0x8800759c
 800b59c:	7e37e43c 	.word	0x7e37e43c
 800b5a0:	bff00000 	.word	0xbff00000
 800b5a4:	000fffff 	.word	0x000fffff

0800b5a8 <nan>:
 800b5a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5b0 <nan+0x8>
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	00000000 	.word	0x00000000
 800b5b4:	7ff80000 	.word	0x7ff80000

0800b5b8 <scalbn>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	ec55 4b10 	vmov	r4, r5, d0
 800b5be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	462b      	mov	r3, r5
 800b5c6:	b99a      	cbnz	r2, 800b5f0 <scalbn+0x38>
 800b5c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b5cc:	4323      	orrs	r3, r4
 800b5ce:	d036      	beq.n	800b63e <scalbn+0x86>
 800b5d0:	4b39      	ldr	r3, [pc, #228]	; (800b6b8 <scalbn+0x100>)
 800b5d2:	4629      	mov	r1, r5
 800b5d4:	ee10 0a10 	vmov	r0, s0
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f7f4 ffc3 	bl	8000564 <__aeabi_dmul>
 800b5de:	4b37      	ldr	r3, [pc, #220]	; (800b6bc <scalbn+0x104>)
 800b5e0:	429e      	cmp	r6, r3
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	460d      	mov	r5, r1
 800b5e6:	da10      	bge.n	800b60a <scalbn+0x52>
 800b5e8:	a32b      	add	r3, pc, #172	; (adr r3, 800b698 <scalbn+0xe0>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	e03a      	b.n	800b666 <scalbn+0xae>
 800b5f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b5f4:	428a      	cmp	r2, r1
 800b5f6:	d10c      	bne.n	800b612 <scalbn+0x5a>
 800b5f8:	ee10 2a10 	vmov	r2, s0
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	4629      	mov	r1, r5
 800b600:	f7f4 fdfa 	bl	80001f8 <__adddf3>
 800b604:	4604      	mov	r4, r0
 800b606:	460d      	mov	r5, r1
 800b608:	e019      	b.n	800b63e <scalbn+0x86>
 800b60a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b60e:	460b      	mov	r3, r1
 800b610:	3a36      	subs	r2, #54	; 0x36
 800b612:	4432      	add	r2, r6
 800b614:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b618:	428a      	cmp	r2, r1
 800b61a:	dd08      	ble.n	800b62e <scalbn+0x76>
 800b61c:	2d00      	cmp	r5, #0
 800b61e:	a120      	add	r1, pc, #128	; (adr r1, 800b6a0 <scalbn+0xe8>)
 800b620:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b624:	da1c      	bge.n	800b660 <scalbn+0xa8>
 800b626:	a120      	add	r1, pc, #128	; (adr r1, 800b6a8 <scalbn+0xf0>)
 800b628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b62c:	e018      	b.n	800b660 <scalbn+0xa8>
 800b62e:	2a00      	cmp	r2, #0
 800b630:	dd08      	ble.n	800b644 <scalbn+0x8c>
 800b632:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b636:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b63a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b63e:	ec45 4b10 	vmov	d0, r4, r5
 800b642:	bd70      	pop	{r4, r5, r6, pc}
 800b644:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b648:	da19      	bge.n	800b67e <scalbn+0xc6>
 800b64a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b64e:	429e      	cmp	r6, r3
 800b650:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b654:	dd0a      	ble.n	800b66c <scalbn+0xb4>
 800b656:	a112      	add	r1, pc, #72	; (adr r1, 800b6a0 <scalbn+0xe8>)
 800b658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e2      	bne.n	800b626 <scalbn+0x6e>
 800b660:	a30f      	add	r3, pc, #60	; (adr r3, 800b6a0 <scalbn+0xe8>)
 800b662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b666:	f7f4 ff7d 	bl	8000564 <__aeabi_dmul>
 800b66a:	e7cb      	b.n	800b604 <scalbn+0x4c>
 800b66c:	a10a      	add	r1, pc, #40	; (adr r1, 800b698 <scalbn+0xe0>)
 800b66e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d0b8      	beq.n	800b5e8 <scalbn+0x30>
 800b676:	a10e      	add	r1, pc, #56	; (adr r1, 800b6b0 <scalbn+0xf8>)
 800b678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b67c:	e7b4      	b.n	800b5e8 <scalbn+0x30>
 800b67e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b682:	3236      	adds	r2, #54	; 0x36
 800b684:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b688:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b68c:	4620      	mov	r0, r4
 800b68e:	4b0c      	ldr	r3, [pc, #48]	; (800b6c0 <scalbn+0x108>)
 800b690:	2200      	movs	r2, #0
 800b692:	e7e8      	b.n	800b666 <scalbn+0xae>
 800b694:	f3af 8000 	nop.w
 800b698:	c2f8f359 	.word	0xc2f8f359
 800b69c:	01a56e1f 	.word	0x01a56e1f
 800b6a0:	8800759c 	.word	0x8800759c
 800b6a4:	7e37e43c 	.word	0x7e37e43c
 800b6a8:	8800759c 	.word	0x8800759c
 800b6ac:	fe37e43c 	.word	0xfe37e43c
 800b6b0:	c2f8f359 	.word	0xc2f8f359
 800b6b4:	81a56e1f 	.word	0x81a56e1f
 800b6b8:	43500000 	.word	0x43500000
 800b6bc:	ffff3cb0 	.word	0xffff3cb0
 800b6c0:	3c900000 	.word	0x3c900000

0800b6c4 <_init>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	bf00      	nop
 800b6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ca:	bc08      	pop	{r3}
 800b6cc:	469e      	mov	lr, r3
 800b6ce:	4770      	bx	lr

0800b6d0 <_fini>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	bf00      	nop
 800b6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d6:	bc08      	pop	{r3}
 800b6d8:	469e      	mov	lr, r3
 800b6da:	4770      	bx	lr
