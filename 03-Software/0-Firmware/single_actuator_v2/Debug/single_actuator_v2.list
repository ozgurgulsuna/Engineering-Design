
single_actuator_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba74  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800bc10  0800bc10  0001bc10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be88  0800be88  0002019c  2**0
                  CONTENTS
  4 .ARM          00000008  0800be88  0800be88  0001be88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be90  0800be90  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be90  0800be90  0001be90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be94  0800be94  0001be94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  0800be98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015c0  2000019c  0800c034  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000175c  0800c034  0002175c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014485  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f0  00000000  00000000  00034651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00037748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc0  00000000  00000000  00038830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191f7  00000000  00000000  000397f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001462b  00000000  00000000  000529e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb8b  00000000  00000000  00067012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6b9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c4c  00000000  00000000  000f6bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000019c 	.word	0x2000019c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bbf4 	.word	0x0800bbf4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001a0 	.word	0x200001a0
 80001d4:	0800bbf4 	.word	0x0800bbf4

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b974 	b.w	8000eb4 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468e      	mov	lr, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14d      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	d969      	bls.n	8000ccc <__udivmoddi4+0xe8>
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	b152      	cbz	r2, 8000c14 <__udivmoddi4+0x30>
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	f1c2 0120 	rsb	r1, r2, #32
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c12:	4094      	lsls	r4, r2
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	0c21      	lsrs	r1, r4, #16
 8000c1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c1e:	fa1f f78c 	uxth.w	r7, ip
 8000c22:	fb08 e316 	mls	r3, r8, r6, lr
 8000c26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2a:	fb06 f107 	mul.w	r1, r6, r7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 811f 	bcs.w	8000e7c <__udivmoddi4+0x298>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 811c 	bls.w	8000e7c <__udivmoddi4+0x298>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x92>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 810a 	bcs.w	8000e80 <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8107 	bls.w	8000e80 <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	1be4      	subs	r4, r4, r7
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa4>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xc2>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80ef 	beq.w	8000e76 <__udivmoddi4+0x292>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x160>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd4>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80f9 	bhi.w	8000eaa <__udivmoddi4+0x2c6>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa4>
 8000cc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xec>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 8092 	bne.w	8000dfe <__udivmoddi4+0x21a>
 8000cda:	eba1 010c 	sub.w	r1, r1, ip
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	0c20      	lsrs	r0, r4, #16
 8000cea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cee:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf6:	fb0e f003 	mul.w	r0, lr, r3
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x12c>
 8000cfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000d02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x12a>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2c0>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	1a09      	subs	r1, r1, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d18:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x156>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x154>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2ca>
 8000d38:	4608      	mov	r0, r1
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d42:	e79c      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000d44:	f1c6 0720 	rsb	r7, r6, #32
 8000d48:	40b3      	lsls	r3, r6
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa20 f407 	lsr.w	r4, r0, r7
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	40f9      	lsrs	r1, r7
 8000d5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d62:	fa00 f306 	lsl.w	r3, r0, r6
 8000d66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6a:	0c20      	lsrs	r0, r4, #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fb09 1118 	mls	r1, r9, r8, r1
 8000d74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d78:	fb08 f00e 	mul.w	r0, r8, lr
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b8>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	1a09      	subs	r1, r1, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da4:	fb09 1110 	mls	r1, r9, r0, r1
 8000da8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db0:	458e      	cmp	lr, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1e2>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2b4>
 8000dbe:	458e      	cmp	lr, r1
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2b4>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dca:	fba0 9402 	umull	r9, r4, r0, r2
 8000dce:	eba1 010e 	sub.w	r1, r1, lr
 8000dd2:	42a1      	cmp	r1, r4
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46a6      	mov	lr, r4
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x2a4>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x2a0>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x212>
 8000dde:	ebb3 0208 	subs.w	r2, r3, r8
 8000de2:	eb61 010e 	sbc.w	r1, r1, lr
 8000de6:	fa01 f707 	lsl.w	r7, r1, r7
 8000dea:	fa22 f306 	lsr.w	r3, r2, r6
 8000dee:	40f1      	lsrs	r1, r6
 8000df0:	431f      	orrs	r7, r3
 8000df2:	e9c5 7100 	strd	r7, r1, [r5]
 8000df6:	2600      	movs	r6, #0
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1c2 0320 	rsb	r3, r2, #32
 8000e02:	40d8      	lsrs	r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e20:	0c0b      	lsrs	r3, r1, #16
 8000e22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e26:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x260>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b8>
 8000e3c:	429e      	cmp	r6, r3
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b8>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1b9b      	subs	r3, r3, r6
 8000e46:	b289      	uxth	r1, r1
 8000e48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb06 f30e 	mul.w	r3, r6, lr
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x28a>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e6a:	3e02      	subs	r6, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	1ac9      	subs	r1, r1, r3
 8000e70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0x104>
 8000e76:	462e      	mov	r6, r5
 8000e78:	4628      	mov	r0, r5
 8000e7a:	e705      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	e6e3      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e6f8      	b.n	8000c76 <__udivmoddi4+0x92>
 8000e84:	454b      	cmp	r3, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f8>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e90:	3801      	subs	r0, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f8>
 8000e94:	4646      	mov	r6, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x28a>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1e2>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x260>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b8>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x12c>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e709      	b.n	8000cc2 <__udivmoddi4+0xde>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x156>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f001 fd1c 	bl	80028f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f832 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 f9ee 	bl	80012a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000ec8:	f008 fb94 	bl	80095f4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000ecc:	f000 f896 	bl	8000ffc <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ed0:	f000 f99a 	bl	8001208 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ed4:	f000 f94a 	bl	800116c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Store the frequency of PID loop
  PID_freq = HAL_RCC_GetSysClockFreq()/htim4.Init.Period;
 8000ed8:	f003 fe84 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <main+0x60>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <main+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim4);
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <main+0x60>)
 8000eec:	f003 ff9c 	bl	8004e28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <main+0x68>)
 8000ef2:	f003 ff99 	bl	8004e28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ef6:	480b      	ldr	r0, [pc, #44]	; (8000f24 <main+0x6c>)
 8000ef8:	f003 ff96 	bl	8004e28 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000efc:	2100      	movs	r1, #0
 8000efe:	4808      	ldr	r0, [pc, #32]	; (8000f20 <main+0x68>)
 8000f00:	f004 f84e 	bl	8004fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f04:	2104      	movs	r1, #4
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <main+0x68>)
 8000f08:	f004 f84a 	bl	8004fa0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <main+0x68>)
 8000f10:	f004 f846 	bl	8004fa0 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <main+0x5c>
 8000f16:	bf00      	nop
 8000f18:	20000248 	.word	0x20000248
 8000f1c:	20000290 	.word	0x20000290
 8000f20:	200001b8 	.word	0x200001b8
 8000f24:	20000200 	.word	0x20000200

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	2230      	movs	r2, #48	; 0x30
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f009 f896 	bl	800a068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <SystemClock_Config+0xcc>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f74:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <SystemClock_Config+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f9c:	2319      	movs	r3, #25
 8000f9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fa0:	23c0      	movs	r3, #192	; 0xc0
 8000fa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fab9 	bl	8004528 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fbc:	f000 fce0 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 fd1b 	bl	8004a18 <HAL_RCC_ClockConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fe8:	f000 fcca 	bl	8001980 <Error_Handler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	3750      	adds	r7, #80	; 0x50
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b096      	sub	sp, #88	; 0x58
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2220      	movs	r2, #32
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f009 f817 	bl	800a068 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <MX_TIM1_Init+0x168>)
 800103c:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <MX_TIM1_Init+0x16c>)
 800103e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <MX_TIM1_Init+0x168>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <MX_TIM1_Init+0x168>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 959;
 800104c:	4b45      	ldr	r3, [pc, #276]	; (8001164 <MX_TIM1_Init+0x168>)
 800104e:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001052:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	4b43      	ldr	r3, [pc, #268]	; (8001164 <MX_TIM1_Init+0x168>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800105a:	4b42      	ldr	r3, [pc, #264]	; (8001164 <MX_TIM1_Init+0x168>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001060:	4b40      	ldr	r3, [pc, #256]	; (8001164 <MX_TIM1_Init+0x168>)
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001066:	483f      	ldr	r0, [pc, #252]	; (8001164 <MX_TIM1_Init+0x168>)
 8001068:	f003 fe8e 	bl	8004d88 <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001072:	f000 fc85 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001080:	4619      	mov	r1, r3
 8001082:	4838      	ldr	r0, [pc, #224]	; (8001164 <MX_TIM1_Init+0x168>)
 8001084:	f004 fa06 	bl	8005494 <HAL_TIM_ConfigClockSource>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800108e:	f000 fc77 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001092:	4834      	ldr	r0, [pc, #208]	; (8001164 <MX_TIM1_Init+0x168>)
 8001094:	f003 ff2a 	bl	8004eec <HAL_TIM_PWM_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800109e:	f000 fc6f 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010ae:	4619      	mov	r1, r3
 80010b0:	482c      	ldr	r0, [pc, #176]	; (8001164 <MX_TIM1_Init+0x168>)
 80010b2:	f004 fdb5 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010bc:	f000 fc60 	bl	8001980 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c0:	2360      	movs	r3, #96	; 0x60
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	481f      	ldr	r0, [pc, #124]	; (8001164 <MX_TIM1_Init+0x168>)
 80010e6:	f004 f913 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010f0:	f000 fc46 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	2204      	movs	r2, #4
 80010fa:	4619      	mov	r1, r3
 80010fc:	4819      	ldr	r0, [pc, #100]	; (8001164 <MX_TIM1_Init+0x168>)
 80010fe:	f004 f907 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001108:	f000 fc3a 	bl	8001980 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800110c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001110:	2208      	movs	r2, #8
 8001112:	4619      	mov	r1, r3
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <MX_TIM1_Init+0x168>)
 8001116:	f004 f8fb 	bl	8005310 <HAL_TIM_PWM_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001120:	f000 fc2e 	bl	8001980 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_TIM1_Init+0x168>)
 8001148:	f004 fdd8 	bl	8005cfc <HAL_TIMEx_ConfigBreakDeadTime>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001152:	f000 fc15 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <MX_TIM1_Init+0x168>)
 8001158:	f000 fcaa 	bl	8001ab0 <HAL_TIM_MspPostInit>

}
 800115c:	bf00      	nop
 800115e:	3758      	adds	r7, #88	; 0x58
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200001b8 	.word	0x200001b8
 8001168:	40010000 	.word	0x40010000

0800116c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_TIM3_Init+0x94>)
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_TIM3_Init+0x98>)
 800118c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_TIM3_Init+0x94>)
 8001190:	22c8      	movs	r2, #200	; 0xc8
 8001192:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_TIM3_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47999;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_TIM3_Init+0x94>)
 800119c:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80011a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_TIM3_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_TIM3_Init+0x94>)
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ae:	4814      	ldr	r0, [pc, #80]	; (8001200 <MX_TIM3_Init+0x94>)
 80011b0:	f003 fdea 	bl	8004d88 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011ba:	f000 fbe1 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	4619      	mov	r1, r3
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_TIM3_Init+0x94>)
 80011cc:	f004 f962 	bl	8005494 <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 fbd3 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <MX_TIM3_Init+0x94>)
 80011e8:	f004 fd1a 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011f2:	f000 fbc5 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000200 	.word	0x20000200
 8001204:	40000400 	.word	0x40000400

08001208 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_TIM4_Init+0x94>)
 8001226:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <MX_TIM4_Init+0x98>)
 8001228:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_TIM4_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_TIM4_Init+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_TIM4_Init+0x94>)
 8001238:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800123c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_TIM4_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM4_Init+0x94>)
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800124a:	4814      	ldr	r0, [pc, #80]	; (800129c <MX_TIM4_Init+0x94>)
 800124c:	f003 fd9c 	bl	8004d88 <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001256:	f000 fb93 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_TIM4_Init+0x94>)
 8001268:	f004 f914 	bl	8005494 <HAL_TIM_ConfigClockSource>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001272:	f000 fb85 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_TIM4_Init+0x94>)
 8001284:	f004 fccc 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800128e:	f000 fb77 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000248 	.word	0x20000248
 80012a0:	40000800 	.word	0x40000800

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <MX_GPIO_Init+0x144>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a49      	ldr	r2, [pc, #292]	; (80013e8 <MX_GPIO_Init+0x144>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <MX_GPIO_Init+0x144>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b43      	ldr	r3, [pc, #268]	; (80013e8 <MX_GPIO_Init+0x144>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a42      	ldr	r2, [pc, #264]	; (80013e8 <MX_GPIO_Init+0x144>)
 80012e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <MX_GPIO_Init+0x144>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <MX_GPIO_Init+0x144>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a3b      	ldr	r2, [pc, #236]	; (80013e8 <MX_GPIO_Init+0x144>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <MX_GPIO_Init+0x144>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <MX_GPIO_Init+0x144>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <MX_GPIO_Init+0x144>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <MX_GPIO_Init+0x144>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001330:	482e      	ldr	r0, [pc, #184]	; (80013ec <MX_GPIO_Init+0x148>)
 8001332:	f001 fe25 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800133c:	482c      	ldr	r0, [pc, #176]	; (80013f0 <MX_GPIO_Init+0x14c>)
 800133e:	f001 fe1f 	bl	8002f80 <HAL_GPIO_WritePin>
                          |IN3_A_Pin|IN3_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ERROR_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8001342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4824      	ldr	r0, [pc, #144]	; (80013ec <MX_GPIO_Init+0x148>)
 800135c:	f001 fc74 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_A_Pin ENC2_A_Pin ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC2_A_Pin|ENC3_A_Pin;
 8001360:	2315      	movs	r3, #21
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001364:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	481f      	ldr	r0, [pc, #124]	; (80013f4 <MX_GPIO_Init+0x150>)
 8001376:	f001 fc67 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin ENC2_B_Pin ENC3_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|ENC2_B_Pin|ENC3_B_Pin;
 800137a:	232a      	movs	r3, #42	; 0x2a
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <MX_GPIO_Init+0x150>)
 800138e:	f001 fc5b 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_B_Pin IN2_A_Pin IN2_B_Pin
                           IN3_A_Pin IN3_B_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 8001392:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001396:	617b      	str	r3, [r7, #20]
                          |IN3_A_Pin|IN3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_GPIO_Init+0x14c>)
 80013ac:	f001 fc4c 	bl	8002c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2006      	movs	r0, #6
 80013b6:	f001 fc10 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ba:	2006      	movs	r0, #6
 80013bc:	f001 fc29 	bl	8002c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2008      	movs	r0, #8
 80013c6:	f001 fc08 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013ca:	2008      	movs	r0, #8
 80013cc:	f001 fc21 	bl	8002c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	200a      	movs	r0, #10
 80013d6:	f001 fc00 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013da:	200a      	movs	r0, #10
 80013dc:	f001 fc19 	bl	8002c12 <HAL_NVIC_EnableIRQ>

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020400 	.word	0x40020400
 80013f4:	40020000 	.word	0x40020000

080013f8 <inverse_kinematics>:

/* USER CODE BEGIN 4 */
void inverse_kinematics(float X_ref_temp){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]

	// Determine the two angles and one length
	d_outer_ref = sqrt(X_ref_temp*X_ref_temp + 20*X_ref_temp + 1864);        // in cm
 8001402:	edd7 7a01 	vldr	s15, [r7, #4]
 8001406:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001412:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80016b0 <inverse_kinematics+0x2b8>
 800141e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001422:	ee17 0a90 	vmov	r0, s15
 8001426:	f7ff f845 	bl	80004b4 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	ec43 2b10 	vmov	d0, r2, r3
 8001432:	f009 f8ad 	bl	800a590 <sqrt>
 8001436:	ec53 2b10 	vmov	r2, r3, d0
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fb69 	bl	8000b14 <__aeabi_d2f>
 8001442:	4603      	mov	r3, r0
 8001444:	4a9b      	ldr	r2, [pc, #620]	; (80016b4 <inverse_kinematics+0x2bc>)
 8001446:	6013      	str	r3, [r2, #0]
	theta_1_ref = 2*atan( (d_outer_ref + 42)/(X_ref_temp + 10) );  // in radians
 8001448:	4b9a      	ldr	r3, [pc, #616]	; (80016b4 <inverse_kinematics+0x2bc>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80016b8 <inverse_kinematics+0x2c0>
 8001452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001456:	edd7 7a01 	vldr	s15, [r7, #4]
 800145a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800145e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001462:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001466:	ee16 0a90 	vmov	r0, s13
 800146a:	f7ff f823 	bl	80004b4 <__aeabi_f2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	ec43 2b10 	vmov	d0, r2, r3
 8001476:	f008 fdff 	bl	800a078 <atan>
 800147a:	ec51 0b10 	vmov	r0, r1, d0
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	f7fe feb9 	bl	80001f8 <__adddf3>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fb41 	bl	8000b14 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a89      	ldr	r2, [pc, #548]	; (80016bc <inverse_kinematics+0x2c4>)
 8001496:	6013      	str	r3, [r2, #0]
	// theta_3_ref = M_PI + theta_1_ref;                      // in radians -- NOT REQUIRED

	// Apply the cos theorem
	d_middle_ref = inverse_cos_theorem(D_LOWER_TO_MAIN_POLE, L_LOWER_POLE, (theta_1_ref - M_PI_2));
 8001498:	4b88      	ldr	r3, [pc, #544]	; (80016bc <inverse_kinematics+0x2c4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f809 	bl	80004b4 <__aeabi_f2d>
 80014a2:	a379      	add	r3, pc, #484	; (adr r3, 8001688 <inverse_kinematics+0x290>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7fe fea4 	bl	80001f4 <__aeabi_dsub>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb2e 	bl	8000b14 <__aeabi_d2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	ee01 3a10 	vmov	s2, r3
 80014be:	eddf 0a80 	vldr	s1, [pc, #512]	; 80016c0 <inverse_kinematics+0x2c8>
 80014c2:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80016c4 <inverse_kinematics+0x2cc>
 80014c6:	f000 f995 	bl	80017f4 <inverse_cos_theorem>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	4b7e      	ldr	r3, [pc, #504]	; (80016c8 <inverse_kinematics+0x2d0>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]
	d_inner_ref = inverse_cos_theorem(D_HIGHER_TO_MAIN_POLE, L_HIGHER_POLE, (theta_1_ref - M_PI_2));
 80014d4:	4b79      	ldr	r3, [pc, #484]	; (80016bc <inverse_kinematics+0x2c4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffeb 	bl	80004b4 <__aeabi_f2d>
 80014de:	a36a      	add	r3, pc, #424	; (adr r3, 8001688 <inverse_kinematics+0x290>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7fe fe86 	bl	80001f4 <__aeabi_dsub>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fb10 	bl	8000b14 <__aeabi_d2f>
 80014f4:	4603      	mov	r3, r0
 80014f6:	ee01 3a10 	vmov	s2, r3
 80014fa:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 80014fe:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001502:	f000 f977 	bl	80017f4 <inverse_cos_theorem>
 8001506:	eef0 7a40 	vmov.f32	s15, s0
 800150a:	4b70      	ldr	r3, [pc, #448]	; (80016cc <inverse_kinematics+0x2d4>)
 800150c:	edc3 7a00 	vstr	s15, [r3]

	d_inner_ref = d_outer_ref - d_inner_ref;
 8001510:	4b68      	ldr	r3, [pc, #416]	; (80016b4 <inverse_kinematics+0x2bc>)
 8001512:	ed93 7a00 	vldr	s14, [r3]
 8001516:	4b6d      	ldr	r3, [pc, #436]	; (80016cc <inverse_kinematics+0x2d4>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001520:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <inverse_kinematics+0x2d4>)
 8001522:	edc3 7a00 	vstr	s15, [r3]

	// Determine motor position reference values (everything in cm)
	mot_inner_set_pos_cm = d_inner_ref - D_INNER_OFFSET;
 8001526:	4b69      	ldr	r3, [pc, #420]	; (80016cc <inverse_kinematics+0x2d4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ffc2 	bl	80004b4 <__aeabi_f2d>
 8001530:	a357      	add	r3, pc, #348	; (adr r3, 8001690 <inverse_kinematics+0x298>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7fe fe5d 	bl	80001f4 <__aeabi_dsub>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f7ff fae7 	bl	8000b14 <__aeabi_d2f>
 8001546:	4603      	mov	r3, r0
 8001548:	4a61      	ldr	r2, [pc, #388]	; (80016d0 <inverse_kinematics+0x2d8>)
 800154a:	6013      	str	r3, [r2, #0]
	mot_middle_set_pos_cm = d_middle_ref - D_MIDDLE_OFFSET;
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <inverse_kinematics+0x2d0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ffaf 	bl	80004b4 <__aeabi_f2d>
 8001556:	a350      	add	r3, pc, #320	; (adr r3, 8001698 <inverse_kinematics+0x2a0>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f7fe fe4a 	bl	80001f4 <__aeabi_dsub>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fad4 	bl	8000b14 <__aeabi_d2f>
 800156c:	4603      	mov	r3, r0
 800156e:	4a59      	ldr	r2, [pc, #356]	; (80016d4 <inverse_kinematics+0x2dc>)
 8001570:	6013      	str	r3, [r2, #0]
	mot_outer_set_pos_cm = d_outer_ref - D_OUTER_OFFSET;
 8001572:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <inverse_kinematics+0x2bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff9c 	bl	80004b4 <__aeabi_f2d>
 800157c:	a348      	add	r3, pc, #288	; (adr r3, 80016a0 <inverse_kinematics+0x2a8>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7fe fe37 	bl	80001f4 <__aeabi_dsub>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fac1 	bl	8000b14 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	4a50      	ldr	r2, [pc, #320]	; (80016d8 <inverse_kinematics+0x2e0>)
 8001596:	6013      	str	r3, [r2, #0]

	if ((mot_inner_set_pos_cm > INNER_SET_LIMIT_MAX) || (mot_inner_set_pos_cm < INNER_SET_LIMIT_MIN)) error_code ='r';
 8001598:	4b4d      	ldr	r3, [pc, #308]	; (80016d0 <inverse_kinematics+0x2d8>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80016dc <inverse_kinematics+0x2e4>
 80015a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	dc09      	bgt.n	80015c0 <inverse_kinematics+0x1c8>
 80015ac:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <inverse_kinematics+0x2d8>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80016e0 <inverse_kinematics+0x2e8>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	d502      	bpl.n	80015c6 <inverse_kinematics+0x1ce>
 80015c0:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <inverse_kinematics+0x2ec>)
 80015c2:	2272      	movs	r2, #114	; 0x72
 80015c4:	701a      	strb	r2, [r3, #0]
	if ((mot_middle_set_pos_cm > MIDDLE_SET_LIMIT_MAX) || (mot_middle_set_pos_cm < MIDDLE_SET_LIMIT_MIN)) error_code ='r';
 80015c6:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <inverse_kinematics+0x2dc>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80015d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d8:	dc09      	bgt.n	80015ee <inverse_kinematics+0x1f6>
 80015da:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <inverse_kinematics+0x2dc>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 80015e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d502      	bpl.n	80015f4 <inverse_kinematics+0x1fc>
 80015ee:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <inverse_kinematics+0x2ec>)
 80015f0:	2272      	movs	r2, #114	; 0x72
 80015f2:	701a      	strb	r2, [r3, #0]
	if ((mot_outer_set_pos_cm > OUTER_SET_LIMIT_MAX) || (mot_outer_set_pos_cm < OUTER_SET_LIMIT_MIN)) error_code ='r';
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <inverse_kinematics+0x2e0>)
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80015fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001606:	dc0c      	bgt.n	8001622 <inverse_kinematics+0x22a>
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <inverse_kinematics+0x2e0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff51 	bl	80004b4 <__aeabi_f2d>
 8001612:	a325      	add	r3, pc, #148	; (adr r3, 80016a8 <inverse_kinematics+0x2b0>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7ff fa16 	bl	8000a48 <__aeabi_dcmplt>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <inverse_kinematics+0x230>
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <inverse_kinematics+0x2ec>)
 8001624:	2272      	movs	r2, #114	; 0x72
 8001626:	701a      	strb	r2, [r3, #0]

	// Determine motor position reference values (everything in cm)
	mot_inner_set_pos = (int)(mot_inner_set_pos_cm*INNER_GEAR_RATIO);
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <inverse_kinematics+0x2d8>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80016e8 <inverse_kinematics+0x2f0>
 8001632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163a:	ee17 2a90 	vmov	r2, s15
 800163e:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <inverse_kinematics+0x2f4>)
 8001640:	601a      	str	r2, [r3, #0]
	mot_middle_set_pos = (int)(mot_middle_set_pos_cm*MIDDLE_GEAR_RATIO);
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <inverse_kinematics+0x2dc>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80016e8 <inverse_kinematics+0x2f0>
 800164c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001650:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165c:	ee17 2a90 	vmov	r2, s15
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <inverse_kinematics+0x2f8>)
 8001662:	601a      	str	r2, [r3, #0]
	mot_outer_set_pos = (int)(mot_outer_set_pos_cm*OUTER_GEAR_RATIO);
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <inverse_kinematics+0x2e0>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80016e8 <inverse_kinematics+0x2f0>
 800166e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001676:	ee17 2a90 	vmov	r2, s15
 800167a:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <inverse_kinematics+0x2fc>)
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	54442d18 	.word	0x54442d18
 800168c:	3ff921fb 	.word	0x3ff921fb
 8001690:	bf6f1638 	.word	0xbf6f1638
 8001694:	403267d7 	.word	0x403267d7
 8001698:	80afbdc8 	.word	0x80afbdc8
 800169c:	4037abf8 	.word	0x4037abf8
 80016a0:	bfb23217 	.word	0xbfb23217
 80016a4:	40459647 	.word	0x40459647
 80016a8:	33333333 	.word	0x33333333
 80016ac:	c0133333 	.word	0xc0133333
 80016b0:	44e90000 	.word	0x44e90000
 80016b4:	200002a4 	.word	0x200002a4
 80016b8:	42280000 	.word	0x42280000
 80016bc:	20000298 	.word	0x20000298
 80016c0:	41c75bf5 	.word	0x41c75bf5
 80016c4:	41701d15 	.word	0x41701d15
 80016c8:	200002a0 	.word	0x200002a0
 80016cc:	2000029c 	.word	0x2000029c
 80016d0:	200002f4 	.word	0x200002f4
 80016d4:	200002f8 	.word	0x200002f8
 80016d8:	200002fc 	.word	0x200002fc
 80016dc:	41820000 	.word	0x41820000
 80016e0:	c13c0000 	.word	0xc13c0000
 80016e4:	200002bc 	.word	0x200002bc
 80016e8:	42200000 	.word	0x42200000
 80016ec:	20000300 	.word	0x20000300
 80016f0:	20000304 	.word	0x20000304
 80016f4:	20000308 	.word	0x20000308

080016f8 <forward_kinematics>:

void forward_kinematics(){
 80016f8:	b5b0      	push	{r4, r5, r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	// Find d_middle_curr & d_inner_curr
	d_middle_curr = enc_middle_pos_cm + D_MIDDLE_OFFSET;
 80016fc:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <forward_kinematics+0xd8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fed7 	bl	80004b4 <__aeabi_f2d>
 8001706:	a32e      	add	r3, pc, #184	; (adr r3, 80017c0 <forward_kinematics+0xc8>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe fd74 	bl	80001f8 <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff f9fc 	bl	8000b14 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <forward_kinematics+0xdc>)
 8001720:	6013      	str	r3, [r2, #0]
	d_outer_curr = enc_outer_pos_cm + D_OUTER_OFFSET;
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <forward_kinematics+0xe0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fec4 	bl	80004b4 <__aeabi_f2d>
 800172c:	a326      	add	r3, pc, #152	; (adr r3, 80017c8 <forward_kinematics+0xd0>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe fd61 	bl	80001f8 <__adddf3>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff f9e9 	bl	8000b14 <__aeabi_d2f>
 8001742:	4603      	mov	r3, r0
 8001744:	4a25      	ldr	r2, [pc, #148]	; (80017dc <forward_kinematics+0xe4>)
 8001746:	6013      	str	r3, [r2, #0]

	// Find theta_1_curr using cos theorem
	theta_1_curr = forward_cos_theorem(D_LOWER_TO_MAIN_POLE, L_LOWER_POLE, d_middle_curr);
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <forward_kinematics+0xdc>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	eeb0 1a67 	vmov.f32	s2, s15
 8001752:	eddf 0a23 	vldr	s1, [pc, #140]	; 80017e0 <forward_kinematics+0xe8>
 8001756:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80017e4 <forward_kinematics+0xec>
 800175a:	f000 f8c9 	bl	80018f0 <forward_cos_theorem>
 800175e:	eef0 7a40 	vmov.f32	s15, s0
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <forward_kinematics+0xf0>)
 8001764:	edc3 7a00 	vstr	s15, [r3]

	// Update X_curr from the values
	X_curr = d_outer_curr*sin(theta_1_curr) - 10;
 8001768:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <forward_kinematics+0xe4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fea1 	bl	80004b4 <__aeabi_f2d>
 8001772:	4604      	mov	r4, r0
 8001774:	460d      	mov	r5, r1
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <forward_kinematics+0xf0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fe9a 	bl	80004b4 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	ec43 2b10 	vmov	d0, r2, r3
 8001788:	f008 fe76 	bl	800a478 <sin>
 800178c:	ec53 2b10 	vmov	r2, r3, d0
 8001790:	4620      	mov	r0, r4
 8001792:	4629      	mov	r1, r5
 8001794:	f7fe fee6 	bl	8000564 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <forward_kinematics+0xf4>)
 80017a6:	f7fe fd25 	bl	80001f4 <__aeabi_dsub>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9af 	bl	8000b14 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <forward_kinematics+0xf8>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	bdb0      	pop	{r4, r5, r7, pc}
 80017c0:	80afbdc8 	.word	0x80afbdc8
 80017c4:	4037abf8 	.word	0x4037abf8
 80017c8:	bfb23217 	.word	0xbfb23217
 80017cc:	40459647 	.word	0x40459647
 80017d0:	200002ec 	.word	0x200002ec
 80017d4:	200002b4 	.word	0x200002b4
 80017d8:	200002f0 	.word	0x200002f0
 80017dc:	200002b0 	.word	0x200002b0
 80017e0:	41c75bf5 	.word	0x41c75bf5
 80017e4:	41701d15 	.word	0x41701d15
 80017e8:	200002ac 	.word	0x200002ac
 80017ec:	40240000 	.word	0x40240000
 80017f0:	200002b8 	.word	0x200002b8

080017f4 <inverse_cos_theorem>:

float inverse_cos_theorem(float a, float b, float beta){
 80017f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	ed87 0a03 	vstr	s0, [r7, #12]
 8001800:	edc7 0a02 	vstr	s1, [r7, #8]
 8001804:	ed87 1a01 	vstr	s2, [r7, #4]
	// Given a, b, and the angle beta; find the other side length of the triangle
	return sqrt( (b*b - a*a*sin(beta)*sin(beta)) ) + a*cos(beta);
 8001808:	edd7 7a02 	vldr	s15, [r7, #8]
 800180c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001810:	ee17 0a90 	vmov	r0, s15
 8001814:	f7fe fe4e 	bl	80004b4 <__aeabi_f2d>
 8001818:	4604      	mov	r4, r0
 800181a:	460d      	mov	r5, r1
 800181c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001820:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001824:	ee17 0a90 	vmov	r0, s15
 8001828:	f7fe fe44 	bl	80004b4 <__aeabi_f2d>
 800182c:	4680      	mov	r8, r0
 800182e:	4689      	mov	r9, r1
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7fe fe3f 	bl	80004b4 <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	ec43 2b10 	vmov	d0, r2, r3
 800183e:	f008 fe1b 	bl	800a478 <sin>
 8001842:	ec53 2b10 	vmov	r2, r3, d0
 8001846:	4640      	mov	r0, r8
 8001848:	4649      	mov	r1, r9
 800184a:	f7fe fe8b 	bl	8000564 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4690      	mov	r8, r2
 8001854:	4699      	mov	r9, r3
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7fe fe2c 	bl	80004b4 <__aeabi_f2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	ec43 2b10 	vmov	d0, r2, r3
 8001864:	f008 fe08 	bl	800a478 <sin>
 8001868:	ec53 2b10 	vmov	r2, r3, d0
 800186c:	4640      	mov	r0, r8
 800186e:	4649      	mov	r1, r9
 8001870:	f7fe fe78 	bl	8000564 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f7fe fcba 	bl	80001f4 <__aeabi_dsub>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	ec43 2b17 	vmov	d7, r2, r3
 8001888:	eeb0 0a47 	vmov.f32	s0, s14
 800188c:	eef0 0a67 	vmov.f32	s1, s15
 8001890:	f008 fe7e 	bl	800a590 <sqrt>
 8001894:	ec59 8b10 	vmov	r8, r9, d0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7fe fe0b 	bl	80004b4 <__aeabi_f2d>
 800189e:	4604      	mov	r4, r0
 80018a0:	460d      	mov	r5, r1
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7fe fe06 	bl	80004b4 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	ec43 2b10 	vmov	d0, r2, r3
 80018b0:	f008 fd82 	bl	800a3b8 <cos>
 80018b4:	ec53 2b10 	vmov	r2, r3, d0
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fe52 	bl	8000564 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4640      	mov	r0, r8
 80018c6:	4649      	mov	r1, r9
 80018c8:	f7fe fc96 	bl	80001f8 <__adddf3>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f91e 	bl	8000b14 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	ee07 3a90 	vmov	s15, r3
}
 80018de:	eeb0 0a67 	vmov.f32	s0, s15
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018ea:	0000      	movs	r0, r0
 80018ec:	0000      	movs	r0, r0
	...

080018f0 <forward_cos_theorem>:

float forward_cos_theorem(float a, float b, float c){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80018fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80018fe:	ed87 1a01 	vstr	s2, [r7, #4]
	// Given a, b, and c; find the angle between a and c, then find theta_1
	return M_PI_2 + acos( (a*a + c*c - b*b)/(2*a*c) );
 8001902:	edd7 7a03 	vldr	s15, [r7, #12]
 8001906:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800190a:	edd7 7a01 	vldr	s15, [r7, #4]
 800190e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001916:	edd7 7a02 	vldr	s15, [r7, #8]
 800191a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800191e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001922:	edd7 7a03 	vldr	s15, [r7, #12]
 8001926:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800192a:	edd7 7a01 	vldr	s15, [r7, #4]
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001936:	ee16 0a90 	vmov	r0, s13
 800193a:	f7fe fdbb 	bl	80004b4 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	ec43 2b10 	vmov	d0, r2, r3
 8001946:	f008 fdef 	bl	800a528 <acos>
 800194a:	ec51 0b10 	vmov	r0, r1, d0
 800194e:	a30a      	add	r3, pc, #40	; (adr r3, 8001978 <forward_cos_theorem+0x88>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe fc50 	bl	80001f8 <__adddf3>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f8d8 	bl	8000b14 <__aeabi_d2f>
 8001964:	4603      	mov	r3, r0
 8001966:	ee07 3a90 	vmov	s15, r3
}
 800196a:	eeb0 0a67 	vmov.f32	s0, s15
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	f3af 8000 	nop.w
 8001978:	54442d18 	.word	0x54442d18
 800197c:	3ff921fb 	.word	0x3ff921fb

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  // EYVAH
	  memcpy(&usb_out, &error_message, sizeof(usb_out));
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <Error_Handler+0x20>)
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <Error_Handler+0x24>)
 800198c:	6811      	ldr	r1, [r2, #0]
 800198e:	6852      	ldr	r2, [r2, #4]
 8001990:	6019      	str	r1, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
	  CDC_Transmit_FS(usb_out, sizeof(usb_out));
 8001994:	2108      	movs	r1, #8
 8001996:	4802      	ldr	r0, [pc, #8]	; (80019a0 <Error_Handler+0x20>)
 8001998:	f007 feea 	bl	8009770 <CDC_Transmit_FS>
	  memcpy(&usb_out, &error_message, sizeof(usb_out));
 800199c:	e7f4      	b.n	8001988 <Error_Handler+0x8>
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000018 	.word	0x20000018

080019a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <HAL_MspInit+0x4c>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_MspInit+0x4c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_MspInit+0x4c>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_MspInit+0x4c>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_TIM_Base_MspInit+0xa8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d10e      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a26:	e036      	b.n	8001a96 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <HAL_TIM_Base_MspInit+0xb0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d116      	bne.n	8001a60 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	201d      	movs	r0, #29
 8001a54:	f001 f8c1 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a58:	201d      	movs	r0, #29
 8001a5a:	f001 f8da 	bl	8002c12 <HAL_NVIC_EnableIRQ>
}
 8001a5e:	e01a      	b.n	8001a96 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a11      	ldr	r2, [pc, #68]	; (8001aac <HAL_TIM_Base_MspInit+0xb4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d115      	bne.n	8001a96 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_TIM_Base_MspInit+0xac>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2101      	movs	r1, #1
 8001a8a:	201e      	movs	r0, #30
 8001a8c:	f001 f8a5 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a90:	201e      	movs	r0, #30
 8001a92:	f001 f8be 	bl	8002c12 <HAL_NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40000800 	.word	0x40000800

08001ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_TIM_MspPostInit+0x68>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d11e      	bne.n	8001b10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_TIM_MspPostInit+0x6c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001aee:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001af2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_TIM_MspPostInit+0x70>)
 8001b0c:	f001 f89c 	bl	8002c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000

08001b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <NMI_Handler+0x4>

08001b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <HardFault_Handler+0x4>

08001b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <MemManage_Handler+0x4>

08001b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <BusFault_Handler+0x4>

08001b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <UsageFault_Handler+0x4>

08001b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b70:	f000 ff14 	bl	800299c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	/* Check the direction of the first motor */
	if(HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4811      	ldr	r0, [pc, #68]	; (8001bc4 <EXTI0_IRQHandler+0x4c>)
 8001b80:	f001 f9e6 	bl	8002f50 <HAL_GPIO_ReadPin>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <EXTI0_IRQHandler+0x1e>
		/* Update the position of the first motor */
		enc_inner_pos ++;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <EXTI0_IRQHandler+0x50>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <EXTI0_IRQHandler+0x50>)
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e004      	b.n	8001ba0 <EXTI0_IRQHandler+0x28>
	}else{
		enc_inner_pos --;
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <EXTI0_IRQHandler+0x50>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <EXTI0_IRQHandler+0x50>)
 8001b9e:	6013      	str	r3, [r2, #0]
	}
	enc_inner_pos_cm = (float)enc_inner_pos/(float)(INNER_GEAR_RATIO);
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <EXTI0_IRQHandler+0x50>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bac:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001bcc <EXTI0_IRQHandler+0x54>
 8001bb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <EXTI0_IRQHandler+0x58>)
 8001bb6:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f001 fa14 	bl	8002fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	200002dc 	.word	0x200002dc
 8001bcc:	42200000 	.word	0x42200000
 8001bd0:	200002e8 	.word	0x200002e8

08001bd4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	/* Check the direction of the second motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC2_B_Pin)){
 8001bd8:	2108      	movs	r1, #8
 8001bda:	4811      	ldr	r0, [pc, #68]	; (8001c20 <EXTI2_IRQHandler+0x4c>)
 8001bdc:	f001 f9b8 	bl	8002f50 <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <EXTI2_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_middle_pos ++;
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <EXTI2_IRQHandler+0x50>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <EXTI2_IRQHandler+0x50>)
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e004      	b.n	8001bfc <EXTI2_IRQHandler+0x28>
		}else{
			enc_middle_pos --;
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <EXTI2_IRQHandler+0x50>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <EXTI2_IRQHandler+0x50>)
 8001bfa:	6013      	str	r3, [r2, #0]
		}
		enc_middle_pos_cm = (float)enc_middle_pos/(float)(MIDDLE_GEAR_RATIO);
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <EXTI2_IRQHandler+0x50>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c08:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001c28 <EXTI2_IRQHandler+0x54>
 8001c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <EXTI2_IRQHandler+0x58>)
 8001c12:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 8001c16:	2004      	movs	r0, #4
 8001c18:	f001 f9e6 	bl	8002fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40020000 	.word	0x40020000
 8001c24:	200002e0 	.word	0x200002e0
 8001c28:	43480000 	.word	0x43480000
 8001c2c:	200002ec 	.word	0x200002ec

08001c30 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	/* Check the direction of the third motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC3_B_Pin)){
 8001c34:	2120      	movs	r1, #32
 8001c36:	4811      	ldr	r0, [pc, #68]	; (8001c7c <EXTI4_IRQHandler+0x4c>)
 8001c38:	f001 f98a 	bl	8002f50 <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <EXTI4_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_outer_pos ++;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <EXTI4_IRQHandler+0x50>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <EXTI4_IRQHandler+0x50>)
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e004      	b.n	8001c58 <EXTI4_IRQHandler+0x28>
		}else{
			enc_outer_pos --;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <EXTI4_IRQHandler+0x50>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <EXTI4_IRQHandler+0x50>)
 8001c56:	6013      	str	r3, [r2, #0]
		}
		enc_outer_pos_cm = (float)enc_outer_pos/(float)(OUTER_GEAR_RATIO);
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <EXTI4_IRQHandler+0x50>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c64:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001c84 <EXTI4_IRQHandler+0x54>
 8001c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <EXTI4_IRQHandler+0x58>)
 8001c6e:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_A_Pin);
 8001c72:	2010      	movs	r0, #16
 8001c74:	f001 f9b8 	bl	8002fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	200002e4 	.word	0x200002e4
 8001c84:	42200000 	.word	0x42200000
 8001c88:	200002f0 	.word	0x200002f0
 8001c8c:	00000000 	.word	0x00000000

08001c90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	// This timer frequency should be determined such that the interpolation
	// interval is approximately equal to the distance that the system can
	// travel in the timer period. (??? IS IT SO? IT LOOKS LIKE IT WILL WORK
	// AS SOON AS THE TIMER PERIOD IS LOW ENOUGH.)
	if (initializing == 0){
 8001c94:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <TIM3_IRQHandler+0x150>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 8096 	bne.w	8001dca <TIM3_IRQHandler+0x13a>
		X_ref_temp = 0;
 8001c9e:	4b51      	ldr	r3, [pc, #324]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

		if (X_curr > X_ref){
 8001ca6:	4b50      	ldr	r3, [pc, #320]	; (8001de8 <TIM3_IRQHandler+0x158>)
 8001ca8:	ed93 7a00 	vldr	s14, [r3]
 8001cac:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <TIM3_IRQHandler+0x15c>)
 8001cae:	edd3 7a00 	vldr	s15, [r3]
 8001cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	dd2c      	ble.n	8001d16 <TIM3_IRQHandler+0x86>
			if((X_curr-X_ref)>INTERPOLATION_INTERVAL)
 8001cbc:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <TIM3_IRQHandler+0x158>)
 8001cbe:	ed93 7a00 	vldr	s14, [r3]
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <TIM3_IRQHandler+0x15c>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ccc:	ee17 0a90 	vmov	r0, s15
 8001cd0:	f7fe fbf0 	bl	80004b4 <__aeabi_f2d>
 8001cd4:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <TIM3_IRQHandler+0x160>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fed3 	bl	8000a84 <__aeabi_dcmpgt>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <TIM3_IRQHandler+0x7c>
				X_ref_temp = X_curr - INTERPOLATION_INTERVAL;
 8001ce4:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <TIM3_IRQHandler+0x158>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe fbe3 	bl	80004b4 <__aeabi_f2d>
 8001cee:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <TIM3_IRQHandler+0x160>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe fa7e 	bl	80001f4 <__aeabi_dsub>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f7fe ff08 	bl	8000b14 <__aeabi_d2f>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e030      	b.n	8001d6e <TIM3_IRQHandler+0xde>
			else
				X_ref_temp = X_ref;
 8001d0c:	4b37      	ldr	r3, [pc, #220]	; (8001dec <TIM3_IRQHandler+0x15c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a34      	ldr	r2, [pc, #208]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e02b      	b.n	8001d6e <TIM3_IRQHandler+0xde>
		}
		else{
			if((X_ref-X_curr)>INTERPOLATION_INTERVAL)
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <TIM3_IRQHandler+0x15c>)
 8001d18:	ed93 7a00 	vldr	s14, [r3]
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <TIM3_IRQHandler+0x158>)
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d26:	ee17 0a90 	vmov	r0, s15
 8001d2a:	f7fe fbc3 	bl	80004b4 <__aeabi_f2d>
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <TIM3_IRQHandler+0x160>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fea6 	bl	8000a84 <__aeabi_dcmpgt>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d013      	beq.n	8001d66 <TIM3_IRQHandler+0xd6>
				X_ref_temp = X_curr + INTERPOLATION_INTERVAL;
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <TIM3_IRQHandler+0x158>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fbb6 	bl	80004b4 <__aeabi_f2d>
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <TIM3_IRQHandler+0x160>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fa53 	bl	80001f8 <__adddf3>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe fedb 	bl	8000b14 <__aeabi_d2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e003      	b.n	8001d6e <TIM3_IRQHandler+0xde>
			else
				X_ref_temp = X_ref;
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <TIM3_IRQHandler+0x15c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001d6c:	6013      	str	r3, [r2, #0]
		}

		inverse_kinematics(X_ref_temp);
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <TIM3_IRQHandler+0x154>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	eeb0 0a67 	vmov.f32	s0, s15
 8001d78:	f7ff fb3e 	bl	80013f8 <inverse_kinematics>

		if( (ack_to_be_sent == 1) && (fabs(X_ref - X_curr) < 0.1)){
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <TIM3_IRQHandler+0x164>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d122      	bne.n	8001dca <TIM3_IRQHandler+0x13a>
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <TIM3_IRQHandler+0x15c>)
 8001d86:	ed93 7a00 	vldr	s14, [r3]
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <TIM3_IRQHandler+0x158>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d94:	eef0 7ae7 	vabs.f32	s15, s15
 8001d98:	ee17 0a90 	vmov	r0, s15
 8001d9c:	f7fe fb8a 	bl	80004b4 <__aeabi_f2d>
 8001da0:	a30d      	add	r3, pc, #52	; (adr r3, 8001dd8 <TIM3_IRQHandler+0x148>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fe4f 	bl	8000a48 <__aeabi_dcmplt>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00c      	beq.n	8001dca <TIM3_IRQHandler+0x13a>
			memcpy(&usb_out, &acknowledge_message, sizeof(usb_out));
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <TIM3_IRQHandler+0x168>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <TIM3_IRQHandler+0x16c>)
 8001db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001db8:	e883 0003 	stmia.w	r3, {r0, r1}
			CDC_Transmit_FS(usb_out, sizeof(usb_out));
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	480e      	ldr	r0, [pc, #56]	; (8001df8 <TIM3_IRQHandler+0x168>)
 8001dc0:	f007 fcd6 	bl	8009770 <CDC_Transmit_FS>
			ack_to_be_sent = 0;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <TIM3_IRQHandler+0x164>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dca:	480d      	ldr	r0, [pc, #52]	; (8001e00 <TIM3_IRQHandler+0x170>)
 8001dcc:	f003 f998 	bl	8005100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	9999999a 	.word	0x9999999a
 8001ddc:	3fb99999 	.word	0x3fb99999
 8001de0:	20000038 	.word	0x20000038
 8001de4:	200002d8 	.word	0x200002d8
 8001de8:	200002b8 	.word	0x200002b8
 8001dec:	200002a8 	.word	0x200002a8
 8001df0:	20000000 	.word	0x20000000
 8001df4:	200002be 	.word	0x200002be
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000010 	.word	0x20000010
 8001e00:	20000200 	.word	0x20000200
 8001e04:	00000000 	.word	0x00000000

08001e08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(error_code == 0 && external_shutdown == 0){
 8001e0e:	4bb6      	ldr	r3, [pc, #728]	; (80020e8 <TIM4_IRQHandler+0x2e0>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 8348 	bne.w	80024a8 <TIM4_IRQHandler+0x6a0>
 8001e18:	4bb4      	ldr	r3, [pc, #720]	; (80020ec <TIM4_IRQHandler+0x2e4>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f040 8343 	bne.w	80024a8 <TIM4_IRQHandler+0x6a0>

		/* Determine PID errors */
		inner_pos_error = mot_inner_set_pos - enc_inner_pos;
 8001e22:	4bb3      	ldr	r3, [pc, #716]	; (80020f0 <TIM4_IRQHandler+0x2e8>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4bb3      	ldr	r3, [pc, #716]	; (80020f4 <TIM4_IRQHandler+0x2ec>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e34:	4bb0      	ldr	r3, [pc, #704]	; (80020f8 <TIM4_IRQHandler+0x2f0>)
 8001e36:	edc3 7a00 	vstr	s15, [r3]
		middle_pos_error = mot_middle_set_pos - enc_middle_pos;
 8001e3a:	4bb0      	ldr	r3, [pc, #704]	; (80020fc <TIM4_IRQHandler+0x2f4>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4bb0      	ldr	r3, [pc, #704]	; (8002100 <TIM4_IRQHandler+0x2f8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4c:	4bad      	ldr	r3, [pc, #692]	; (8002104 <TIM4_IRQHandler+0x2fc>)
 8001e4e:	edc3 7a00 	vstr	s15, [r3]
		outer_pos_error = mot_outer_set_pos - enc_outer_pos;
 8001e52:	4bad      	ldr	r3, [pc, #692]	; (8002108 <TIM4_IRQHandler+0x300>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4bad      	ldr	r3, [pc, #692]	; (800210c <TIM4_IRQHandler+0x304>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e64:	4baa      	ldr	r3, [pc, #680]	; (8002110 <TIM4_IRQHandler+0x308>)
 8001e66:	edc3 7a00 	vstr	s15, [r3]

		float inner_der_error=(inner_pos_error-pre_inner_pos_error)*PID_freq;
 8001e6a:	4ba3      	ldr	r3, [pc, #652]	; (80020f8 <TIM4_IRQHandler+0x2f0>)
 8001e6c:	ed93 7a00 	vldr	s14, [r3]
 8001e70:	4ba8      	ldr	r3, [pc, #672]	; (8002114 <TIM4_IRQHandler+0x30c>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e7a:	4ba7      	ldr	r3, [pc, #668]	; (8002118 <TIM4_IRQHandler+0x310>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8a:	edc7 7a03 	vstr	s15, [r7, #12]
		float middle_der_error=(middle_pos_error-pre_middle_pos_error)*PID_freq;
 8001e8e:	4b9d      	ldr	r3, [pc, #628]	; (8002104 <TIM4_IRQHandler+0x2fc>)
 8001e90:	ed93 7a00 	vldr	s14, [r3]
 8001e94:	4ba1      	ldr	r3, [pc, #644]	; (800211c <TIM4_IRQHandler+0x314>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9e:	4b9e      	ldr	r3, [pc, #632]	; (8002118 <TIM4_IRQHandler+0x310>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	edc7 7a02 	vstr	s15, [r7, #8]
		float outer_der_error=(outer_pos_error-pre_outer_pos_error)*PID_freq;
 8001eb2:	4b97      	ldr	r3, [pc, #604]	; (8002110 <TIM4_IRQHandler+0x308>)
 8001eb4:	ed93 7a00 	vldr	s14, [r3]
 8001eb8:	4b99      	ldr	r3, [pc, #612]	; (8002120 <TIM4_IRQHandler+0x318>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec2:	4b95      	ldr	r3, [pc, #596]	; (8002118 <TIM4_IRQHandler+0x310>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed2:	edc7 7a01 	vstr	s15, [r7, #4]

		inner_int_error+=inner_pos_error/PID_freq;
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <TIM4_IRQHandler+0x2f0>)
 8001ed8:	edd3 6a00 	vldr	s13, [r3]
 8001edc:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <TIM4_IRQHandler+0x310>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eec:	4b8d      	ldr	r3, [pc, #564]	; (8002124 <TIM4_IRQHandler+0x31c>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef6:	4b8b      	ldr	r3, [pc, #556]	; (8002124 <TIM4_IRQHandler+0x31c>)
 8001ef8:	edc3 7a00 	vstr	s15, [r3]
		middle_int_error+=middle_pos_error/PID_freq;
 8001efc:	4b81      	ldr	r3, [pc, #516]	; (8002104 <TIM4_IRQHandler+0x2fc>)
 8001efe:	edd3 6a00 	vldr	s13, [r3]
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <TIM4_IRQHandler+0x310>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f12:	4b85      	ldr	r3, [pc, #532]	; (8002128 <TIM4_IRQHandler+0x320>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1c:	4b82      	ldr	r3, [pc, #520]	; (8002128 <TIM4_IRQHandler+0x320>)
 8001f1e:	edc3 7a00 	vstr	s15, [r3]
		outer_int_error+=outer_pos_error/PID_freq;
 8001f22:	4b7b      	ldr	r3, [pc, #492]	; (8002110 <TIM4_IRQHandler+0x308>)
 8001f24:	edd3 6a00 	vldr	s13, [r3]
 8001f28:	4b7b      	ldr	r3, [pc, #492]	; (8002118 <TIM4_IRQHandler+0x310>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f38:	4b7c      	ldr	r3, [pc, #496]	; (800212c <TIM4_IRQHandler+0x324>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f42:	4b7a      	ldr	r3, [pc, #488]	; (800212c <TIM4_IRQHandler+0x324>)
 8001f44:	edc3 7a00 	vstr	s15, [r3]

		if (inner_int_error>=ANTI_WIND_UP) inner_int_error=ANTI_WIND_UP;
 8001f48:	4b76      	ldr	r3, [pc, #472]	; (8002124 <TIM4_IRQHandler+0x31c>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002130 <TIM4_IRQHandler+0x328>
 8001f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5a:	db02      	blt.n	8001f62 <TIM4_IRQHandler+0x15a>
 8001f5c:	4b71      	ldr	r3, [pc, #452]	; (8002124 <TIM4_IRQHandler+0x31c>)
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <TIM4_IRQHandler+0x32c>)
 8001f60:	601a      	str	r2, [r3, #0]
		if (middle_int_error>=ANTI_WIND_UP) middle_int_error=ANTI_WIND_UP;
 8001f62:	4b71      	ldr	r3, [pc, #452]	; (8002128 <TIM4_IRQHandler+0x320>)
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002130 <TIM4_IRQHandler+0x328>
 8001f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f74:	db02      	blt.n	8001f7c <TIM4_IRQHandler+0x174>
 8001f76:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <TIM4_IRQHandler+0x320>)
 8001f78:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <TIM4_IRQHandler+0x32c>)
 8001f7a:	601a      	str	r2, [r3, #0]
		if (outer_int_error>=ANTI_WIND_UP) outer_int_error=ANTI_WIND_UP;
 8001f7c:	4b6b      	ldr	r3, [pc, #428]	; (800212c <TIM4_IRQHandler+0x324>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002130 <TIM4_IRQHandler+0x328>
 8001f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	db02      	blt.n	8001f96 <TIM4_IRQHandler+0x18e>
 8001f90:	4b66      	ldr	r3, [pc, #408]	; (800212c <TIM4_IRQHandler+0x324>)
 8001f92:	4a68      	ldr	r2, [pc, #416]	; (8002134 <TIM4_IRQHandler+0x32c>)
 8001f94:	601a      	str	r2, [r3, #0]

		if (inner_int_error<=-ANTI_WIND_UP) inner_int_error=-ANTI_WIND_UP;
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <TIM4_IRQHandler+0x31c>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002138 <TIM4_IRQHandler+0x330>
 8001fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa8:	d802      	bhi.n	8001fb0 <TIM4_IRQHandler+0x1a8>
 8001faa:	4b5e      	ldr	r3, [pc, #376]	; (8002124 <TIM4_IRQHandler+0x31c>)
 8001fac:	4a63      	ldr	r2, [pc, #396]	; (800213c <TIM4_IRQHandler+0x334>)
 8001fae:	601a      	str	r2, [r3, #0]
		if (middle_int_error<=-ANTI_WIND_UP) middle_int_error=-ANTI_WIND_UP;
 8001fb0:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <TIM4_IRQHandler+0x320>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002138 <TIM4_IRQHandler+0x330>
 8001fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d802      	bhi.n	8001fca <TIM4_IRQHandler+0x1c2>
 8001fc4:	4b58      	ldr	r3, [pc, #352]	; (8002128 <TIM4_IRQHandler+0x320>)
 8001fc6:	4a5d      	ldr	r2, [pc, #372]	; (800213c <TIM4_IRQHandler+0x334>)
 8001fc8:	601a      	str	r2, [r3, #0]
		if (outer_int_error<=-ANTI_WIND_UP) outer_int_error=-ANTI_WIND_UP;
 8001fca:	4b58      	ldr	r3, [pc, #352]	; (800212c <TIM4_IRQHandler+0x324>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002138 <TIM4_IRQHandler+0x330>
 8001fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	d802      	bhi.n	8001fe4 <TIM4_IRQHandler+0x1dc>
 8001fde:	4b53      	ldr	r3, [pc, #332]	; (800212c <TIM4_IRQHandler+0x324>)
 8001fe0:	4a56      	ldr	r2, [pc, #344]	; (800213c <TIM4_IRQHandler+0x334>)
 8001fe2:	601a      	str	r2, [r3, #0]

		if (((inner_pos_error>0) && (inner_int_error<0))||((inner_pos_error<0) && (inner_int_error>0))) inner_int_error=0;
 8001fe4:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <TIM4_IRQHandler+0x2f0>)
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff2:	dd07      	ble.n	8002004 <TIM4_IRQHandler+0x1fc>
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <TIM4_IRQHandler+0x31c>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	d40f      	bmi.n	8002024 <TIM4_IRQHandler+0x21c>
 8002004:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <TIM4_IRQHandler+0x2f0>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	d50b      	bpl.n	800202c <TIM4_IRQHandler+0x224>
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <TIM4_IRQHandler+0x31c>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800201e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002022:	dd03      	ble.n	800202c <TIM4_IRQHandler+0x224>
 8002024:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <TIM4_IRQHandler+0x31c>)
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
		if (((middle_pos_error>0) && (middle_int_error<0))||((middle_pos_error<0) && (middle_int_error>0))) middle_int_error=0;
 800202c:	4b35      	ldr	r3, [pc, #212]	; (8002104 <TIM4_IRQHandler+0x2fc>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	dd07      	ble.n	800204c <TIM4_IRQHandler+0x244>
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <TIM4_IRQHandler+0x320>)
 800203e:	edd3 7a00 	vldr	s15, [r3]
 8002042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204a:	d40f      	bmi.n	800206c <TIM4_IRQHandler+0x264>
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <TIM4_IRQHandler+0x2fc>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	d50b      	bpl.n	8002074 <TIM4_IRQHandler+0x26c>
 800205c:	4b32      	ldr	r3, [pc, #200]	; (8002128 <TIM4_IRQHandler+0x320>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	dd03      	ble.n	8002074 <TIM4_IRQHandler+0x26c>
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <TIM4_IRQHandler+0x320>)
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
		if (((outer_pos_error>0) && (outer_int_error<0))||((outer_pos_error<0) && (outer_int_error>0))) outer_int_error=0;
 8002074:	4b26      	ldr	r3, [pc, #152]	; (8002110 <TIM4_IRQHandler+0x308>)
 8002076:	edd3 7a00 	vldr	s15, [r3]
 800207a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	dd07      	ble.n	8002094 <TIM4_IRQHandler+0x28c>
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <TIM4_IRQHandler+0x324>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d40f      	bmi.n	80020b4 <TIM4_IRQHandler+0x2ac>
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <TIM4_IRQHandler+0x308>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	d50b      	bpl.n	80020bc <TIM4_IRQHandler+0x2b4>
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <TIM4_IRQHandler+0x324>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	dd03      	ble.n	80020bc <TIM4_IRQHandler+0x2b4>
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <TIM4_IRQHandler+0x324>)
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

		pre_inner_pos_error=inner_pos_error;
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <TIM4_IRQHandler+0x2f0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <TIM4_IRQHandler+0x30c>)
 80020c2:	6013      	str	r3, [r2, #0]
		pre_middle_pos_error=middle_pos_error;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <TIM4_IRQHandler+0x2fc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <TIM4_IRQHandler+0x314>)
 80020ca:	6013      	str	r3, [r2, #0]
		pre_outer_pos_error=outer_pos_error;
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <TIM4_IRQHandler+0x308>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a13      	ldr	r2, [pc, #76]	; (8002120 <TIM4_IRQHandler+0x318>)
 80020d2:	6013      	str	r3, [r2, #0]

		/* Set the duty (only proportional implemented for now) */
		duty_inner = (int)(kp_inner*inner_pos_error+kd_inner*inner_der_error+ki_inner*inner_int_error);
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <TIM4_IRQHandler+0x338>)
 80020d6:	ed93 7a00 	vldr	s14, [r3]
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <TIM4_IRQHandler+0x2f0>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e4:	e02e      	b.n	8002144 <TIM4_IRQHandler+0x33c>
 80020e6:	bf00      	nop
 80020e8:	200002bc 	.word	0x200002bc
 80020ec:	200002bd 	.word	0x200002bd
 80020f0:	20000300 	.word	0x20000300
 80020f4:	200002dc 	.word	0x200002dc
 80020f8:	2000030c 	.word	0x2000030c
 80020fc:	20000304 	.word	0x20000304
 8002100:	200002e0 	.word	0x200002e0
 8002104:	20000310 	.word	0x20000310
 8002108:	20000308 	.word	0x20000308
 800210c:	200002e4 	.word	0x200002e4
 8002110:	20000314 	.word	0x20000314
 8002114:	20000318 	.word	0x20000318
 8002118:	20000290 	.word	0x20000290
 800211c:	2000031c 	.word	0x2000031c
 8002120:	20000320 	.word	0x20000320
 8002124:	20000324 	.word	0x20000324
 8002128:	20000328 	.word	0x20000328
 800212c:	2000032c 	.word	0x2000032c
 8002130:	42200000 	.word	0x42200000
 8002134:	42200000 	.word	0x42200000
 8002138:	c2200000 	.word	0xc2200000
 800213c:	c2200000 	.word	0xc2200000
 8002140:	20000020 	.word	0x20000020
 8002144:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <TIM4_IRQHandler+0x4b4>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	edd7 7a03 	vldr	s15, [r7, #12]
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002156:	4b5a      	ldr	r3, [pc, #360]	; (80022c0 <TIM4_IRQHandler+0x4b8>)
 8002158:	edd3 6a00 	vldr	s13, [r3]
 800215c:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <TIM4_IRQHandler+0x4bc>)
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800216e:	ee17 2a90 	vmov	r2, s15
 8002172:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <TIM4_IRQHandler+0x4c0>)
 8002174:	601a      	str	r2, [r3, #0]
		duty_middle = (int)(kp_middle*middle_pos_error+kd_middle*middle_der_error+ki_middle*middle_int_error);
 8002176:	4b55      	ldr	r3, [pc, #340]	; (80022cc <TIM4_IRQHandler+0x4c4>)
 8002178:	ed93 7a00 	vldr	s14, [r3]
 800217c:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <TIM4_IRQHandler+0x4c8>)
 800217e:	edd3 7a00 	vldr	s15, [r3]
 8002182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <TIM4_IRQHandler+0x4cc>)
 8002188:	edd3 6a00 	vldr	s13, [r3]
 800218c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002198:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <TIM4_IRQHandler+0x4d0>)
 800219a:	edd3 6a00 	vldr	s13, [r3]
 800219e:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <TIM4_IRQHandler+0x4d4>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b0:	ee17 2a90 	vmov	r2, s15
 80021b4:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <TIM4_IRQHandler+0x4d8>)
 80021b6:	601a      	str	r2, [r3, #0]
		duty_outer = (int)(kp_outer*outer_pos_error+kd_outer*outer_der_error+ki_outer*outer_int_error);
 80021b8:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <TIM4_IRQHandler+0x4dc>)
 80021ba:	ed93 7a00 	vldr	s14, [r3]
 80021be:	4b4a      	ldr	r3, [pc, #296]	; (80022e8 <TIM4_IRQHandler+0x4e0>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021c8:	4b48      	ldr	r3, [pc, #288]	; (80022ec <TIM4_IRQHandler+0x4e4>)
 80021ca:	edd3 6a00 	vldr	s13, [r3]
 80021ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80021d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021da:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <TIM4_IRQHandler+0x4e8>)
 80021dc:	edd3 6a00 	vldr	s13, [r3]
 80021e0:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <TIM4_IRQHandler+0x4ec>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f2:	ee17 2a90 	vmov	r2, s15
 80021f6:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <TIM4_IRQHandler+0x4f0>)
 80021f8:	601a      	str	r2, [r3, #0]

		/* Set the direction (MOTOR CONNECTIONS REVERSED!!!) */
		if(duty_inner > 0){
 80021fa:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <TIM4_IRQHandler+0x4c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	dd0e      	ble.n	8002220 <TIM4_IRQHandler+0x418>
				HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <TIM4_IRQHandler+0x4f4>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	2108      	movs	r1, #8
 800220a:	483d      	ldr	r0, [pc, #244]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 800220c:	f000 feb8 	bl	8002f80 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, HIGH);
 8002210:	4b3c      	ldr	r3, [pc, #240]	; (8002304 <TIM4_IRQHandler+0x4fc>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	461a      	mov	r2, r3
 8002216:	2110      	movs	r1, #16
 8002218:	4839      	ldr	r0, [pc, #228]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 800221a:	f000 feb1 	bl	8002f80 <HAL_GPIO_WritePin>
 800221e:	e012      	b.n	8002246 <TIM4_IRQHandler+0x43e>
		}
		else{
				duty_inner = -duty_inner;
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <TIM4_IRQHandler+0x4c0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	425b      	negs	r3, r3
 8002226:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <TIM4_IRQHandler+0x4c0>)
 8002228:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 800222a:	4b34      	ldr	r3, [pc, #208]	; (80022fc <TIM4_IRQHandler+0x4f4>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	2110      	movs	r1, #16
 8002232:	4833      	ldr	r0, [pc, #204]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 8002234:	f000 fea4 	bl	8002f80 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, HIGH);
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <TIM4_IRQHandler+0x4fc>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	2108      	movs	r1, #8
 8002240:	482f      	ldr	r0, [pc, #188]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 8002242:	f000 fe9d 	bl	8002f80 <HAL_GPIO_WritePin>
		}
		if(duty_middle > 0){
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <TIM4_IRQHandler+0x4d8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	dd0e      	ble.n	800226c <TIM4_IRQHandler+0x464>
				HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, LOW);
 800224e:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <TIM4_IRQHandler+0x4f4>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	2120      	movs	r1, #32
 8002256:	482a      	ldr	r0, [pc, #168]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 8002258:	f000 fe92 	bl	8002f80 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, HIGH);
 800225c:	4b29      	ldr	r3, [pc, #164]	; (8002304 <TIM4_IRQHandler+0x4fc>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	2140      	movs	r1, #64	; 0x40
 8002264:	4826      	ldr	r0, [pc, #152]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 8002266:	f000 fe8b 	bl	8002f80 <HAL_GPIO_WritePin>
 800226a:	e012      	b.n	8002292 <TIM4_IRQHandler+0x48a>
		}
		else{
				duty_middle = -duty_middle;
 800226c:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <TIM4_IRQHandler+0x4d8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	425b      	negs	r3, r3
 8002272:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <TIM4_IRQHandler+0x4d8>)
 8002274:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, LOW);
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <TIM4_IRQHandler+0x4f4>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	2140      	movs	r1, #64	; 0x40
 800227e:	4820      	ldr	r0, [pc, #128]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 8002280:	f000 fe7e 	bl	8002f80 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, HIGH);
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <TIM4_IRQHandler+0x4fc>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	2120      	movs	r1, #32
 800228c:	481c      	ldr	r0, [pc, #112]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 800228e:	f000 fe77 	bl	8002f80 <HAL_GPIO_WritePin>
		}
		if(duty_outer > 0){
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <TIM4_IRQHandler+0x4f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	dd36      	ble.n	8002308 <TIM4_IRQHandler+0x500>
				HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, LOW);
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <TIM4_IRQHandler+0x4f4>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	4817      	ldr	r0, [pc, #92]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 80022a4:	f000 fe6c 	bl	8002f80 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, HIGH);
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <TIM4_IRQHandler+0x4fc>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b2:	4813      	ldr	r0, [pc, #76]	; (8002300 <TIM4_IRQHandler+0x4f8>)
 80022b4:	f000 fe64 	bl	8002f80 <HAL_GPIO_WritePin>
 80022b8:	e03a      	b.n	8002330 <TIM4_IRQHandler+0x528>
 80022ba:	bf00      	nop
 80022bc:	20000330 	.word	0x20000330
 80022c0:	20000024 	.word	0x20000024
 80022c4:	20000324 	.word	0x20000324
 80022c8:	2000033c 	.word	0x2000033c
 80022cc:	20000028 	.word	0x20000028
 80022d0:	20000310 	.word	0x20000310
 80022d4:	20000334 	.word	0x20000334
 80022d8:	2000002c 	.word	0x2000002c
 80022dc:	20000328 	.word	0x20000328
 80022e0:	20000340 	.word	0x20000340
 80022e4:	20000030 	.word	0x20000030
 80022e8:	20000314 	.word	0x20000314
 80022ec:	20000338 	.word	0x20000338
 80022f0:	20000034 	.word	0x20000034
 80022f4:	2000032c 	.word	0x2000032c
 80022f8:	20000344 	.word	0x20000344
 80022fc:	20000348 	.word	0x20000348
 8002300:	40020400 	.word	0x40020400
 8002304:	20000039 	.word	0x20000039
		}
		else{
				duty_outer = -duty_outer;
 8002308:	4b77      	ldr	r3, [pc, #476]	; (80024e8 <TIM4_IRQHandler+0x6e0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	425b      	negs	r3, r3
 800230e:	4a76      	ldr	r2, [pc, #472]	; (80024e8 <TIM4_IRQHandler+0x6e0>)
 8002310:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, LOW);
 8002312:	4b76      	ldr	r3, [pc, #472]	; (80024ec <TIM4_IRQHandler+0x6e4>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800231c:	4874      	ldr	r0, [pc, #464]	; (80024f0 <TIM4_IRQHandler+0x6e8>)
 800231e:	f000 fe2f 	bl	8002f80 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, HIGH);
 8002322:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <TIM4_IRQHandler+0x6ec>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	2180      	movs	r1, #128	; 0x80
 800232a:	4871      	ldr	r0, [pc, #452]	; (80024f0 <TIM4_IRQHandler+0x6e8>)
 800232c:	f000 fe28 	bl	8002f80 <HAL_GPIO_WritePin>
		}

		/* Limit the duty */
		if(duty_inner > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8002330:	4b71      	ldr	r3, [pc, #452]	; (80024f8 <TIM4_IRQHandler+0x6f0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f8ab 	bl	8000490 <__aeabi_i2d>
 800233a:	4604      	mov	r4, r0
 800233c:	460d      	mov	r5, r1
 800233e:	4b6f      	ldr	r3, [pc, #444]	; (80024fc <TIM4_IRQHandler+0x6f4>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f893 	bl	8000470 <__aeabi_ui2d>
 800234a:	a365      	add	r3, pc, #404	; (adr r3, 80024e0 <TIM4_IRQHandler+0x6d8>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f7fe f908 	bl	8000564 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4620      	mov	r0, r4
 800235a:	4629      	mov	r1, r5
 800235c:	f7fe fb92 	bl	8000a84 <__aeabi_dcmpgt>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d013      	beq.n	800238e <TIM4_IRQHandler+0x586>
				duty_inner = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <TIM4_IRQHandler+0x6f4>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	3301      	adds	r3, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f87f 	bl	8000470 <__aeabi_ui2d>
 8002372:	a35b      	add	r3, pc, #364	; (adr r3, 80024e0 <TIM4_IRQHandler+0x6d8>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe f8f4 	bl	8000564 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4610      	mov	r0, r2
 8002382:	4619      	mov	r1, r3
 8002384:	f7fe fb9e 	bl	8000ac4 <__aeabi_d2iz>
 8002388:	4603      	mov	r3, r0
 800238a:	4a5b      	ldr	r2, [pc, #364]	; (80024f8 <TIM4_IRQHandler+0x6f0>)
 800238c:	6013      	str	r3, [r2, #0]
			}
		if(duty_middle > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 800238e:	4b5c      	ldr	r3, [pc, #368]	; (8002500 <TIM4_IRQHandler+0x6f8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f87c 	bl	8000490 <__aeabi_i2d>
 8002398:	4604      	mov	r4, r0
 800239a:	460d      	mov	r5, r1
 800239c:	4b57      	ldr	r3, [pc, #348]	; (80024fc <TIM4_IRQHandler+0x6f4>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	3301      	adds	r3, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f864 	bl	8000470 <__aeabi_ui2d>
 80023a8:	a34d      	add	r3, pc, #308	; (adr r3, 80024e0 <TIM4_IRQHandler+0x6d8>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	f7fe f8d9 	bl	8000564 <__aeabi_dmul>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4620      	mov	r0, r4
 80023b8:	4629      	mov	r1, r5
 80023ba:	f7fe fb63 	bl	8000a84 <__aeabi_dcmpgt>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <TIM4_IRQHandler+0x5e4>
				duty_middle = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 80023c4:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <TIM4_IRQHandler+0x6f4>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	3301      	adds	r3, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f850 	bl	8000470 <__aeabi_ui2d>
 80023d0:	a343      	add	r3, pc, #268	; (adr r3, 80024e0 <TIM4_IRQHandler+0x6d8>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f7fe f8c5 	bl	8000564 <__aeabi_dmul>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe fb6f 	bl	8000ac4 <__aeabi_d2iz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a45      	ldr	r2, [pc, #276]	; (8002500 <TIM4_IRQHandler+0x6f8>)
 80023ea:	6013      	str	r3, [r2, #0]
			}
		if(duty_outer > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 80023ec:	4b3e      	ldr	r3, [pc, #248]	; (80024e8 <TIM4_IRQHandler+0x6e0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe f84d 	bl	8000490 <__aeabi_i2d>
 80023f6:	4604      	mov	r4, r0
 80023f8:	460d      	mov	r5, r1
 80023fa:	4b40      	ldr	r3, [pc, #256]	; (80024fc <TIM4_IRQHandler+0x6f4>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	3301      	adds	r3, #1
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f835 	bl	8000470 <__aeabi_ui2d>
 8002406:	a336      	add	r3, pc, #216	; (adr r3, 80024e0 <TIM4_IRQHandler+0x6d8>)
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	f7fe f8aa 	bl	8000564 <__aeabi_dmul>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4620      	mov	r0, r4
 8002416:	4629      	mov	r1, r5
 8002418:	f7fe fb34 	bl	8000a84 <__aeabi_dcmpgt>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d013      	beq.n	800244a <TIM4_IRQHandler+0x642>
				duty_outer = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8002422:	4b36      	ldr	r3, [pc, #216]	; (80024fc <TIM4_IRQHandler+0x6f4>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	3301      	adds	r3, #1
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f821 	bl	8000470 <__aeabi_ui2d>
 800242e:	a32c      	add	r3, pc, #176	; (adr r3, 80024e0 <TIM4_IRQHandler+0x6d8>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe f896 	bl	8000564 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f7fe fb40 	bl	8000ac4 <__aeabi_d2iz>
 8002444:	4603      	mov	r3, r0
 8002446:	4a28      	ldr	r2, [pc, #160]	; (80024e8 <TIM4_IRQHandler+0x6e0>)
 8002448:	6013      	str	r3, [r2, #0]
			}

		// Send acknowledge if the system reaches steady state
		if ((fabs(inner_pos_error) == 0) && (fabs(middle_pos_error) == 0) && (fabs(outer_pos_error) == 0)){
 800244a:	4b2e      	ldr	r3, [pc, #184]	; (8002504 <TIM4_IRQHandler+0x6fc>)
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d119      	bne.n	800248e <TIM4_IRQHandler+0x686>
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <TIM4_IRQHandler+0x700>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	d111      	bne.n	800248e <TIM4_IRQHandler+0x686>
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <TIM4_IRQHandler+0x704>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	d109      	bne.n	800248e <TIM4_IRQHandler+0x686>
			TIM1->CCR1 = 0;
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <TIM4_IRQHandler+0x708>)
 800247c:	2200      	movs	r2, #0
 800247e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = 0;
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <TIM4_IRQHandler+0x708>)
 8002482:	2200      	movs	r2, #0
 8002484:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = 0;
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <TIM4_IRQHandler+0x708>)
 8002488:	2200      	movs	r2, #0
 800248a:	63da      	str	r2, [r3, #60]	; 0x3c
	if(error_code == 0 && external_shutdown == 0){
 800248c:	e01f      	b.n	80024ce <TIM4_IRQHandler+0x6c6>
		}
		else {
			TIM1->CCR1 = duty_inner;
 800248e:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <TIM4_IRQHandler+0x6f0>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <TIM4_IRQHandler+0x708>)
 8002494:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2 = duty_middle;
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <TIM4_IRQHandler+0x6f8>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b1d      	ldr	r3, [pc, #116]	; (8002510 <TIM4_IRQHandler+0x708>)
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = duty_outer;
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <TIM4_IRQHandler+0x6e0>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <TIM4_IRQHandler+0x708>)
 80024a4:	63da      	str	r2, [r3, #60]	; 0x3c
	if(error_code == 0 && external_shutdown == 0){
 80024a6:	e012      	b.n	80024ce <TIM4_IRQHandler+0x6c6>
		}
	}

	else{
		TIM1->CCR1 = 0;
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <TIM4_IRQHandler+0x708>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <TIM4_IRQHandler+0x708>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80024b4:	4b16      	ldr	r3, [pc, #88]	; (8002510 <TIM4_IRQHandler+0x708>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	63da      	str	r2, [r3, #60]	; 0x3c
		memcpy(&usb_out, &error_message, sizeof(usb_out));
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <TIM4_IRQHandler+0x70c>)
 80024bc:	4a16      	ldr	r2, [pc, #88]	; (8002518 <TIM4_IRQHandler+0x710>)
 80024be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c2:	e883 0003 	stmia.w	r3, {r0, r1}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 80024c6:	2108      	movs	r1, #8
 80024c8:	4812      	ldr	r0, [pc, #72]	; (8002514 <TIM4_IRQHandler+0x70c>)
 80024ca:	f007 f951 	bl	8009770 <CDC_Transmit_FS>
	}

	forward_kinematics();
 80024ce:	f7ff f913 	bl	80016f8 <forward_kinematics>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024d2:	4812      	ldr	r0, [pc, #72]	; (800251c <TIM4_IRQHandler+0x714>)
 80024d4:	f002 fe14 	bl	8005100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	66666666 	.word	0x66666666
 80024e4:	3fee6666 	.word	0x3fee6666
 80024e8:	20000344 	.word	0x20000344
 80024ec:	20000348 	.word	0x20000348
 80024f0:	40020400 	.word	0x40020400
 80024f4:	20000039 	.word	0x20000039
 80024f8:	2000033c 	.word	0x2000033c
 80024fc:	200001b8 	.word	0x200001b8
 8002500:	20000340 	.word	0x20000340
 8002504:	2000030c 	.word	0x2000030c
 8002508:	20000310 	.word	0x20000310
 800250c:	20000314 	.word	0x20000314
 8002510:	40010000 	.word	0x40010000
 8002514:	20000008 	.word	0x20000008
 8002518:	20000018 	.word	0x20000018
 800251c:	20000248 	.word	0x20000248

08002520 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

	CDC_Receive_FS(usb_temp,sizeof(usb_temp));
 8002526:	2108      	movs	r1, #8
 8002528:	48ad      	ldr	r0, [pc, #692]	; (80027e0 <OTG_FS_IRQHandler+0x2c0>)
 800252a:	f007 f90d 	bl	8009748 <CDC_Receive_FS>

	if(strcmp((char *)usb_temp, (char *)empty_string) != 0){
 800252e:	49ad      	ldr	r1, [pc, #692]	; (80027e4 <OTG_FS_IRQHandler+0x2c4>)
 8002530:	48ab      	ldr	r0, [pc, #684]	; (80027e0 <OTG_FS_IRQHandler+0x2c0>)
 8002532:	f7fd fe51 	bl	80001d8 <strcmp>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 8191 	beq.w	8002860 <OTG_FS_IRQHandler+0x340>
		// Toggle the LED to indicate that message is received
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800253e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002542:	48a9      	ldr	r0, [pc, #676]	; (80027e8 <OTG_FS_IRQHandler+0x2c8>)
 8002544:	f000 fd35 	bl	8002fb2 <HAL_GPIO_TogglePin>

		// Store the data in usb_in array if a non-empty message received
		memcpy(&usb_in, &usb_temp, sizeof(usb_in));
 8002548:	4ba8      	ldr	r3, [pc, #672]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 800254a:	4aa5      	ldr	r2, [pc, #660]	; (80027e0 <OTG_FS_IRQHandler+0x2c0>)
 800254c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002550:	e883 0003 	stmia.w	r3, {r0, r1}

		/* Parsing USB Message*/
		if(usb_in[0] == 'm'){
 8002554:	4ba5      	ldr	r3, [pc, #660]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b6d      	cmp	r3, #109	; 0x6d
 800255a:	d142      	bne.n	80025e2 <OTG_FS_IRQHandler+0xc2>
			// Since STM32 byte size is 16 bits, there isn't a real uint8_t type
			// We manually do big endian storage, and manually decode them below here
			move_x = usb_in[1]*256 + usb_in[2];
 800255c:	4ba3      	ldr	r3, [pc, #652]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	b29b      	uxth	r3, r3
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	b29a      	uxth	r2, r3
 8002566:	4ba1      	ldr	r3, [pc, #644]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 8002568:	789b      	ldrb	r3, [r3, #2]
 800256a:	b29b      	uxth	r3, r3
 800256c:	4413      	add	r3, r2
 800256e:	b29b      	uxth	r3, r3
 8002570:	b21a      	sxth	r2, r3
 8002572:	4b9f      	ldr	r3, [pc, #636]	; (80027f0 <OTG_FS_IRQHandler+0x2d0>)
 8002574:	801a      	strh	r2, [r3, #0]
			move_y = usb_in[3]*256 + usb_in[4];
 8002576:	4b9d      	ldr	r3, [pc, #628]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 8002578:	78db      	ldrb	r3, [r3, #3]
 800257a:	b29b      	uxth	r3, r3
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	b29a      	uxth	r2, r3
 8002580:	4b9a      	ldr	r3, [pc, #616]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 8002582:	791b      	ldrb	r3, [r3, #4]
 8002584:	b29b      	uxth	r3, r3
 8002586:	4413      	add	r3, r2
 8002588:	b29b      	uxth	r3, r3
 800258a:	b21a      	sxth	r2, r3
 800258c:	4b99      	ldr	r3, [pc, #612]	; (80027f4 <OTG_FS_IRQHandler+0x2d4>)
 800258e:	801a      	strh	r2, [r3, #0]
			usb_in[4] = move_y%256;
			usb_in[5] = '\n';
			CDC_Transmit_FS(usb_in,sizeof(usb_in));
			*/

			X_ref = X_curr + (float)move_x/10.0;
 8002590:	4b99      	ldr	r3, [pc, #612]	; (80027f8 <OTG_FS_IRQHandler+0x2d8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ff8d 	bl	80004b4 <__aeabi_f2d>
 800259a:	4604      	mov	r4, r0
 800259c:	460d      	mov	r5, r1
 800259e:	4b94      	ldr	r3, [pc, #592]	; (80027f0 <OTG_FS_IRQHandler+0x2d0>)
 80025a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a4:	ee07 3a90 	vmov	s15, r3
 80025a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ac:	ee17 0a90 	vmov	r0, s15
 80025b0:	f7fd ff80 	bl	80004b4 <__aeabi_f2d>
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	4b90      	ldr	r3, [pc, #576]	; (80027fc <OTG_FS_IRQHandler+0x2dc>)
 80025ba:	f7fe f8fd 	bl	80007b8 <__aeabi_ddiv>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4620      	mov	r0, r4
 80025c4:	4629      	mov	r1, r5
 80025c6:	f7fd fe17 	bl	80001f8 <__adddf3>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fa9f 	bl	8000b14 <__aeabi_d2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a89      	ldr	r2, [pc, #548]	; (8002800 <OTG_FS_IRQHandler+0x2e0>)
 80025da:	6013      	str	r3, [r2, #0]

			ack_to_be_sent = 1;
 80025dc:	4b89      	ldr	r3, [pc, #548]	; (8002804 <OTG_FS_IRQHandler+0x2e4>)
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]

		}

		if(usb_in[0] == 's'){
 80025e2:	4b82      	ldr	r3, [pc, #520]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b73      	cmp	r3, #115	; 0x73
 80025e8:	d102      	bne.n	80025f0 <OTG_FS_IRQHandler+0xd0>
			external_shutdown = 1;
 80025ea:	4b87      	ldr	r3, [pc, #540]	; (8002808 <OTG_FS_IRQHandler+0x2e8>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
		}

		if(usb_in[0] == 'i'){
 80025f0:	4b7e      	ldr	r3, [pc, #504]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b69      	cmp	r3, #105	; 0x69
 80025f6:	f040 8096 	bne.w	8002726 <OTG_FS_IRQHandler+0x206>
			// Since STM32 byte size is 16 bits, there isn't a real uint8_t type
			// We manually do big endian storage, and manually decode them below here
			if (initializing == 1){
 80025fa:	4b84      	ldr	r3, [pc, #528]	; (800280c <OTG_FS_IRQHandler+0x2ec>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	f040 8091 	bne.w	8002726 <OTG_FS_IRQHandler+0x206>
				int16_t mot_inner_move_mm = usb_in[1]*256 + usb_in[2];
 8002604:	4b79      	ldr	r3, [pc, #484]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 8002606:	785b      	ldrb	r3, [r3, #1]
 8002608:	b29b      	uxth	r3, r3
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	b29a      	uxth	r2, r3
 800260e:	4b77      	ldr	r3, [pc, #476]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 8002610:	789b      	ldrb	r3, [r3, #2]
 8002612:	b29b      	uxth	r3, r3
 8002614:	4413      	add	r3, r2
 8002616:	b29b      	uxth	r3, r3
 8002618:	80fb      	strh	r3, [r7, #6]
				int16_t mot_middle_move_mm = usb_in[3]*256 + usb_in[4];
 800261a:	4b74      	ldr	r3, [pc, #464]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 800261c:	78db      	ldrb	r3, [r3, #3]
 800261e:	b29b      	uxth	r3, r3
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	b29a      	uxth	r2, r3
 8002624:	4b71      	ldr	r3, [pc, #452]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 8002626:	791b      	ldrb	r3, [r3, #4]
 8002628:	b29b      	uxth	r3, r3
 800262a:	4413      	add	r3, r2
 800262c:	b29b      	uxth	r3, r3
 800262e:	80bb      	strh	r3, [r7, #4]
				int16_t mot_outer_move_mm = usb_in[5]*256 + usb_in[6];
 8002630:	4b6e      	ldr	r3, [pc, #440]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 8002632:	795b      	ldrb	r3, [r3, #5]
 8002634:	b29b      	uxth	r3, r3
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b6c      	ldr	r3, [pc, #432]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 800263c:	799b      	ldrb	r3, [r3, #6]
 800263e:	b29b      	uxth	r3, r3
 8002640:	4413      	add	r3, r2
 8002642:	b29b      	uxth	r3, r3
 8002644:	807b      	strh	r3, [r7, #2]

				// Limit initializing movements to 5 cm
				if(abs(mot_inner_move_mm) < 50){
 8002646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800264a:	2b00      	cmp	r3, #0
 800264c:	bfb8      	it	lt
 800264e:	425b      	neglt	r3, r3
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b31      	cmp	r3, #49	; 0x31
 8002654:	d81b      	bhi.n	800268e <OTG_FS_IRQHandler+0x16e>
					enc_inner_pos_cm =  - (float)mot_inner_move_mm/10;
 8002656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800265a:	ee07 3a90 	vmov	s15, r3
 800265e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002662:	eeb1 7a67 	vneg.f32	s14, s15
 8002666:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800266a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800266e:	4b68      	ldr	r3, [pc, #416]	; (8002810 <OTG_FS_IRQHandler+0x2f0>)
 8002670:	edc3 7a00 	vstr	s15, [r3]
					enc_inner_pos = (float)enc_inner_pos_cm*INNER_GEAR_RATIO;
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <OTG_FS_IRQHandler+0x2f0>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002814 <OTG_FS_IRQHandler+0x2f4>
 800267e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002686:	ee17 2a90 	vmov	r2, s15
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <OTG_FS_IRQHandler+0x2f8>)
 800268c:	601a      	str	r2, [r3, #0]
				}
				if(abs(mot_middle_move_mm) < 50){
 800268e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	bfb8      	it	lt
 8002696:	425b      	neglt	r3, r3
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b31      	cmp	r3, #49	; 0x31
 800269c:	d81f      	bhi.n	80026de <OTG_FS_IRQHandler+0x1be>
					enc_middle_pos_cm =  - (float)mot_middle_move_mm/10;
 800269e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026aa:	eeb1 7a67 	vneg.f32	s14, s15
 80026ae:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80026b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b6:	4b59      	ldr	r3, [pc, #356]	; (800281c <OTG_FS_IRQHandler+0x2fc>)
 80026b8:	edc3 7a00 	vstr	s15, [r3]
					enc_middle_pos = (float)enc_middle_pos_cm*MIDDLE_GEAR_RATIO;
 80026bc:	4b57      	ldr	r3, [pc, #348]	; (800281c <OTG_FS_IRQHandler+0x2fc>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002814 <OTG_FS_IRQHandler+0x2f4>
 80026c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ca:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80026ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d6:	ee17 2a90 	vmov	r2, s15
 80026da:	4b51      	ldr	r3, [pc, #324]	; (8002820 <OTG_FS_IRQHandler+0x300>)
 80026dc:	601a      	str	r2, [r3, #0]
				}
				if(abs(mot_outer_move_mm) < 50){
 80026de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bfb8      	it	lt
 80026e6:	425b      	neglt	r3, r3
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b31      	cmp	r3, #49	; 0x31
 80026ec:	d81b      	bhi.n	8002726 <OTG_FS_IRQHandler+0x206>
					enc_outer_pos_cm =  - (float)mot_outer_move_mm/10;
 80026ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026fa:	eeb1 7a67 	vneg.f32	s14, s15
 80026fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <OTG_FS_IRQHandler+0x304>)
 8002708:	edc3 7a00 	vstr	s15, [r3]
					enc_outer_pos = (float)enc_outer_pos_cm*OUTER_GEAR_RATIO;
 800270c:	4b45      	ldr	r3, [pc, #276]	; (8002824 <OTG_FS_IRQHandler+0x304>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002814 <OTG_FS_IRQHandler+0x2f4>
 8002716:	ee67 7a87 	vmul.f32	s15, s15, s14
 800271a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271e:	ee17 2a90 	vmov	r2, s15
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <OTG_FS_IRQHandler+0x308>)
 8002724:	601a      	str	r2, [r3, #0]

		if(usb_in[0] == 'o'){
			// TURN OFF CODE TO BE ADDED
		}

		if(usb_in[0] == 'b'){
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <OTG_FS_IRQHandler+0x2cc>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b62      	cmp	r3, #98	; 0x62
 800272c:	f040 8098 	bne.w	8002860 <OTG_FS_IRQHandler+0x340>
			// Finish initializing and begin the main process by reseting
			// motor positions and set values
			if (initializing == 1){
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <OTG_FS_IRQHandler+0x2ec>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d14f      	bne.n	80027d8 <OTG_FS_IRQHandler+0x2b8>
				mot_inner_set_pos_cm = 0;
 8002738:	4b3c      	ldr	r3, [pc, #240]	; (800282c <OTG_FS_IRQHandler+0x30c>)
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
				mot_middle_set_pos_cm = 0;
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <OTG_FS_IRQHandler+0x310>)
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
				mot_outer_set_pos_cm = 0;
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <OTG_FS_IRQHandler+0x314>)
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
				mot_inner_set_pos = 0;
 8002750:	4b39      	ldr	r3, [pc, #228]	; (8002838 <OTG_FS_IRQHandler+0x318>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
				mot_middle_set_pos = 0;
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <OTG_FS_IRQHandler+0x31c>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
				mot_outer_set_pos = 0;
 800275c:	4b38      	ldr	r3, [pc, #224]	; (8002840 <OTG_FS_IRQHandler+0x320>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
				enc_inner_pos_cm = 0;
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <OTG_FS_IRQHandler+0x2f0>)
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
				enc_middle_pos_cm = 0;
 800276a:	4b2c      	ldr	r3, [pc, #176]	; (800281c <OTG_FS_IRQHandler+0x2fc>)
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
				enc_outer_pos_cm = 0;
 8002772:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <OTG_FS_IRQHandler+0x304>)
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
				enc_inner_pos = 0;
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <OTG_FS_IRQHandler+0x2f8>)
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
				enc_middle_pos = 0;
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <OTG_FS_IRQHandler+0x300>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
				enc_outer_pos = 0;
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <OTG_FS_IRQHandler+0x308>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
				X_ref = 0;
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <OTG_FS_IRQHandler+0x2e0>)
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
				X_curr = 0;
 8002794:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <OTG_FS_IRQHandler+0x2d8>)
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
				inner_int_error=0.0;
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <OTG_FS_IRQHandler+0x324>)
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
				middle_int_error=0.0;
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <OTG_FS_IRQHandler+0x328>)
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
				outer_int_error=0.0;
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <OTG_FS_IRQHandler+0x32c>)
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
				TIM1->CCR1 = 0;
 80027b4:	4b26      	ldr	r3, [pc, #152]	; (8002850 <OTG_FS_IRQHandler+0x330>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2 = 0;
 80027ba:	4b25      	ldr	r3, [pc, #148]	; (8002850 <OTG_FS_IRQHandler+0x330>)
 80027bc:	2200      	movs	r2, #0
 80027be:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = 0;
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <OTG_FS_IRQHandler+0x330>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c
				duty_inner = 0;
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <OTG_FS_IRQHandler+0x334>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
				duty_middle = 0;
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <OTG_FS_IRQHandler+0x338>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
				duty_outer = 0;
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <OTG_FS_IRQHandler+0x33c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
			}
			initializing = 0;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <OTG_FS_IRQHandler+0x2ec>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e03f      	b.n	8002860 <OTG_FS_IRQHandler+0x340>
 80027e0:	200002c8 	.word	0x200002c8
 80027e4:	200002d0 	.word	0x200002d0
 80027e8:	40020800 	.word	0x40020800
 80027ec:	200002c0 	.word	0x200002c0
 80027f0:	20000294 	.word	0x20000294
 80027f4:	20000296 	.word	0x20000296
 80027f8:	200002b8 	.word	0x200002b8
 80027fc:	40240000 	.word	0x40240000
 8002800:	200002a8 	.word	0x200002a8
 8002804:	200002be 	.word	0x200002be
 8002808:	200002bd 	.word	0x200002bd
 800280c:	20000038 	.word	0x20000038
 8002810:	200002e8 	.word	0x200002e8
 8002814:	42200000 	.word	0x42200000
 8002818:	200002dc 	.word	0x200002dc
 800281c:	200002ec 	.word	0x200002ec
 8002820:	200002e0 	.word	0x200002e0
 8002824:	200002f0 	.word	0x200002f0
 8002828:	200002e4 	.word	0x200002e4
 800282c:	200002f4 	.word	0x200002f4
 8002830:	200002f8 	.word	0x200002f8
 8002834:	200002fc 	.word	0x200002fc
 8002838:	20000300 	.word	0x20000300
 800283c:	20000304 	.word	0x20000304
 8002840:	20000308 	.word	0x20000308
 8002844:	20000324 	.word	0x20000324
 8002848:	20000328 	.word	0x20000328
 800284c:	2000032c 	.word	0x2000032c
 8002850:	40010000 	.word	0x40010000
 8002854:	2000033c 	.word	0x2000033c
 8002858:	20000340 	.word	0x20000340
 800285c:	20000344 	.word	0x20000344
		}

	}

	// Clear usb_temp array
	memset(usb_temp, 0, sizeof(usb_temp));
 8002860:	2208      	movs	r2, #8
 8002862:	2100      	movs	r1, #0
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <OTG_FS_IRQHandler+0x358>)
 8002866:	f007 fbff 	bl	800a068 <memset>

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800286a:	4804      	ldr	r0, [pc, #16]	; (800287c <OTG_FS_IRQHandler+0x35c>)
 800286c:	f000 fd2f 	bl	80032ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bdb0      	pop	{r4, r5, r7, pc}
 8002878:	200002c8 	.word	0x200002c8
 800287c:	20001030 	.word	0x20001030

08002880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <SystemInit+0x20>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	4a05      	ldr	r2, [pc, #20]	; (80028a0 <SystemInit+0x20>)
 800288c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028a8:	480d      	ldr	r0, [pc, #52]	; (80028e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028aa:	490e      	ldr	r1, [pc, #56]	; (80028e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028ac:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b0:	e002      	b.n	80028b8 <LoopCopyDataInit>

080028b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b6:	3304      	adds	r3, #4

080028b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028bc:	d3f9      	bcc.n	80028b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028be:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028c0:	4c0b      	ldr	r4, [pc, #44]	; (80028f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c4:	e001      	b.n	80028ca <LoopFillZerobss>

080028c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c8:	3204      	adds	r2, #4

080028ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028cc:	d3fb      	bcc.n	80028c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028ce:	f7ff ffd7 	bl	8002880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028d2:	f007 fba5 	bl	800a020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028d6:	f7fe faef 	bl	8000eb8 <main>
  bx  lr    
 80028da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e4:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 80028e8:	0800be98 	.word	0x0800be98
  ldr r2, =_sbss
 80028ec:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80028f0:	2000175c 	.word	0x2000175c

080028f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC_IRQHandler>
	...

080028f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <HAL_Init+0x40>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <HAL_Init+0x40>)
 8002902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_Init+0x40>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_Init+0x40>)
 800290e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <HAL_Init+0x40>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a07      	ldr	r2, [pc, #28]	; (8002938 <HAL_Init+0x40>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002920:	2003      	movs	r0, #3
 8002922:	f000 f94f 	bl	8002bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002926:	200f      	movs	r0, #15
 8002928:	f000 f808 	bl	800293c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800292c:	f7ff f83c 	bl	80019a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023c00 	.word	0x40023c00

0800293c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_InitTick+0x54>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_InitTick+0x58>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002952:	fbb3 f3f1 	udiv	r3, r3, r1
 8002956:	fbb2 f3f3 	udiv	r3, r2, r3
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f967 	bl	8002c2e <HAL_SYSTICK_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e00e      	b.n	8002988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b0f      	cmp	r3, #15
 800296e:	d80a      	bhi.n	8002986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002970:	2200      	movs	r2, #0
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	f000 f92f 	bl	8002bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800297c:	4a06      	ldr	r2, [pc, #24]	; (8002998 <HAL_InitTick+0x5c>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	2000003c 	.word	0x2000003c
 8002994:	20000044 	.word	0x20000044
 8002998:	20000040 	.word	0x20000040

0800299c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_IncTick+0x20>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_IncTick+0x24>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <HAL_IncTick+0x24>)
 80029ae:	6013      	str	r3, [r2, #0]
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000044 	.word	0x20000044
 80029c0:	2000034c 	.word	0x2000034c

080029c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return uwTick;
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <HAL_GetTick+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000034c 	.word	0x2000034c

080029dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff ffee 	bl	80029c4 <HAL_GetTick>
 80029e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d005      	beq.n	8002a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_Delay+0x44>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a02:	bf00      	nop
 8002a04:	f7ff ffde 	bl	80029c4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d8f7      	bhi.n	8002a04 <HAL_Delay+0x28>
  {
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000044 	.word	0x20000044

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	60d3      	str	r3, [r2, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4907      	ldr	r1, [pc, #28]	; (8002ac0 <__NVIC_EnableIRQ+0x38>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	db0a      	blt.n	8002aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	490c      	ldr	r1, [pc, #48]	; (8002b10 <__NVIC_SetPriority+0x4c>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	0112      	lsls	r2, r2, #4
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aec:	e00a      	b.n	8002b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4908      	ldr	r1, [pc, #32]	; (8002b14 <__NVIC_SetPriority+0x50>)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	3b04      	subs	r3, #4
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	761a      	strb	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f1c3 0307 	rsb	r3, r3, #7
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf28      	it	cs
 8002b36:	2304      	movcs	r3, #4
 8002b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d902      	bls.n	8002b48 <NVIC_EncodePriority+0x30>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3b03      	subs	r3, #3
 8002b46:	e000      	b.n	8002b4a <NVIC_EncodePriority+0x32>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43d9      	mvns	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	4313      	orrs	r3, r2
         );
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b90:	d301      	bcc.n	8002b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00f      	b.n	8002bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <SysTick_Config+0x40>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f7ff ff8e 	bl	8002ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <SysTick_Config+0x40>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <SysTick_Config+0x40>)
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	e000e010 	.word	0xe000e010

08002bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff29 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bec:	f7ff ff3e 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ff8e 	bl	8002b18 <NVIC_EncodePriority>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff5d 	bl	8002ac4 <__NVIC_SetPriority>
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff31 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ffa2 	bl	8002b80 <SysTick_Config>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e159      	b.n	8002f18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f040 8148 	bne.w	8002f12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d005      	beq.n	8002c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d130      	bne.n	8002cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 0201 	and.w	r2, r3, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d017      	beq.n	8002d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d123      	bne.n	8002d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	08da      	lsrs	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3208      	adds	r2, #8
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0203 	and.w	r2, r3, #3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a2 	beq.w	8002f12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a56      	ldr	r2, [pc, #344]	; (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dea:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_GPIO_Init+0x2ec>)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	3302      	adds	r3, #2
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	220f      	movs	r2, #15
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a49      	ldr	r2, [pc, #292]	; (8002f38 <HAL_GPIO_Init+0x2f0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d019      	beq.n	8002e4a <HAL_GPIO_Init+0x202>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a48      	ldr	r2, [pc, #288]	; (8002f3c <HAL_GPIO_Init+0x2f4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0x1fe>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a47      	ldr	r2, [pc, #284]	; (8002f40 <HAL_GPIO_Init+0x2f8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00d      	beq.n	8002e42 <HAL_GPIO_Init+0x1fa>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <HAL_GPIO_Init+0x1f6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a45      	ldr	r2, [pc, #276]	; (8002f48 <HAL_GPIO_Init+0x300>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_GPIO_Init+0x1f2>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e008      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	e006      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e004      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f002 0203 	and.w	r2, r2, #3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	4093      	lsls	r3, r2
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e5c:	4935      	ldr	r1, [pc, #212]	; (8002f34 <HAL_GPIO_Init+0x2ec>)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6a:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e94:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb8:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ebe:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee2:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b0f      	cmp	r3, #15
 8002f1c:	f67f aea2 	bls.w	8002c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40013c00 	.word	0x40013c00

08002f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e001      	b.n	8002f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f90:	787b      	ldrb	r3, [r7, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f9c:	e003      	b.n	8002fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	041a      	lsls	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	619a      	str	r2, [r3, #24]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fc4:	887a      	ldrh	r2, [r7, #2]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	041a      	lsls	r2, r3, #16
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	887b      	ldrh	r3, [r7, #2]
 8002fd2:	400b      	ands	r3, r1
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	619a      	str	r2, [r3, #24]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f806 	bl	8003018 <HAL_GPIO_EXTI_Callback>
  }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40013c00 	.word	0x40013c00

08003018 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800302e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003030:	b08f      	sub	sp, #60	; 0x3c
 8003032:	af0a      	add	r7, sp, #40	; 0x28
 8003034:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e10f      	b.n	8003260 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f006 fcd0 	bl	8009a00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2203      	movs	r2, #3
 8003064:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f002 ffb7 	bl	8005ff2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	687e      	ldr	r6, [r7, #4]
 800308c:	466d      	mov	r5, sp
 800308e:	f106 0410 	add.w	r4, r6, #16
 8003092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800309e:	e885 0003 	stmia.w	r5, {r0, r1}
 80030a2:	1d33      	adds	r3, r6, #4
 80030a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a6:	6838      	ldr	r0, [r7, #0]
 80030a8:	f002 fe8e 	bl	8005dc8 <USB_CoreInit>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e0d0      	b.n	8003260 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f002 ffa5 	bl	8006014 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e04a      	b.n	8003166 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	333d      	adds	r3, #61	; 0x3d
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	333c      	adds	r3, #60	; 0x3c
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	b298      	uxth	r0, r3
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	3344      	adds	r3, #68	; 0x44
 800310c:	4602      	mov	r2, r0
 800310e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	3340      	adds	r3, #64	; 0x40
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3348      	adds	r3, #72	; 0x48
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334c      	adds	r3, #76	; 0x4c
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	3354      	adds	r3, #84	; 0x54
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	3301      	adds	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	429a      	cmp	r2, r3
 800316e:	d3af      	bcc.n	80030d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003170:	2300      	movs	r3, #0
 8003172:	73fb      	strb	r3, [r7, #15]
 8003174:	e044      	b.n	8003200 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	3301      	adds	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d3b5      	bcc.n	8003176 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	687e      	ldr	r6, [r7, #4]
 8003212:	466d      	mov	r5, sp
 8003214:	f106 0410 	add.w	r4, r6, #16
 8003218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800321c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800321e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003220:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003224:	e885 0003 	stmia.w	r5, {r0, r1}
 8003228:	1d33      	adds	r3, r6, #4
 800322a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800322c:	6838      	ldr	r0, [r7, #0]
 800322e:	f002 ff3d 	bl	80060ac <USB_DevInit>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e00d      	b.n	8003260 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f004 f88c 	bl	8007376 <USB_DevDisconnect>

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003268 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_PCD_Start+0x1c>
 8003280:	2302      	movs	r3, #2
 8003282:	e020      	b.n	80032c6 <HAL_PCD_Start+0x5e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	2b01      	cmp	r3, #1
 8003292:	d109      	bne.n	80032a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003298:	2b01      	cmp	r3, #1
 800329a:	d005      	beq.n	80032a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 fe8f 	bl	8005fd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 f83c 	bl	8007334 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032ce:	b590      	push	{r4, r7, lr}
 80032d0:	b08d      	sub	sp, #52	; 0x34
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f004 f8fa 	bl	80074de <USB_GetMode>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f040 848a 	bne.w	8003c06 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 f85e 	bl	80073b8 <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8480 	beq.w	8003c04 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	0a1b      	lsrs	r3, r3, #8
 800330e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f004 f84b 	bl	80073b8 <USB_ReadInterrupts>
 8003322:	4603      	mov	r3, r0
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d107      	bne.n	800333c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f002 0202 	and.w	r2, r2, #2
 800333a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f004 f839 	bl	80073b8 <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b10      	cmp	r3, #16
 800334e:	d161      	bne.n	8003414 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0210 	bic.w	r2, r2, #16
 800335e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f003 020f 	and.w	r2, r3, #15
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	3304      	adds	r3, #4
 800337e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	0c5b      	lsrs	r3, r3, #17
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	2b02      	cmp	r3, #2
 800338a:	d124      	bne.n	80033d6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d035      	beq.n	8003404 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	091b      	lsrs	r3, r3, #4
 80033a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	6a38      	ldr	r0, [r7, #32]
 80033ac:	f003 fe70 	bl	8007090 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033bc:	441a      	add	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ce:	441a      	add	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	621a      	str	r2, [r3, #32]
 80033d4:	e016      	b.n	8003404 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	0c5b      	lsrs	r3, r3, #17
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d110      	bne.n	8003404 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033e8:	2208      	movs	r2, #8
 80033ea:	4619      	mov	r1, r3
 80033ec:	6a38      	ldr	r0, [r7, #32]
 80033ee:	f003 fe4f 	bl	8007090 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	6a1a      	ldr	r2, [r3, #32]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fe:	441a      	add	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0210 	orr.w	r2, r2, #16
 8003412:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f003 ffcd 	bl	80073b8 <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003424:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003428:	f040 80a7 	bne.w	800357a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f003 ffd2 	bl	80073de <USB_ReadDevAllOutEpInterrupt>
 800343a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800343c:	e099      	b.n	8003572 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 808e 	beq.w	8003566 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f003 fff6 	bl	8007446 <USB_ReadDevOutEPInterrupt>
 800345a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00c      	beq.n	8003480 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	2301      	movs	r3, #1
 8003476:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fec2 	bl	8004204 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003496:	461a      	mov	r2, r3
 8003498:	2308      	movs	r3, #8
 800349a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800349c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 ff98 	bl	80043d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ba:	461a      	mov	r2, r3
 80034bc:	2310      	movs	r3, #16
 80034be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d030      	beq.n	800352c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d2:	2b80      	cmp	r3, #128	; 0x80
 80034d4:	d109      	bne.n	80034ea <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	4413      	add	r3, r2
 80034fc:	3304      	adds	r3, #4
 80034fe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	78db      	ldrb	r3, [r3, #3]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d108      	bne.n	800351a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2200      	movs	r2, #0
 800350c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	b2db      	uxtb	r3, r3
 8003512:	4619      	mov	r1, r3
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f006 fb6f 	bl	8009bf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003526:	461a      	mov	r2, r3
 8003528:	2302      	movs	r3, #2
 800352a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003542:	461a      	mov	r2, r3
 8003544:	2320      	movs	r3, #32
 8003546:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003564:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	3301      	adds	r3, #1
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	2b00      	cmp	r3, #0
 8003576:	f47f af62 	bne.w	800343e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 ff1a 	bl	80073b8 <USB_ReadInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800358e:	f040 80db 	bne.w	8003748 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f003 ff3b 	bl	8007412 <USB_ReadDevAllInEpInterrupt>
 800359c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035a2:	e0cd      	b.n	8003740 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80c2 	beq.w	8003734 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 ff61 	bl	8007482 <USB_ReadDevInEPInterrupt>
 80035c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d057      	beq.n	800367c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	2201      	movs	r2, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69f9      	ldr	r1, [r7, #28]
 80035e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035ec:	4013      	ands	r3, r2
 80035ee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fc:	461a      	mov	r2, r3
 80035fe:	2301      	movs	r3, #1
 8003600:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d132      	bne.n	8003670 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	334c      	adds	r3, #76	; 0x4c
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4403      	add	r3, r0
 800362a:	3348      	adds	r3, #72	; 0x48
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4419      	add	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003634:	4613      	mov	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4403      	add	r3, r0
 800363e:	334c      	adds	r3, #76	; 0x4c
 8003640:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d113      	bne.n	8003670 <HAL_PCD_IRQHandler+0x3a2>
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3354      	adds	r3, #84	; 0x54
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003668:	461a      	mov	r2, r3
 800366a:	2101      	movs	r1, #1
 800366c:	f003 ff68 	bl	8007540 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	b2db      	uxtb	r3, r3
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f006 fa43 	bl	8009b02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003692:	461a      	mov	r2, r3
 8003694:	2308      	movs	r3, #8
 8003696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ae:	461a      	mov	r2, r3
 80036b0:	2310      	movs	r3, #16
 80036b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ca:	461a      	mov	r2, r3
 80036cc:	2340      	movs	r3, #64	; 0x40
 80036ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d023      	beq.n	8003722 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036dc:	6a38      	ldr	r0, [r7, #32]
 80036de:	f002 fe49 	bl	8006374 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	3338      	adds	r3, #56	; 0x38
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	3304      	adds	r3, #4
 80036f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	78db      	ldrb	r3, [r3, #3]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d108      	bne.n	8003710 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	b2db      	uxtb	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f006 fa86 	bl	8009c1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	461a      	mov	r2, r3
 800371e:	2302      	movs	r3, #2
 8003720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800372c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fcdb 	bl	80040ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	3301      	adds	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	f47f af2e 	bne.w	80035a4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 fe33 	bl	80073b8 <USB_ReadInterrupts>
 8003752:	4603      	mov	r3, r0
 8003754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800375c:	d122      	bne.n	80037a4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003778:	2b01      	cmp	r3, #1
 800377a:	d108      	bne.n	800378e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003784:	2100      	movs	r1, #0
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fec2 	bl	8004510 <HAL_PCDEx_LPM_Callback>
 800378c:	e002      	b.n	8003794 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f006 fa24 	bl	8009bdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 fe05 	bl	80073b8 <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b8:	d112      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f006 f9e0 	bl	8009b90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037de:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 fde7 	bl	80073b8 <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f4:	f040 80b7 	bne.w	8003966 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	69fa      	ldr	r2, [r7, #28]
 8003802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2110      	movs	r1, #16
 8003812:	4618      	mov	r0, r3
 8003814:	f002 fdae 	bl	8006374 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003818:	2300      	movs	r3, #0
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381c:	e046      	b.n	80038ac <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382a:	461a      	mov	r2, r3
 800382c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003830:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003850:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385e:	461a      	mov	r2, r3
 8003860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003864:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	440a      	add	r2, r1
 800387c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003880:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003884:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	440a      	add	r2, r1
 800389c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	3301      	adds	r3, #1
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3b3      	bcc.n	800381e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e2:	f043 030b 	orr.w	r3, r3, #11
 80038e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f8:	f043 030b 	orr.w	r3, r3, #11
 80038fc:	6453      	str	r3, [r2, #68]	; 0x44
 80038fe:	e015      	b.n	800392c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003912:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003916:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003926:	f043 030b 	orr.w	r3, r3, #11
 800392a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800393e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003950:	461a      	mov	r2, r3
 8003952:	f003 fdf5 	bl	8007540 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fd24 	bl	80073b8 <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397a:	d124      	bne.n	80039c6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fdba 	bl	80074fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f002 fd6f 	bl	800646e <USB_GetDevSpeed>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681c      	ldr	r4, [r3, #0]
 800399c:	f001 f9e8 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 80039a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	4620      	mov	r0, r4
 80039ac:	f002 fa6e 	bl	8005e8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f006 f8ce 	bl	8009b52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 fcf4 	bl	80073b8 <USB_ReadInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d10a      	bne.n	80039f0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f006 f8ab 	bl	8009b36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f002 0208 	and.w	r2, r2, #8
 80039ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f003 fcdf 	bl	80073b8 <USB_ReadInterrupts>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a00:	2b80      	cmp	r3, #128	; 0x80
 8003a02:	d122      	bne.n	8003a4a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a10:	2301      	movs	r3, #1
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
 8003a14:	e014      	b.n	8003a40 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d105      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	4619      	mov	r1, r3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fb27 	bl	8004088 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d3e5      	bcc.n	8003a16 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f003 fcb2 	bl	80073b8 <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d13b      	bne.n	8003ad8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a60:	2301      	movs	r3, #1
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
 8003a64:	e02b      	b.n	8003abe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	3340      	adds	r3, #64	; 0x40
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d115      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da12      	bge.n	8003ab8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	333f      	adds	r3, #63	; 0x3f
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fae8 	bl	8004088 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	3301      	adds	r3, #1
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d3ce      	bcc.n	8003a66 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f003 fc6b 	bl	80073b8 <USB_ReadInterrupts>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aec:	d155      	bne.n	8003b9a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aee:	2301      	movs	r3, #1
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
 8003af2:	e045      	b.n	8003b80 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d12e      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	da2b      	bge.n	8003b7a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d121      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	69fa      	ldr	r2, [r7, #28]
 8003b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b76:	6053      	str	r3, [r2, #4]
            break;
 8003b78:	e007      	b.n	8003b8a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d3b4      	bcc.n	8003af4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f003 fc0a 	bl	80073b8 <USB_ReadInterrupts>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bae:	d10a      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f006 f845 	bl	8009c40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f003 fbf4 	bl	80073b8 <USB_ReadInterrupts>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d115      	bne.n	8003c06 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f006 f835 	bl	8009c5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	e000      	b.n	8003c06 <HAL_PCD_IRQHandler+0x938>
      return;
 8003c04:	bf00      	nop
    }
  }
}
 8003c06:	3734      	adds	r7, #52	; 0x34
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd90      	pop	{r4, r7, pc}

08003c0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_PCD_SetAddress+0x1a>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e013      	b.n	8003c4e <HAL_PCD_SetAddress+0x42>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f003 fb52 	bl	80072e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	4608      	mov	r0, r1
 8003c60:	4611      	mov	r1, r2
 8003c62:	461a      	mov	r2, r3
 8003c64:	4603      	mov	r3, r0
 8003c66:	70fb      	strb	r3, [r7, #3]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	803b      	strh	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	da0f      	bge.n	8003c9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	3338      	adds	r3, #56	; 0x38
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	3304      	adds	r3, #4
 8003c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	705a      	strb	r2, [r3, #1]
 8003c9a:	e00f      	b.n	8003cbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cc8:	883a      	ldrh	r2, [r7, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	78ba      	ldrb	r2, [r7, #2]
 8003cd2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ce6:	78bb      	ldrb	r3, [r7, #2]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d102      	bne.n	8003cf2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_PCD_EP_Open+0xaa>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e00e      	b.n	8003d1e <HAL_PCD_EP_Open+0xc8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68f9      	ldr	r1, [r7, #12]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f002 fbd2 	bl	80064b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d1c:	7afb      	ldrb	r3, [r7, #11]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da0f      	bge.n	8003d5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	f003 020f 	and.w	r2, r3, #15
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	3338      	adds	r3, #56	; 0x38
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3304      	adds	r3, #4
 8003d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	705a      	strb	r2, [r3, #1]
 8003d58:	e00f      	b.n	8003d7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	f003 020f 	and.w	r2, r3, #15
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4413      	add	r3, r2
 8003d70:	3304      	adds	r3, #4
 8003d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_PCD_EP_Close+0x6e>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e00e      	b.n	8003db2 <HAL_PCD_EP_Close+0x8c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68f9      	ldr	r1, [r7, #12]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f002 fc10 	bl	80065c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dca:	7afb      	ldrb	r3, [r7, #11]
 8003dcc:	f003 020f 	and.w	r2, r3, #15
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	3304      	adds	r3, #4
 8003de2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dfc:	7afb      	ldrb	r3, [r7, #11]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e16:	7afb      	ldrb	r3, [r7, #11]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6979      	ldr	r1, [r7, #20]
 8003e2e:	f002 feef 	bl	8006c10 <USB_EP0StartXfer>
 8003e32:	e008      	b.n	8003e46 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6979      	ldr	r1, [r7, #20]
 8003e42:	f002 fc9d 	bl	8006780 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 020f 	and.w	r2, r3, #15
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	f003 020f 	and.w	r2, r3, #15
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	3338      	adds	r3, #56	; 0x38
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec0:	7afb      	ldrb	r3, [r7, #11]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d102      	bne.n	8003eda <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eda:	7afb      	ldrb	r3, [r7, #11]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d109      	bne.n	8003ef8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6979      	ldr	r1, [r7, #20]
 8003ef2:	f002 fe8d 	bl	8006c10 <USB_EP0StartXfer>
 8003ef6:	e008      	b.n	8003f0a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	6979      	ldr	r1, [r7, #20]
 8003f06:	f002 fc3b 	bl	8006780 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	f003 020f 	and.w	r2, r3, #15
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d901      	bls.n	8003f32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e050      	b.n	8003fd4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	da0f      	bge.n	8003f5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	f003 020f 	and.w	r2, r3, #15
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	3338      	adds	r3, #56	; 0x38
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3304      	adds	r3, #4
 8003f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	705a      	strb	r2, [r3, #1]
 8003f58:	e00d      	b.n	8003f76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_PCD_EP_SetStall+0x82>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e01e      	b.n	8003fd4 <HAL_PCD_EP_SetStall+0xc0>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68f9      	ldr	r1, [r7, #12]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f003 f8cb 	bl	8007140 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	b2d9      	uxtb	r1, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f003 fabb 	bl	8007540 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	f003 020f 	and.w	r2, r3, #15
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d901      	bls.n	8003ffa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e042      	b.n	8004080 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da0f      	bge.n	8004022 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	f003 020f 	and.w	r2, r3, #15
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	3338      	adds	r3, #56	; 0x38
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	3304      	adds	r3, #4
 8004018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	705a      	strb	r2, [r3, #1]
 8004020:	e00f      	b.n	8004042 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 020f 	and.w	r2, r3, #15
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4413      	add	r3, r2
 8004038:	3304      	adds	r3, #4
 800403a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_PCD_EP_ClrStall+0x86>
 800405e:	2302      	movs	r3, #2
 8004060:	e00e      	b.n	8004080 <HAL_PCD_EP_ClrStall+0xa4>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68f9      	ldr	r1, [r7, #12]
 8004070:	4618      	mov	r0, r3
 8004072:	f003 f8d3 	bl	800721c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004098:	2b00      	cmp	r3, #0
 800409a:	da0c      	bge.n	80040b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	f003 020f 	and.w	r2, r3, #15
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	3338      	adds	r3, #56	; 0x38
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	3304      	adds	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e00c      	b.n	80040d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	f003 020f 	and.w	r2, r3, #15
 80040bc:	4613      	mov	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68f9      	ldr	r1, [r7, #12]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f002 fef2 	bl	8006ec0 <USB_EPStopXfer>
 80040dc:	4603      	mov	r3, r0
 80040de:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040e0:	7afb      	ldrb	r3, [r7, #11]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b08a      	sub	sp, #40	; 0x28
 80040ee:	af02      	add	r7, sp, #8
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	3338      	adds	r3, #56	; 0x38
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	3304      	adds	r3, #4
 8004110:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1a      	ldr	r2, [r3, #32]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	429a      	cmp	r2, r3
 800411c:	d901      	bls.n	8004122 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e06c      	b.n	80041fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	429a      	cmp	r2, r3
 8004136:	d902      	bls.n	800413e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3303      	adds	r3, #3
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004146:	e02b      	b.n	80041a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	429a      	cmp	r2, r3
 800415c:	d902      	bls.n	8004164 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	3303      	adds	r3, #3
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6919      	ldr	r1, [r3, #16]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	b2da      	uxtb	r2, r3
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800417c:	b2db      	uxtb	r3, r3
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	4603      	mov	r3, r0
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f002 ff46 	bl	8007014 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	441a      	add	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a1a      	ldr	r2, [r3, #32]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	441a      	add	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d809      	bhi.n	80041ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a1a      	ldr	r2, [r3, #32]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041be:	429a      	cmp	r2, r3
 80041c0:	d203      	bcs.n	80041ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1be      	bne.n	8004148 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d811      	bhi.n	80041fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	2201      	movs	r2, #1
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	6939      	ldr	r1, [r7, #16]
 80041f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f6:	4013      	ands	r3, r2
 80041f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	333c      	adds	r3, #60	; 0x3c
 800421c:	3304      	adds	r3, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d17b      	bne.n	8004332 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4a61      	ldr	r2, [pc, #388]	; (80043cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	f240 80b9 	bls.w	80043c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80b3 	beq.w	80043c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	461a      	mov	r2, r3
 8004268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426c:	6093      	str	r3, [r2, #8]
 800426e:	e0a7      	b.n	80043c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	461a      	mov	r2, r3
 8004288:	2320      	movs	r3, #32
 800428a:	6093      	str	r3, [r2, #8]
 800428c:	e098      	b.n	80043c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	f040 8093 	bne.w	80043c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	4a4b      	ldr	r2, [pc, #300]	; (80043cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d90f      	bls.n	80042c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b8:	461a      	mov	r2, r3
 80042ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042be:	6093      	str	r3, [r2, #8]
 80042c0:	e07e      	b.n	80043c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	3304      	adds	r3, #4
 80042d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	0159      	lsls	r1, r3, #5
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	440b      	add	r3, r1
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ee:	1ad2      	subs	r2, r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d114      	bne.n	8004324 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800430c:	461a      	mov	r2, r3
 800430e:	2101      	movs	r1, #1
 8004310:	f003 f916 	bl	8007540 <USB_EP0_OutStart>
 8004314:	e006      	b.n	8004324 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	441a      	add	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	4619      	mov	r1, r3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f005 fbce 	bl	8009acc <HAL_PCD_DataOutStageCallback>
 8004330:	e046      	b.n	80043c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d124      	bne.n	8004384 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004350:	461a      	mov	r2, r3
 8004352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004356:	6093      	str	r3, [r2, #8]
 8004358:	e032      	b.n	80043c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	461a      	mov	r2, r3
 8004372:	2320      	movs	r3, #32
 8004374:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f005 fba5 	bl	8009acc <HAL_PCD_DataOutStageCallback>
 8004382:	e01d      	b.n	80043c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d114      	bne.n	80043b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d108      	bne.n	80043b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043ac:	461a      	mov	r2, r3
 80043ae:	2100      	movs	r1, #0
 80043b0:	f003 f8c6 	bl	8007540 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	4619      	mov	r1, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f005 fb86 	bl	8009acc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	4f54300a 	.word	0x4f54300a
 80043d0:	4f54310a 	.word	0x4f54310a

080043d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	333c      	adds	r3, #60	; 0x3c
 80043ec:	3304      	adds	r3, #4
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <PCD_EP_OutSetupPacket_int+0x88>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d90e      	bls.n	8004428 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f005 fb3d 	bl	8009aa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <PCD_EP_OutSetupPacket_int+0x88>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d90c      	bls.n	8004450 <PCD_EP_OutSetupPacket_int+0x7c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d108      	bne.n	8004450 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004448:	461a      	mov	r2, r3
 800444a:	2101      	movs	r1, #1
 800444c:	f003 f878 	bl	8007540 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	4f54300a 	.word	0x4f54300a

08004460 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
 800446c:	4613      	mov	r3, r2
 800446e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d107      	bne.n	800448e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800447e:	883b      	ldrh	r3, [r7, #0]
 8004480:	0419      	lsls	r1, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	430a      	orrs	r2, r1
 800448a:	629a      	str	r2, [r3, #40]	; 0x28
 800448c:	e028      	b.n	80044e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	4413      	add	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800449c:	2300      	movs	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]
 80044a0:	e00d      	b.n	80044be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	3340      	adds	r3, #64	; 0x40
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	4413      	add	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	3301      	adds	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
 80044be:	7bfa      	ldrb	r2, [r7, #15]
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d3ec      	bcc.n	80044a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044c8:	883b      	ldrh	r3, [r7, #0]
 80044ca:	0418      	lsls	r0, r3, #16
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6819      	ldr	r1, [r3, #0]
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	4302      	orrs	r2, r0
 80044d8:	3340      	adds	r3, #64	; 0x40
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	460b      	mov	r3, r1
 80044f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e267      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d075      	beq.n	8004632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b04      	cmp	r3, #4
 8004550:	d00c      	beq.n	800456c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004552:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800455a:	2b08      	cmp	r3, #8
 800455c:	d112      	bne.n	8004584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455e:	4b82      	ldr	r3, [pc, #520]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456a:	d10b      	bne.n	8004584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	4b7e      	ldr	r3, [pc, #504]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d05b      	beq.n	8004630 <HAL_RCC_OscConfig+0x108>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d157      	bne.n	8004630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e242      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d106      	bne.n	800459c <HAL_RCC_OscConfig+0x74>
 800458e:	4b76      	ldr	r3, [pc, #472]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a75      	ldr	r2, [pc, #468]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e01d      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x98>
 80045a6:	4b70      	ldr	r3, [pc, #448]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6f      	ldr	r2, [pc, #444]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b6d      	ldr	r3, [pc, #436]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6c      	ldr	r2, [pc, #432]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 80045c0:	4b69      	ldr	r3, [pc, #420]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a68      	ldr	r2, [pc, #416]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b66      	ldr	r3, [pc, #408]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a65      	ldr	r2, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fe f9f0 	bl	80029c4 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fe f9ec 	bl	80029c4 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e207      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0xc0>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fe f9dc 	bl	80029c4 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe f9d8 	bl	80029c4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1f3      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004622:	4b51      	ldr	r3, [pc, #324]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0xe8>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d063      	beq.n	8004706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464a:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004652:	2b08      	cmp	r3, #8
 8004654:	d11c      	bne.n	8004690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004656:	4b44      	ldr	r3, [pc, #272]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d116      	bne.n	8004690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004662:	4b41      	ldr	r3, [pc, #260]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_RCC_OscConfig+0x152>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e1c7      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467a:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4937      	ldr	r1, [pc, #220]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	e03a      	b.n	8004706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004698:	4b34      	ldr	r3, [pc, #208]	; (800476c <HAL_RCC_OscConfig+0x244>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fe f991 	bl	80029c4 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fe f98d 	bl	80029c4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1a8      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b8:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b28      	ldr	r3, [pc, #160]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4925      	ldr	r1, [pc, #148]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
 80046d8:	e015      	b.n	8004706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_RCC_OscConfig+0x244>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fe f970 	bl	80029c4 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e8:	f7fe f96c 	bl	80029c4 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e187      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d036      	beq.n	8004780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_RCC_OscConfig+0x248>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fe f950 	bl	80029c4 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004728:	f7fe f94c 	bl	80029c4 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e167      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800473c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x200>
 8004746:	e01b      	b.n	8004780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_OscConfig+0x248>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fe f939 	bl	80029c4 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004754:	e00e      	b.n	8004774 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004756:	f7fe f935 	bl	80029c4 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d907      	bls.n	8004774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e150      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
 8004768:	40023800 	.word	0x40023800
 800476c:	42470000 	.word	0x42470000
 8004770:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004774:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ea      	bne.n	8004756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8097 	beq.w	80048bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004792:	4b81      	ldr	r3, [pc, #516]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	4b7d      	ldr	r3, [pc, #500]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a7c      	ldr	r2, [pc, #496]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
 80047ae:	4b7a      	ldr	r3, [pc, #488]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047be:	4b77      	ldr	r3, [pc, #476]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d118      	bne.n	80047fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ca:	4b74      	ldr	r3, [pc, #464]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a73      	ldr	r2, [pc, #460]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d6:	f7fe f8f5 	bl	80029c4 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047de:	f7fe f8f1 	bl	80029c4 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e10c      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	4b6a      	ldr	r3, [pc, #424]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d106      	bne.n	8004812 <HAL_RCC_OscConfig+0x2ea>
 8004804:	4b64      	ldr	r3, [pc, #400]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a63      	ldr	r2, [pc, #396]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
 8004810:	e01c      	b.n	800484c <HAL_RCC_OscConfig+0x324>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x30c>
 800481a:	4b5f      	ldr	r3, [pc, #380]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	4a5e      	ldr	r2, [pc, #376]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004820:	f043 0304 	orr.w	r3, r3, #4
 8004824:	6713      	str	r3, [r2, #112]	; 0x70
 8004826:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	4a5b      	ldr	r2, [pc, #364]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	6713      	str	r3, [r2, #112]	; 0x70
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0x324>
 8004834:	4b58      	ldr	r3, [pc, #352]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
 8004840:	4b55      	ldr	r3, [pc, #340]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a54      	ldr	r2, [pc, #336]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004846:	f023 0304 	bic.w	r3, r3, #4
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d015      	beq.n	8004880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fe f8b6 	bl	80029c4 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	e00a      	b.n	8004872 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485c:	f7fe f8b2 	bl	80029c4 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	; 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0cb      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ee      	beq.n	800485c <HAL_RCC_OscConfig+0x334>
 800487e:	e014      	b.n	80048aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004880:	f7fe f8a0 	bl	80029c4 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fe f89c 	bl	80029c4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0b5      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489e:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ee      	bne.n	8004888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b0:	4b39      	ldr	r3, [pc, #228]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	4a38      	ldr	r2, [pc, #224]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a1 	beq.w	8004a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c6:	4b34      	ldr	r3, [pc, #208]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d05c      	beq.n	800498c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d141      	bne.n	800495e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048da:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fe f870 	bl	80029c4 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fe f86c 	bl	80029c4 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e087      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	3b01      	subs	r3, #1
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	491b      	ldr	r1, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004936:	f7fe f845 	bl	80029c4 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493e:	f7fe f841 	bl	80029c4 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e05c      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x416>
 800495c:	e054      	b.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fe f82e 	bl	80029c4 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496c:	f7fe f82a 	bl	80029c4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e045      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x444>
 800498a:	e03d      	b.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e038      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
 8004998:	40023800 	.word	0x40023800
 800499c:	40007000 	.word	0x40007000
 80049a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x4ec>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d028      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d121      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d11a      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049d4:	4013      	ands	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	4293      	cmp	r3, r2
 80049de:	d111      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800

08004a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0cc      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b68      	ldr	r3, [pc, #416]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d90c      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b63      	ldr	r3, [pc, #396]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0b8      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d020      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a6c:	4b59      	ldr	r3, [pc, #356]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a58      	ldr	r2, [pc, #352]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a84:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a52      	ldr	r2, [pc, #328]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a90:	4b50      	ldr	r3, [pc, #320]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	494d      	ldr	r1, [pc, #308]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d044      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d119      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e07f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b3f      	ldr	r3, [pc, #252]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e067      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4934      	ldr	r1, [pc, #208]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b08:	f7fd ff5c 	bl	80029c4 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fd ff58 	bl	80029c4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e04f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d20c      	bcs.n	8004b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e032      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4916      	ldr	r1, [pc, #88]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	490e      	ldr	r1, [pc, #56]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b9e:	f000 f821 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	490a      	ldr	r1, [pc, #40]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	5ccb      	ldrb	r3, [r1, r3]
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fd febc 	bl	800293c <HAL_InitTick>

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023c00 	.word	0x40023c00
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	0800bc58 	.word	0x0800bc58
 8004bdc:	2000003c 	.word	0x2000003c
 8004be0:	20000040 	.word	0x20000040

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be8:	b090      	sub	sp, #64	; 0x40
 8004bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfc:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 030c 	and.w	r3, r3, #12
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d00d      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x40>
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	f200 80a1 	bhi.w	8004d50 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x34>
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d003      	beq.n	8004c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c16:	e09b      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4b53      	ldr	r3, [pc, #332]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c1c:	e09b      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c1e:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c22:	e098      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c24:	4b4f      	ldr	r3, [pc, #316]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c2e:	4b4d      	ldr	r3, [pc, #308]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d028      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3a:	4b4a      	ldr	r3, [pc, #296]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	099b      	lsrs	r3, r3, #6
 8004c40:	2200      	movs	r2, #0
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	627a      	str	r2, [r7, #36]	; 0x24
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c50:	fb03 f201 	mul.w	r2, r3, r1
 8004c54:	2300      	movs	r3, #0
 8004c56:	fb00 f303 	mul.w	r3, r0, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	4a43      	ldr	r2, [pc, #268]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c5e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c64:	460a      	mov	r2, r1
 8004c66:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6a:	4413      	add	r3, r2
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c70:	2200      	movs	r2, #0
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	61fa      	str	r2, [r7, #28]
 8004c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c7e:	f7fb ff99 	bl	8000bb4 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4613      	mov	r3, r2
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c8a:	e053      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8c:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	2200      	movs	r2, #0
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	617a      	str	r2, [r7, #20]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c9e:	f04f 0b00 	mov.w	fp, #0
 8004ca2:	4652      	mov	r2, sl
 8004ca4:	465b      	mov	r3, fp
 8004ca6:	f04f 0000 	mov.w	r0, #0
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	0159      	lsls	r1, r3, #5
 8004cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb4:	0150      	lsls	r0, r2, #5
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	ebb2 080a 	subs.w	r8, r2, sl
 8004cbe:	eb63 090b 	sbc.w	r9, r3, fp
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cd6:	ebb2 0408 	subs.w	r4, r2, r8
 8004cda:	eb63 0509 	sbc.w	r5, r3, r9
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	00eb      	lsls	r3, r5, #3
 8004ce8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cec:	00e2      	lsls	r2, r4, #3
 8004cee:	4614      	mov	r4, r2
 8004cf0:	461d      	mov	r5, r3
 8004cf2:	eb14 030a 	adds.w	r3, r4, sl
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	eb45 030b 	adc.w	r3, r5, fp
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	028b      	lsls	r3, r1, #10
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d14:	4621      	mov	r1, r4
 8004d16:	028a      	lsls	r2, r1, #10
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	2200      	movs	r2, #0
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	60fa      	str	r2, [r7, #12]
 8004d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d28:	f7fb ff44 	bl	8000bb4 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4613      	mov	r3, r2
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d4e:	e002      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3740      	adds	r7, #64	; 0x40
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	017d7840 	.word	0x017d7840

08004d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	2000003c 	.word	0x2000003c

08004d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e041      	b.n	8004e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc fe22 	bl	80019f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fc5e 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d001      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e044      	b.n	8004eca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6a:	d013      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <HAL_TIM_Base_Start_IT+0xb4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x6c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d111      	bne.n	8004eb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d010      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	e007      	b.n	8004ec8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40014000 	.word	0x40014000

08004eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e041      	b.n	8004f82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f839 	bl	8004f8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 fbac 	bl	8005688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d109      	bne.n	8004fc4 <HAL_TIM_PWM_Start+0x24>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	e022      	b.n	800500a <HAL_TIM_PWM_Start+0x6a>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d109      	bne.n	8004fde <HAL_TIM_PWM_Start+0x3e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	bf14      	ite	ne
 8004fd6:	2301      	movne	r3, #1
 8004fd8:	2300      	moveq	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	e015      	b.n	800500a <HAL_TIM_PWM_Start+0x6a>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d109      	bne.n	8004ff8 <HAL_TIM_PWM_Start+0x58>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	e008      	b.n	800500a <HAL_TIM_PWM_Start+0x6a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	bf14      	ite	ne
 8005004:	2301      	movne	r3, #1
 8005006:	2300      	moveq	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e068      	b.n	80050e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <HAL_TIM_PWM_Start+0x82>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005020:	e013      	b.n	800504a <HAL_TIM_PWM_Start+0xaa>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b04      	cmp	r3, #4
 8005026:	d104      	bne.n	8005032 <HAL_TIM_PWM_Start+0x92>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005030:	e00b      	b.n	800504a <HAL_TIM_PWM_Start+0xaa>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d104      	bne.n	8005042 <HAL_TIM_PWM_Start+0xa2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005040:	e003      	b.n	800504a <HAL_TIM_PWM_Start+0xaa>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2202      	movs	r2, #2
 8005046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2201      	movs	r2, #1
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fdbe 	bl	8005bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a23      	ldr	r2, [pc, #140]	; (80050ec <HAL_TIM_PWM_Start+0x14c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d107      	bne.n	8005072 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005070:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <HAL_TIM_PWM_Start+0x14c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d018      	beq.n	80050ae <HAL_TIM_PWM_Start+0x10e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d013      	beq.n	80050ae <HAL_TIM_PWM_Start+0x10e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <HAL_TIM_PWM_Start+0x150>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_TIM_PWM_Start+0x10e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a17      	ldr	r2, [pc, #92]	; (80050f4 <HAL_TIM_PWM_Start+0x154>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_TIM_PWM_Start+0x10e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <HAL_TIM_PWM_Start+0x158>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_TIM_PWM_Start+0x10e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a14      	ldr	r2, [pc, #80]	; (80050fc <HAL_TIM_PWM_Start+0x15c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d111      	bne.n	80050d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b06      	cmp	r3, #6
 80050be:	d010      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d0:	e007      	b.n	80050e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40014000 	.word	0x40014000

08005100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	d122      	bne.n	800515c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b02      	cmp	r3, #2
 8005122:	d11b      	bne.n	800515c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0202 	mvn.w	r2, #2
 800512c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa81 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fa73 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fa84 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b04      	cmp	r3, #4
 8005168:	d122      	bne.n	80051b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b04      	cmp	r3, #4
 8005176:	d11b      	bne.n	80051b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0204 	mvn.w	r2, #4
 8005180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa57 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa49 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa5a 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d122      	bne.n	8005204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d11b      	bne.n	8005204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0208 	mvn.w	r2, #8
 80051d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2204      	movs	r2, #4
 80051da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa2d 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 80051f0:	e005      	b.n	80051fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa1f 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fa30 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b10      	cmp	r3, #16
 8005210:	d122      	bne.n	8005258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b10      	cmp	r3, #16
 800521e:	d11b      	bne.n	8005258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0210 	mvn.w	r2, #16
 8005228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2208      	movs	r2, #8
 800522e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fa03 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005244:	e005      	b.n	8005252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f9f5 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fa06 	bl	800565e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	d10e      	bne.n	8005284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b01      	cmp	r3, #1
 8005272:	d107      	bne.n	8005284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0201 	mvn.w	r2, #1
 800527c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f9cf 	bl	8005622 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d10e      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b80      	cmp	r3, #128	; 0x80
 800529e:	d107      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fd82 	bl	8005db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d10e      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f9cb 	bl	8005672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d10e      	bne.n	8005308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d107      	bne.n	8005308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0220 	mvn.w	r2, #32
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fd4c 	bl	8005da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005308:	bf00      	nop
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800531c:	2300      	movs	r3, #0
 800531e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800532a:	2302      	movs	r3, #2
 800532c:	e0ae      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	f200 809f 	bhi.w	800547c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005379 	.word	0x08005379
 8005348:	0800547d 	.word	0x0800547d
 800534c:	0800547d 	.word	0x0800547d
 8005350:	0800547d 	.word	0x0800547d
 8005354:	080053b9 	.word	0x080053b9
 8005358:	0800547d 	.word	0x0800547d
 800535c:	0800547d 	.word	0x0800547d
 8005360:	0800547d 	.word	0x0800547d
 8005364:	080053fb 	.word	0x080053fb
 8005368:	0800547d 	.word	0x0800547d
 800536c:	0800547d 	.word	0x0800547d
 8005370:	0800547d 	.word	0x0800547d
 8005374:	0800543b 	.word	0x0800543b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 fa02 	bl	8005788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0208 	orr.w	r2, r2, #8
 8005392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0204 	bic.w	r2, r2, #4
 80053a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6999      	ldr	r1, [r3, #24]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	619a      	str	r2, [r3, #24]
      break;
 80053b6:	e064      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68b9      	ldr	r1, [r7, #8]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fa48 	bl	8005854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6999      	ldr	r1, [r3, #24]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	021a      	lsls	r2, r3, #8
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	619a      	str	r2, [r3, #24]
      break;
 80053f8:	e043      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fa93 	bl	800592c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0208 	orr.w	r2, r2, #8
 8005414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0204 	bic.w	r2, r2, #4
 8005424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69d9      	ldr	r1, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	61da      	str	r2, [r3, #28]
      break;
 8005438:	e023      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fadd 	bl	8005a00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69da      	ldr	r2, [r3, #28]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69da      	ldr	r2, [r3, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69d9      	ldr	r1, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	021a      	lsls	r2, r3, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	61da      	str	r2, [r3, #28]
      break;
 800547a:	e002      	b.n	8005482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
      break;
 8005480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800548a:	7dfb      	ldrb	r3, [r7, #23]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIM_ConfigClockSource+0x1c>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e0b4      	b.n	800561a <HAL_TIM_ConfigClockSource+0x186>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e8:	d03e      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0xd4>
 80054ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ee:	f200 8087 	bhi.w	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f6:	f000 8086 	beq.w	8005606 <HAL_TIM_ConfigClockSource+0x172>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	d87f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005500:	2b70      	cmp	r3, #112	; 0x70
 8005502:	d01a      	beq.n	800553a <HAL_TIM_ConfigClockSource+0xa6>
 8005504:	2b70      	cmp	r3, #112	; 0x70
 8005506:	d87b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005508:	2b60      	cmp	r3, #96	; 0x60
 800550a:	d050      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x11a>
 800550c:	2b60      	cmp	r3, #96	; 0x60
 800550e:	d877      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005510:	2b50      	cmp	r3, #80	; 0x50
 8005512:	d03c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0xfa>
 8005514:	2b50      	cmp	r3, #80	; 0x50
 8005516:	d873      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d058      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x13a>
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d86f      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b30      	cmp	r3, #48	; 0x30
 8005522:	d064      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005524:	2b30      	cmp	r3, #48	; 0x30
 8005526:	d86b      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b20      	cmp	r3, #32
 800552a:	d060      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 800552c:	2b20      	cmp	r3, #32
 800552e:	d867      	bhi.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05c      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005534:	2b10      	cmp	r3, #16
 8005536:	d05a      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	e062      	b.n	8005600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6899      	ldr	r1, [r3, #8]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f000 fb23 	bl	8005b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800555c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e04f      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f000 fb0c 	bl	8005b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800558a:	609a      	str	r2, [r3, #8]
      break;
 800558c:	e03c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	f000 fa80 	bl	8005aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2150      	movs	r1, #80	; 0x50
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fad9 	bl	8005b5e <TIM_ITRx_SetConfig>
      break;
 80055ac:	e02c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 fa9f 	bl	8005afe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2160      	movs	r1, #96	; 0x60
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fac9 	bl	8005b5e <TIM_ITRx_SetConfig>
      break;
 80055cc:	e01c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 fa60 	bl	8005aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fab9 	bl	8005b5e <TIM_ITRx_SetConfig>
      break;
 80055ec:	e00c      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f000 fab0 	bl	8005b5e <TIM_ITRx_SetConfig>
      break;
 80055fe:	e003      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      break;
 8005604:	e000      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a34      	ldr	r2, [pc, #208]	; (800576c <TIM_Base_SetConfig+0xe4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0x38>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0x38>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a31      	ldr	r2, [pc, #196]	; (8005770 <TIM_Base_SetConfig+0xe8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0x38>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a30      	ldr	r2, [pc, #192]	; (8005774 <TIM_Base_SetConfig+0xec>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0x38>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a2f      	ldr	r2, [pc, #188]	; (8005778 <TIM_Base_SetConfig+0xf0>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d108      	bne.n	80056d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <TIM_Base_SetConfig+0xe4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01b      	beq.n	8005712 <TIM_Base_SetConfig+0x8a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e0:	d017      	beq.n	8005712 <TIM_Base_SetConfig+0x8a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a22      	ldr	r2, [pc, #136]	; (8005770 <TIM_Base_SetConfig+0xe8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <TIM_Base_SetConfig+0x8a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a21      	ldr	r2, [pc, #132]	; (8005774 <TIM_Base_SetConfig+0xec>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_Base_SetConfig+0x8a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a20      	ldr	r2, [pc, #128]	; (8005778 <TIM_Base_SetConfig+0xf0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_Base_SetConfig+0x8a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1f      	ldr	r2, [pc, #124]	; (800577c <TIM_Base_SetConfig+0xf4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_Base_SetConfig+0x8a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <TIM_Base_SetConfig+0xf8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_Base_SetConfig+0x8a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <TIM_Base_SetConfig+0xfc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d108      	bne.n	8005724 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a08      	ldr	r2, [pc, #32]	; (800576c <TIM_Base_SetConfig+0xe4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d103      	bne.n	8005758 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	615a      	str	r2, [r3, #20]
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40010000 	.word	0x40010000
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800

08005788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f023 0201 	bic.w	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0302 	bic.w	r3, r3, #2
 80057d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <TIM_OC1_SetConfig+0xc8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d10c      	bne.n	80057fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 0308 	bic.w	r3, r3, #8
 80057ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a13      	ldr	r2, [pc, #76]	; (8005850 <TIM_OC1_SetConfig+0xc8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d111      	bne.n	800582a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40010000 	.word	0x40010000

08005854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0210 	bic.w	r2, r3, #16
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0320 	bic.w	r3, r3, #32
 800589e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a1e      	ldr	r2, [pc, #120]	; (8005928 <TIM_OC2_SetConfig+0xd4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d10d      	bne.n	80058d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <TIM_OC2_SetConfig+0xd4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d113      	bne.n	8005900 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000

0800592c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0303 	bic.w	r3, r3, #3
 8005962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <TIM_OC3_SetConfig+0xd0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d10d      	bne.n	80059a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a14      	ldr	r2, [pc, #80]	; (80059fc <TIM_OC3_SetConfig+0xd0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d113      	bne.n	80059d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	621a      	str	r2, [r3, #32]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	40010000 	.word	0x40010000

08005a00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	031b      	lsls	r3, r3, #12
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a10      	ldr	r2, [pc, #64]	; (8005a9c <TIM_OC4_SetConfig+0x9c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d109      	bne.n	8005a74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	019b      	lsls	r3, r3, #6
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000

08005aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0201 	bic.w	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f023 030a 	bic.w	r3, r3, #10
 8005adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b087      	sub	sp, #28
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f023 0210 	bic.w	r2, r3, #16
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	031b      	lsls	r3, r3, #12
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f043 0307 	orr.w	r3, r3, #7
 8005b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	609a      	str	r2, [r3, #8]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	021a      	lsls	r2, r3, #8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	609a      	str	r2, [r3, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2201      	movs	r2, #1
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a1a      	ldr	r2, [r3, #32]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e050      	b.n	8005cda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d018      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c84:	d013      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a18      	ldr	r2, [pc, #96]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00e      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d009      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d004      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d10c      	bne.n	8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40000400 	.word	0x40000400
 8005cf0:	40000800 	.word	0x40000800
 8005cf4:	40000c00 	.word	0x40000c00
 8005cf8:	40014000 	.word	0x40014000

08005cfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d14:	2302      	movs	r3, #2
 8005d16:	e03d      	b.n	8005d94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dc8:	b084      	sub	sp, #16
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	f107 001c 	add.w	r0, r7, #28
 8005dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d122      	bne.n	8005e26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d105      	bne.n	8005e1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 fbee 	bl	80075fc <USB_CoreReset>
 8005e20:	4603      	mov	r3, r0
 8005e22:	73fb      	strb	r3, [r7, #15]
 8005e24:	e01a      	b.n	8005e5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 fbe2 	bl	80075fc <USB_CoreReset>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e4e:	e005      	b.n	8005e5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d10b      	bne.n	8005e7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f043 0206 	orr.w	r2, r3, #6
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e86:	b004      	add	sp, #16
 8005e88:	4770      	bx	lr
	...

08005e8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d165      	bne.n	8005f6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4a41      	ldr	r2, [pc, #260]	; (8005fa8 <USB_SetTurnaroundTime+0x11c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d906      	bls.n	8005eb6 <USB_SetTurnaroundTime+0x2a>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4a40      	ldr	r2, [pc, #256]	; (8005fac <USB_SetTurnaroundTime+0x120>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d202      	bcs.n	8005eb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005eb0:	230f      	movs	r3, #15
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	e062      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <USB_SetTurnaroundTime+0x120>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d306      	bcc.n	8005ecc <USB_SetTurnaroundTime+0x40>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a3b      	ldr	r2, [pc, #236]	; (8005fb0 <USB_SetTurnaroundTime+0x124>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d202      	bcs.n	8005ecc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ec6:	230e      	movs	r3, #14
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e057      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4a38      	ldr	r2, [pc, #224]	; (8005fb0 <USB_SetTurnaroundTime+0x124>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d306      	bcc.n	8005ee2 <USB_SetTurnaroundTime+0x56>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a37      	ldr	r2, [pc, #220]	; (8005fb4 <USB_SetTurnaroundTime+0x128>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d202      	bcs.n	8005ee2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005edc:	230d      	movs	r3, #13
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	e04c      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a33      	ldr	r2, [pc, #204]	; (8005fb4 <USB_SetTurnaroundTime+0x128>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d306      	bcc.n	8005ef8 <USB_SetTurnaroundTime+0x6c>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4a32      	ldr	r2, [pc, #200]	; (8005fb8 <USB_SetTurnaroundTime+0x12c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d802      	bhi.n	8005ef8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ef2:	230c      	movs	r3, #12
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e041      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a2f      	ldr	r2, [pc, #188]	; (8005fb8 <USB_SetTurnaroundTime+0x12c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d906      	bls.n	8005f0e <USB_SetTurnaroundTime+0x82>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4a2e      	ldr	r2, [pc, #184]	; (8005fbc <USB_SetTurnaroundTime+0x130>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d802      	bhi.n	8005f0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005f08:	230b      	movs	r3, #11
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e036      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <USB_SetTurnaroundTime+0x130>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d906      	bls.n	8005f24 <USB_SetTurnaroundTime+0x98>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <USB_SetTurnaroundTime+0x134>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d802      	bhi.n	8005f24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005f1e:	230a      	movs	r3, #10
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e02b      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a26      	ldr	r2, [pc, #152]	; (8005fc0 <USB_SetTurnaroundTime+0x134>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d906      	bls.n	8005f3a <USB_SetTurnaroundTime+0xae>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4a25      	ldr	r2, [pc, #148]	; (8005fc4 <USB_SetTurnaroundTime+0x138>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d202      	bcs.n	8005f3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f34:	2309      	movs	r3, #9
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e020      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4a21      	ldr	r2, [pc, #132]	; (8005fc4 <USB_SetTurnaroundTime+0x138>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d306      	bcc.n	8005f50 <USB_SetTurnaroundTime+0xc4>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	4a20      	ldr	r2, [pc, #128]	; (8005fc8 <USB_SetTurnaroundTime+0x13c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d802      	bhi.n	8005f50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	e015      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <USB_SetTurnaroundTime+0x13c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d906      	bls.n	8005f66 <USB_SetTurnaroundTime+0xda>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <USB_SetTurnaroundTime+0x140>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d202      	bcs.n	8005f66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f60:	2307      	movs	r3, #7
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	e00a      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f66:	2306      	movs	r3, #6
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	e007      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f72:	2309      	movs	r3, #9
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e001      	b.n	8005f7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f78:	2309      	movs	r3, #9
 8005f7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	029b      	lsls	r3, r3, #10
 8005f90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f94:	431a      	orrs	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	00d8acbf 	.word	0x00d8acbf
 8005fac:	00e4e1c0 	.word	0x00e4e1c0
 8005fb0:	00f42400 	.word	0x00f42400
 8005fb4:	01067380 	.word	0x01067380
 8005fb8:	011a499f 	.word	0x011a499f
 8005fbc:	01312cff 	.word	0x01312cff
 8005fc0:	014ca43f 	.word	0x014ca43f
 8005fc4:	016e3600 	.word	0x016e3600
 8005fc8:	01a6ab1f 	.word	0x01a6ab1f
 8005fcc:	01e84800 	.word	0x01e84800

08005fd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f043 0201 	orr.w	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d115      	bne.n	8006062 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006042:	2001      	movs	r0, #1
 8006044:	f7fc fcca 	bl	80029dc <HAL_Delay>
      ms++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3301      	adds	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 fa45 	bl	80074de <USB_GetMode>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d01e      	beq.n	8006098 <USB_SetCurrentMode+0x84>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b31      	cmp	r3, #49	; 0x31
 800605e:	d9f0      	bls.n	8006042 <USB_SetCurrentMode+0x2e>
 8006060:	e01a      	b.n	8006098 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d115      	bne.n	8006094 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006074:	2001      	movs	r0, #1
 8006076:	f7fc fcb1 	bl	80029dc <HAL_Delay>
      ms++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3301      	adds	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 fa2c 	bl	80074de <USB_GetMode>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <USB_SetCurrentMode+0x84>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b31      	cmp	r3, #49	; 0x31
 8006090:	d9f0      	bls.n	8006074 <USB_SetCurrentMode+0x60>
 8006092:	e001      	b.n	8006098 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e005      	b.n	80060a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b32      	cmp	r3, #50	; 0x32
 800609c:	d101      	bne.n	80060a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060ac:	b084      	sub	sp, #16
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b086      	sub	sp, #24
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80060ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	e009      	b.n	80060e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	3340      	adds	r3, #64	; 0x40
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	2200      	movs	r2, #0
 80060d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	3301      	adds	r3, #1
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2b0e      	cmp	r3, #14
 80060e4:	d9f2      	bls.n	80060cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d11c      	bne.n	8006126 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060fa:	f043 0302 	orr.w	r3, r3, #2
 80060fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	639a      	str	r2, [r3, #56]	; 0x38
 8006124:	e00b      	b.n	800613e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006144:	461a      	mov	r2, r3
 8006146:	2300      	movs	r3, #0
 8006148:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006150:	4619      	mov	r1, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006158:	461a      	mov	r2, r3
 800615a:	680b      	ldr	r3, [r1, #0]
 800615c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	2b01      	cmp	r3, #1
 8006162:	d10c      	bne.n	800617e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d104      	bne.n	8006174 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800616a:	2100      	movs	r1, #0
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f965 	bl	800643c <USB_SetDevSpeed>
 8006172:	e008      	b.n	8006186 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006174:	2101      	movs	r1, #1
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f960 	bl	800643c <USB_SetDevSpeed>
 800617c:	e003      	b.n	8006186 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800617e:	2103      	movs	r1, #3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f95b 	bl	800643c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006186:	2110      	movs	r1, #16
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f8f3 	bl	8006374 <USB_FlushTxFifo>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f91f 	bl	80063dc <USB_FlushRxFifo>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ae:	461a      	mov	r2, r3
 80061b0:	2300      	movs	r3, #0
 80061b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	461a      	mov	r2, r3
 80061bc:	2300      	movs	r3, #0
 80061be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c6:	461a      	mov	r2, r3
 80061c8:	2300      	movs	r3, #0
 80061ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	e043      	b.n	800625a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e8:	d118      	bne.n	800621c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	461a      	mov	r2, r3
 80061fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e013      	b.n	800622e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	461a      	mov	r2, r3
 8006214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e008      	b.n	800622e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	461a      	mov	r2, r3
 800622a:	2300      	movs	r3, #0
 800622c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	461a      	mov	r2, r3
 800623c:	2300      	movs	r3, #0
 800623e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	461a      	mov	r2, r3
 800624e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	3301      	adds	r3, #1
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	429a      	cmp	r2, r3
 8006260:	d3b7      	bcc.n	80061d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	e043      	b.n	80062f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800627a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627e:	d118      	bne.n	80062b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	461a      	mov	r2, r3
 8006294:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e013      	b.n	80062c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	461a      	mov	r2, r3
 80062aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e008      	b.n	80062c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062be:	461a      	mov	r2, r3
 80062c0:	2300      	movs	r3, #0
 80062c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	461a      	mov	r2, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	461a      	mov	r2, r3
 80062e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3301      	adds	r3, #1
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d3b7      	bcc.n	8006268 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800630a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006318:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b00      	cmp	r3, #0
 800631e:	d105      	bne.n	800632c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f043 0210 	orr.w	r2, r3, #16
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <USB_DevInit+0x2c4>)
 8006332:	4313      	orrs	r3, r2
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f043 0208 	orr.w	r2, r3, #8
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800634a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d107      	bne.n	8006360 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006358:	f043 0304 	orr.w	r3, r3, #4
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800636c:	b004      	add	sp, #16
 800636e:	4770      	bx	lr
 8006370:	803c3800 	.word	0x803c3800

08006374 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <USB_FlushTxFifo+0x64>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d901      	bls.n	8006394 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e01b      	b.n	80063cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	daf2      	bge.n	8006382 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	019b      	lsls	r3, r3, #6
 80063a4:	f043 0220 	orr.w	r2, r3, #32
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4a08      	ldr	r2, [pc, #32]	; (80063d8 <USB_FlushTxFifo+0x64>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d901      	bls.n	80063be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e006      	b.n	80063cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	d0f0      	beq.n	80063ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	00030d40 	.word	0x00030d40

080063dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a11      	ldr	r2, [pc, #68]	; (8006438 <USB_FlushRxFifo+0x5c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e018      	b.n	800642c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	daf2      	bge.n	80063e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2210      	movs	r2, #16
 800640a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4a08      	ldr	r2, [pc, #32]	; (8006438 <USB_FlushRxFifo+0x5c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d901      	bls.n	800641e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e006      	b.n	800642c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f003 0310 	and.w	r3, r3, #16
 8006426:	2b10      	cmp	r3, #16
 8006428:	d0f0      	beq.n	800640c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	00030d40 	.word	0x00030d40

0800643c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	78fb      	ldrb	r3, [r7, #3]
 8006456:	68f9      	ldr	r1, [r7, #12]
 8006458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800645c:	4313      	orrs	r3, r2
 800645e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800646e:	b480      	push	{r7}
 8006470:	b087      	sub	sp, #28
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0306 	and.w	r3, r3, #6
 8006486:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800648e:	2300      	movs	r3, #0
 8006490:	75fb      	strb	r3, [r7, #23]
 8006492:	e00a      	b.n	80064aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d002      	beq.n	80064a0 <USB_GetDevSpeed+0x32>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b06      	cmp	r3, #6
 800649e:	d102      	bne.n	80064a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064a0:	2302      	movs	r3, #2
 80064a2:	75fb      	strb	r3, [r7, #23]
 80064a4:	e001      	b.n	80064aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80064a6:	230f      	movs	r3, #15
 80064a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	785b      	ldrb	r3, [r3, #1]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d13a      	bne.n	800654a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	2101      	movs	r1, #1
 80064e6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	68f9      	ldr	r1, [r7, #12]
 80064ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f2:	4313      	orrs	r3, r2
 80064f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d155      	bne.n	80065b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	791b      	ldrb	r3, [r3, #4]
 8006526:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006528:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	059b      	lsls	r3, r3, #22
 800652e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006530:	4313      	orrs	r3, r2
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	e036      	b.n	80065b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006550:	69da      	ldr	r2, [r3, #28]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	2101      	movs	r1, #1
 800655c:	fa01 f303 	lsl.w	r3, r1, r3
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	68f9      	ldr	r1, [r7, #12]
 8006564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006568:	4313      	orrs	r3, r2
 800656a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d11a      	bne.n	80065b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	791b      	ldrb	r3, [r3, #4]
 800659c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800659e:	430b      	orrs	r3, r1
 80065a0:	4313      	orrs	r3, r2
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d161      	bne.n	80066a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065fa:	d11f      	bne.n	800663c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800661a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800663a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	2101      	movs	r1, #1
 800664e:	fa01 f303 	lsl.w	r3, r1, r3
 8006652:	b29b      	uxth	r3, r3
 8006654:	43db      	mvns	r3, r3
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800665c:	4013      	ands	r3, r2
 800665e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	2101      	movs	r1, #1
 8006672:	fa01 f303 	lsl.w	r3, r1, r3
 8006676:	b29b      	uxth	r3, r3
 8006678:	43db      	mvns	r3, r3
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006680:	4013      	ands	r3, r2
 8006682:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	0159      	lsls	r1, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	440b      	add	r3, r1
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	4619      	mov	r1, r3
 80066a0:	4b35      	ldr	r3, [pc, #212]	; (8006778 <USB_DeactivateEndpoint+0x1b0>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	600b      	str	r3, [r1, #0]
 80066a6:	e060      	b.n	800676a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066be:	d11f      	bne.n	8006700 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	0151      	lsls	r1, r2, #5
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	440a      	add	r2, r1
 80066d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	2101      	movs	r1, #1
 8006712:	fa01 f303 	lsl.w	r3, r1, r3
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	43db      	mvns	r3, r3
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006720:	4013      	ands	r3, r2
 8006722:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672a:	69da      	ldr	r2, [r3, #28]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	2101      	movs	r1, #1
 8006736:	fa01 f303 	lsl.w	r3, r1, r3
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	43db      	mvns	r3, r3
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006744:	4013      	ands	r3, r2
 8006746:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	0159      	lsls	r1, r3, #5
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	440b      	add	r3, r1
 800675e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006762:	4619      	mov	r1, r3
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <USB_DeactivateEndpoint+0x1b4>)
 8006766:	4013      	ands	r3, r2
 8006768:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	ec337800 	.word	0xec337800
 800677c:	eff37800 	.word	0xeff37800

08006780 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08a      	sub	sp, #40	; 0x28
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	785b      	ldrb	r3, [r3, #1]
 800679c:	2b01      	cmp	r3, #1
 800679e:	f040 815c 	bne.w	8006a5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d132      	bne.n	8006810 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	440a      	add	r2, r1
 8006804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006808:	0cdb      	lsrs	r3, r3, #19
 800680a:	04db      	lsls	r3, r3, #19
 800680c:	6113      	str	r3, [r2, #16]
 800680e:	e074      	b.n	80068fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	440a      	add	r2, r1
 8006826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682a:	0cdb      	lsrs	r3, r3, #19
 800682c:	04db      	lsls	r3, r3, #19
 800682e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800684e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6999      	ldr	r1, [r3, #24]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	440b      	add	r3, r1
 800686c:	1e59      	subs	r1, r3, #1
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	fbb1 f3f3 	udiv	r3, r1, r3
 8006876:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006878:	4b9d      	ldr	r3, [pc, #628]	; (8006af0 <USB_EPStartXfer+0x370>)
 800687a:	400b      	ands	r3, r1
 800687c:	69b9      	ldr	r1, [r7, #24]
 800687e:	0148      	lsls	r0, r1, #5
 8006880:	69f9      	ldr	r1, [r7, #28]
 8006882:	4401      	add	r1, r0
 8006884:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006888:	4313      	orrs	r3, r2
 800688a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a2:	69b9      	ldr	r1, [r7, #24]
 80068a4:	0148      	lsls	r0, r1, #5
 80068a6:	69f9      	ldr	r1, [r7, #28]
 80068a8:	4401      	add	r1, r0
 80068aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068ae:	4313      	orrs	r3, r2
 80068b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	791b      	ldrb	r3, [r3, #4]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d11f      	bne.n	80068fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80068d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80068fa:	79fb      	ldrb	r3, [r7, #7]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d14b      	bne.n	8006998 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d009      	beq.n	800691c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	461a      	mov	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	791b      	ldrb	r3, [r3, #4]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d128      	bne.n	8006976 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d110      	bne.n	8006956 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	440a      	add	r2, r1
 800694a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	e00f      	b.n	8006976 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006974:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	440a      	add	r2, r1
 800698c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006990:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e133      	b.n	8006c00 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	791b      	ldrb	r3, [r3, #4]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d015      	beq.n	80069ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 811b 	beq.w	8006c00 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	2101      	movs	r1, #1
 80069dc:	fa01 f303 	lsl.w	r3, r1, r3
 80069e0:	69f9      	ldr	r1, [r7, #28]
 80069e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e6:	4313      	orrs	r3, r2
 80069e8:	634b      	str	r3, [r1, #52]	; 0x34
 80069ea:	e109      	b.n	8006c00 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d110      	bne.n	8006a1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	0151      	lsls	r1, r2, #5
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	440a      	add	r2, r1
 8006a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e00f      	b.n	8006a3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	69fa      	ldr	r2, [r7, #28]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6919      	ldr	r1, [r3, #16]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	781a      	ldrb	r2, [r3, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	b298      	uxth	r0, r3
 8006a4c:	79fb      	ldrb	r3, [r7, #7]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	4603      	mov	r3, r0
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 fade 	bl	8007014 <USB_WritePacket>
 8006a58:	e0d2      	b.n	8006c00 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	0151      	lsls	r1, r2, #5
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	440a      	add	r2, r1
 8006a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a74:	0cdb      	lsrs	r3, r3, #19
 8006a76:	04db      	lsls	r3, r3, #19
 8006a78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	0151      	lsls	r1, r2, #5
 8006a8c:	69fa      	ldr	r2, [r7, #28]
 8006a8e:	440a      	add	r2, r1
 8006a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d126      	bne.n	8006af4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006abc:	69b9      	ldr	r1, [r7, #24]
 8006abe:	0148      	lsls	r0, r1, #5
 8006ac0:	69f9      	ldr	r1, [r7, #28]
 8006ac2:	4401      	add	r1, r0
 8006ac4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aea:	6113      	str	r3, [r2, #16]
 8006aec:	e03a      	b.n	8006b64 <USB_EPStartXfer+0x3e4>
 8006aee:	bf00      	nop
 8006af0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	699a      	ldr	r2, [r3, #24]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	1e5a      	subs	r2, r3, #1
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b08:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	8afa      	ldrh	r2, [r7, #22]
 8006b10:	fb03 f202 	mul.w	r2, r3, r2
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	8afb      	ldrh	r3, [r7, #22]
 8006b28:	04d9      	lsls	r1, r3, #19
 8006b2a:	4b38      	ldr	r3, [pc, #224]	; (8006c0c <USB_EPStartXfer+0x48c>)
 8006b2c:	400b      	ands	r3, r1
 8006b2e:	69b9      	ldr	r1, [r7, #24]
 8006b30:	0148      	lsls	r0, r1, #5
 8006b32:	69f9      	ldr	r1, [r7, #28]
 8006b34:	4401      	add	r1, r0
 8006b36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4a:	691a      	ldr	r2, [r3, #16]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b54:	69b9      	ldr	r1, [r7, #24]
 8006b56:	0148      	lsls	r0, r1, #5
 8006b58:	69f9      	ldr	r1, [r7, #28]
 8006b5a:	4401      	add	r1, r0
 8006b5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006b60:	4313      	orrs	r3, r2
 8006b62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d10d      	bne.n	8006b86 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6919      	ldr	r1, [r3, #16]
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b82:	460a      	mov	r2, r1
 8006b84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	791b      	ldrb	r3, [r3, #4]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d128      	bne.n	8006be0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d110      	bne.n	8006bc0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	e00f      	b.n	8006be0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	1ff80000 	.word	0x1ff80000

08006c10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	785b      	ldrb	r3, [r3, #1]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	f040 80ce 	bne.w	8006dce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d132      	bne.n	8006ca0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	0151      	lsls	r1, r2, #5
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	440a      	add	r2, r1
 8006c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c98:	0cdb      	lsrs	r3, r3, #19
 8006c9a:	04db      	lsls	r3, r3, #19
 8006c9c:	6113      	str	r3, [r2, #16]
 8006c9e:	e04e      	b.n	8006d3e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cba:	0cdb      	lsrs	r3, r3, #19
 8006cbc:	04db      	lsls	r3, r3, #19
 8006cbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ce2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d903      	bls.n	8006cf8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	691a      	ldr	r2, [r3, #16]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d2e:	6939      	ldr	r1, [r7, #16]
 8006d30:	0148      	lsls	r0, r1, #5
 8006d32:	6979      	ldr	r1, [r7, #20]
 8006d34:	4401      	add	r1, r0
 8006d36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d11e      	bne.n	8006d82 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	e097      	b.n	8006eb2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	0151      	lsls	r1, r2, #5
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	440a      	add	r2, r1
 8006d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006da0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8083 	beq.w	8006eb2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f003 030f 	and.w	r3, r3, #15
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc2:	6979      	ldr	r1, [r7, #20]
 8006dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	634b      	str	r3, [r1, #52]	; 0x34
 8006dcc:	e071      	b.n	8006eb2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de8:	0cdb      	lsrs	r3, r3, #19
 8006dea:	04db      	lsls	r3, r3, #19
 8006dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e60:	6939      	ldr	r1, [r7, #16]
 8006e62:	0148      	lsls	r0, r1, #5
 8006e64:	6979      	ldr	r1, [r7, #20]
 8006e66:	4401      	add	r1, r0
 8006e68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006e70:	79fb      	ldrb	r3, [r7, #7]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d10d      	bne.n	8006e92 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6919      	ldr	r1, [r3, #16]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8e:	460a      	mov	r2, r1
 8006e90:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006eb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d14a      	bne.n	8006f74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ef6:	f040 8086 	bne.w	8007006 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	7812      	ldrb	r2, [r2, #0]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3301      	adds	r3, #1
 8006f46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d902      	bls.n	8006f58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	75fb      	strb	r3, [r7, #23]
          break;
 8006f56:	e056      	b.n	8007006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f70:	d0e7      	beq.n	8006f42 <USB_EPStopXfer+0x82>
 8006f72:	e048      	b.n	8007006 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f8c:	d13b      	bne.n	8007006 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	7812      	ldrb	r2, [r2, #0]
 8006fa2:	0151      	lsls	r1, r2, #5
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	440a      	add	r2, r1
 8006fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	7812      	ldrb	r2, [r2, #0]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f242 7210 	movw	r2, #10000	; 0x2710
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d902      	bls.n	8006fec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fea:	e00c      	b.n	8007006 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007004:	d0e7      	beq.n	8006fd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
}
 8007008:	4618      	mov	r0, r3
 800700a:	371c      	adds	r7, #28
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007014:	b480      	push	{r7}
 8007016:	b089      	sub	sp, #36	; 0x24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4611      	mov	r1, r2
 8007020:	461a      	mov	r2, r3
 8007022:	460b      	mov	r3, r1
 8007024:	71fb      	strb	r3, [r7, #7]
 8007026:	4613      	mov	r3, r2
 8007028:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007032:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007036:	2b00      	cmp	r3, #0
 8007038:	d123      	bne.n	8007082 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800703a:	88bb      	ldrh	r3, [r7, #4]
 800703c:	3303      	adds	r3, #3
 800703e:	089b      	lsrs	r3, r3, #2
 8007040:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007042:	2300      	movs	r3, #0
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	e018      	b.n	800707a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	031a      	lsls	r2, r3, #12
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	4413      	add	r3, r2
 8007050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007054:	461a      	mov	r2, r3
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	3301      	adds	r3, #1
 8007060:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	3301      	adds	r3, #1
 8007066:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	3301      	adds	r3, #1
 800706c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	3301      	adds	r3, #1
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	429a      	cmp	r2, r3
 8007080:	d3e2      	bcc.n	8007048 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3724      	adds	r7, #36	; 0x24
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007090:	b480      	push	{r7}
 8007092:	b08b      	sub	sp, #44	; 0x2c
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	4613      	mov	r3, r2
 800709c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80070a6:	88fb      	ldrh	r3, [r7, #6]
 80070a8:	089b      	lsrs	r3, r3, #2
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	f003 0303 	and.w	r3, r3, #3
 80070b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070b6:	2300      	movs	r3, #0
 80070b8:	623b      	str	r3, [r7, #32]
 80070ba:	e014      	b.n	80070e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	3301      	adds	r3, #1
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	3301      	adds	r3, #1
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	3301      	adds	r3, #1
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	3301      	adds	r3, #1
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	3301      	adds	r3, #1
 80070e4:	623b      	str	r3, [r7, #32]
 80070e6:	6a3a      	ldr	r2, [r7, #32]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d3e6      	bcc.n	80070bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070ee:	8bfb      	ldrh	r3, [r7, #30]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d01e      	beq.n	8007132 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fe:	461a      	mov	r2, r3
 8007100:	f107 0310 	add.w	r3, r7, #16
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	fa22 f303 	lsr.w	r3, r2, r3
 8007114:	b2da      	uxtb	r2, r3
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	701a      	strb	r2, [r3, #0]
      i++;
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	3301      	adds	r3, #1
 800711e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	3301      	adds	r3, #1
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007126:	8bfb      	ldrh	r3, [r7, #30]
 8007128:	3b01      	subs	r3, #1
 800712a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800712c:	8bfb      	ldrh	r3, [r7, #30]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1ea      	bne.n	8007108 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007134:	4618      	mov	r0, r3
 8007136:	372c      	adds	r7, #44	; 0x2c
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d12c      	bne.n	80071b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	db12      	blt.n	8007194 <USB_EPSetStall+0x54>
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00f      	beq.n	8007194 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007192:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071b2:	6013      	str	r3, [r2, #0]
 80071b4:	e02b      	b.n	800720e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	db12      	blt.n	80071ee <USB_EPSetStall+0xae>
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00f      	beq.n	80071ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	0151      	lsls	r1, r2, #5
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	440a      	add	r2, r1
 80071e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	0151      	lsls	r1, r2, #5
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	440a      	add	r2, r1
 8007204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800720c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d128      	bne.n	800728a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	440a      	add	r2, r1
 800724e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007252:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007256:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	791b      	ldrb	r3, [r3, #4]
 800725c:	2b03      	cmp	r3, #3
 800725e:	d003      	beq.n	8007268 <USB_EPClearStall+0x4c>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	791b      	ldrb	r3, [r3, #4]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d138      	bne.n	80072da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	440a      	add	r2, r1
 800727e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	e027      	b.n	80072da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	791b      	ldrb	r3, [r3, #4]
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d003      	beq.n	80072ba <USB_EPClearStall+0x9e>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	791b      	ldrb	r3, [r3, #4]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d10f      	bne.n	80072da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007306:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800730a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800731c:	68f9      	ldr	r1, [r7, #12]
 800731e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007322:	4313      	orrs	r3, r2
 8007324:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007362:	f023 0302 	bic.w	r3, r3, #2
 8007366:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007390:	f023 0303 	bic.w	r3, r3, #3
 8007394:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a4:	f043 0302 	orr.w	r3, r3, #2
 80073a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4013      	ands	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	4013      	ands	r3, r2
 8007400:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	0c1b      	lsrs	r3, r3, #16
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007412:	b480      	push	{r7}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	4013      	ands	r3, r2
 8007434:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	b29b      	uxth	r3, r3
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4013      	ands	r3, r2
 8007472:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007474:	68bb      	ldr	r3, [r7, #8]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007482:	b480      	push	{r7}
 8007484:	b087      	sub	sp, #28
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	fa22 f303 	lsr.w	r3, r2, r3
 80074b2:	01db      	lsls	r3, r3, #7
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	4013      	ands	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80074d0:	68bb      	ldr	r3, [r7, #8]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f003 0301 	and.w	r3, r3, #1
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007514:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007518:	f023 0307 	bic.w	r3, r3, #7
 800751c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800752c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	460b      	mov	r3, r1
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	333c      	adds	r3, #60	; 0x3c
 8007556:	3304      	adds	r3, #4
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	4a26      	ldr	r2, [pc, #152]	; (80075f8 <USB_EP0_OutStart+0xb8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d90a      	bls.n	800757a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007574:	d101      	bne.n	800757a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	e037      	b.n	80075ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007580:	461a      	mov	r2, r3
 8007582:	2300      	movs	r3, #0
 8007584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007594:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a8:	f043 0318 	orr.w	r3, r3, #24
 80075ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80075c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80075c2:	7afb      	ldrb	r3, [r7, #11]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d10f      	bne.n	80075e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	461a      	mov	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80075e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	4f54300a 	.word	0x4f54300a

080075fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	3301      	adds	r3, #1
 800760c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4a13      	ldr	r2, [pc, #76]	; (8007660 <USB_CoreReset+0x64>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d901      	bls.n	800761a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e01b      	b.n	8007652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	daf2      	bge.n	8007608 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f043 0201 	orr.w	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3301      	adds	r3, #1
 8007636:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4a09      	ldr	r2, [pc, #36]	; (8007660 <USB_CoreReset+0x64>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d901      	bls.n	8007644 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e006      	b.n	8007652 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b01      	cmp	r3, #1
 800764e:	d0f0      	beq.n	8007632 <USB_CoreReset+0x36>

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	00030d40 	.word	0x00030d40

08007664 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007670:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007674:	f002 fc8a 	bl	8009f8c <USBD_static_malloc>
 8007678:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d109      	bne.n	8007694 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	32b0      	adds	r2, #176	; 0xb0
 800768a:	2100      	movs	r1, #0
 800768c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007690:	2302      	movs	r3, #2
 8007692:	e0d4      	b.n	800783e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007694:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007698:	2100      	movs	r1, #0
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f002 fce4 	bl	800a068 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32b0      	adds	r2, #176	; 0xb0
 80076aa:	68f9      	ldr	r1, [r7, #12]
 80076ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	32b0      	adds	r2, #176	; 0xb0
 80076ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7c1b      	ldrb	r3, [r3, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d138      	bne.n	800773e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076cc:	4b5e      	ldr	r3, [pc, #376]	; (8007848 <USBD_CDC_Init+0x1e4>)
 80076ce:	7819      	ldrb	r1, [r3, #0]
 80076d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076d4:	2202      	movs	r2, #2
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f002 fb35 	bl	8009d46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076dc:	4b5a      	ldr	r3, [pc, #360]	; (8007848 <USBD_CDC_Init+0x1e4>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	f003 020f 	and.w	r2, r3, #15
 80076e4:	6879      	ldr	r1, [r7, #4]
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	440b      	add	r3, r1
 80076f0:	3324      	adds	r3, #36	; 0x24
 80076f2:	2201      	movs	r2, #1
 80076f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076f6:	4b55      	ldr	r3, [pc, #340]	; (800784c <USBD_CDC_Init+0x1e8>)
 80076f8:	7819      	ldrb	r1, [r3, #0]
 80076fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076fe:	2202      	movs	r2, #2
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f002 fb20 	bl	8009d46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007706:	4b51      	ldr	r3, [pc, #324]	; (800784c <USBD_CDC_Init+0x1e8>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	f003 020f 	and.w	r2, r3, #15
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	4613      	mov	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800771e:	2201      	movs	r2, #1
 8007720:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007722:	4b4b      	ldr	r3, [pc, #300]	; (8007850 <USBD_CDC_Init+0x1ec>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	f003 020f 	and.w	r2, r3, #15
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	3326      	adds	r3, #38	; 0x26
 8007738:	2210      	movs	r2, #16
 800773a:	801a      	strh	r2, [r3, #0]
 800773c:	e035      	b.n	80077aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800773e:	4b42      	ldr	r3, [pc, #264]	; (8007848 <USBD_CDC_Init+0x1e4>)
 8007740:	7819      	ldrb	r1, [r3, #0]
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	2202      	movs	r2, #2
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f002 fafd 	bl	8009d46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800774c:	4b3e      	ldr	r3, [pc, #248]	; (8007848 <USBD_CDC_Init+0x1e4>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	f003 020f 	and.w	r2, r3, #15
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4413      	add	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	3324      	adds	r3, #36	; 0x24
 8007762:	2201      	movs	r2, #1
 8007764:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007766:	4b39      	ldr	r3, [pc, #228]	; (800784c <USBD_CDC_Init+0x1e8>)
 8007768:	7819      	ldrb	r1, [r3, #0]
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	2202      	movs	r2, #2
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f002 fae9 	bl	8009d46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007774:	4b35      	ldr	r3, [pc, #212]	; (800784c <USBD_CDC_Init+0x1e8>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f003 020f 	and.w	r2, r3, #15
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	440b      	add	r3, r1
 8007788:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800778c:	2201      	movs	r2, #1
 800778e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007790:	4b2f      	ldr	r3, [pc, #188]	; (8007850 <USBD_CDC_Init+0x1ec>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	440b      	add	r3, r1
 80077a4:	3326      	adds	r3, #38	; 0x26
 80077a6:	2210      	movs	r2, #16
 80077a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80077aa:	4b29      	ldr	r3, [pc, #164]	; (8007850 <USBD_CDC_Init+0x1ec>)
 80077ac:	7819      	ldrb	r1, [r3, #0]
 80077ae:	2308      	movs	r3, #8
 80077b0:	2203      	movs	r2, #3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f002 fac7 	bl	8009d46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80077b8:	4b25      	ldr	r3, [pc, #148]	; (8007850 <USBD_CDC_Init+0x1ec>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	3324      	adds	r3, #36	; 0x24
 80077ce:	2201      	movs	r2, #1
 80077d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	33b0      	adds	r3, #176	; 0xb0
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007808:	2302      	movs	r3, #2
 800780a:	e018      	b.n	800783e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7c1b      	ldrb	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10a      	bne.n	800782a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007814:	4b0d      	ldr	r3, [pc, #52]	; (800784c <USBD_CDC_Init+0x1e8>)
 8007816:	7819      	ldrb	r1, [r3, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800781e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f002 fb7e 	bl	8009f24 <USBD_LL_PrepareReceive>
 8007828:	e008      	b.n	800783c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <USBD_CDC_Init+0x1e8>)
 800782c:	7819      	ldrb	r1, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007834:	2340      	movs	r3, #64	; 0x40
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f002 fb74 	bl	8009f24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	200000cf 	.word	0x200000cf
 800784c:	200000d0 	.word	0x200000d0
 8007850:	200000d1 	.word	0x200000d1

08007854 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	460b      	mov	r3, r1
 800785e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007860:	4b3a      	ldr	r3, [pc, #232]	; (800794c <USBD_CDC_DeInit+0xf8>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f002 fa93 	bl	8009d92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800786c:	4b37      	ldr	r3, [pc, #220]	; (800794c <USBD_CDC_DeInit+0xf8>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 020f 	and.w	r2, r3, #15
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	3324      	adds	r3, #36	; 0x24
 8007882:	2200      	movs	r2, #0
 8007884:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007886:	4b32      	ldr	r3, [pc, #200]	; (8007950 <USBD_CDC_DeInit+0xfc>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f002 fa80 	bl	8009d92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007892:	4b2f      	ldr	r3, [pc, #188]	; (8007950 <USBD_CDC_DeInit+0xfc>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	f003 020f 	and.w	r2, r3, #15
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	440b      	add	r3, r1
 80078a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078aa:	2200      	movs	r2, #0
 80078ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80078ae:	4b29      	ldr	r3, [pc, #164]	; (8007954 <USBD_CDC_DeInit+0x100>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f002 fa6c 	bl	8009d92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80078ba:	4b26      	ldr	r3, [pc, #152]	; (8007954 <USBD_CDC_DeInit+0x100>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	f003 020f 	and.w	r2, r3, #15
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	440b      	add	r3, r1
 80078ce:	3324      	adds	r3, #36	; 0x24
 80078d0:	2200      	movs	r2, #0
 80078d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80078d4:	4b1f      	ldr	r3, [pc, #124]	; (8007954 <USBD_CDC_DeInit+0x100>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f003 020f 	and.w	r2, r3, #15
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	3326      	adds	r3, #38	; 0x26
 80078ea:	2200      	movs	r2, #0
 80078ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	32b0      	adds	r2, #176	; 0xb0
 80078f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01f      	beq.n	8007940 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	33b0      	adds	r3, #176	; 0xb0
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	32b0      	adds	r2, #176	; 0xb0
 800791e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007922:	4618      	mov	r0, r3
 8007924:	f002 fb40 	bl	8009fa8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	32b0      	adds	r2, #176	; 0xb0
 8007932:	2100      	movs	r1, #0
 8007934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	200000cf 	.word	0x200000cf
 8007950:	200000d0 	.word	0x200000d0
 8007954:	200000d1 	.word	0x200000d1

08007958 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	32b0      	adds	r2, #176	; 0xb0
 800796c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007970:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e0bf      	b.n	8007b08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007990:	2b00      	cmp	r3, #0
 8007992:	d050      	beq.n	8007a36 <USBD_CDC_Setup+0xde>
 8007994:	2b20      	cmp	r3, #32
 8007996:	f040 80af 	bne.w	8007af8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	88db      	ldrh	r3, [r3, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d03a      	beq.n	8007a18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	b25b      	sxtb	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da1b      	bge.n	80079e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	33b0      	adds	r3, #176	; 0xb0
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80079c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	88d2      	ldrh	r2, [r2, #6]
 80079c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	88db      	ldrh	r3, [r3, #6]
 80079ce:	2b07      	cmp	r3, #7
 80079d0:	bf28      	it	cs
 80079d2:	2307      	movcs	r3, #7
 80079d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	89fa      	ldrh	r2, [r7, #14]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 fd89 	bl	80094f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80079e2:	e090      	b.n	8007b06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	785a      	ldrb	r2, [r3, #1]
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	88db      	ldrh	r3, [r3, #6]
 80079f2:	2b3f      	cmp	r3, #63	; 0x3f
 80079f4:	d803      	bhi.n	80079fe <USBD_CDC_Setup+0xa6>
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	88db      	ldrh	r3, [r3, #6]
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	e000      	b.n	8007a00 <USBD_CDC_Setup+0xa8>
 80079fe:	2240      	movs	r2, #64	; 0x40
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007a06:	6939      	ldr	r1, [r7, #16]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 fd9b 	bl	800954c <USBD_CtlPrepareRx>
      break;
 8007a16:	e076      	b.n	8007b06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	33b0      	adds	r3, #176	; 0xb0
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	7850      	ldrb	r0, [r2, #1]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	4798      	blx	r3
      break;
 8007a34:	e067      	b.n	8007b06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	785b      	ldrb	r3, [r3, #1]
 8007a3a:	2b0b      	cmp	r3, #11
 8007a3c:	d851      	bhi.n	8007ae2 <USBD_CDC_Setup+0x18a>
 8007a3e:	a201      	add	r2, pc, #4	; (adr r2, 8007a44 <USBD_CDC_Setup+0xec>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a75 	.word	0x08007a75
 8007a48:	08007af1 	.word	0x08007af1
 8007a4c:	08007ae3 	.word	0x08007ae3
 8007a50:	08007ae3 	.word	0x08007ae3
 8007a54:	08007ae3 	.word	0x08007ae3
 8007a58:	08007ae3 	.word	0x08007ae3
 8007a5c:	08007ae3 	.word	0x08007ae3
 8007a60:	08007ae3 	.word	0x08007ae3
 8007a64:	08007ae3 	.word	0x08007ae3
 8007a68:	08007ae3 	.word	0x08007ae3
 8007a6c:	08007a9f 	.word	0x08007a9f
 8007a70:	08007ac9 	.word	0x08007ac9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d107      	bne.n	8007a90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a80:	f107 030a 	add.w	r3, r7, #10
 8007a84:	2202      	movs	r2, #2
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fd33 	bl	80094f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a8e:	e032      	b.n	8007af6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fcbd 	bl	8009412 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	75fb      	strb	r3, [r7, #23]
          break;
 8007a9c:	e02b      	b.n	8007af6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d107      	bne.n	8007aba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007aaa:	f107 030d 	add.w	r3, r7, #13
 8007aae:	2201      	movs	r2, #1
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 fd1e 	bl	80094f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ab8:	e01d      	b.n	8007af6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fca8 	bl	8009412 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ac6:	e016      	b.n	8007af6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d00f      	beq.n	8007af4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fc9b 	bl	8009412 <USBD_CtlError>
            ret = USBD_FAIL;
 8007adc:	2303      	movs	r3, #3
 8007ade:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ae0:	e008      	b.n	8007af4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f001 fc94 	bl	8009412 <USBD_CtlError>
          ret = USBD_FAIL;
 8007aea:	2303      	movs	r3, #3
 8007aec:	75fb      	strb	r3, [r7, #23]
          break;
 8007aee:	e002      	b.n	8007af6 <USBD_CDC_Setup+0x19e>
          break;
 8007af0:	bf00      	nop
 8007af2:	e008      	b.n	8007b06 <USBD_CDC_Setup+0x1ae>
          break;
 8007af4:	bf00      	nop
      }
      break;
 8007af6:	e006      	b.n	8007b06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fc89 	bl	8009412 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b00:	2303      	movs	r3, #3
 8007b02:	75fb      	strb	r3, [r7, #23]
      break;
 8007b04:	bf00      	nop
  }

  return (uint8_t)ret;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	32b0      	adds	r2, #176	; 0xb0
 8007b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e065      	b.n	8007c06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	32b0      	adds	r2, #176	; 0xb0
 8007b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	f003 020f 	and.w	r2, r3, #15
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	3318      	adds	r3, #24
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d02f      	beq.n	8007bc4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	f003 020f 	and.w	r2, r3, #15
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	440b      	add	r3, r1
 8007b76:	3318      	adds	r3, #24
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	f003 010f 	and.w	r1, r3, #15
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	460b      	mov	r3, r1
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	440b      	add	r3, r1
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4403      	add	r3, r0
 8007b8c:	3348      	adds	r3, #72	; 0x48
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b94:	fb01 f303 	mul.w	r3, r1, r3
 8007b98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d112      	bne.n	8007bc4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	f003 020f 	and.w	r2, r3, #15
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	3318      	adds	r3, #24
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007bb6:	78f9      	ldrb	r1, [r7, #3]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2200      	movs	r2, #0
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f002 f990 	bl	8009ee2 <USBD_LL_Transmit>
 8007bc2:	e01f      	b.n	8007c04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	33b0      	adds	r3, #176	; 0xb0
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d010      	beq.n	8007c04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	33b0      	adds	r3, #176	; 0xb0
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	460b      	mov	r3, r1
 8007c18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	32b0      	adds	r2, #176	; 0xb0
 8007c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	32b0      	adds	r2, #176	; 0xb0
 8007c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e01a      	b.n	8007c76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f002 f98e 	bl	8009f66 <USBD_LL_GetRxDataSize>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	33b0      	adds	r3, #176	; 0xb0
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c70:	4611      	mov	r1, r2
 8007c72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	32b0      	adds	r2, #176	; 0xb0
 8007c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e025      	b.n	8007cec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	33b0      	adds	r3, #176	; 0xb0
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01a      	beq.n	8007cea <USBD_CDC_EP0_RxReady+0x6c>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cba:	2bff      	cmp	r3, #255	; 0xff
 8007cbc:	d015      	beq.n	8007cea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	33b0      	adds	r3, #176	; 0xb0
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007cd6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	22ff      	movs	r2, #255	; 0xff
 8007ce6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cfc:	2182      	movs	r1, #130	; 0x82
 8007cfe:	4818      	ldr	r0, [pc, #96]	; (8007d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d00:	f000 fd4f 	bl	80087a2 <USBD_GetEpDesc>
 8007d04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d06:	2101      	movs	r1, #1
 8007d08:	4815      	ldr	r0, [pc, #84]	; (8007d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d0a:	f000 fd4a 	bl	80087a2 <USBD_GetEpDesc>
 8007d0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d10:	2181      	movs	r1, #129	; 0x81
 8007d12:	4813      	ldr	r0, [pc, #76]	; (8007d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d14:	f000 fd45 	bl	80087a2 <USBD_GetEpDesc>
 8007d18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2210      	movs	r2, #16
 8007d24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d006      	beq.n	8007d3a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d34:	711a      	strb	r2, [r3, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d006      	beq.n	8007d4e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d48:	711a      	strb	r2, [r3, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2243      	movs	r2, #67	; 0x43
 8007d52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d54:	4b02      	ldr	r3, [pc, #8]	; (8007d60 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	2000008c 	.word	0x2000008c

08007d64 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d6c:	2182      	movs	r1, #130	; 0x82
 8007d6e:	4818      	ldr	r0, [pc, #96]	; (8007dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d70:	f000 fd17 	bl	80087a2 <USBD_GetEpDesc>
 8007d74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d76:	2101      	movs	r1, #1
 8007d78:	4815      	ldr	r0, [pc, #84]	; (8007dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d7a:	f000 fd12 	bl	80087a2 <USBD_GetEpDesc>
 8007d7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d80:	2181      	movs	r1, #129	; 0x81
 8007d82:	4813      	ldr	r0, [pc, #76]	; (8007dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d84:	f000 fd0d 	bl	80087a2 <USBD_GetEpDesc>
 8007d88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2210      	movs	r2, #16
 8007d94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d006      	beq.n	8007daa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	711a      	strb	r2, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f042 0202 	orr.w	r2, r2, #2
 8007da8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d006      	beq.n	8007dbe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	711a      	strb	r2, [r3, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f042 0202 	orr.w	r2, r2, #2
 8007dbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2243      	movs	r2, #67	; 0x43
 8007dc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	2000008c 	.word	0x2000008c

08007dd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ddc:	2182      	movs	r1, #130	; 0x82
 8007dde:	4818      	ldr	r0, [pc, #96]	; (8007e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007de0:	f000 fcdf 	bl	80087a2 <USBD_GetEpDesc>
 8007de4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007de6:	2101      	movs	r1, #1
 8007de8:	4815      	ldr	r0, [pc, #84]	; (8007e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007dea:	f000 fcda 	bl	80087a2 <USBD_GetEpDesc>
 8007dee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007df0:	2181      	movs	r1, #129	; 0x81
 8007df2:	4813      	ldr	r0, [pc, #76]	; (8007e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007df4:	f000 fcd5 	bl	80087a2 <USBD_GetEpDesc>
 8007df8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	2210      	movs	r2, #16
 8007e04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e14:	711a      	strb	r2, [r3, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d006      	beq.n	8007e2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e28:	711a      	strb	r2, [r3, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2243      	movs	r2, #67	; 0x43
 8007e32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e34:	4b02      	ldr	r3, [pc, #8]	; (8007e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	2000008c 	.word	0x2000008c

08007e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	220a      	movs	r2, #10
 8007e50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e52:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	20000048 	.word	0x20000048

08007e64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e009      	b.n	8007e8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	33b0      	adds	r3, #176	; 0xb0
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	32b0      	adds	r2, #176	; 0xb0
 8007eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e008      	b.n	8007ed0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	32b0      	adds	r2, #176	; 0xb0
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e004      	b.n	8007f0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
	...

08007f18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	32b0      	adds	r2, #176	; 0xb0
 8007f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f30:	2301      	movs	r3, #1
 8007f32:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	32b0      	adds	r2, #176	; 0xb0
 8007f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e025      	b.n	8007f96 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d11f      	bne.n	8007f94 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007f5c:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <USBD_CDC_TransmitPacket+0x88>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	f003 020f 	and.w	r2, r3, #15
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4403      	add	r3, r0
 8007f76:	3318      	adds	r3, #24
 8007f78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <USBD_CDC_TransmitPacket+0x88>)
 8007f7c:	7819      	ldrb	r1, [r3, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f001 ffa9 	bl	8009ee2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	200000cf 	.word	0x200000cf

08007fa4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	32b0      	adds	r2, #176	; 0xb0
 8007fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	32b0      	adds	r2, #176	; 0xb0
 8007fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e018      	b.n	8008004 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7c1b      	ldrb	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <USBD_CDC_ReceivePacket+0x68>)
 8007fdc:	7819      	ldrb	r1, [r3, #0]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 ff9b 	bl	8009f24 <USBD_LL_PrepareReceive>
 8007fee:	e008      	b.n	8008002 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <USBD_CDC_ReceivePacket+0x68>)
 8007ff2:	7819      	ldrb	r1, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ffa:	2340      	movs	r3, #64	; 0x40
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 ff91 	bl	8009f24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	200000d0 	.word	0x200000d0

08008010 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	e01f      	b.n	8008068 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	79fa      	ldrb	r2, [r7, #7]
 800805a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f001 fe0b 	bl	8009c78 <USBD_LL_Init>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008066:	7dfb      	ldrb	r3, [r7, #23]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008084:	2303      	movs	r3, #3
 8008086:	e025      	b.n	80080d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	32ae      	adds	r2, #174	; 0xae
 800809a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00f      	beq.n	80080c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	32ae      	adds	r2, #174	; 0xae
 80080ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	f107 020e 	add.w	r2, r7, #14
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	4602      	mov	r2, r0
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 fe13 	bl	8009d10 <USBD_LL_Start>
 80080ea:	4603      	mov	r3, r0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80080fe:	4618      	mov	r0, r3
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	460b      	mov	r3, r1
 8008114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008120:	2b00      	cmp	r3, #0
 8008122:	d009      	beq.n	8008138 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	78fa      	ldrb	r2, [r7, #3]
 800812e:	4611      	mov	r1, r2
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
 8008134:	4603      	mov	r3, r0
 8008136:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	78fa      	ldrb	r2, [r7, #3]
 800815c:	4611      	mov	r1, r2
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	4618      	mov	r0, r3
 800818a:	f001 f908 	bl	800939e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800819c:	461a      	mov	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081aa:	f003 031f 	and.w	r3, r3, #31
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d01a      	beq.n	80081e8 <USBD_LL_SetupStage+0x72>
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d822      	bhi.n	80081fc <USBD_LL_SetupStage+0x86>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <USBD_LL_SetupStage+0x4a>
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d00a      	beq.n	80081d4 <USBD_LL_SetupStage+0x5e>
 80081be:	e01d      	b.n	80081fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fb5f 	bl	800888c <USBD_StdDevReq>
 80081ce:	4603      	mov	r3, r0
 80081d0:	73fb      	strb	r3, [r7, #15]
      break;
 80081d2:	e020      	b.n	8008216 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fbc7 	bl	8008970 <USBD_StdItfReq>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]
      break;
 80081e6:	e016      	b.n	8008216 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fc29 	bl	8008a48 <USBD_StdEPReq>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]
      break;
 80081fa:	e00c      	b.n	8008216 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008202:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008206:	b2db      	uxtb	r3, r3
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 fde0 	bl	8009dd0 <USBD_LL_StallEP>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]
      break;
 8008214:	bf00      	nop
  }

  return ret;
 8008216:	7bfb      	ldrb	r3, [r7, #15]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	460b      	mov	r3, r1
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d16e      	bne.n	8008316 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800823e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008246:	2b03      	cmp	r3, #3
 8008248:	f040 8098 	bne.w	800837c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	429a      	cmp	r2, r3
 8008256:	d913      	bls.n	8008280 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	689a      	ldr	r2, [r3, #8]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	1ad2      	subs	r2, r2, r3
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	4293      	cmp	r3, r2
 8008270:	bf28      	it	cs
 8008272:	4613      	movcs	r3, r2
 8008274:	461a      	mov	r2, r3
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f001 f984 	bl	8009586 <USBD_CtlContinueRx>
 800827e:	e07d      	b.n	800837c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	2b02      	cmp	r3, #2
 800828c:	d014      	beq.n	80082b8 <USBD_LL_DataOutStage+0x98>
 800828e:	2b02      	cmp	r3, #2
 8008290:	d81d      	bhi.n	80082ce <USBD_LL_DataOutStage+0xae>
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <USBD_LL_DataOutStage+0x7c>
 8008296:	2b01      	cmp	r3, #1
 8008298:	d003      	beq.n	80082a2 <USBD_LL_DataOutStage+0x82>
 800829a:	e018      	b.n	80082ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	75bb      	strb	r3, [r7, #22]
            break;
 80082a0:	e018      	b.n	80082d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	4619      	mov	r1, r3
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 fa5e 	bl	800876e <USBD_CoreFindIF>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75bb      	strb	r3, [r7, #22]
            break;
 80082b6:	e00d      	b.n	80082d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	4619      	mov	r1, r3
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fa60 	bl	8008788 <USBD_CoreFindEP>
 80082c8:	4603      	mov	r3, r0
 80082ca:	75bb      	strb	r3, [r7, #22]
            break;
 80082cc:	e002      	b.n	80082d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75bb      	strb	r3, [r7, #22]
            break;
 80082d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80082d4:	7dbb      	ldrb	r3, [r7, #22]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d119      	bne.n	800830e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d113      	bne.n	800830e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80082e6:	7dba      	ldrb	r2, [r7, #22]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	32ae      	adds	r2, #174	; 0xae
 80082ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00b      	beq.n	800830e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80082f6:	7dba      	ldrb	r2, [r7, #22]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80082fe:	7dba      	ldrb	r2, [r7, #22]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	32ae      	adds	r2, #174	; 0xae
 8008304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f001 f94a 	bl	80095a8 <USBD_CtlSendStatus>
 8008314:	e032      	b.n	800837c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008316:	7afb      	ldrb	r3, [r7, #11]
 8008318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831c:	b2db      	uxtb	r3, r3
 800831e:	4619      	mov	r1, r3
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 fa31 	bl	8008788 <USBD_CoreFindEP>
 8008326:	4603      	mov	r3, r0
 8008328:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800832a:	7dbb      	ldrb	r3, [r7, #22]
 800832c:	2bff      	cmp	r3, #255	; 0xff
 800832e:	d025      	beq.n	800837c <USBD_LL_DataOutStage+0x15c>
 8008330:	7dbb      	ldrb	r3, [r7, #22]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d122      	bne.n	800837c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b03      	cmp	r3, #3
 8008340:	d117      	bne.n	8008372 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008342:	7dba      	ldrb	r2, [r7, #22]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	32ae      	adds	r2, #174	; 0xae
 8008348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00f      	beq.n	8008372 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008352:	7dba      	ldrb	r2, [r7, #22]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800835a:	7dba      	ldrb	r2, [r7, #22]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	32ae      	adds	r2, #174	; 0xae
 8008360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	7afa      	ldrb	r2, [r7, #11]
 8008368:	4611      	mov	r1, r2
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	4798      	blx	r3
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d001      	beq.n	800837c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	e000      	b.n	800837e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b086      	sub	sp, #24
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	460b      	mov	r3, r1
 8008390:	607a      	str	r2, [r7, #4]
 8008392:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008394:	7afb      	ldrb	r3, [r7, #11]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d16f      	bne.n	800847a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3314      	adds	r3, #20
 800839e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d15a      	bne.n	8008460 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d914      	bls.n	80083e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	689a      	ldr	r2, [r3, #8]
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	461a      	mov	r2, r3
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f001 f8ac 	bl	800952a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083d2:	2300      	movs	r3, #0
 80083d4:	2200      	movs	r2, #0
 80083d6:	2100      	movs	r1, #0
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f001 fda3 	bl	8009f24 <USBD_LL_PrepareReceive>
 80083de:	e03f      	b.n	8008460 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d11c      	bne.n	8008426 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d316      	bcc.n	8008426 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008402:	429a      	cmp	r2, r3
 8008404:	d20f      	bcs.n	8008426 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008406:	2200      	movs	r2, #0
 8008408:	2100      	movs	r1, #0
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f001 f88d 	bl	800952a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008418:	2300      	movs	r3, #0
 800841a:	2200      	movs	r2, #0
 800841c:	2100      	movs	r1, #0
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f001 fd80 	bl	8009f24 <USBD_LL_PrepareReceive>
 8008424:	e01c      	b.n	8008460 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b03      	cmp	r3, #3
 8008430:	d10f      	bne.n	8008452 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d009      	beq.n	8008452 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008452:	2180      	movs	r1, #128	; 0x80
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f001 fcbb 	bl	8009dd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f001 f8b7 	bl	80095ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d03a      	beq.n	80084e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f7ff fe42 	bl	80080f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008478:	e032      	b.n	80084e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008480:	b2db      	uxtb	r3, r3
 8008482:	4619      	mov	r1, r3
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f97f 	bl	8008788 <USBD_CoreFindEP>
 800848a:	4603      	mov	r3, r0
 800848c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800848e:	7dfb      	ldrb	r3, [r7, #23]
 8008490:	2bff      	cmp	r3, #255	; 0xff
 8008492:	d025      	beq.n	80084e0 <USBD_LL_DataInStage+0x15a>
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d122      	bne.n	80084e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d11c      	bne.n	80084e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80084a6:	7dfa      	ldrb	r2, [r7, #23]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	32ae      	adds	r2, #174	; 0xae
 80084ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d014      	beq.n	80084e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80084b6:	7dfa      	ldrb	r2, [r7, #23]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80084be:	7dfa      	ldrb	r2, [r7, #23]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	32ae      	adds	r2, #174	; 0xae
 80084c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	7afa      	ldrb	r2, [r7, #11]
 80084cc:	4611      	mov	r1, r2
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	4798      	blx	r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80084d6:	7dbb      	ldrb	r3, [r7, #22]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80084dc:	7dbb      	ldrb	r3, [r7, #22]
 80084de:	e000      	b.n	80084e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b084      	sub	sp, #16
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008522:	2b00      	cmp	r3, #0
 8008524:	d014      	beq.n	8008550 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00e      	beq.n	8008550 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	6852      	ldr	r2, [r2, #4]
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	4611      	mov	r1, r2
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800854c:	2303      	movs	r3, #3
 800854e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	2200      	movs	r2, #0
 8008554:	2100      	movs	r1, #0
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 fbf5 	bl	8009d46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2240      	movs	r2, #64	; 0x40
 8008568:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800856c:	2340      	movs	r3, #64	; 0x40
 800856e:	2200      	movs	r2, #0
 8008570:	2180      	movs	r1, #128	; 0x80
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 fbe7 	bl	8009d46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2240      	movs	r2, #64	; 0x40
 8008582:	621a      	str	r2, [r3, #32]

  return ret;
 8008584:	7bfb      	ldrb	r3, [r7, #15]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	460b      	mov	r3, r1
 8008598:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	78fa      	ldrb	r2, [r7, #3]
 800859e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2204      	movs	r2, #4
 80085c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d106      	bne.n	80085fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008618:	b2db      	uxtb	r3, r3
 800861a:	2b03      	cmp	r3, #3
 800861c:	d110      	bne.n	8008640 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	460b      	mov	r3, r1
 8008654:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	32ae      	adds	r2, #174	; 0xae
 8008660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008668:	2303      	movs	r3, #3
 800866a:	e01c      	b.n	80086a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b03      	cmp	r3, #3
 8008676:	d115      	bne.n	80086a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	32ae      	adds	r2, #174	; 0xae
 8008682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	32ae      	adds	r2, #174	; 0xae
 8008696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	78fa      	ldrb	r2, [r7, #3]
 800869e:	4611      	mov	r1, r2
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	32ae      	adds	r2, #174	; 0xae
 80086c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e01c      	b.n	800870a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d115      	bne.n	8008708 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	32ae      	adds	r2, #174	; 0xae
 80086e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00b      	beq.n	8008708 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	32ae      	adds	r2, #174	; 0xae
 80086fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	78fa      	ldrb	r2, [r7, #3]
 8008702:	4611      	mov	r1, r2
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00e      	beq.n	8008764 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6852      	ldr	r2, [r2, #4]
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	4611      	mov	r1, r2
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008760:	2303      	movs	r3, #3
 8008762:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800877a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008794:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008796:	4618      	mov	r0, r3
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b086      	sub	sp, #24
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	460b      	mov	r3, r1
 80087ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	885b      	ldrh	r3, [r3, #2]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d920      	bls.n	800880c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80087d2:	e013      	b.n	80087fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80087d4:	f107 030a 	add.w	r3, r7, #10
 80087d8:	4619      	mov	r1, r3
 80087da:	6978      	ldr	r0, [r7, #20]
 80087dc:	f000 f81b 	bl	8008816 <USBD_GetNextDesc>
 80087e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	785b      	ldrb	r3, [r3, #1]
 80087e6:	2b05      	cmp	r3, #5
 80087e8:	d108      	bne.n	80087fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	789b      	ldrb	r3, [r3, #2]
 80087f2:	78fa      	ldrb	r2, [r7, #3]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d008      	beq.n	800880a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80087f8:	2300      	movs	r3, #0
 80087fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	885b      	ldrh	r3, [r3, #2]
 8008800:	b29a      	uxth	r2, r3
 8008802:	897b      	ldrh	r3, [r7, #10]
 8008804:	429a      	cmp	r2, r3
 8008806:	d8e5      	bhi.n	80087d4 <USBD_GetEpDesc+0x32>
 8008808:	e000      	b.n	800880c <USBD_GetEpDesc+0x6a>
          break;
 800880a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800880c:	693b      	ldr	r3, [r7, #16]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008816:	b480      	push	{r7}
 8008818:	b085      	sub	sp, #20
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	881a      	ldrh	r2, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	b29b      	uxth	r3, r3
 800882e:	4413      	add	r3, r2
 8008830:	b29a      	uxth	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4413      	add	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008842:	68fb      	ldr	r3, [r7, #12]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	3301      	adds	r3, #1
 8008866:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800886e:	8a3b      	ldrh	r3, [r7, #16]
 8008870:	021b      	lsls	r3, r3, #8
 8008872:	b21a      	sxth	r2, r3
 8008874:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008878:	4313      	orrs	r3, r2
 800887a:	b21b      	sxth	r3, r3
 800887c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800887e:	89fb      	ldrh	r3, [r7, #14]
}
 8008880:	4618      	mov	r0, r3
 8008882:	371c      	adds	r7, #28
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088a2:	2b40      	cmp	r3, #64	; 0x40
 80088a4:	d005      	beq.n	80088b2 <USBD_StdDevReq+0x26>
 80088a6:	2b40      	cmp	r3, #64	; 0x40
 80088a8:	d857      	bhi.n	800895a <USBD_StdDevReq+0xce>
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00f      	beq.n	80088ce <USBD_StdDevReq+0x42>
 80088ae:	2b20      	cmp	r3, #32
 80088b0:	d153      	bne.n	800895a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	32ae      	adds	r2, #174	; 0xae
 80088bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	6839      	ldr	r1, [r7, #0]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
      break;
 80088cc:	e04a      	b.n	8008964 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	785b      	ldrb	r3, [r3, #1]
 80088d2:	2b09      	cmp	r3, #9
 80088d4:	d83b      	bhi.n	800894e <USBD_StdDevReq+0xc2>
 80088d6:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <USBD_StdDevReq+0x50>)
 80088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088dc:	08008931 	.word	0x08008931
 80088e0:	08008945 	.word	0x08008945
 80088e4:	0800894f 	.word	0x0800894f
 80088e8:	0800893b 	.word	0x0800893b
 80088ec:	0800894f 	.word	0x0800894f
 80088f0:	0800890f 	.word	0x0800890f
 80088f4:	08008905 	.word	0x08008905
 80088f8:	0800894f 	.word	0x0800894f
 80088fc:	08008927 	.word	0x08008927
 8008900:	08008919 	.word	0x08008919
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fa3c 	bl	8008d84 <USBD_GetDescriptor>
          break;
 800890c:	e024      	b.n	8008958 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fba1 	bl	8009058 <USBD_SetAddress>
          break;
 8008916:	e01f      	b.n	8008958 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008918:	6839      	ldr	r1, [r7, #0]
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fbe0 	bl	80090e0 <USBD_SetConfig>
 8008920:	4603      	mov	r3, r0
 8008922:	73fb      	strb	r3, [r7, #15]
          break;
 8008924:	e018      	b.n	8008958 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fc83 	bl	8009234 <USBD_GetConfig>
          break;
 800892e:	e013      	b.n	8008958 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fcb4 	bl	80092a0 <USBD_GetStatus>
          break;
 8008938:	e00e      	b.n	8008958 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fce3 	bl	8009308 <USBD_SetFeature>
          break;
 8008942:	e009      	b.n	8008958 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fd07 	bl	800935a <USBD_ClrFeature>
          break;
 800894c:	e004      	b.n	8008958 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fd5e 	bl	8009412 <USBD_CtlError>
          break;
 8008956:	bf00      	nop
      }
      break;
 8008958:	e004      	b.n	8008964 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fd58 	bl	8009412 <USBD_CtlError>
      break;
 8008962:	bf00      	nop
  }

  return ret;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop

08008970 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	d005      	beq.n	8008996 <USBD_StdItfReq+0x26>
 800898a:	2b40      	cmp	r3, #64	; 0x40
 800898c:	d852      	bhi.n	8008a34 <USBD_StdItfReq+0xc4>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <USBD_StdItfReq+0x26>
 8008992:	2b20      	cmp	r3, #32
 8008994:	d14e      	bne.n	8008a34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899c:	b2db      	uxtb	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d840      	bhi.n	8008a26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	889b      	ldrh	r3, [r3, #4]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d836      	bhi.n	8008a1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	889b      	ldrh	r3, [r3, #4]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff fed9 	bl	800876e <USBD_CoreFindIF>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	2bff      	cmp	r3, #255	; 0xff
 80089c4:	d01d      	beq.n	8008a02 <USBD_StdItfReq+0x92>
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d11a      	bne.n	8008a02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80089cc:	7bba      	ldrb	r2, [r7, #14]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	32ae      	adds	r2, #174	; 0xae
 80089d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00f      	beq.n	80089fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80089dc:	7bba      	ldrb	r2, [r7, #14]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80089e4:	7bba      	ldrb	r2, [r7, #14]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	32ae      	adds	r2, #174	; 0xae
 80089ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	4798      	blx	r3
 80089f6:	4603      	mov	r3, r0
 80089f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80089fa:	e004      	b.n	8008a06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80089fc:	2303      	movs	r3, #3
 80089fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008a00:	e001      	b.n	8008a06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008a02:	2303      	movs	r3, #3
 8008a04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	88db      	ldrh	r3, [r3, #6]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d110      	bne.n	8008a30 <USBD_StdItfReq+0xc0>
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10d      	bne.n	8008a30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fdc7 	bl	80095a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a1a:	e009      	b.n	8008a30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fcf7 	bl	8009412 <USBD_CtlError>
          break;
 8008a24:	e004      	b.n	8008a30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fcf2 	bl	8009412 <USBD_CtlError>
          break;
 8008a2e:	e000      	b.n	8008a32 <USBD_StdItfReq+0xc2>
          break;
 8008a30:	bf00      	nop
      }
      break;
 8008a32:	e004      	b.n	8008a3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fceb 	bl	8009412 <USBD_CtlError>
      break;
 8008a3c:	bf00      	nop
  }

  return ret;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	889b      	ldrh	r3, [r3, #4]
 8008a5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a64:	2b40      	cmp	r3, #64	; 0x40
 8008a66:	d007      	beq.n	8008a78 <USBD_StdEPReq+0x30>
 8008a68:	2b40      	cmp	r3, #64	; 0x40
 8008a6a:	f200 817f 	bhi.w	8008d6c <USBD_StdEPReq+0x324>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d02a      	beq.n	8008ac8 <USBD_StdEPReq+0x80>
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	f040 817a 	bne.w	8008d6c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff fe83 	bl	8008788 <USBD_CoreFindEP>
 8008a82:	4603      	mov	r3, r0
 8008a84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a86:	7b7b      	ldrb	r3, [r7, #13]
 8008a88:	2bff      	cmp	r3, #255	; 0xff
 8008a8a:	f000 8174 	beq.w	8008d76 <USBD_StdEPReq+0x32e>
 8008a8e:	7b7b      	ldrb	r3, [r7, #13]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f040 8170 	bne.w	8008d76 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008a96:	7b7a      	ldrb	r2, [r7, #13]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008a9e:	7b7a      	ldrb	r2, [r7, #13]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	32ae      	adds	r2, #174	; 0xae
 8008aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 8163 	beq.w	8008d76 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008ab0:	7b7a      	ldrb	r2, [r7, #13]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	32ae      	adds	r2, #174	; 0xae
 8008ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	4798      	blx	r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008ac6:	e156      	b.n	8008d76 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d008      	beq.n	8008ae2 <USBD_StdEPReq+0x9a>
 8008ad0:	2b03      	cmp	r3, #3
 8008ad2:	f300 8145 	bgt.w	8008d60 <USBD_StdEPReq+0x318>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f000 809b 	beq.w	8008c12 <USBD_StdEPReq+0x1ca>
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d03c      	beq.n	8008b5a <USBD_StdEPReq+0x112>
 8008ae0:	e13e      	b.n	8008d60 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d002      	beq.n	8008af4 <USBD_StdEPReq+0xac>
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d016      	beq.n	8008b20 <USBD_StdEPReq+0xd8>
 8008af2:	e02c      	b.n	8008b4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00d      	beq.n	8008b16 <USBD_StdEPReq+0xce>
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	2b80      	cmp	r3, #128	; 0x80
 8008afe:	d00a      	beq.n	8008b16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 f963 	bl	8009dd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b0a:	2180      	movs	r1, #128	; 0x80
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 f95f 	bl	8009dd0 <USBD_LL_StallEP>
 8008b12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b14:	e020      	b.n	8008b58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fc7a 	bl	8009412 <USBD_CtlError>
              break;
 8008b1e:	e01b      	b.n	8008b58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	885b      	ldrh	r3, [r3, #2]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10e      	bne.n	8008b46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <USBD_StdEPReq+0xfe>
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	2b80      	cmp	r3, #128	; 0x80
 8008b32:	d008      	beq.n	8008b46 <USBD_StdEPReq+0xfe>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	88db      	ldrh	r3, [r3, #6]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d104      	bne.n	8008b46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 f945 	bl	8009dd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fd2e 	bl	80095a8 <USBD_CtlSendStatus>

              break;
 8008b4c:	e004      	b.n	8008b58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fc5e 	bl	8009412 <USBD_CtlError>
              break;
 8008b56:	bf00      	nop
          }
          break;
 8008b58:	e107      	b.n	8008d6a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d002      	beq.n	8008b6c <USBD_StdEPReq+0x124>
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d016      	beq.n	8008b98 <USBD_StdEPReq+0x150>
 8008b6a:	e04b      	b.n	8008c04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00d      	beq.n	8008b8e <USBD_StdEPReq+0x146>
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	2b80      	cmp	r3, #128	; 0x80
 8008b76:	d00a      	beq.n	8008b8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 f927 	bl	8009dd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b82:	2180      	movs	r1, #128	; 0x80
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f001 f923 	bl	8009dd0 <USBD_LL_StallEP>
 8008b8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b8c:	e040      	b.n	8008c10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc3e 	bl	8009412 <USBD_CtlError>
              break;
 8008b96:	e03b      	b.n	8008c10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	885b      	ldrh	r3, [r3, #2]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d136      	bne.n	8008c0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ba0:	7bbb      	ldrb	r3, [r7, #14]
 8008ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 f92d 	bl	8009e0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fcf7 	bl	80095a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff fde2 	bl	8008788 <USBD_CoreFindEP>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bc8:	7b7b      	ldrb	r3, [r7, #13]
 8008bca:	2bff      	cmp	r3, #255	; 0xff
 8008bcc:	d01f      	beq.n	8008c0e <USBD_StdEPReq+0x1c6>
 8008bce:	7b7b      	ldrb	r3, [r7, #13]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d11c      	bne.n	8008c0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008bd4:	7b7a      	ldrb	r2, [r7, #13]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008bdc:	7b7a      	ldrb	r2, [r7, #13]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	32ae      	adds	r2, #174	; 0xae
 8008be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d010      	beq.n	8008c0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bec:	7b7a      	ldrb	r2, [r7, #13]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	32ae      	adds	r2, #174	; 0xae
 8008bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	4798      	blx	r3
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008c02:	e004      	b.n	8008c0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fc03 	bl	8009412 <USBD_CtlError>
              break;
 8008c0c:	e000      	b.n	8008c10 <USBD_StdEPReq+0x1c8>
              break;
 8008c0e:	bf00      	nop
          }
          break;
 8008c10:	e0ab      	b.n	8008d6a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d002      	beq.n	8008c24 <USBD_StdEPReq+0x1dc>
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d032      	beq.n	8008c88 <USBD_StdEPReq+0x240>
 8008c22:	e097      	b.n	8008d54 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d007      	beq.n	8008c3a <USBD_StdEPReq+0x1f2>
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	2b80      	cmp	r3, #128	; 0x80
 8008c2e:	d004      	beq.n	8008c3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fbed 	bl	8009412 <USBD_CtlError>
                break;
 8008c38:	e091      	b.n	8008d5e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	da0b      	bge.n	8008c5a <USBD_StdEPReq+0x212>
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c48:	4613      	mov	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	3310      	adds	r3, #16
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	4413      	add	r3, r2
 8008c56:	3304      	adds	r3, #4
 8008c58:	e00b      	b.n	8008c72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c60:	4613      	mov	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	4413      	add	r3, r2
 8008c70:	3304      	adds	r3, #4
 8008c72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2200      	movs	r2, #0
 8008c78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fc37 	bl	80094f4 <USBD_CtlSendData>
              break;
 8008c86:	e06a      	b.n	8008d5e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	da11      	bge.n	8008cb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	f003 020f 	and.w	r2, r3, #15
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	3324      	adds	r3, #36	; 0x24
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d117      	bne.n	8008cda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fbb0 	bl	8009412 <USBD_CtlError>
                  break;
 8008cb2:	e054      	b.n	8008d5e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	f003 020f 	and.w	r2, r3, #15
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d104      	bne.n	8008cda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fb9d 	bl	8009412 <USBD_CtlError>
                  break;
 8008cd8:	e041      	b.n	8008d5e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	da0b      	bge.n	8008cfa <USBD_StdEPReq+0x2b2>
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ce8:	4613      	mov	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	3310      	adds	r3, #16
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	e00b      	b.n	8008d12 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d00:	4613      	mov	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	4413      	add	r3, r2
 8008d10:	3304      	adds	r3, #4
 8008d12:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d002      	beq.n	8008d20 <USBD_StdEPReq+0x2d8>
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b80      	cmp	r3, #128	; 0x80
 8008d1e:	d103      	bne.n	8008d28 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	e00e      	b.n	8008d46 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 f88d 	bl	8009e4c <USBD_LL_IsStallEP>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	e002      	b.n	8008d46 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	2200      	movs	r2, #0
 8008d44:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fbd1 	bl	80094f4 <USBD_CtlSendData>
              break;
 8008d52:	e004      	b.n	8008d5e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fb5b 	bl	8009412 <USBD_CtlError>
              break;
 8008d5c:	bf00      	nop
          }
          break;
 8008d5e:	e004      	b.n	8008d6a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fb55 	bl	8009412 <USBD_CtlError>
          break;
 8008d68:	bf00      	nop
      }
      break;
 8008d6a:	e005      	b.n	8008d78 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 fb4f 	bl	8009412 <USBD_CtlError>
      break;
 8008d74:	e000      	b.n	8008d78 <USBD_StdEPReq+0x330>
      break;
 8008d76:	bf00      	nop
  }

  return ret;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	885b      	ldrh	r3, [r3, #2]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	2b06      	cmp	r3, #6
 8008da6:	f200 8128 	bhi.w	8008ffa <USBD_GetDescriptor+0x276>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <USBD_GetDescriptor+0x2c>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dcd 	.word	0x08008dcd
 8008db4:	08008de5 	.word	0x08008de5
 8008db8:	08008e25 	.word	0x08008e25
 8008dbc:	08008ffb 	.word	0x08008ffb
 8008dc0:	08008ffb 	.word	0x08008ffb
 8008dc4:	08008f9b 	.word	0x08008f9b
 8008dc8:	08008fc7 	.word	0x08008fc7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	7c12      	ldrb	r2, [r2, #16]
 8008dd8:	f107 0108 	add.w	r1, r7, #8
 8008ddc:	4610      	mov	r0, r2
 8008dde:	4798      	blx	r3
 8008de0:	60f8      	str	r0, [r7, #12]
      break;
 8008de2:	e112      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	7c1b      	ldrb	r3, [r3, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10d      	bne.n	8008e08 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df4:	f107 0208 	add.w	r2, r7, #8
 8008df8:	4610      	mov	r0, r2
 8008dfa:	4798      	blx	r3
 8008dfc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	2202      	movs	r2, #2
 8008e04:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e06:	e100      	b.n	800900a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	f107 0208 	add.w	r2, r7, #8
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	2202      	movs	r2, #2
 8008e20:	701a      	strb	r2, [r3, #0]
      break;
 8008e22:	e0f2      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	885b      	ldrh	r3, [r3, #2]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	f200 80ac 	bhi.w	8008f88 <USBD_GetDescriptor+0x204>
 8008e30:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <USBD_GetDescriptor+0xb4>)
 8008e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e36:	bf00      	nop
 8008e38:	08008e51 	.word	0x08008e51
 8008e3c:	08008e85 	.word	0x08008e85
 8008e40:	08008eb9 	.word	0x08008eb9
 8008e44:	08008eed 	.word	0x08008eed
 8008e48:	08008f21 	.word	0x08008f21
 8008e4c:	08008f55 	.word	0x08008f55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7c12      	ldrb	r2, [r2, #16]
 8008e68:	f107 0108 	add.w	r1, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e72:	e091      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 facb 	bl	8009412 <USBD_CtlError>
            err++;
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	72fb      	strb	r3, [r7, #11]
          break;
 8008e82:	e089      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7c12      	ldrb	r2, [r2, #16]
 8008e9c:	f107 0108 	add.w	r1, r7, #8
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ea6:	e077      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fab1 	bl	8009412 <USBD_CtlError>
            err++;
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008eb6:	e06f      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	7c12      	ldrb	r2, [r2, #16]
 8008ed0:	f107 0108 	add.w	r1, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008eda:	e05d      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa97 	bl	8009412 <USBD_CtlError>
            err++;
 8008ee4:	7afb      	ldrb	r3, [r7, #11]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8008eea:	e055      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	7c12      	ldrb	r2, [r2, #16]
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f0e:	e043      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa7d 	bl	8009412 <USBD_CtlError>
            err++;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f1e:	e03b      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7c12      	ldrb	r2, [r2, #16]
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f42:	e029      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa63 	bl	8009412 <USBD_CtlError>
            err++;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	72fb      	strb	r3, [r7, #11]
          break;
 8008f52:	e021      	b.n	8008f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7c12      	ldrb	r2, [r2, #16]
 8008f6c:	f107 0108 	add.w	r1, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f76:	e00f      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa49 	bl	8009412 <USBD_CtlError>
            err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
          break;
 8008f86:	e007      	b.n	8008f98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fa41 	bl	8009412 <USBD_CtlError>
          err++;
 8008f90:	7afb      	ldrb	r3, [r7, #11]
 8008f92:	3301      	adds	r3, #1
 8008f94:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008f96:	bf00      	nop
      }
      break;
 8008f98:	e037      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7c1b      	ldrb	r3, [r3, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d109      	bne.n	8008fb6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008faa:	f107 0208 	add.w	r2, r7, #8
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4798      	blx	r3
 8008fb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fb4:	e029      	b.n	800900a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fa2a 	bl	8009412 <USBD_CtlError>
        err++;
 8008fbe:	7afb      	ldrb	r3, [r7, #11]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc4:	e021      	b.n	800900a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7c1b      	ldrb	r3, [r3, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10d      	bne.n	8008fea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	f107 0208 	add.w	r2, r7, #8
 8008fda:	4610      	mov	r0, r2
 8008fdc:	4798      	blx	r3
 8008fde:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	2207      	movs	r2, #7
 8008fe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fe8:	e00f      	b.n	800900a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fa10 	bl	8009412 <USBD_CtlError>
        err++;
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff8:	e007      	b.n	800900a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fa08 	bl	8009412 <USBD_CtlError>
      err++;
 8009002:	7afb      	ldrb	r3, [r7, #11]
 8009004:	3301      	adds	r3, #1
 8009006:	72fb      	strb	r3, [r7, #11]
      break;
 8009008:	bf00      	nop
  }

  if (err != 0U)
 800900a:	7afb      	ldrb	r3, [r7, #11]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11e      	bne.n	800904e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	88db      	ldrh	r3, [r3, #6]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d016      	beq.n	8009046 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009018:	893b      	ldrh	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00e      	beq.n	800903c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	88da      	ldrh	r2, [r3, #6]
 8009022:	893b      	ldrh	r3, [r7, #8]
 8009024:	4293      	cmp	r3, r2
 8009026:	bf28      	it	cs
 8009028:	4613      	movcs	r3, r2
 800902a:	b29b      	uxth	r3, r3
 800902c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800902e:	893b      	ldrh	r3, [r7, #8]
 8009030:	461a      	mov	r2, r3
 8009032:	68f9      	ldr	r1, [r7, #12]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fa5d 	bl	80094f4 <USBD_CtlSendData>
 800903a:	e009      	b.n	8009050 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f9e7 	bl	8009412 <USBD_CtlError>
 8009044:	e004      	b.n	8009050 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 faae 	bl	80095a8 <USBD_CtlSendStatus>
 800904c:	e000      	b.n	8009050 <USBD_GetDescriptor+0x2cc>
    return;
 800904e:	bf00      	nop
  }
}
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop

08009058 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	889b      	ldrh	r3, [r3, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d131      	bne.n	80090ce <USBD_SetAddress+0x76>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	88db      	ldrh	r3, [r3, #6]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d12d      	bne.n	80090ce <USBD_SetAddress+0x76>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	885b      	ldrh	r3, [r3, #2]
 8009076:	2b7f      	cmp	r3, #127	; 0x7f
 8009078:	d829      	bhi.n	80090ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	885b      	ldrh	r3, [r3, #2]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009084:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b03      	cmp	r3, #3
 8009090:	d104      	bne.n	800909c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f9bc 	bl	8009412 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909a:	e01d      	b.n	80090d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7bfa      	ldrb	r2, [r7, #15]
 80090a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fefb 	bl	8009ea4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa7a 	bl	80095a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d004      	beq.n	80090c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c2:	e009      	b.n	80090d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090cc:	e004      	b.n	80090d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f99e 	bl	8009412 <USBD_CtlError>
  }
}
 80090d6:	bf00      	nop
 80090d8:	bf00      	nop
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	885b      	ldrh	r3, [r3, #2]
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	4b4e      	ldr	r3, [pc, #312]	; (8009230 <USBD_SetConfig+0x150>)
 80090f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090f8:	4b4d      	ldr	r3, [pc, #308]	; (8009230 <USBD_SetConfig+0x150>)
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d905      	bls.n	800910c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f985 	bl	8009412 <USBD_CtlError>
    return USBD_FAIL;
 8009108:	2303      	movs	r3, #3
 800910a:	e08c      	b.n	8009226 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d002      	beq.n	800911e <USBD_SetConfig+0x3e>
 8009118:	2b03      	cmp	r3, #3
 800911a:	d029      	beq.n	8009170 <USBD_SetConfig+0x90>
 800911c:	e075      	b.n	800920a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800911e:	4b44      	ldr	r3, [pc, #272]	; (8009230 <USBD_SetConfig+0x150>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d020      	beq.n	8009168 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009126:	4b42      	ldr	r3, [pc, #264]	; (8009230 <USBD_SetConfig+0x150>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009130:	4b3f      	ldr	r3, [pc, #252]	; (8009230 <USBD_SetConfig+0x150>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fe ffe7 	bl	800810a <USBD_SetClassConfig>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d008      	beq.n	8009158 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f962 	bl	8009412 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009156:	e065      	b.n	8009224 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fa25 	bl	80095a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2203      	movs	r2, #3
 8009162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009166:	e05d      	b.n	8009224 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fa1d 	bl	80095a8 <USBD_CtlSendStatus>
      break;
 800916e:	e059      	b.n	8009224 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009170:	4b2f      	ldr	r3, [pc, #188]	; (8009230 <USBD_SetConfig+0x150>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d112      	bne.n	800919e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009180:	4b2b      	ldr	r3, [pc, #172]	; (8009230 <USBD_SetConfig+0x150>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	461a      	mov	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800918a:	4b29      	ldr	r3, [pc, #164]	; (8009230 <USBD_SetConfig+0x150>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7fe ffd6 	bl	8008142 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fa06 	bl	80095a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800919c:	e042      	b.n	8009224 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800919e:	4b24      	ldr	r3, [pc, #144]	; (8009230 <USBD_SetConfig+0x150>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d02a      	beq.n	8009202 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7fe ffc4 	bl	8008142 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80091ba:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <USBD_SetConfig+0x150>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80091c4:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <USBD_SetConfig+0x150>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7fe ff9d 	bl	800810a <USBD_SetClassConfig>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00f      	beq.n	80091fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f918 	bl	8009412 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7fe ffa9 	bl	8008142 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80091f8:	e014      	b.n	8009224 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9d4 	bl	80095a8 <USBD_CtlSendStatus>
      break;
 8009200:	e010      	b.n	8009224 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f9d0 	bl	80095a8 <USBD_CtlSendStatus>
      break;
 8009208:	e00c      	b.n	8009224 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f900 	bl	8009412 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009212:	4b07      	ldr	r3, [pc, #28]	; (8009230 <USBD_SetConfig+0x150>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7fe ff92 	bl	8008142 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800921e:	2303      	movs	r3, #3
 8009220:	73fb      	strb	r3, [r7, #15]
      break;
 8009222:	bf00      	nop
  }

  return ret;
 8009224:	7bfb      	ldrb	r3, [r7, #15]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	20000350 	.word	0x20000350

08009234 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	88db      	ldrh	r3, [r3, #6]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d004      	beq.n	8009250 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f8e2 	bl	8009412 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800924e:	e023      	b.n	8009298 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	dc02      	bgt.n	8009262 <USBD_GetConfig+0x2e>
 800925c:	2b00      	cmp	r3, #0
 800925e:	dc03      	bgt.n	8009268 <USBD_GetConfig+0x34>
 8009260:	e015      	b.n	800928e <USBD_GetConfig+0x5a>
 8009262:	2b03      	cmp	r3, #3
 8009264:	d00b      	beq.n	800927e <USBD_GetConfig+0x4a>
 8009266:	e012      	b.n	800928e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3308      	adds	r3, #8
 8009272:	2201      	movs	r2, #1
 8009274:	4619      	mov	r1, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f93c 	bl	80094f4 <USBD_CtlSendData>
        break;
 800927c:	e00c      	b.n	8009298 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	3304      	adds	r3, #4
 8009282:	2201      	movs	r2, #1
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f934 	bl	80094f4 <USBD_CtlSendData>
        break;
 800928c:	e004      	b.n	8009298 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f8be 	bl	8009412 <USBD_CtlError>
        break;
 8009296:	bf00      	nop
}
 8009298:	bf00      	nop
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d81e      	bhi.n	80092f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	88db      	ldrh	r3, [r3, #6]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d004      	beq.n	80092ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f8a5 	bl	8009412 <USBD_CtlError>
        break;
 80092c8:	e01a      	b.n	8009300 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d005      	beq.n	80092e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f043 0202 	orr.w	r2, r3, #2
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	330c      	adds	r3, #12
 80092ea:	2202      	movs	r2, #2
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f900 	bl	80094f4 <USBD_CtlSendData>
      break;
 80092f4:	e004      	b.n	8009300 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f88a 	bl	8009412 <USBD_CtlError>
      break;
 80092fe:	bf00      	nop
  }
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	885b      	ldrh	r3, [r3, #2]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d107      	bne.n	800932a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f940 	bl	80095a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009328:	e013      	b.n	8009352 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	885b      	ldrh	r3, [r3, #2]
 800932e:	2b02      	cmp	r3, #2
 8009330:	d10b      	bne.n	800934a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	889b      	ldrh	r3, [r3, #4]
 8009336:	0a1b      	lsrs	r3, r3, #8
 8009338:	b29b      	uxth	r3, r3
 800933a:	b2da      	uxtb	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f930 	bl	80095a8 <USBD_CtlSendStatus>
}
 8009348:	e003      	b.n	8009352 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f860 	bl	8009412 <USBD_CtlError>
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936a:	b2db      	uxtb	r3, r3
 800936c:	3b01      	subs	r3, #1
 800936e:	2b02      	cmp	r3, #2
 8009370:	d80b      	bhi.n	800938a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	885b      	ldrh	r3, [r3, #2]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d10c      	bne.n	8009394 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f910 	bl	80095a8 <USBD_CtlSendStatus>
      }
      break;
 8009388:	e004      	b.n	8009394 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f840 	bl	8009412 <USBD_CtlError>
      break;
 8009392:	e000      	b.n	8009396 <USBD_ClrFeature+0x3c>
      break;
 8009394:	bf00      	nop
  }
}
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	781a      	ldrb	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3301      	adds	r3, #1
 80093b8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	781a      	ldrb	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3301      	adds	r3, #1
 80093c6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7ff fa41 	bl	8008850 <SWAPBYTE>
 80093ce:	4603      	mov	r3, r0
 80093d0:	461a      	mov	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3301      	adds	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	3301      	adds	r3, #1
 80093e0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f7ff fa34 	bl	8008850 <SWAPBYTE>
 80093e8:	4603      	mov	r3, r0
 80093ea:	461a      	mov	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3301      	adds	r3, #1
 80093f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3301      	adds	r3, #1
 80093fa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff fa27 	bl	8008850 <SWAPBYTE>
 8009402:	4603      	mov	r3, r0
 8009404:	461a      	mov	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	80da      	strh	r2, [r3, #6]
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800941c:	2180      	movs	r1, #128	; 0x80
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fcd6 	bl	8009dd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009424:	2100      	movs	r1, #0
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fcd2 	bl	8009dd0 <USBD_LL_StallEP>
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d036      	beq.n	80094b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800944e:	6938      	ldr	r0, [r7, #16]
 8009450:	f000 f836 	bl	80094c0 <USBD_GetLen>
 8009454:	4603      	mov	r3, r0
 8009456:	3301      	adds	r3, #1
 8009458:	b29b      	uxth	r3, r3
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	b29a      	uxth	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	4413      	add	r3, r2
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	7812      	ldrb	r2, [r2, #0]
 800946c:	701a      	strb	r2, [r3, #0]
  idx++;
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	3301      	adds	r3, #1
 8009472:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009474:	7dfb      	ldrb	r3, [r7, #23]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	4413      	add	r3, r2
 800947a:	2203      	movs	r2, #3
 800947c:	701a      	strb	r2, [r3, #0]
  idx++;
 800947e:	7dfb      	ldrb	r3, [r7, #23]
 8009480:	3301      	adds	r3, #1
 8009482:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009484:	e013      	b.n	80094ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009486:	7dfb      	ldrb	r3, [r7, #23]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	4413      	add	r3, r2
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	7812      	ldrb	r2, [r2, #0]
 8009490:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	3301      	adds	r3, #1
 8009496:	613b      	str	r3, [r7, #16]
    idx++;
 8009498:	7dfb      	ldrb	r3, [r7, #23]
 800949a:	3301      	adds	r3, #1
 800949c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	4413      	add	r3, r2
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
 80094aa:	3301      	adds	r3, #1
 80094ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e7      	bne.n	8009486 <USBD_GetString+0x52>
 80094b6:	e000      	b.n	80094ba <USBD_GetString+0x86>
    return;
 80094b8:	bf00      	nop
  }
}
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80094d0:	e005      	b.n	80094de <USBD_GetLen+0x1e>
  {
    len++;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	3301      	adds	r3, #1
 80094d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	3301      	adds	r3, #1
 80094dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1f5      	bne.n	80094d2 <USBD_GetLen+0x12>
  }

  return len;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3714      	adds	r7, #20
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2202      	movs	r2, #2
 8009504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	2100      	movs	r1, #0
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f000 fce1 	bl	8009ee2 <USBD_LL_Transmit>

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68ba      	ldr	r2, [r7, #8]
 800953a:	2100      	movs	r1, #0
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f000 fcd0 	bl	8009ee2 <USBD_LL_Transmit>

  return USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2203      	movs	r2, #3
 800955c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68ba      	ldr	r2, [r7, #8]
 8009574:	2100      	movs	r1, #0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 fcd4 	bl	8009f24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	2100      	movs	r1, #0
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 fcc3 	bl	8009f24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2204      	movs	r2, #4
 80095b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095b8:	2300      	movs	r3, #0
 80095ba:	2200      	movs	r2, #0
 80095bc:	2100      	movs	r1, #0
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fc8f 	bl	8009ee2 <USBD_LL_Transmit>

  return USBD_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2205      	movs	r2, #5
 80095da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095de:	2300      	movs	r3, #0
 80095e0:	2200      	movs	r2, #0
 80095e2:	2100      	movs	r1, #0
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fc9d 	bl	8009f24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095f8:	2200      	movs	r2, #0
 80095fa:	4912      	ldr	r1, [pc, #72]	; (8009644 <MX_USB_DEVICE_Init+0x50>)
 80095fc:	4812      	ldr	r0, [pc, #72]	; (8009648 <MX_USB_DEVICE_Init+0x54>)
 80095fe:	f7fe fd07 	bl	8008010 <USBD_Init>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009608:	f7f8 f9ba 	bl	8001980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800960c:	490f      	ldr	r1, [pc, #60]	; (800964c <MX_USB_DEVICE_Init+0x58>)
 800960e:	480e      	ldr	r0, [pc, #56]	; (8009648 <MX_USB_DEVICE_Init+0x54>)
 8009610:	f7fe fd2e 	bl	8008070 <USBD_RegisterClass>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800961a:	f7f8 f9b1 	bl	8001980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800961e:	490c      	ldr	r1, [pc, #48]	; (8009650 <MX_USB_DEVICE_Init+0x5c>)
 8009620:	4809      	ldr	r0, [pc, #36]	; (8009648 <MX_USB_DEVICE_Init+0x54>)
 8009622:	f7fe fc1f 	bl	8007e64 <USBD_CDC_RegisterInterface>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800962c:	f7f8 f9a8 	bl	8001980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009630:	4805      	ldr	r0, [pc, #20]	; (8009648 <MX_USB_DEVICE_Init+0x54>)
 8009632:	f7fe fd53 	bl	80080dc <USBD_Start>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800963c:	f7f8 f9a0 	bl	8001980 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009640:	bf00      	nop
 8009642:	bd80      	pop	{r7, pc}
 8009644:	200000e8 	.word	0x200000e8
 8009648:	20000354 	.word	0x20000354
 800964c:	20000054 	.word	0x20000054
 8009650:	200000d4 	.word	0x200000d4

08009654 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009658:	2200      	movs	r2, #0
 800965a:	4905      	ldr	r1, [pc, #20]	; (8009670 <CDC_Init_FS+0x1c>)
 800965c:	4805      	ldr	r0, [pc, #20]	; (8009674 <CDC_Init_FS+0x20>)
 800965e:	f7fe fc1b 	bl	8007e98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009662:	4905      	ldr	r1, [pc, #20]	; (8009678 <CDC_Init_FS+0x24>)
 8009664:	4803      	ldr	r0, [pc, #12]	; (8009674 <CDC_Init_FS+0x20>)
 8009666:	f7fe fc39 	bl	8007edc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800966a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800966c:	4618      	mov	r0, r3
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20000a30 	.word	0x20000a30
 8009674:	20000354 	.word	0x20000354
 8009678:	20000630 	.word	0x20000630

0800967c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009680:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009682:	4618      	mov	r0, r3
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	6039      	str	r1, [r7, #0]
 8009696:	71fb      	strb	r3, [r7, #7]
 8009698:	4613      	mov	r3, r2
 800969a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800969c:	79fb      	ldrb	r3, [r7, #7]
 800969e:	2b23      	cmp	r3, #35	; 0x23
 80096a0:	d84a      	bhi.n	8009738 <CDC_Control_FS+0xac>
 80096a2:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <CDC_Control_FS+0x1c>)
 80096a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a8:	08009739 	.word	0x08009739
 80096ac:	08009739 	.word	0x08009739
 80096b0:	08009739 	.word	0x08009739
 80096b4:	08009739 	.word	0x08009739
 80096b8:	08009739 	.word	0x08009739
 80096bc:	08009739 	.word	0x08009739
 80096c0:	08009739 	.word	0x08009739
 80096c4:	08009739 	.word	0x08009739
 80096c8:	08009739 	.word	0x08009739
 80096cc:	08009739 	.word	0x08009739
 80096d0:	08009739 	.word	0x08009739
 80096d4:	08009739 	.word	0x08009739
 80096d8:	08009739 	.word	0x08009739
 80096dc:	08009739 	.word	0x08009739
 80096e0:	08009739 	.word	0x08009739
 80096e4:	08009739 	.word	0x08009739
 80096e8:	08009739 	.word	0x08009739
 80096ec:	08009739 	.word	0x08009739
 80096f0:	08009739 	.word	0x08009739
 80096f4:	08009739 	.word	0x08009739
 80096f8:	08009739 	.word	0x08009739
 80096fc:	08009739 	.word	0x08009739
 8009700:	08009739 	.word	0x08009739
 8009704:	08009739 	.word	0x08009739
 8009708:	08009739 	.word	0x08009739
 800970c:	08009739 	.word	0x08009739
 8009710:	08009739 	.word	0x08009739
 8009714:	08009739 	.word	0x08009739
 8009718:	08009739 	.word	0x08009739
 800971c:	08009739 	.word	0x08009739
 8009720:	08009739 	.word	0x08009739
 8009724:	08009739 	.word	0x08009739
 8009728:	08009739 	.word	0x08009739
 800972c:	08009739 	.word	0x08009739
 8009730:	08009739 	.word	0x08009739
 8009734:	08009739 	.word	0x08009739
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009738:	bf00      	nop
  }

  return (USBD_OK);
 800973a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009752:	6879      	ldr	r1, [r7, #4]
 8009754:	4805      	ldr	r0, [pc, #20]	; (800976c <CDC_Receive_FS+0x24>)
 8009756:	f7fe fbc1 	bl	8007edc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800975a:	4804      	ldr	r0, [pc, #16]	; (800976c <CDC_Receive_FS+0x24>)
 800975c:	f7fe fc22 	bl	8007fa4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009760:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000354 	.word	0x20000354

08009770 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009780:	4b0d      	ldr	r3, [pc, #52]	; (80097b8 <CDC_Transmit_FS+0x48>)
 8009782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009786:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009792:	2301      	movs	r3, #1
 8009794:	e00b      	b.n	80097ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009796:	887b      	ldrh	r3, [r7, #2]
 8009798:	461a      	mov	r2, r3
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4806      	ldr	r0, [pc, #24]	; (80097b8 <CDC_Transmit_FS+0x48>)
 800979e:	f7fe fb7b 	bl	8007e98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80097a2:	4805      	ldr	r0, [pc, #20]	; (80097b8 <CDC_Transmit_FS+0x48>)
 80097a4:	f7fe fbb8 	bl	8007f18 <USBD_CDC_TransmitPacket>
 80097a8:	4603      	mov	r3, r0
 80097aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000354 	.word	0x20000354

080097bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	4613      	mov	r3, r2
 80097c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80097ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
	...

080097e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	6039      	str	r1, [r7, #0]
 80097ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2212      	movs	r2, #18
 80097f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097f2:	4b03      	ldr	r3, [pc, #12]	; (8009800 <USBD_FS_DeviceDescriptor+0x20>)
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	20000104 	.word	0x20000104

08009804 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	6039      	str	r1, [r7, #0]
 800980e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2204      	movs	r2, #4
 8009814:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009816:	4b03      	ldr	r3, [pc, #12]	; (8009824 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	20000118 	.word	0x20000118

08009828 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	4603      	mov	r3, r0
 8009830:	6039      	str	r1, [r7, #0]
 8009832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009834:	79fb      	ldrb	r3, [r7, #7]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d105      	bne.n	8009846 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	4907      	ldr	r1, [pc, #28]	; (800985c <USBD_FS_ProductStrDescriptor+0x34>)
 800983e:	4808      	ldr	r0, [pc, #32]	; (8009860 <USBD_FS_ProductStrDescriptor+0x38>)
 8009840:	f7ff fdf8 	bl	8009434 <USBD_GetString>
 8009844:	e004      	b.n	8009850 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4904      	ldr	r1, [pc, #16]	; (800985c <USBD_FS_ProductStrDescriptor+0x34>)
 800984a:	4805      	ldr	r0, [pc, #20]	; (8009860 <USBD_FS_ProductStrDescriptor+0x38>)
 800984c:	f7ff fdf2 	bl	8009434 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009850:	4b02      	ldr	r3, [pc, #8]	; (800985c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20000e30 	.word	0x20000e30
 8009860:	0800bc10 	.word	0x0800bc10

08009864 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	6039      	str	r1, [r7, #0]
 800986e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	4904      	ldr	r1, [pc, #16]	; (8009884 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009874:	4804      	ldr	r0, [pc, #16]	; (8009888 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009876:	f7ff fddd 	bl	8009434 <USBD_GetString>
  return USBD_StrDesc;
 800987a:	4b02      	ldr	r3, [pc, #8]	; (8009884 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000e30 	.word	0x20000e30
 8009888:	0800bc28 	.word	0x0800bc28

0800988c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	4603      	mov	r3, r0
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	221a      	movs	r2, #26
 800989c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800989e:	f000 f843 	bl	8009928 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098a2:	4b02      	ldr	r3, [pc, #8]	; (80098ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	2000011c 	.word	0x2000011c

080098b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098bc:	79fb      	ldrb	r3, [r7, #7]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d105      	bne.n	80098ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	4907      	ldr	r1, [pc, #28]	; (80098e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098c6:	4808      	ldr	r0, [pc, #32]	; (80098e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098c8:	f7ff fdb4 	bl	8009434 <USBD_GetString>
 80098cc:	e004      	b.n	80098d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4904      	ldr	r1, [pc, #16]	; (80098e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098d2:	4805      	ldr	r0, [pc, #20]	; (80098e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098d4:	f7ff fdae 	bl	8009434 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098d8:	4b02      	ldr	r3, [pc, #8]	; (80098e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000e30 	.word	0x20000e30
 80098e8:	0800bc3c 	.word	0x0800bc3c

080098ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	6039      	str	r1, [r7, #0]
 80098f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098f8:	79fb      	ldrb	r3, [r7, #7]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d105      	bne.n	800990a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	4907      	ldr	r1, [pc, #28]	; (8009920 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009902:	4808      	ldr	r0, [pc, #32]	; (8009924 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009904:	f7ff fd96 	bl	8009434 <USBD_GetString>
 8009908:	e004      	b.n	8009914 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	4904      	ldr	r1, [pc, #16]	; (8009920 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800990e:	4805      	ldr	r0, [pc, #20]	; (8009924 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009910:	f7ff fd90 	bl	8009434 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009916:	4618      	mov	r0, r3
 8009918:	3708      	adds	r7, #8
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20000e30 	.word	0x20000e30
 8009924:	0800bc48 	.word	0x0800bc48

08009928 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <Get_SerialNum+0x44>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009934:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <Get_SerialNum+0x48>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800993a:	4b0e      	ldr	r3, [pc, #56]	; (8009974 <Get_SerialNum+0x4c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4413      	add	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d009      	beq.n	8009962 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800994e:	2208      	movs	r2, #8
 8009950:	4909      	ldr	r1, [pc, #36]	; (8009978 <Get_SerialNum+0x50>)
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f814 	bl	8009980 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009958:	2204      	movs	r2, #4
 800995a:	4908      	ldr	r1, [pc, #32]	; (800997c <Get_SerialNum+0x54>)
 800995c:	68b8      	ldr	r0, [r7, #8]
 800995e:	f000 f80f 	bl	8009980 <IntToUnicode>
  }
}
 8009962:	bf00      	nop
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	1fff7a10 	.word	0x1fff7a10
 8009970:	1fff7a14 	.word	0x1fff7a14
 8009974:	1fff7a18 	.word	0x1fff7a18
 8009978:	2000011e 	.word	0x2000011e
 800997c:	2000012e 	.word	0x2000012e

08009980 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	4613      	mov	r3, r2
 800998c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800998e:	2300      	movs	r3, #0
 8009990:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
 8009996:	e027      	b.n	80099e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	0f1b      	lsrs	r3, r3, #28
 800999c:	2b09      	cmp	r3, #9
 800999e:	d80b      	bhi.n	80099b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	0f1b      	lsrs	r3, r3, #28
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	7dfb      	ldrb	r3, [r7, #23]
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	4619      	mov	r1, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	440b      	add	r3, r1
 80099b0:	3230      	adds	r2, #48	; 0x30
 80099b2:	b2d2      	uxtb	r2, r2
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	e00a      	b.n	80099ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	0f1b      	lsrs	r3, r3, #28
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	4619      	mov	r1, r3
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	440b      	add	r3, r1
 80099c8:	3237      	adds	r2, #55	; 0x37
 80099ca:	b2d2      	uxtb	r2, r2
 80099cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	011b      	lsls	r3, r3, #4
 80099d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	3301      	adds	r3, #1
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	4413      	add	r3, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	3301      	adds	r3, #1
 80099e6:	75fb      	strb	r3, [r7, #23]
 80099e8:	7dfa      	ldrb	r2, [r7, #23]
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d3d3      	bcc.n	8009998 <IntToUnicode+0x18>
  }
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08a      	sub	sp, #40	; 0x28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a08:	f107 0314 	add.w	r3, r7, #20
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]
 8009a10:	605a      	str	r2, [r3, #4]
 8009a12:	609a      	str	r2, [r3, #8]
 8009a14:	60da      	str	r2, [r3, #12]
 8009a16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a20:	d13a      	bne.n	8009a98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a22:	2300      	movs	r3, #0
 8009a24:	613b      	str	r3, [r7, #16]
 8009a26:	4b1e      	ldr	r3, [pc, #120]	; (8009aa0 <HAL_PCD_MspInit+0xa0>)
 8009a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a2a:	4a1d      	ldr	r2, [pc, #116]	; (8009aa0 <HAL_PCD_MspInit+0xa0>)
 8009a2c:	f043 0301 	orr.w	r3, r3, #1
 8009a30:	6313      	str	r3, [r2, #48]	; 0x30
 8009a32:	4b1b      	ldr	r3, [pc, #108]	; (8009aa0 <HAL_PCD_MspInit+0xa0>)
 8009a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	613b      	str	r3, [r7, #16]
 8009a3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009a3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a44:	2302      	movs	r3, #2
 8009a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009a50:	230a      	movs	r3, #10
 8009a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a54:	f107 0314 	add.w	r3, r7, #20
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4812      	ldr	r0, [pc, #72]	; (8009aa4 <HAL_PCD_MspInit+0xa4>)
 8009a5c:	f7f9 f8f4 	bl	8002c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009a60:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <HAL_PCD_MspInit+0xa0>)
 8009a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a64:	4a0e      	ldr	r2, [pc, #56]	; (8009aa0 <HAL_PCD_MspInit+0xa0>)
 8009a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6a:	6353      	str	r3, [r2, #52]	; 0x34
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <HAL_PCD_MspInit+0xa0>)
 8009a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a74:	4a0a      	ldr	r2, [pc, #40]	; (8009aa0 <HAL_PCD_MspInit+0xa0>)
 8009a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8009a7c:	4b08      	ldr	r3, [pc, #32]	; (8009aa0 <HAL_PCD_MspInit+0xa0>)
 8009a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	2043      	movs	r0, #67	; 0x43
 8009a8e:	f7f9 f8a4 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a92:	2043      	movs	r0, #67	; 0x43
 8009a94:	f7f9 f8bd 	bl	8002c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a98:	bf00      	nop
 8009a9a:	3728      	adds	r7, #40	; 0x28
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	40023800 	.word	0x40023800
 8009aa4:	40020000 	.word	0x40020000

08009aa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f7fe fb59 	bl	8008176 <USBD_LL_SetupStage>
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009ade:	78fa      	ldrb	r2, [r7, #3]
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	00db      	lsls	r3, r3, #3
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	440b      	add	r3, r1
 8009aec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	4619      	mov	r1, r3
 8009af6:	f7fe fb93 	bl	8008220 <USBD_LL_DataOutStage>
}
 8009afa:	bf00      	nop
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009b14:	78fa      	ldrb	r2, [r7, #3]
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	4413      	add	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	440b      	add	r3, r1
 8009b22:	334c      	adds	r3, #76	; 0x4c
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	f7fe fc2c 	bl	8008386 <USBD_LL_DataInStage>
}
 8009b2e:	bf00      	nop
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe fd60 	bl	800860a <USBD_LL_SOF>
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b084      	sub	sp, #16
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d001      	beq.n	8009b6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b66:	f7f7 ff0b 	bl	8001980 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b70:	7bfa      	ldrb	r2, [r7, #15]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe fd0a 	bl	800858e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fe fcb2 	bl	80084ea <USBD_LL_Reset>
}
 8009b86:	bf00      	nop
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7fe fd05 	bl	80085ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	6812      	ldr	r2, [r2, #0]
 8009bb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bb6:	f043 0301 	orr.w	r3, r3, #1
 8009bba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d005      	beq.n	8009bd0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bc4:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <HAL_PCD_SuspendCallback+0x48>)
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	4a03      	ldr	r2, [pc, #12]	; (8009bd8 <HAL_PCD_SuspendCallback+0x48>)
 8009bca:	f043 0306 	orr.w	r3, r3, #6
 8009bce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	e000ed00 	.word	0xe000ed00

08009bdc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe fcf5 	bl	80085da <USBD_LL_Resume>
}
 8009bf0:	bf00      	nop
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c0a:	78fa      	ldrb	r2, [r7, #3]
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fd4d 	bl	80086ae <USBD_LL_IsoOUTIncomplete>
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	4611      	mov	r1, r2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fd09 	bl	800864a <USBD_LL_IsoINIncomplete>
}
 8009c38:	bf00      	nop
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fd5f 	bl	8008712 <USBD_LL_DevConnected>
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fd5c 	bl	8008728 <USBD_LL_DevDisconnected>
}
 8009c70:	bf00      	nop
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d13c      	bne.n	8009d02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c88:	4a20      	ldr	r2, [pc, #128]	; (8009d0c <USBD_LL_Init+0x94>)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a1e      	ldr	r2, [pc, #120]	; (8009d0c <USBD_LL_Init+0x94>)
 8009c94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c98:	4b1c      	ldr	r3, [pc, #112]	; (8009d0c <USBD_LL_Init+0x94>)
 8009c9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009c9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ca0:	4b1a      	ldr	r3, [pc, #104]	; (8009d0c <USBD_LL_Init+0x94>)
 8009ca2:	2204      	movs	r2, #4
 8009ca4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ca6:	4b19      	ldr	r3, [pc, #100]	; (8009d0c <USBD_LL_Init+0x94>)
 8009ca8:	2202      	movs	r2, #2
 8009caa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009cac:	4b17      	ldr	r3, [pc, #92]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009cb2:	4b16      	ldr	r3, [pc, #88]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009cb8:	4b14      	ldr	r3, [pc, #80]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009cbe:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009cc4:	4b11      	ldr	r3, [pc, #68]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009cca:	4b10      	ldr	r3, [pc, #64]	; (8009d0c <USBD_LL_Init+0x94>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009cd0:	4b0e      	ldr	r3, [pc, #56]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009cd6:	480d      	ldr	r0, [pc, #52]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cd8:	f7f9 f9a9 	bl	800302e <HAL_PCD_Init>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009ce2:	f7f7 fe4d 	bl	8001980 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009ce6:	2180      	movs	r1, #128	; 0x80
 8009ce8:	4808      	ldr	r0, [pc, #32]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cea:	f7fa fc00 	bl	80044ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009cee:	2240      	movs	r2, #64	; 0x40
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4806      	ldr	r0, [pc, #24]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cf4:	f7fa fbb4 	bl	8004460 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009cf8:	2280      	movs	r2, #128	; 0x80
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	4803      	ldr	r0, [pc, #12]	; (8009d0c <USBD_LL_Init+0x94>)
 8009cfe:	f7fa fbaf 	bl	8004460 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	20001030 	.word	0x20001030

08009d10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7f9 fa9e 	bl	8003268 <HAL_PCD_Start>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	4618      	mov	r0, r3
 8009d34:	f000 f942 	bl	8009fbc <USBD_Get_USB_Status>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b084      	sub	sp, #16
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4611      	mov	r1, r2
 8009d52:	461a      	mov	r2, r3
 8009d54:	4603      	mov	r3, r0
 8009d56:	70fb      	strb	r3, [r7, #3]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	70bb      	strb	r3, [r7, #2]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d6e:	78bb      	ldrb	r3, [r7, #2]
 8009d70:	883a      	ldrh	r2, [r7, #0]
 8009d72:	78f9      	ldrb	r1, [r7, #3]
 8009d74:	f7f9 ff6f 	bl	8003c56 <HAL_PCD_EP_Open>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 f91c 	bl	8009fbc <USBD_Get_USB_Status>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dac:	78fa      	ldrb	r2, [r7, #3]
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7f9 ffb8 	bl	8003d26 <HAL_PCD_EP_Close>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 f8fd 	bl	8009fbc <USBD_Get_USB_Status>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	4611      	mov	r1, r2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fa f890 	bl	8003f14 <HAL_PCD_EP_SetStall>
 8009df4:	4603      	mov	r3, r0
 8009df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 f8de 	bl	8009fbc <USBD_Get_USB_Status>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	460b      	mov	r3, r1
 8009e18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e28:	78fa      	ldrb	r2, [r7, #3]
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fa f8d5 	bl	8003fdc <HAL_PCD_EP_ClrStall>
 8009e32:	4603      	mov	r3, r0
 8009e34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 f8bf 	bl	8009fbc <USBD_Get_USB_Status>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da0b      	bge.n	8009e80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e68:	78fb      	ldrb	r3, [r7, #3]
 8009e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e6e:	68f9      	ldr	r1, [r7, #12]
 8009e70:	4613      	mov	r3, r2
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	440b      	add	r3, r1
 8009e7a:	333e      	adds	r3, #62	; 0x3e
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	e00b      	b.n	8009e98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	00db      	lsls	r3, r3, #3
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	440b      	add	r3, r1
 8009e92:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009e96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ebe:	78fa      	ldrb	r2, [r7, #3]
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7f9 fea2 	bl	8003c0c <HAL_PCD_SetAddress>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 f874 	bl	8009fbc <USBD_Get_USB_Status>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b086      	sub	sp, #24
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	60f8      	str	r0, [r7, #12]
 8009eea:	607a      	str	r2, [r7, #4]
 8009eec:	603b      	str	r3, [r7, #0]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f00:	7af9      	ldrb	r1, [r7, #11]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	f7f9 ffbb 	bl	8003e80 <HAL_PCD_EP_Transmit>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f000 f853 	bl	8009fbc <USBD_Get_USB_Status>
 8009f16:	4603      	mov	r3, r0
 8009f18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	460b      	mov	r3, r1
 8009f32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f42:	7af9      	ldrb	r1, [r7, #11]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	f7f9 ff37 	bl	8003dba <HAL_PCD_EP_Receive>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 f832 	bl	8009fbc <USBD_Get_USB_Status>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b082      	sub	sp, #8
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f78:	78fa      	ldrb	r2, [r7, #3]
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7f9 ff67 	bl	8003e50 <HAL_PCD_EP_GetRxCount>
 8009f82:	4603      	mov	r3, r0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f94:	4b03      	ldr	r3, [pc, #12]	; (8009fa4 <USBD_static_malloc+0x18>)
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	2000153c 	.word	0x2000153c

08009fa8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]

}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fca:	79fb      	ldrb	r3, [r7, #7]
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d817      	bhi.n	800a000 <USBD_Get_USB_Status+0x44>
 8009fd0:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <USBD_Get_USB_Status+0x1c>)
 8009fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd6:	bf00      	nop
 8009fd8:	08009fe9 	.word	0x08009fe9
 8009fdc:	08009fef 	.word	0x08009fef
 8009fe0:	08009ff5 	.word	0x08009ff5
 8009fe4:	08009ffb 	.word	0x08009ffb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
    break;
 8009fec:	e00b      	b.n	800a006 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff2:	e008      	b.n	800a006 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff8:	e005      	b.n	800a006 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ffe:	e002      	b.n	800a006 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a000:	2303      	movs	r3, #3
 800a002:	73fb      	strb	r3, [r7, #15]
    break;
 800a004:	bf00      	nop
  }
  return usb_status;
 800a006:	7bfb      	ldrb	r3, [r7, #15]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <__errno>:
 800a014:	4b01      	ldr	r3, [pc, #4]	; (800a01c <__errno+0x8>)
 800a016:	6818      	ldr	r0, [r3, #0]
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	20000138 	.word	0x20000138

0800a020 <__libc_init_array>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	4d0d      	ldr	r5, [pc, #52]	; (800a058 <__libc_init_array+0x38>)
 800a024:	4c0d      	ldr	r4, [pc, #52]	; (800a05c <__libc_init_array+0x3c>)
 800a026:	1b64      	subs	r4, r4, r5
 800a028:	10a4      	asrs	r4, r4, #2
 800a02a:	2600      	movs	r6, #0
 800a02c:	42a6      	cmp	r6, r4
 800a02e:	d109      	bne.n	800a044 <__libc_init_array+0x24>
 800a030:	4d0b      	ldr	r5, [pc, #44]	; (800a060 <__libc_init_array+0x40>)
 800a032:	4c0c      	ldr	r4, [pc, #48]	; (800a064 <__libc_init_array+0x44>)
 800a034:	f001 fdde 	bl	800bbf4 <_init>
 800a038:	1b64      	subs	r4, r4, r5
 800a03a:	10a4      	asrs	r4, r4, #2
 800a03c:	2600      	movs	r6, #0
 800a03e:	42a6      	cmp	r6, r4
 800a040:	d105      	bne.n	800a04e <__libc_init_array+0x2e>
 800a042:	bd70      	pop	{r4, r5, r6, pc}
 800a044:	f855 3b04 	ldr.w	r3, [r5], #4
 800a048:	4798      	blx	r3
 800a04a:	3601      	adds	r6, #1
 800a04c:	e7ee      	b.n	800a02c <__libc_init_array+0xc>
 800a04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a052:	4798      	blx	r3
 800a054:	3601      	adds	r6, #1
 800a056:	e7f2      	b.n	800a03e <__libc_init_array+0x1e>
 800a058:	0800be90 	.word	0x0800be90
 800a05c:	0800be90 	.word	0x0800be90
 800a060:	0800be90 	.word	0x0800be90
 800a064:	0800be94 	.word	0x0800be94

0800a068 <memset>:
 800a068:	4402      	add	r2, r0
 800a06a:	4603      	mov	r3, r0
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d100      	bne.n	800a072 <memset+0xa>
 800a070:	4770      	bx	lr
 800a072:	f803 1b01 	strb.w	r1, [r3], #1
 800a076:	e7f9      	b.n	800a06c <memset+0x4>

0800a078 <atan>:
 800a078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	ec55 4b10 	vmov	r4, r5, d0
 800a080:	4bc3      	ldr	r3, [pc, #780]	; (800a390 <atan+0x318>)
 800a082:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a086:	429e      	cmp	r6, r3
 800a088:	46ab      	mov	fp, r5
 800a08a:	dd18      	ble.n	800a0be <atan+0x46>
 800a08c:	4bc1      	ldr	r3, [pc, #772]	; (800a394 <atan+0x31c>)
 800a08e:	429e      	cmp	r6, r3
 800a090:	dc01      	bgt.n	800a096 <atan+0x1e>
 800a092:	d109      	bne.n	800a0a8 <atan+0x30>
 800a094:	b144      	cbz	r4, 800a0a8 <atan+0x30>
 800a096:	4622      	mov	r2, r4
 800a098:	462b      	mov	r3, r5
 800a09a:	4620      	mov	r0, r4
 800a09c:	4629      	mov	r1, r5
 800a09e:	f7f6 f8ab 	bl	80001f8 <__adddf3>
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	e006      	b.n	800a0b6 <atan+0x3e>
 800a0a8:	f1bb 0f00 	cmp.w	fp, #0
 800a0ac:	f300 8131 	bgt.w	800a312 <atan+0x29a>
 800a0b0:	a59b      	add	r5, pc, #620	; (adr r5, 800a320 <atan+0x2a8>)
 800a0b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0b6:	ec45 4b10 	vmov	d0, r4, r5
 800a0ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0be:	4bb6      	ldr	r3, [pc, #728]	; (800a398 <atan+0x320>)
 800a0c0:	429e      	cmp	r6, r3
 800a0c2:	dc14      	bgt.n	800a0ee <atan+0x76>
 800a0c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a0c8:	429e      	cmp	r6, r3
 800a0ca:	dc0d      	bgt.n	800a0e8 <atan+0x70>
 800a0cc:	a396      	add	r3, pc, #600	; (adr r3, 800a328 <atan+0x2b0>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	ee10 0a10 	vmov	r0, s0
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f7f6 f88e 	bl	80001f8 <__adddf3>
 800a0dc:	4baf      	ldr	r3, [pc, #700]	; (800a39c <atan+0x324>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f7f6 fcd0 	bl	8000a84 <__aeabi_dcmpgt>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d1e6      	bne.n	800a0b6 <atan+0x3e>
 800a0e8:	f04f 3aff 	mov.w	sl, #4294967295
 800a0ec:	e02b      	b.n	800a146 <atan+0xce>
 800a0ee:	f000 f9b7 	bl	800a460 <fabs>
 800a0f2:	4bab      	ldr	r3, [pc, #684]	; (800a3a0 <atan+0x328>)
 800a0f4:	429e      	cmp	r6, r3
 800a0f6:	ec55 4b10 	vmov	r4, r5, d0
 800a0fa:	f300 80bf 	bgt.w	800a27c <atan+0x204>
 800a0fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a102:	429e      	cmp	r6, r3
 800a104:	f300 80a0 	bgt.w	800a248 <atan+0x1d0>
 800a108:	ee10 2a10 	vmov	r2, s0
 800a10c:	ee10 0a10 	vmov	r0, s0
 800a110:	462b      	mov	r3, r5
 800a112:	4629      	mov	r1, r5
 800a114:	f7f6 f870 	bl	80001f8 <__adddf3>
 800a118:	4ba0      	ldr	r3, [pc, #640]	; (800a39c <atan+0x324>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	f7f6 f86a 	bl	80001f4 <__aeabi_dsub>
 800a120:	2200      	movs	r2, #0
 800a122:	4606      	mov	r6, r0
 800a124:	460f      	mov	r7, r1
 800a126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a12a:	4620      	mov	r0, r4
 800a12c:	4629      	mov	r1, r5
 800a12e:	f7f6 f863 	bl	80001f8 <__adddf3>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4630      	mov	r0, r6
 800a138:	4639      	mov	r1, r7
 800a13a:	f7f6 fb3d 	bl	80007b8 <__aeabi_ddiv>
 800a13e:	f04f 0a00 	mov.w	sl, #0
 800a142:	4604      	mov	r4, r0
 800a144:	460d      	mov	r5, r1
 800a146:	4622      	mov	r2, r4
 800a148:	462b      	mov	r3, r5
 800a14a:	4620      	mov	r0, r4
 800a14c:	4629      	mov	r1, r5
 800a14e:	f7f6 fa09 	bl	8000564 <__aeabi_dmul>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4680      	mov	r8, r0
 800a158:	4689      	mov	r9, r1
 800a15a:	f7f6 fa03 	bl	8000564 <__aeabi_dmul>
 800a15e:	a374      	add	r3, pc, #464	; (adr r3, 800a330 <atan+0x2b8>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	f7f6 f9fc 	bl	8000564 <__aeabi_dmul>
 800a16c:	a372      	add	r3, pc, #456	; (adr r3, 800a338 <atan+0x2c0>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	f7f6 f841 	bl	80001f8 <__adddf3>
 800a176:	4632      	mov	r2, r6
 800a178:	463b      	mov	r3, r7
 800a17a:	f7f6 f9f3 	bl	8000564 <__aeabi_dmul>
 800a17e:	a370      	add	r3, pc, #448	; (adr r3, 800a340 <atan+0x2c8>)
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	f7f6 f838 	bl	80001f8 <__adddf3>
 800a188:	4632      	mov	r2, r6
 800a18a:	463b      	mov	r3, r7
 800a18c:	f7f6 f9ea 	bl	8000564 <__aeabi_dmul>
 800a190:	a36d      	add	r3, pc, #436	; (adr r3, 800a348 <atan+0x2d0>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f7f6 f82f 	bl	80001f8 <__adddf3>
 800a19a:	4632      	mov	r2, r6
 800a19c:	463b      	mov	r3, r7
 800a19e:	f7f6 f9e1 	bl	8000564 <__aeabi_dmul>
 800a1a2:	a36b      	add	r3, pc, #428	; (adr r3, 800a350 <atan+0x2d8>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	f7f6 f826 	bl	80001f8 <__adddf3>
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	463b      	mov	r3, r7
 800a1b0:	f7f6 f9d8 	bl	8000564 <__aeabi_dmul>
 800a1b4:	a368      	add	r3, pc, #416	; (adr r3, 800a358 <atan+0x2e0>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f7f6 f81d 	bl	80001f8 <__adddf3>
 800a1be:	4642      	mov	r2, r8
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	f7f6 f9cf 	bl	8000564 <__aeabi_dmul>
 800a1c6:	a366      	add	r3, pc, #408	; (adr r3, 800a360 <atan+0x2e8>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	4680      	mov	r8, r0
 800a1ce:	4689      	mov	r9, r1
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	f7f6 f9c6 	bl	8000564 <__aeabi_dmul>
 800a1d8:	a363      	add	r3, pc, #396	; (adr r3, 800a368 <atan+0x2f0>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f7f6 f809 	bl	80001f4 <__aeabi_dsub>
 800a1e2:	4632      	mov	r2, r6
 800a1e4:	463b      	mov	r3, r7
 800a1e6:	f7f6 f9bd 	bl	8000564 <__aeabi_dmul>
 800a1ea:	a361      	add	r3, pc, #388	; (adr r3, 800a370 <atan+0x2f8>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	f7f6 f800 	bl	80001f4 <__aeabi_dsub>
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	463b      	mov	r3, r7
 800a1f8:	f7f6 f9b4 	bl	8000564 <__aeabi_dmul>
 800a1fc:	a35e      	add	r3, pc, #376	; (adr r3, 800a378 <atan+0x300>)
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f7f5 fff7 	bl	80001f4 <__aeabi_dsub>
 800a206:	4632      	mov	r2, r6
 800a208:	463b      	mov	r3, r7
 800a20a:	f7f6 f9ab 	bl	8000564 <__aeabi_dmul>
 800a20e:	a35c      	add	r3, pc, #368	; (adr r3, 800a380 <atan+0x308>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f7f5 ffee 	bl	80001f4 <__aeabi_dsub>
 800a218:	4632      	mov	r2, r6
 800a21a:	463b      	mov	r3, r7
 800a21c:	f7f6 f9a2 	bl	8000564 <__aeabi_dmul>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	4640      	mov	r0, r8
 800a226:	4649      	mov	r1, r9
 800a228:	f7f5 ffe6 	bl	80001f8 <__adddf3>
 800a22c:	4622      	mov	r2, r4
 800a22e:	462b      	mov	r3, r5
 800a230:	f7f6 f998 	bl	8000564 <__aeabi_dmul>
 800a234:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	d14b      	bne.n	800a2d6 <atan+0x25e>
 800a23e:	4620      	mov	r0, r4
 800a240:	4629      	mov	r1, r5
 800a242:	f7f5 ffd7 	bl	80001f4 <__aeabi_dsub>
 800a246:	e72c      	b.n	800a0a2 <atan+0x2a>
 800a248:	ee10 0a10 	vmov	r0, s0
 800a24c:	4b53      	ldr	r3, [pc, #332]	; (800a39c <atan+0x324>)
 800a24e:	2200      	movs	r2, #0
 800a250:	4629      	mov	r1, r5
 800a252:	f7f5 ffcf 	bl	80001f4 <__aeabi_dsub>
 800a256:	4b51      	ldr	r3, [pc, #324]	; (800a39c <atan+0x324>)
 800a258:	4606      	mov	r6, r0
 800a25a:	460f      	mov	r7, r1
 800a25c:	2200      	movs	r2, #0
 800a25e:	4620      	mov	r0, r4
 800a260:	4629      	mov	r1, r5
 800a262:	f7f5 ffc9 	bl	80001f8 <__adddf3>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	f7f6 faa3 	bl	80007b8 <__aeabi_ddiv>
 800a272:	f04f 0a01 	mov.w	sl, #1
 800a276:	4604      	mov	r4, r0
 800a278:	460d      	mov	r5, r1
 800a27a:	e764      	b.n	800a146 <atan+0xce>
 800a27c:	4b49      	ldr	r3, [pc, #292]	; (800a3a4 <atan+0x32c>)
 800a27e:	429e      	cmp	r6, r3
 800a280:	da1d      	bge.n	800a2be <atan+0x246>
 800a282:	ee10 0a10 	vmov	r0, s0
 800a286:	4b48      	ldr	r3, [pc, #288]	; (800a3a8 <atan+0x330>)
 800a288:	2200      	movs	r2, #0
 800a28a:	4629      	mov	r1, r5
 800a28c:	f7f5 ffb2 	bl	80001f4 <__aeabi_dsub>
 800a290:	4b45      	ldr	r3, [pc, #276]	; (800a3a8 <atan+0x330>)
 800a292:	4606      	mov	r6, r0
 800a294:	460f      	mov	r7, r1
 800a296:	2200      	movs	r2, #0
 800a298:	4620      	mov	r0, r4
 800a29a:	4629      	mov	r1, r5
 800a29c:	f7f6 f962 	bl	8000564 <__aeabi_dmul>
 800a2a0:	4b3e      	ldr	r3, [pc, #248]	; (800a39c <atan+0x324>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f7f5 ffa8 	bl	80001f8 <__adddf3>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	f7f6 fa82 	bl	80007b8 <__aeabi_ddiv>
 800a2b4:	f04f 0a02 	mov.w	sl, #2
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	e743      	b.n	800a146 <atan+0xce>
 800a2be:	462b      	mov	r3, r5
 800a2c0:	ee10 2a10 	vmov	r2, s0
 800a2c4:	4939      	ldr	r1, [pc, #228]	; (800a3ac <atan+0x334>)
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	f7f6 fa76 	bl	80007b8 <__aeabi_ddiv>
 800a2cc:	f04f 0a03 	mov.w	sl, #3
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	e737      	b.n	800a146 <atan+0xce>
 800a2d6:	4b36      	ldr	r3, [pc, #216]	; (800a3b0 <atan+0x338>)
 800a2d8:	4e36      	ldr	r6, [pc, #216]	; (800a3b4 <atan+0x33c>)
 800a2da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a2de:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a2e2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a2e6:	f7f5 ff85 	bl	80001f4 <__aeabi_dsub>
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	462b      	mov	r3, r5
 800a2ee:	f7f5 ff81 	bl	80001f4 <__aeabi_dsub>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a2fa:	f7f5 ff7b 	bl	80001f4 <__aeabi_dsub>
 800a2fe:	f1bb 0f00 	cmp.w	fp, #0
 800a302:	4604      	mov	r4, r0
 800a304:	460d      	mov	r5, r1
 800a306:	f6bf aed6 	bge.w	800a0b6 <atan+0x3e>
 800a30a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a30e:	461d      	mov	r5, r3
 800a310:	e6d1      	b.n	800a0b6 <atan+0x3e>
 800a312:	a51d      	add	r5, pc, #116	; (adr r5, 800a388 <atan+0x310>)
 800a314:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a318:	e6cd      	b.n	800a0b6 <atan+0x3e>
 800a31a:	bf00      	nop
 800a31c:	f3af 8000 	nop.w
 800a320:	54442d18 	.word	0x54442d18
 800a324:	bff921fb 	.word	0xbff921fb
 800a328:	8800759c 	.word	0x8800759c
 800a32c:	7e37e43c 	.word	0x7e37e43c
 800a330:	e322da11 	.word	0xe322da11
 800a334:	3f90ad3a 	.word	0x3f90ad3a
 800a338:	24760deb 	.word	0x24760deb
 800a33c:	3fa97b4b 	.word	0x3fa97b4b
 800a340:	a0d03d51 	.word	0xa0d03d51
 800a344:	3fb10d66 	.word	0x3fb10d66
 800a348:	c54c206e 	.word	0xc54c206e
 800a34c:	3fb745cd 	.word	0x3fb745cd
 800a350:	920083ff 	.word	0x920083ff
 800a354:	3fc24924 	.word	0x3fc24924
 800a358:	5555550d 	.word	0x5555550d
 800a35c:	3fd55555 	.word	0x3fd55555
 800a360:	2c6a6c2f 	.word	0x2c6a6c2f
 800a364:	bfa2b444 	.word	0xbfa2b444
 800a368:	52defd9a 	.word	0x52defd9a
 800a36c:	3fadde2d 	.word	0x3fadde2d
 800a370:	af749a6d 	.word	0xaf749a6d
 800a374:	3fb3b0f2 	.word	0x3fb3b0f2
 800a378:	fe231671 	.word	0xfe231671
 800a37c:	3fbc71c6 	.word	0x3fbc71c6
 800a380:	9998ebc4 	.word	0x9998ebc4
 800a384:	3fc99999 	.word	0x3fc99999
 800a388:	54442d18 	.word	0x54442d18
 800a38c:	3ff921fb 	.word	0x3ff921fb
 800a390:	440fffff 	.word	0x440fffff
 800a394:	7ff00000 	.word	0x7ff00000
 800a398:	3fdbffff 	.word	0x3fdbffff
 800a39c:	3ff00000 	.word	0x3ff00000
 800a3a0:	3ff2ffff 	.word	0x3ff2ffff
 800a3a4:	40038000 	.word	0x40038000
 800a3a8:	3ff80000 	.word	0x3ff80000
 800a3ac:	bff00000 	.word	0xbff00000
 800a3b0:	0800bc88 	.word	0x0800bc88
 800a3b4:	0800bc68 	.word	0x0800bc68

0800a3b8 <cos>:
 800a3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ba:	ec53 2b10 	vmov	r2, r3, d0
 800a3be:	4826      	ldr	r0, [pc, #152]	; (800a458 <cos+0xa0>)
 800a3c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a3c4:	4281      	cmp	r1, r0
 800a3c6:	dc06      	bgt.n	800a3d6 <cos+0x1e>
 800a3c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a450 <cos+0x98>
 800a3cc:	b005      	add	sp, #20
 800a3ce:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3d2:	f000 be29 	b.w	800b028 <__kernel_cos>
 800a3d6:	4821      	ldr	r0, [pc, #132]	; (800a45c <cos+0xa4>)
 800a3d8:	4281      	cmp	r1, r0
 800a3da:	dd09      	ble.n	800a3f0 <cos+0x38>
 800a3dc:	ee10 0a10 	vmov	r0, s0
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	f7f5 ff07 	bl	80001f4 <__aeabi_dsub>
 800a3e6:	ec41 0b10 	vmov	d0, r0, r1
 800a3ea:	b005      	add	sp, #20
 800a3ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3f0:	4668      	mov	r0, sp
 800a3f2:	f000 fb59 	bl	800aaa8 <__ieee754_rem_pio2>
 800a3f6:	f000 0003 	and.w	r0, r0, #3
 800a3fa:	2801      	cmp	r0, #1
 800a3fc:	d00b      	beq.n	800a416 <cos+0x5e>
 800a3fe:	2802      	cmp	r0, #2
 800a400:	d016      	beq.n	800a430 <cos+0x78>
 800a402:	b9e0      	cbnz	r0, 800a43e <cos+0x86>
 800a404:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a408:	ed9d 0b00 	vldr	d0, [sp]
 800a40c:	f000 fe0c 	bl	800b028 <__kernel_cos>
 800a410:	ec51 0b10 	vmov	r0, r1, d0
 800a414:	e7e7      	b.n	800a3e6 <cos+0x2e>
 800a416:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a41a:	ed9d 0b00 	vldr	d0, [sp]
 800a41e:	f001 fa1b 	bl	800b858 <__kernel_sin>
 800a422:	ec53 2b10 	vmov	r2, r3, d0
 800a426:	ee10 0a10 	vmov	r0, s0
 800a42a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a42e:	e7da      	b.n	800a3e6 <cos+0x2e>
 800a430:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a434:	ed9d 0b00 	vldr	d0, [sp]
 800a438:	f000 fdf6 	bl	800b028 <__kernel_cos>
 800a43c:	e7f1      	b.n	800a422 <cos+0x6a>
 800a43e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a442:	ed9d 0b00 	vldr	d0, [sp]
 800a446:	2001      	movs	r0, #1
 800a448:	f001 fa06 	bl	800b858 <__kernel_sin>
 800a44c:	e7e0      	b.n	800a410 <cos+0x58>
 800a44e:	bf00      	nop
	...
 800a458:	3fe921fb 	.word	0x3fe921fb
 800a45c:	7fefffff 	.word	0x7fefffff

0800a460 <fabs>:
 800a460:	ec51 0b10 	vmov	r0, r1, d0
 800a464:	ee10 2a10 	vmov	r2, s0
 800a468:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a46c:	ec43 2b10 	vmov	d0, r2, r3
 800a470:	4770      	bx	lr
 800a472:	0000      	movs	r0, r0
 800a474:	0000      	movs	r0, r0
	...

0800a478 <sin>:
 800a478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a47a:	ec53 2b10 	vmov	r2, r3, d0
 800a47e:	4828      	ldr	r0, [pc, #160]	; (800a520 <sin+0xa8>)
 800a480:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a484:	4281      	cmp	r1, r0
 800a486:	dc07      	bgt.n	800a498 <sin+0x20>
 800a488:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a518 <sin+0xa0>
 800a48c:	2000      	movs	r0, #0
 800a48e:	b005      	add	sp, #20
 800a490:	f85d eb04 	ldr.w	lr, [sp], #4
 800a494:	f001 b9e0 	b.w	800b858 <__kernel_sin>
 800a498:	4822      	ldr	r0, [pc, #136]	; (800a524 <sin+0xac>)
 800a49a:	4281      	cmp	r1, r0
 800a49c:	dd09      	ble.n	800a4b2 <sin+0x3a>
 800a49e:	ee10 0a10 	vmov	r0, s0
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	f7f5 fea6 	bl	80001f4 <__aeabi_dsub>
 800a4a8:	ec41 0b10 	vmov	d0, r0, r1
 800a4ac:	b005      	add	sp, #20
 800a4ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4b2:	4668      	mov	r0, sp
 800a4b4:	f000 faf8 	bl	800aaa8 <__ieee754_rem_pio2>
 800a4b8:	f000 0003 	and.w	r0, r0, #3
 800a4bc:	2801      	cmp	r0, #1
 800a4be:	d00c      	beq.n	800a4da <sin+0x62>
 800a4c0:	2802      	cmp	r0, #2
 800a4c2:	d011      	beq.n	800a4e8 <sin+0x70>
 800a4c4:	b9f0      	cbnz	r0, 800a504 <sin+0x8c>
 800a4c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4ca:	ed9d 0b00 	vldr	d0, [sp]
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	f001 f9c2 	bl	800b858 <__kernel_sin>
 800a4d4:	ec51 0b10 	vmov	r0, r1, d0
 800a4d8:	e7e6      	b.n	800a4a8 <sin+0x30>
 800a4da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4de:	ed9d 0b00 	vldr	d0, [sp]
 800a4e2:	f000 fda1 	bl	800b028 <__kernel_cos>
 800a4e6:	e7f5      	b.n	800a4d4 <sin+0x5c>
 800a4e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a4ec:	ed9d 0b00 	vldr	d0, [sp]
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	f001 f9b1 	bl	800b858 <__kernel_sin>
 800a4f6:	ec53 2b10 	vmov	r2, r3, d0
 800a4fa:	ee10 0a10 	vmov	r0, s0
 800a4fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a502:	e7d1      	b.n	800a4a8 <sin+0x30>
 800a504:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a508:	ed9d 0b00 	vldr	d0, [sp]
 800a50c:	f000 fd8c 	bl	800b028 <__kernel_cos>
 800a510:	e7f1      	b.n	800a4f6 <sin+0x7e>
 800a512:	bf00      	nop
 800a514:	f3af 8000 	nop.w
	...
 800a520:	3fe921fb 	.word	0x3fe921fb
 800a524:	7fefffff 	.word	0x7fefffff

0800a528 <acos>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	ed2d 8b02 	vpush	{d8}
 800a52e:	ec55 4b10 	vmov	r4, r5, d0
 800a532:	f000 f859 	bl	800a5e8 <__ieee754_acos>
 800a536:	4622      	mov	r2, r4
 800a538:	462b      	mov	r3, r5
 800a53a:	4620      	mov	r0, r4
 800a53c:	4629      	mov	r1, r5
 800a53e:	eeb0 8a40 	vmov.f32	s16, s0
 800a542:	eef0 8a60 	vmov.f32	s17, s1
 800a546:	f7f6 faa7 	bl	8000a98 <__aeabi_dcmpun>
 800a54a:	b9a8      	cbnz	r0, 800a578 <acos+0x50>
 800a54c:	ec45 4b10 	vmov	d0, r4, r5
 800a550:	f7ff ff86 	bl	800a460 <fabs>
 800a554:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <acos+0x60>)
 800a556:	ec51 0b10 	vmov	r0, r1, d0
 800a55a:	2200      	movs	r2, #0
 800a55c:	f7f6 fa92 	bl	8000a84 <__aeabi_dcmpgt>
 800a560:	b150      	cbz	r0, 800a578 <acos+0x50>
 800a562:	f7ff fd57 	bl	800a014 <__errno>
 800a566:	ecbd 8b02 	vpop	{d8}
 800a56a:	2321      	movs	r3, #33	; 0x21
 800a56c:	6003      	str	r3, [r0, #0]
 800a56e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a572:	4806      	ldr	r0, [pc, #24]	; (800a58c <acos+0x64>)
 800a574:	f001 bab0 	b.w	800bad8 <nan>
 800a578:	eeb0 0a48 	vmov.f32	s0, s16
 800a57c:	eef0 0a68 	vmov.f32	s1, s17
 800a580:	ecbd 8b02 	vpop	{d8}
 800a584:	bd38      	pop	{r3, r4, r5, pc}
 800a586:	bf00      	nop
 800a588:	3ff00000 	.word	0x3ff00000
 800a58c:	0800bca8 	.word	0x0800bca8

0800a590 <sqrt>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	ed2d 8b02 	vpush	{d8}
 800a596:	ec55 4b10 	vmov	r4, r5, d0
 800a59a:	f000 fc91 	bl	800aec0 <__ieee754_sqrt>
 800a59e:	4622      	mov	r2, r4
 800a5a0:	462b      	mov	r3, r5
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	eeb0 8a40 	vmov.f32	s16, s0
 800a5aa:	eef0 8a60 	vmov.f32	s17, s1
 800a5ae:	f7f6 fa73 	bl	8000a98 <__aeabi_dcmpun>
 800a5b2:	b990      	cbnz	r0, 800a5da <sqrt+0x4a>
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	f7f6 fa44 	bl	8000a48 <__aeabi_dcmplt>
 800a5c0:	b158      	cbz	r0, 800a5da <sqrt+0x4a>
 800a5c2:	f7ff fd27 	bl	800a014 <__errno>
 800a5c6:	2321      	movs	r3, #33	; 0x21
 800a5c8:	6003      	str	r3, [r0, #0]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	f7f6 f8f1 	bl	80007b8 <__aeabi_ddiv>
 800a5d6:	ec41 0b18 	vmov	d8, r0, r1
 800a5da:	eeb0 0a48 	vmov.f32	s0, s16
 800a5de:	eef0 0a68 	vmov.f32	s1, s17
 800a5e2:	ecbd 8b02 	vpop	{d8}
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}

0800a5e8 <__ieee754_acos>:
 800a5e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	ec55 4b10 	vmov	r4, r5, d0
 800a5f0:	49b7      	ldr	r1, [pc, #732]	; (800a8d0 <__ieee754_acos+0x2e8>)
 800a5f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a5f6:	428b      	cmp	r3, r1
 800a5f8:	dd1b      	ble.n	800a632 <__ieee754_acos+0x4a>
 800a5fa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a5fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a602:	4323      	orrs	r3, r4
 800a604:	d106      	bne.n	800a614 <__ieee754_acos+0x2c>
 800a606:	2d00      	cmp	r5, #0
 800a608:	f300 8211 	bgt.w	800aa2e <__ieee754_acos+0x446>
 800a60c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800a868 <__ieee754_acos+0x280>
 800a610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	ee10 2a10 	vmov	r2, s0
 800a618:	462b      	mov	r3, r5
 800a61a:	ee10 0a10 	vmov	r0, s0
 800a61e:	4629      	mov	r1, r5
 800a620:	f7f5 fde8 	bl	80001f4 <__aeabi_dsub>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	f7f6 f8c6 	bl	80007b8 <__aeabi_ddiv>
 800a62c:	ec41 0b10 	vmov	d0, r0, r1
 800a630:	e7ee      	b.n	800a610 <__ieee754_acos+0x28>
 800a632:	49a8      	ldr	r1, [pc, #672]	; (800a8d4 <__ieee754_acos+0x2ec>)
 800a634:	428b      	cmp	r3, r1
 800a636:	f300 8087 	bgt.w	800a748 <__ieee754_acos+0x160>
 800a63a:	4aa7      	ldr	r2, [pc, #668]	; (800a8d8 <__ieee754_acos+0x2f0>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	f340 81f9 	ble.w	800aa34 <__ieee754_acos+0x44c>
 800a642:	ee10 2a10 	vmov	r2, s0
 800a646:	ee10 0a10 	vmov	r0, s0
 800a64a:	462b      	mov	r3, r5
 800a64c:	4629      	mov	r1, r5
 800a64e:	f7f5 ff89 	bl	8000564 <__aeabi_dmul>
 800a652:	a387      	add	r3, pc, #540	; (adr r3, 800a870 <__ieee754_acos+0x288>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	4606      	mov	r6, r0
 800a65a:	460f      	mov	r7, r1
 800a65c:	f7f5 ff82 	bl	8000564 <__aeabi_dmul>
 800a660:	a385      	add	r3, pc, #532	; (adr r3, 800a878 <__ieee754_acos+0x290>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f7f5 fdc7 	bl	80001f8 <__adddf3>
 800a66a:	4632      	mov	r2, r6
 800a66c:	463b      	mov	r3, r7
 800a66e:	f7f5 ff79 	bl	8000564 <__aeabi_dmul>
 800a672:	a383      	add	r3, pc, #524	; (adr r3, 800a880 <__ieee754_acos+0x298>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 fdbc 	bl	80001f4 <__aeabi_dsub>
 800a67c:	4632      	mov	r2, r6
 800a67e:	463b      	mov	r3, r7
 800a680:	f7f5 ff70 	bl	8000564 <__aeabi_dmul>
 800a684:	a380      	add	r3, pc, #512	; (adr r3, 800a888 <__ieee754_acos+0x2a0>)
 800a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68a:	f7f5 fdb5 	bl	80001f8 <__adddf3>
 800a68e:	4632      	mov	r2, r6
 800a690:	463b      	mov	r3, r7
 800a692:	f7f5 ff67 	bl	8000564 <__aeabi_dmul>
 800a696:	a37e      	add	r3, pc, #504	; (adr r3, 800a890 <__ieee754_acos+0x2a8>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	f7f5 fdaa 	bl	80001f4 <__aeabi_dsub>
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	463b      	mov	r3, r7
 800a6a4:	f7f5 ff5e 	bl	8000564 <__aeabi_dmul>
 800a6a8:	a37b      	add	r3, pc, #492	; (adr r3, 800a898 <__ieee754_acos+0x2b0>)
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	f7f5 fda3 	bl	80001f8 <__adddf3>
 800a6b2:	4632      	mov	r2, r6
 800a6b4:	463b      	mov	r3, r7
 800a6b6:	f7f5 ff55 	bl	8000564 <__aeabi_dmul>
 800a6ba:	a379      	add	r3, pc, #484	; (adr r3, 800a8a0 <__ieee754_acos+0x2b8>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	4680      	mov	r8, r0
 800a6c2:	4689      	mov	r9, r1
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	f7f5 ff4c 	bl	8000564 <__aeabi_dmul>
 800a6cc:	a376      	add	r3, pc, #472	; (adr r3, 800a8a8 <__ieee754_acos+0x2c0>)
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	f7f5 fd8f 	bl	80001f4 <__aeabi_dsub>
 800a6d6:	4632      	mov	r2, r6
 800a6d8:	463b      	mov	r3, r7
 800a6da:	f7f5 ff43 	bl	8000564 <__aeabi_dmul>
 800a6de:	a374      	add	r3, pc, #464	; (adr r3, 800a8b0 <__ieee754_acos+0x2c8>)
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f7f5 fd88 	bl	80001f8 <__adddf3>
 800a6e8:	4632      	mov	r2, r6
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	f7f5 ff3a 	bl	8000564 <__aeabi_dmul>
 800a6f0:	a371      	add	r3, pc, #452	; (adr r3, 800a8b8 <__ieee754_acos+0x2d0>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f5 fd7d 	bl	80001f4 <__aeabi_dsub>
 800a6fa:	4632      	mov	r2, r6
 800a6fc:	463b      	mov	r3, r7
 800a6fe:	f7f5 ff31 	bl	8000564 <__aeabi_dmul>
 800a702:	4b76      	ldr	r3, [pc, #472]	; (800a8dc <__ieee754_acos+0x2f4>)
 800a704:	2200      	movs	r2, #0
 800a706:	f7f5 fd77 	bl	80001f8 <__adddf3>
 800a70a:	4602      	mov	r2, r0
 800a70c:	460b      	mov	r3, r1
 800a70e:	4640      	mov	r0, r8
 800a710:	4649      	mov	r1, r9
 800a712:	f7f6 f851 	bl	80007b8 <__aeabi_ddiv>
 800a716:	4622      	mov	r2, r4
 800a718:	462b      	mov	r3, r5
 800a71a:	f7f5 ff23 	bl	8000564 <__aeabi_dmul>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	a167      	add	r1, pc, #412	; (adr r1, 800a8c0 <__ieee754_acos+0x2d8>)
 800a724:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a728:	f7f5 fd64 	bl	80001f4 <__aeabi_dsub>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	4620      	mov	r0, r4
 800a732:	4629      	mov	r1, r5
 800a734:	f7f5 fd5e 	bl	80001f4 <__aeabi_dsub>
 800a738:	4602      	mov	r2, r0
 800a73a:	460b      	mov	r3, r1
 800a73c:	a162      	add	r1, pc, #392	; (adr r1, 800a8c8 <__ieee754_acos+0x2e0>)
 800a73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a742:	f7f5 fd57 	bl	80001f4 <__aeabi_dsub>
 800a746:	e771      	b.n	800a62c <__ieee754_acos+0x44>
 800a748:	2d00      	cmp	r5, #0
 800a74a:	f280 80cb 	bge.w	800a8e4 <__ieee754_acos+0x2fc>
 800a74e:	ee10 0a10 	vmov	r0, s0
 800a752:	4b62      	ldr	r3, [pc, #392]	; (800a8dc <__ieee754_acos+0x2f4>)
 800a754:	2200      	movs	r2, #0
 800a756:	4629      	mov	r1, r5
 800a758:	f7f5 fd4e 	bl	80001f8 <__adddf3>
 800a75c:	4b60      	ldr	r3, [pc, #384]	; (800a8e0 <__ieee754_acos+0x2f8>)
 800a75e:	2200      	movs	r2, #0
 800a760:	f7f5 ff00 	bl	8000564 <__aeabi_dmul>
 800a764:	a342      	add	r3, pc, #264	; (adr r3, 800a870 <__ieee754_acos+0x288>)
 800a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76a:	4604      	mov	r4, r0
 800a76c:	460d      	mov	r5, r1
 800a76e:	f7f5 fef9 	bl	8000564 <__aeabi_dmul>
 800a772:	a341      	add	r3, pc, #260	; (adr r3, 800a878 <__ieee754_acos+0x290>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 fd3e 	bl	80001f8 <__adddf3>
 800a77c:	4622      	mov	r2, r4
 800a77e:	462b      	mov	r3, r5
 800a780:	f7f5 fef0 	bl	8000564 <__aeabi_dmul>
 800a784:	a33e      	add	r3, pc, #248	; (adr r3, 800a880 <__ieee754_acos+0x298>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd33 	bl	80001f4 <__aeabi_dsub>
 800a78e:	4622      	mov	r2, r4
 800a790:	462b      	mov	r3, r5
 800a792:	f7f5 fee7 	bl	8000564 <__aeabi_dmul>
 800a796:	a33c      	add	r3, pc, #240	; (adr r3, 800a888 <__ieee754_acos+0x2a0>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 fd2c 	bl	80001f8 <__adddf3>
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	462b      	mov	r3, r5
 800a7a4:	f7f5 fede 	bl	8000564 <__aeabi_dmul>
 800a7a8:	a339      	add	r3, pc, #228	; (adr r3, 800a890 <__ieee754_acos+0x2a8>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	f7f5 fd21 	bl	80001f4 <__aeabi_dsub>
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	f7f5 fed5 	bl	8000564 <__aeabi_dmul>
 800a7ba:	a337      	add	r3, pc, #220	; (adr r3, 800a898 <__ieee754_acos+0x2b0>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 fd1a 	bl	80001f8 <__adddf3>
 800a7c4:	4622      	mov	r2, r4
 800a7c6:	462b      	mov	r3, r5
 800a7c8:	f7f5 fecc 	bl	8000564 <__aeabi_dmul>
 800a7cc:	ec45 4b10 	vmov	d0, r4, r5
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4689      	mov	r9, r1
 800a7d4:	f000 fb74 	bl	800aec0 <__ieee754_sqrt>
 800a7d8:	a331      	add	r3, pc, #196	; (adr r3, 800a8a0 <__ieee754_acos+0x2b8>)
 800a7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	ec57 6b10 	vmov	r6, r7, d0
 800a7e6:	f7f5 febd 	bl	8000564 <__aeabi_dmul>
 800a7ea:	a32f      	add	r3, pc, #188	; (adr r3, 800a8a8 <__ieee754_acos+0x2c0>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 fd00 	bl	80001f4 <__aeabi_dsub>
 800a7f4:	4622      	mov	r2, r4
 800a7f6:	462b      	mov	r3, r5
 800a7f8:	f7f5 feb4 	bl	8000564 <__aeabi_dmul>
 800a7fc:	a32c      	add	r3, pc, #176	; (adr r3, 800a8b0 <__ieee754_acos+0x2c8>)
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	f7f5 fcf9 	bl	80001f8 <__adddf3>
 800a806:	4622      	mov	r2, r4
 800a808:	462b      	mov	r3, r5
 800a80a:	f7f5 feab 	bl	8000564 <__aeabi_dmul>
 800a80e:	a32a      	add	r3, pc, #168	; (adr r3, 800a8b8 <__ieee754_acos+0x2d0>)
 800a810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a814:	f7f5 fcee 	bl	80001f4 <__aeabi_dsub>
 800a818:	4622      	mov	r2, r4
 800a81a:	462b      	mov	r3, r5
 800a81c:	f7f5 fea2 	bl	8000564 <__aeabi_dmul>
 800a820:	4b2e      	ldr	r3, [pc, #184]	; (800a8dc <__ieee754_acos+0x2f4>)
 800a822:	2200      	movs	r2, #0
 800a824:	f7f5 fce8 	bl	80001f8 <__adddf3>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f5 ffc2 	bl	80007b8 <__aeabi_ddiv>
 800a834:	4632      	mov	r2, r6
 800a836:	463b      	mov	r3, r7
 800a838:	f7f5 fe94 	bl	8000564 <__aeabi_dmul>
 800a83c:	a320      	add	r3, pc, #128	; (adr r3, 800a8c0 <__ieee754_acos+0x2d8>)
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f5 fcd7 	bl	80001f4 <__aeabi_dsub>
 800a846:	4632      	mov	r2, r6
 800a848:	463b      	mov	r3, r7
 800a84a:	f7f5 fcd5 	bl	80001f8 <__adddf3>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	f7f5 fcd1 	bl	80001f8 <__adddf3>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	a103      	add	r1, pc, #12	; (adr r1, 800a868 <__ieee754_acos+0x280>)
 800a85c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a860:	e76f      	b.n	800a742 <__ieee754_acos+0x15a>
 800a862:	bf00      	nop
 800a864:	f3af 8000 	nop.w
 800a868:	54442d18 	.word	0x54442d18
 800a86c:	400921fb 	.word	0x400921fb
 800a870:	0dfdf709 	.word	0x0dfdf709
 800a874:	3f023de1 	.word	0x3f023de1
 800a878:	7501b288 	.word	0x7501b288
 800a87c:	3f49efe0 	.word	0x3f49efe0
 800a880:	b5688f3b 	.word	0xb5688f3b
 800a884:	3fa48228 	.word	0x3fa48228
 800a888:	0e884455 	.word	0x0e884455
 800a88c:	3fc9c155 	.word	0x3fc9c155
 800a890:	03eb6f7d 	.word	0x03eb6f7d
 800a894:	3fd4d612 	.word	0x3fd4d612
 800a898:	55555555 	.word	0x55555555
 800a89c:	3fc55555 	.word	0x3fc55555
 800a8a0:	b12e9282 	.word	0xb12e9282
 800a8a4:	3fb3b8c5 	.word	0x3fb3b8c5
 800a8a8:	1b8d0159 	.word	0x1b8d0159
 800a8ac:	3fe6066c 	.word	0x3fe6066c
 800a8b0:	9c598ac8 	.word	0x9c598ac8
 800a8b4:	40002ae5 	.word	0x40002ae5
 800a8b8:	1c8a2d4b 	.word	0x1c8a2d4b
 800a8bc:	40033a27 	.word	0x40033a27
 800a8c0:	33145c07 	.word	0x33145c07
 800a8c4:	3c91a626 	.word	0x3c91a626
 800a8c8:	54442d18 	.word	0x54442d18
 800a8cc:	3ff921fb 	.word	0x3ff921fb
 800a8d0:	3fefffff 	.word	0x3fefffff
 800a8d4:	3fdfffff 	.word	0x3fdfffff
 800a8d8:	3c600000 	.word	0x3c600000
 800a8dc:	3ff00000 	.word	0x3ff00000
 800a8e0:	3fe00000 	.word	0x3fe00000
 800a8e4:	ee10 2a10 	vmov	r2, s0
 800a8e8:	462b      	mov	r3, r5
 800a8ea:	496d      	ldr	r1, [pc, #436]	; (800aaa0 <__ieee754_acos+0x4b8>)
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	f7f5 fc81 	bl	80001f4 <__aeabi_dsub>
 800a8f2:	4b6c      	ldr	r3, [pc, #432]	; (800aaa4 <__ieee754_acos+0x4bc>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f7f5 fe35 	bl	8000564 <__aeabi_dmul>
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	460d      	mov	r5, r1
 800a8fe:	ec45 4b10 	vmov	d0, r4, r5
 800a902:	f000 fadd 	bl	800aec0 <__ieee754_sqrt>
 800a906:	a34e      	add	r3, pc, #312	; (adr r3, 800aa40 <__ieee754_acos+0x458>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	4620      	mov	r0, r4
 800a90e:	4629      	mov	r1, r5
 800a910:	ec59 8b10 	vmov	r8, r9, d0
 800a914:	f7f5 fe26 	bl	8000564 <__aeabi_dmul>
 800a918:	a34b      	add	r3, pc, #300	; (adr r3, 800aa48 <__ieee754_acos+0x460>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fc6b 	bl	80001f8 <__adddf3>
 800a922:	4622      	mov	r2, r4
 800a924:	462b      	mov	r3, r5
 800a926:	f7f5 fe1d 	bl	8000564 <__aeabi_dmul>
 800a92a:	a349      	add	r3, pc, #292	; (adr r3, 800aa50 <__ieee754_acos+0x468>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 fc60 	bl	80001f4 <__aeabi_dsub>
 800a934:	4622      	mov	r2, r4
 800a936:	462b      	mov	r3, r5
 800a938:	f7f5 fe14 	bl	8000564 <__aeabi_dmul>
 800a93c:	a346      	add	r3, pc, #280	; (adr r3, 800aa58 <__ieee754_acos+0x470>)
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f7f5 fc59 	bl	80001f8 <__adddf3>
 800a946:	4622      	mov	r2, r4
 800a948:	462b      	mov	r3, r5
 800a94a:	f7f5 fe0b 	bl	8000564 <__aeabi_dmul>
 800a94e:	a344      	add	r3, pc, #272	; (adr r3, 800aa60 <__ieee754_acos+0x478>)
 800a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a954:	f7f5 fc4e 	bl	80001f4 <__aeabi_dsub>
 800a958:	4622      	mov	r2, r4
 800a95a:	462b      	mov	r3, r5
 800a95c:	f7f5 fe02 	bl	8000564 <__aeabi_dmul>
 800a960:	a341      	add	r3, pc, #260	; (adr r3, 800aa68 <__ieee754_acos+0x480>)
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	f7f5 fc47 	bl	80001f8 <__adddf3>
 800a96a:	4622      	mov	r2, r4
 800a96c:	462b      	mov	r3, r5
 800a96e:	f7f5 fdf9 	bl	8000564 <__aeabi_dmul>
 800a972:	a33f      	add	r3, pc, #252	; (adr r3, 800aa70 <__ieee754_acos+0x488>)
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	4682      	mov	sl, r0
 800a97a:	468b      	mov	fp, r1
 800a97c:	4620      	mov	r0, r4
 800a97e:	4629      	mov	r1, r5
 800a980:	f7f5 fdf0 	bl	8000564 <__aeabi_dmul>
 800a984:	a33c      	add	r3, pc, #240	; (adr r3, 800aa78 <__ieee754_acos+0x490>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	f7f5 fc33 	bl	80001f4 <__aeabi_dsub>
 800a98e:	4622      	mov	r2, r4
 800a990:	462b      	mov	r3, r5
 800a992:	f7f5 fde7 	bl	8000564 <__aeabi_dmul>
 800a996:	a33a      	add	r3, pc, #232	; (adr r3, 800aa80 <__ieee754_acos+0x498>)
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f7f5 fc2c 	bl	80001f8 <__adddf3>
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	462b      	mov	r3, r5
 800a9a4:	f7f5 fdde 	bl	8000564 <__aeabi_dmul>
 800a9a8:	a337      	add	r3, pc, #220	; (adr r3, 800aa88 <__ieee754_acos+0x4a0>)
 800a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ae:	f7f5 fc21 	bl	80001f4 <__aeabi_dsub>
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	f7f5 fdd5 	bl	8000564 <__aeabi_dmul>
 800a9ba:	4b39      	ldr	r3, [pc, #228]	; (800aaa0 <__ieee754_acos+0x4b8>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f7f5 fc1b 	bl	80001f8 <__adddf3>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4650      	mov	r0, sl
 800a9c8:	4659      	mov	r1, fp
 800a9ca:	f7f5 fef5 	bl	80007b8 <__aeabi_ddiv>
 800a9ce:	4642      	mov	r2, r8
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	f7f5 fdc7 	bl	8000564 <__aeabi_dmul>
 800a9d6:	2600      	movs	r6, #0
 800a9d8:	4682      	mov	sl, r0
 800a9da:	468b      	mov	fp, r1
 800a9dc:	4632      	mov	r2, r6
 800a9de:	464b      	mov	r3, r9
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	f7f5 fdbe 	bl	8000564 <__aeabi_dmul>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f5 fc00 	bl	80001f4 <__aeabi_dsub>
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	460d      	mov	r5, r1
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	4649      	mov	r1, r9
 800aa00:	f7f5 fbfa 	bl	80001f8 <__adddf3>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	4620      	mov	r0, r4
 800aa0a:	4629      	mov	r1, r5
 800aa0c:	f7f5 fed4 	bl	80007b8 <__aeabi_ddiv>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	4650      	mov	r0, sl
 800aa16:	4659      	mov	r1, fp
 800aa18:	f7f5 fbee 	bl	80001f8 <__adddf3>
 800aa1c:	4632      	mov	r2, r6
 800aa1e:	464b      	mov	r3, r9
 800aa20:	f7f5 fbea 	bl	80001f8 <__adddf3>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	f7f5 fbe6 	bl	80001f8 <__adddf3>
 800aa2c:	e5fe      	b.n	800a62c <__ieee754_acos+0x44>
 800aa2e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800aa90 <__ieee754_acos+0x4a8>
 800aa32:	e5ed      	b.n	800a610 <__ieee754_acos+0x28>
 800aa34:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800aa98 <__ieee754_acos+0x4b0>
 800aa38:	e5ea      	b.n	800a610 <__ieee754_acos+0x28>
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w
 800aa40:	0dfdf709 	.word	0x0dfdf709
 800aa44:	3f023de1 	.word	0x3f023de1
 800aa48:	7501b288 	.word	0x7501b288
 800aa4c:	3f49efe0 	.word	0x3f49efe0
 800aa50:	b5688f3b 	.word	0xb5688f3b
 800aa54:	3fa48228 	.word	0x3fa48228
 800aa58:	0e884455 	.word	0x0e884455
 800aa5c:	3fc9c155 	.word	0x3fc9c155
 800aa60:	03eb6f7d 	.word	0x03eb6f7d
 800aa64:	3fd4d612 	.word	0x3fd4d612
 800aa68:	55555555 	.word	0x55555555
 800aa6c:	3fc55555 	.word	0x3fc55555
 800aa70:	b12e9282 	.word	0xb12e9282
 800aa74:	3fb3b8c5 	.word	0x3fb3b8c5
 800aa78:	1b8d0159 	.word	0x1b8d0159
 800aa7c:	3fe6066c 	.word	0x3fe6066c
 800aa80:	9c598ac8 	.word	0x9c598ac8
 800aa84:	40002ae5 	.word	0x40002ae5
 800aa88:	1c8a2d4b 	.word	0x1c8a2d4b
 800aa8c:	40033a27 	.word	0x40033a27
	...
 800aa98:	54442d18 	.word	0x54442d18
 800aa9c:	3ff921fb 	.word	0x3ff921fb
 800aaa0:	3ff00000 	.word	0x3ff00000
 800aaa4:	3fe00000 	.word	0x3fe00000

0800aaa8 <__ieee754_rem_pio2>:
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	ed2d 8b02 	vpush	{d8}
 800aab0:	ec55 4b10 	vmov	r4, r5, d0
 800aab4:	4bca      	ldr	r3, [pc, #808]	; (800ade0 <__ieee754_rem_pio2+0x338>)
 800aab6:	b08b      	sub	sp, #44	; 0x2c
 800aab8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800aabc:	4598      	cmp	r8, r3
 800aabe:	4682      	mov	sl, r0
 800aac0:	9502      	str	r5, [sp, #8]
 800aac2:	dc08      	bgt.n	800aad6 <__ieee754_rem_pio2+0x2e>
 800aac4:	2200      	movs	r2, #0
 800aac6:	2300      	movs	r3, #0
 800aac8:	ed80 0b00 	vstr	d0, [r0]
 800aacc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aad0:	f04f 0b00 	mov.w	fp, #0
 800aad4:	e028      	b.n	800ab28 <__ieee754_rem_pio2+0x80>
 800aad6:	4bc3      	ldr	r3, [pc, #780]	; (800ade4 <__ieee754_rem_pio2+0x33c>)
 800aad8:	4598      	cmp	r8, r3
 800aada:	dc78      	bgt.n	800abce <__ieee754_rem_pio2+0x126>
 800aadc:	9b02      	ldr	r3, [sp, #8]
 800aade:	4ec2      	ldr	r6, [pc, #776]	; (800ade8 <__ieee754_rem_pio2+0x340>)
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	ee10 0a10 	vmov	r0, s0
 800aae6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ada8 <__ieee754_rem_pio2+0x300>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	4629      	mov	r1, r5
 800aaee:	dd39      	ble.n	800ab64 <__ieee754_rem_pio2+0xbc>
 800aaf0:	f7f5 fb80 	bl	80001f4 <__aeabi_dsub>
 800aaf4:	45b0      	cmp	r8, r6
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	460d      	mov	r5, r1
 800aafa:	d01b      	beq.n	800ab34 <__ieee754_rem_pio2+0x8c>
 800aafc:	a3ac      	add	r3, pc, #688	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x308>)
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	f7f5 fb77 	bl	80001f4 <__aeabi_dsub>
 800ab06:	4602      	mov	r2, r0
 800ab08:	460b      	mov	r3, r1
 800ab0a:	e9ca 2300 	strd	r2, r3, [sl]
 800ab0e:	4620      	mov	r0, r4
 800ab10:	4629      	mov	r1, r5
 800ab12:	f7f5 fb6f 	bl	80001f4 <__aeabi_dsub>
 800ab16:	a3a6      	add	r3, pc, #664	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x308>)
 800ab18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1c:	f7f5 fb6a 	bl	80001f4 <__aeabi_dsub>
 800ab20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab24:	f04f 0b01 	mov.w	fp, #1
 800ab28:	4658      	mov	r0, fp
 800ab2a:	b00b      	add	sp, #44	; 0x2c
 800ab2c:	ecbd 8b02 	vpop	{d8}
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab34:	a3a0      	add	r3, pc, #640	; (adr r3, 800adb8 <__ieee754_rem_pio2+0x310>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fb5b 	bl	80001f4 <__aeabi_dsub>
 800ab3e:	a3a0      	add	r3, pc, #640	; (adr r3, 800adc0 <__ieee754_rem_pio2+0x318>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	4604      	mov	r4, r0
 800ab46:	460d      	mov	r5, r1
 800ab48:	f7f5 fb54 	bl	80001f4 <__aeabi_dsub>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	e9ca 2300 	strd	r2, r3, [sl]
 800ab54:	4620      	mov	r0, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	f7f5 fb4c 	bl	80001f4 <__aeabi_dsub>
 800ab5c:	a398      	add	r3, pc, #608	; (adr r3, 800adc0 <__ieee754_rem_pio2+0x318>)
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	e7db      	b.n	800ab1c <__ieee754_rem_pio2+0x74>
 800ab64:	f7f5 fb48 	bl	80001f8 <__adddf3>
 800ab68:	45b0      	cmp	r8, r6
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	d016      	beq.n	800ab9e <__ieee754_rem_pio2+0xf6>
 800ab70:	a38f      	add	r3, pc, #572	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x308>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f7f5 fb3f 	bl	80001f8 <__adddf3>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	e9ca 2300 	strd	r2, r3, [sl]
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	f7f5 fb35 	bl	80001f4 <__aeabi_dsub>
 800ab8a:	a389      	add	r3, pc, #548	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x308>)
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f7f5 fb32 	bl	80001f8 <__adddf3>
 800ab94:	f04f 3bff 	mov.w	fp, #4294967295
 800ab98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab9c:	e7c4      	b.n	800ab28 <__ieee754_rem_pio2+0x80>
 800ab9e:	a386      	add	r3, pc, #536	; (adr r3, 800adb8 <__ieee754_rem_pio2+0x310>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	f7f5 fb28 	bl	80001f8 <__adddf3>
 800aba8:	a385      	add	r3, pc, #532	; (adr r3, 800adc0 <__ieee754_rem_pio2+0x318>)
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	4604      	mov	r4, r0
 800abb0:	460d      	mov	r5, r1
 800abb2:	f7f5 fb21 	bl	80001f8 <__adddf3>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	e9ca 2300 	strd	r2, r3, [sl]
 800abbe:	4620      	mov	r0, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	f7f5 fb17 	bl	80001f4 <__aeabi_dsub>
 800abc6:	a37e      	add	r3, pc, #504	; (adr r3, 800adc0 <__ieee754_rem_pio2+0x318>)
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	e7e0      	b.n	800ab90 <__ieee754_rem_pio2+0xe8>
 800abce:	4b87      	ldr	r3, [pc, #540]	; (800adec <__ieee754_rem_pio2+0x344>)
 800abd0:	4598      	cmp	r8, r3
 800abd2:	f300 80d9 	bgt.w	800ad88 <__ieee754_rem_pio2+0x2e0>
 800abd6:	f7ff fc43 	bl	800a460 <fabs>
 800abda:	ec55 4b10 	vmov	r4, r5, d0
 800abde:	ee10 0a10 	vmov	r0, s0
 800abe2:	a379      	add	r3, pc, #484	; (adr r3, 800adc8 <__ieee754_rem_pio2+0x320>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	4629      	mov	r1, r5
 800abea:	f7f5 fcbb 	bl	8000564 <__aeabi_dmul>
 800abee:	4b80      	ldr	r3, [pc, #512]	; (800adf0 <__ieee754_rem_pio2+0x348>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	f7f5 fb01 	bl	80001f8 <__adddf3>
 800abf6:	f7f5 ff65 	bl	8000ac4 <__aeabi_d2iz>
 800abfa:	4683      	mov	fp, r0
 800abfc:	f7f5 fc48 	bl	8000490 <__aeabi_i2d>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	ec43 2b18 	vmov	d8, r2, r3
 800ac08:	a367      	add	r3, pc, #412	; (adr r3, 800ada8 <__ieee754_rem_pio2+0x300>)
 800ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0e:	f7f5 fca9 	bl	8000564 <__aeabi_dmul>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	4620      	mov	r0, r4
 800ac18:	4629      	mov	r1, r5
 800ac1a:	f7f5 faeb 	bl	80001f4 <__aeabi_dsub>
 800ac1e:	a364      	add	r3, pc, #400	; (adr r3, 800adb0 <__ieee754_rem_pio2+0x308>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	4606      	mov	r6, r0
 800ac26:	460f      	mov	r7, r1
 800ac28:	ec51 0b18 	vmov	r0, r1, d8
 800ac2c:	f7f5 fc9a 	bl	8000564 <__aeabi_dmul>
 800ac30:	f1bb 0f1f 	cmp.w	fp, #31
 800ac34:	4604      	mov	r4, r0
 800ac36:	460d      	mov	r5, r1
 800ac38:	dc0d      	bgt.n	800ac56 <__ieee754_rem_pio2+0x1ae>
 800ac3a:	4b6e      	ldr	r3, [pc, #440]	; (800adf4 <__ieee754_rem_pio2+0x34c>)
 800ac3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ac40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac44:	4543      	cmp	r3, r8
 800ac46:	d006      	beq.n	800ac56 <__ieee754_rem_pio2+0x1ae>
 800ac48:	4622      	mov	r2, r4
 800ac4a:	462b      	mov	r3, r5
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	4639      	mov	r1, r7
 800ac50:	f7f5 fad0 	bl	80001f4 <__aeabi_dsub>
 800ac54:	e00f      	b.n	800ac76 <__ieee754_rem_pio2+0x1ce>
 800ac56:	462b      	mov	r3, r5
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	f7f5 fac9 	bl	80001f4 <__aeabi_dsub>
 800ac62:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ac66:	9303      	str	r3, [sp, #12]
 800ac68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ac70:	f1b8 0f10 	cmp.w	r8, #16
 800ac74:	dc02      	bgt.n	800ac7c <__ieee754_rem_pio2+0x1d4>
 800ac76:	e9ca 0100 	strd	r0, r1, [sl]
 800ac7a:	e039      	b.n	800acf0 <__ieee754_rem_pio2+0x248>
 800ac7c:	a34e      	add	r3, pc, #312	; (adr r3, 800adb8 <__ieee754_rem_pio2+0x310>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	ec51 0b18 	vmov	r0, r1, d8
 800ac86:	f7f5 fc6d 	bl	8000564 <__aeabi_dmul>
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	460d      	mov	r5, r1
 800ac8e:	4602      	mov	r2, r0
 800ac90:	460b      	mov	r3, r1
 800ac92:	4630      	mov	r0, r6
 800ac94:	4639      	mov	r1, r7
 800ac96:	f7f5 faad 	bl	80001f4 <__aeabi_dsub>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4680      	mov	r8, r0
 800aca0:	4689      	mov	r9, r1
 800aca2:	4630      	mov	r0, r6
 800aca4:	4639      	mov	r1, r7
 800aca6:	f7f5 faa5 	bl	80001f4 <__aeabi_dsub>
 800acaa:	4622      	mov	r2, r4
 800acac:	462b      	mov	r3, r5
 800acae:	f7f5 faa1 	bl	80001f4 <__aeabi_dsub>
 800acb2:	a343      	add	r3, pc, #268	; (adr r3, 800adc0 <__ieee754_rem_pio2+0x318>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	4604      	mov	r4, r0
 800acba:	460d      	mov	r5, r1
 800acbc:	ec51 0b18 	vmov	r0, r1, d8
 800acc0:	f7f5 fc50 	bl	8000564 <__aeabi_dmul>
 800acc4:	4622      	mov	r2, r4
 800acc6:	462b      	mov	r3, r5
 800acc8:	f7f5 fa94 	bl	80001f4 <__aeabi_dsub>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4604      	mov	r4, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	4640      	mov	r0, r8
 800acd6:	4649      	mov	r1, r9
 800acd8:	f7f5 fa8c 	bl	80001f4 <__aeabi_dsub>
 800acdc:	9a03      	ldr	r2, [sp, #12]
 800acde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	2b31      	cmp	r3, #49	; 0x31
 800ace6:	dc24      	bgt.n	800ad32 <__ieee754_rem_pio2+0x28a>
 800ace8:	e9ca 0100 	strd	r0, r1, [sl]
 800acec:	4646      	mov	r6, r8
 800acee:	464f      	mov	r7, r9
 800acf0:	e9da 8900 	ldrd	r8, r9, [sl]
 800acf4:	4630      	mov	r0, r6
 800acf6:	4642      	mov	r2, r8
 800acf8:	464b      	mov	r3, r9
 800acfa:	4639      	mov	r1, r7
 800acfc:	f7f5 fa7a 	bl	80001f4 <__aeabi_dsub>
 800ad00:	462b      	mov	r3, r5
 800ad02:	4622      	mov	r2, r4
 800ad04:	f7f5 fa76 	bl	80001f4 <__aeabi_dsub>
 800ad08:	9b02      	ldr	r3, [sp, #8]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad10:	f6bf af0a 	bge.w	800ab28 <__ieee754_rem_pio2+0x80>
 800ad14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ad18:	f8ca 3004 	str.w	r3, [sl, #4]
 800ad1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad20:	f8ca 8000 	str.w	r8, [sl]
 800ad24:	f8ca 0008 	str.w	r0, [sl, #8]
 800ad28:	f8ca 300c 	str.w	r3, [sl, #12]
 800ad2c:	f1cb 0b00 	rsb	fp, fp, #0
 800ad30:	e6fa      	b.n	800ab28 <__ieee754_rem_pio2+0x80>
 800ad32:	a327      	add	r3, pc, #156	; (adr r3, 800add0 <__ieee754_rem_pio2+0x328>)
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	ec51 0b18 	vmov	r0, r1, d8
 800ad3c:	f7f5 fc12 	bl	8000564 <__aeabi_dmul>
 800ad40:	4604      	mov	r4, r0
 800ad42:	460d      	mov	r5, r1
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4640      	mov	r0, r8
 800ad4a:	4649      	mov	r1, r9
 800ad4c:	f7f5 fa52 	bl	80001f4 <__aeabi_dsub>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	4606      	mov	r6, r0
 800ad56:	460f      	mov	r7, r1
 800ad58:	4640      	mov	r0, r8
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	f7f5 fa4a 	bl	80001f4 <__aeabi_dsub>
 800ad60:	4622      	mov	r2, r4
 800ad62:	462b      	mov	r3, r5
 800ad64:	f7f5 fa46 	bl	80001f4 <__aeabi_dsub>
 800ad68:	a31b      	add	r3, pc, #108	; (adr r3, 800add8 <__ieee754_rem_pio2+0x330>)
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	4604      	mov	r4, r0
 800ad70:	460d      	mov	r5, r1
 800ad72:	ec51 0b18 	vmov	r0, r1, d8
 800ad76:	f7f5 fbf5 	bl	8000564 <__aeabi_dmul>
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	462b      	mov	r3, r5
 800ad7e:	f7f5 fa39 	bl	80001f4 <__aeabi_dsub>
 800ad82:	4604      	mov	r4, r0
 800ad84:	460d      	mov	r5, r1
 800ad86:	e75f      	b.n	800ac48 <__ieee754_rem_pio2+0x1a0>
 800ad88:	4b1b      	ldr	r3, [pc, #108]	; (800adf8 <__ieee754_rem_pio2+0x350>)
 800ad8a:	4598      	cmp	r8, r3
 800ad8c:	dd36      	ble.n	800adfc <__ieee754_rem_pio2+0x354>
 800ad8e:	ee10 2a10 	vmov	r2, s0
 800ad92:	462b      	mov	r3, r5
 800ad94:	4620      	mov	r0, r4
 800ad96:	4629      	mov	r1, r5
 800ad98:	f7f5 fa2c 	bl	80001f4 <__aeabi_dsub>
 800ad9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ada0:	e9ca 0100 	strd	r0, r1, [sl]
 800ada4:	e694      	b.n	800aad0 <__ieee754_rem_pio2+0x28>
 800ada6:	bf00      	nop
 800ada8:	54400000 	.word	0x54400000
 800adac:	3ff921fb 	.word	0x3ff921fb
 800adb0:	1a626331 	.word	0x1a626331
 800adb4:	3dd0b461 	.word	0x3dd0b461
 800adb8:	1a600000 	.word	0x1a600000
 800adbc:	3dd0b461 	.word	0x3dd0b461
 800adc0:	2e037073 	.word	0x2e037073
 800adc4:	3ba3198a 	.word	0x3ba3198a
 800adc8:	6dc9c883 	.word	0x6dc9c883
 800adcc:	3fe45f30 	.word	0x3fe45f30
 800add0:	2e000000 	.word	0x2e000000
 800add4:	3ba3198a 	.word	0x3ba3198a
 800add8:	252049c1 	.word	0x252049c1
 800addc:	397b839a 	.word	0x397b839a
 800ade0:	3fe921fb 	.word	0x3fe921fb
 800ade4:	4002d97b 	.word	0x4002d97b
 800ade8:	3ff921fb 	.word	0x3ff921fb
 800adec:	413921fb 	.word	0x413921fb
 800adf0:	3fe00000 	.word	0x3fe00000
 800adf4:	0800bcac 	.word	0x0800bcac
 800adf8:	7fefffff 	.word	0x7fefffff
 800adfc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ae00:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ae04:	ee10 0a10 	vmov	r0, s0
 800ae08:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ae0c:	ee10 6a10 	vmov	r6, s0
 800ae10:	460f      	mov	r7, r1
 800ae12:	f7f5 fe57 	bl	8000ac4 <__aeabi_d2iz>
 800ae16:	f7f5 fb3b 	bl	8000490 <__aeabi_i2d>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	4630      	mov	r0, r6
 800ae20:	4639      	mov	r1, r7
 800ae22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae26:	f7f5 f9e5 	bl	80001f4 <__aeabi_dsub>
 800ae2a:	4b23      	ldr	r3, [pc, #140]	; (800aeb8 <__ieee754_rem_pio2+0x410>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f7f5 fb99 	bl	8000564 <__aeabi_dmul>
 800ae32:	460f      	mov	r7, r1
 800ae34:	4606      	mov	r6, r0
 800ae36:	f7f5 fe45 	bl	8000ac4 <__aeabi_d2iz>
 800ae3a:	f7f5 fb29 	bl	8000490 <__aeabi_i2d>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	460b      	mov	r3, r1
 800ae42:	4630      	mov	r0, r6
 800ae44:	4639      	mov	r1, r7
 800ae46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae4a:	f7f5 f9d3 	bl	80001f4 <__aeabi_dsub>
 800ae4e:	4b1a      	ldr	r3, [pc, #104]	; (800aeb8 <__ieee754_rem_pio2+0x410>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	f7f5 fb87 	bl	8000564 <__aeabi_dmul>
 800ae56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae5a:	ad04      	add	r5, sp, #16
 800ae5c:	f04f 0803 	mov.w	r8, #3
 800ae60:	46a9      	mov	r9, r5
 800ae62:	2600      	movs	r6, #0
 800ae64:	2700      	movs	r7, #0
 800ae66:	4632      	mov	r2, r6
 800ae68:	463b      	mov	r3, r7
 800ae6a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ae6e:	46c3      	mov	fp, r8
 800ae70:	3d08      	subs	r5, #8
 800ae72:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae76:	f7f5 fddd 	bl	8000a34 <__aeabi_dcmpeq>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d1f3      	bne.n	800ae66 <__ieee754_rem_pio2+0x3be>
 800ae7e:	4b0f      	ldr	r3, [pc, #60]	; (800aebc <__ieee754_rem_pio2+0x414>)
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	2302      	movs	r3, #2
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	4622      	mov	r2, r4
 800ae88:	465b      	mov	r3, fp
 800ae8a:	4651      	mov	r1, sl
 800ae8c:	4648      	mov	r0, r9
 800ae8e:	f000 f993 	bl	800b1b8 <__kernel_rem_pio2>
 800ae92:	9b02      	ldr	r3, [sp, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	4683      	mov	fp, r0
 800ae98:	f6bf ae46 	bge.w	800ab28 <__ieee754_rem_pio2+0x80>
 800ae9c:	e9da 2100 	ldrd	r2, r1, [sl]
 800aea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aea4:	e9ca 2300 	strd	r2, r3, [sl]
 800aea8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800aeac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aeb0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800aeb4:	e73a      	b.n	800ad2c <__ieee754_rem_pio2+0x284>
 800aeb6:	bf00      	nop
 800aeb8:	41700000 	.word	0x41700000
 800aebc:	0800bd2c 	.word	0x0800bd2c

0800aec0 <__ieee754_sqrt>:
 800aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec4:	ec55 4b10 	vmov	r4, r5, d0
 800aec8:	4e55      	ldr	r6, [pc, #340]	; (800b020 <__ieee754_sqrt+0x160>)
 800aeca:	43ae      	bics	r6, r5
 800aecc:	ee10 0a10 	vmov	r0, s0
 800aed0:	ee10 3a10 	vmov	r3, s0
 800aed4:	462a      	mov	r2, r5
 800aed6:	4629      	mov	r1, r5
 800aed8:	d110      	bne.n	800aefc <__ieee754_sqrt+0x3c>
 800aeda:	ee10 2a10 	vmov	r2, s0
 800aede:	462b      	mov	r3, r5
 800aee0:	f7f5 fb40 	bl	8000564 <__aeabi_dmul>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	4620      	mov	r0, r4
 800aeea:	4629      	mov	r1, r5
 800aeec:	f7f5 f984 	bl	80001f8 <__adddf3>
 800aef0:	4604      	mov	r4, r0
 800aef2:	460d      	mov	r5, r1
 800aef4:	ec45 4b10 	vmov	d0, r4, r5
 800aef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aefc:	2d00      	cmp	r5, #0
 800aefe:	dc10      	bgt.n	800af22 <__ieee754_sqrt+0x62>
 800af00:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800af04:	4330      	orrs	r0, r6
 800af06:	d0f5      	beq.n	800aef4 <__ieee754_sqrt+0x34>
 800af08:	b15d      	cbz	r5, 800af22 <__ieee754_sqrt+0x62>
 800af0a:	ee10 2a10 	vmov	r2, s0
 800af0e:	462b      	mov	r3, r5
 800af10:	ee10 0a10 	vmov	r0, s0
 800af14:	f7f5 f96e 	bl	80001f4 <__aeabi_dsub>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	f7f5 fc4c 	bl	80007b8 <__aeabi_ddiv>
 800af20:	e7e6      	b.n	800aef0 <__ieee754_sqrt+0x30>
 800af22:	1512      	asrs	r2, r2, #20
 800af24:	d074      	beq.n	800b010 <__ieee754_sqrt+0x150>
 800af26:	07d4      	lsls	r4, r2, #31
 800af28:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800af2c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800af30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800af34:	bf5e      	ittt	pl
 800af36:	0fda      	lsrpl	r2, r3, #31
 800af38:	005b      	lslpl	r3, r3, #1
 800af3a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800af3e:	2400      	movs	r4, #0
 800af40:	0fda      	lsrs	r2, r3, #31
 800af42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800af46:	107f      	asrs	r7, r7, #1
 800af48:	005b      	lsls	r3, r3, #1
 800af4a:	2516      	movs	r5, #22
 800af4c:	4620      	mov	r0, r4
 800af4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800af52:	1886      	adds	r6, r0, r2
 800af54:	428e      	cmp	r6, r1
 800af56:	bfde      	ittt	le
 800af58:	1b89      	suble	r1, r1, r6
 800af5a:	18b0      	addle	r0, r6, r2
 800af5c:	18a4      	addle	r4, r4, r2
 800af5e:	0049      	lsls	r1, r1, #1
 800af60:	3d01      	subs	r5, #1
 800af62:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800af66:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800af6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af6e:	d1f0      	bne.n	800af52 <__ieee754_sqrt+0x92>
 800af70:	462a      	mov	r2, r5
 800af72:	f04f 0e20 	mov.w	lr, #32
 800af76:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800af7a:	4281      	cmp	r1, r0
 800af7c:	eb06 0c05 	add.w	ip, r6, r5
 800af80:	dc02      	bgt.n	800af88 <__ieee754_sqrt+0xc8>
 800af82:	d113      	bne.n	800afac <__ieee754_sqrt+0xec>
 800af84:	459c      	cmp	ip, r3
 800af86:	d811      	bhi.n	800afac <__ieee754_sqrt+0xec>
 800af88:	f1bc 0f00 	cmp.w	ip, #0
 800af8c:	eb0c 0506 	add.w	r5, ip, r6
 800af90:	da43      	bge.n	800b01a <__ieee754_sqrt+0x15a>
 800af92:	2d00      	cmp	r5, #0
 800af94:	db41      	blt.n	800b01a <__ieee754_sqrt+0x15a>
 800af96:	f100 0801 	add.w	r8, r0, #1
 800af9a:	1a09      	subs	r1, r1, r0
 800af9c:	459c      	cmp	ip, r3
 800af9e:	bf88      	it	hi
 800afa0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800afa4:	eba3 030c 	sub.w	r3, r3, ip
 800afa8:	4432      	add	r2, r6
 800afaa:	4640      	mov	r0, r8
 800afac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800afb0:	f1be 0e01 	subs.w	lr, lr, #1
 800afb4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800afb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800afbc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800afc0:	d1db      	bne.n	800af7a <__ieee754_sqrt+0xba>
 800afc2:	430b      	orrs	r3, r1
 800afc4:	d006      	beq.n	800afd4 <__ieee754_sqrt+0x114>
 800afc6:	1c50      	adds	r0, r2, #1
 800afc8:	bf13      	iteet	ne
 800afca:	3201      	addne	r2, #1
 800afcc:	3401      	addeq	r4, #1
 800afce:	4672      	moveq	r2, lr
 800afd0:	f022 0201 	bicne.w	r2, r2, #1
 800afd4:	1063      	asrs	r3, r4, #1
 800afd6:	0852      	lsrs	r2, r2, #1
 800afd8:	07e1      	lsls	r1, r4, #31
 800afda:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800afde:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800afe2:	bf48      	it	mi
 800afe4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800afe8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800afec:	4614      	mov	r4, r2
 800afee:	e781      	b.n	800aef4 <__ieee754_sqrt+0x34>
 800aff0:	0ad9      	lsrs	r1, r3, #11
 800aff2:	3815      	subs	r0, #21
 800aff4:	055b      	lsls	r3, r3, #21
 800aff6:	2900      	cmp	r1, #0
 800aff8:	d0fa      	beq.n	800aff0 <__ieee754_sqrt+0x130>
 800affa:	02cd      	lsls	r5, r1, #11
 800affc:	d50a      	bpl.n	800b014 <__ieee754_sqrt+0x154>
 800affe:	f1c2 0420 	rsb	r4, r2, #32
 800b002:	fa23 f404 	lsr.w	r4, r3, r4
 800b006:	1e55      	subs	r5, r2, #1
 800b008:	4093      	lsls	r3, r2
 800b00a:	4321      	orrs	r1, r4
 800b00c:	1b42      	subs	r2, r0, r5
 800b00e:	e78a      	b.n	800af26 <__ieee754_sqrt+0x66>
 800b010:	4610      	mov	r0, r2
 800b012:	e7f0      	b.n	800aff6 <__ieee754_sqrt+0x136>
 800b014:	0049      	lsls	r1, r1, #1
 800b016:	3201      	adds	r2, #1
 800b018:	e7ef      	b.n	800affa <__ieee754_sqrt+0x13a>
 800b01a:	4680      	mov	r8, r0
 800b01c:	e7bd      	b.n	800af9a <__ieee754_sqrt+0xda>
 800b01e:	bf00      	nop
 800b020:	7ff00000 	.word	0x7ff00000
 800b024:	00000000 	.word	0x00000000

0800b028 <__kernel_cos>:
 800b028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	ec57 6b10 	vmov	r6, r7, d0
 800b030:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b034:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b038:	ed8d 1b00 	vstr	d1, [sp]
 800b03c:	da07      	bge.n	800b04e <__kernel_cos+0x26>
 800b03e:	ee10 0a10 	vmov	r0, s0
 800b042:	4639      	mov	r1, r7
 800b044:	f7f5 fd3e 	bl	8000ac4 <__aeabi_d2iz>
 800b048:	2800      	cmp	r0, #0
 800b04a:	f000 8088 	beq.w	800b15e <__kernel_cos+0x136>
 800b04e:	4632      	mov	r2, r6
 800b050:	463b      	mov	r3, r7
 800b052:	4630      	mov	r0, r6
 800b054:	4639      	mov	r1, r7
 800b056:	f7f5 fa85 	bl	8000564 <__aeabi_dmul>
 800b05a:	4b51      	ldr	r3, [pc, #324]	; (800b1a0 <__kernel_cos+0x178>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	460d      	mov	r5, r1
 800b062:	f7f5 fa7f 	bl	8000564 <__aeabi_dmul>
 800b066:	a340      	add	r3, pc, #256	; (adr r3, 800b168 <__kernel_cos+0x140>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	4682      	mov	sl, r0
 800b06e:	468b      	mov	fp, r1
 800b070:	4620      	mov	r0, r4
 800b072:	4629      	mov	r1, r5
 800b074:	f7f5 fa76 	bl	8000564 <__aeabi_dmul>
 800b078:	a33d      	add	r3, pc, #244	; (adr r3, 800b170 <__kernel_cos+0x148>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	f7f5 f8bb 	bl	80001f8 <__adddf3>
 800b082:	4622      	mov	r2, r4
 800b084:	462b      	mov	r3, r5
 800b086:	f7f5 fa6d 	bl	8000564 <__aeabi_dmul>
 800b08a:	a33b      	add	r3, pc, #236	; (adr r3, 800b178 <__kernel_cos+0x150>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	f7f5 f8b0 	bl	80001f4 <__aeabi_dsub>
 800b094:	4622      	mov	r2, r4
 800b096:	462b      	mov	r3, r5
 800b098:	f7f5 fa64 	bl	8000564 <__aeabi_dmul>
 800b09c:	a338      	add	r3, pc, #224	; (adr r3, 800b180 <__kernel_cos+0x158>)
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	f7f5 f8a9 	bl	80001f8 <__adddf3>
 800b0a6:	4622      	mov	r2, r4
 800b0a8:	462b      	mov	r3, r5
 800b0aa:	f7f5 fa5b 	bl	8000564 <__aeabi_dmul>
 800b0ae:	a336      	add	r3, pc, #216	; (adr r3, 800b188 <__kernel_cos+0x160>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f7f5 f89e 	bl	80001f4 <__aeabi_dsub>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	462b      	mov	r3, r5
 800b0bc:	f7f5 fa52 	bl	8000564 <__aeabi_dmul>
 800b0c0:	a333      	add	r3, pc, #204	; (adr r3, 800b190 <__kernel_cos+0x168>)
 800b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c6:	f7f5 f897 	bl	80001f8 <__adddf3>
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	f7f5 fa49 	bl	8000564 <__aeabi_dmul>
 800b0d2:	4622      	mov	r2, r4
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	f7f5 fa45 	bl	8000564 <__aeabi_dmul>
 800b0da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0de:	4604      	mov	r4, r0
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	f7f5 fa3d 	bl	8000564 <__aeabi_dmul>
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f7f5 f87f 	bl	80001f4 <__aeabi_dsub>
 800b0f6:	4b2b      	ldr	r3, [pc, #172]	; (800b1a4 <__kernel_cos+0x17c>)
 800b0f8:	4598      	cmp	r8, r3
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	460f      	mov	r7, r1
 800b0fe:	dc10      	bgt.n	800b122 <__kernel_cos+0xfa>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4650      	mov	r0, sl
 800b106:	4659      	mov	r1, fp
 800b108:	f7f5 f874 	bl	80001f4 <__aeabi_dsub>
 800b10c:	460b      	mov	r3, r1
 800b10e:	4926      	ldr	r1, [pc, #152]	; (800b1a8 <__kernel_cos+0x180>)
 800b110:	4602      	mov	r2, r0
 800b112:	2000      	movs	r0, #0
 800b114:	f7f5 f86e 	bl	80001f4 <__aeabi_dsub>
 800b118:	ec41 0b10 	vmov	d0, r0, r1
 800b11c:	b003      	add	sp, #12
 800b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b122:	4b22      	ldr	r3, [pc, #136]	; (800b1ac <__kernel_cos+0x184>)
 800b124:	4920      	ldr	r1, [pc, #128]	; (800b1a8 <__kernel_cos+0x180>)
 800b126:	4598      	cmp	r8, r3
 800b128:	bfcc      	ite	gt
 800b12a:	4d21      	ldrgt	r5, [pc, #132]	; (800b1b0 <__kernel_cos+0x188>)
 800b12c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b130:	2400      	movs	r4, #0
 800b132:	4622      	mov	r2, r4
 800b134:	462b      	mov	r3, r5
 800b136:	2000      	movs	r0, #0
 800b138:	f7f5 f85c 	bl	80001f4 <__aeabi_dsub>
 800b13c:	4622      	mov	r2, r4
 800b13e:	4680      	mov	r8, r0
 800b140:	4689      	mov	r9, r1
 800b142:	462b      	mov	r3, r5
 800b144:	4650      	mov	r0, sl
 800b146:	4659      	mov	r1, fp
 800b148:	f7f5 f854 	bl	80001f4 <__aeabi_dsub>
 800b14c:	4632      	mov	r2, r6
 800b14e:	463b      	mov	r3, r7
 800b150:	f7f5 f850 	bl	80001f4 <__aeabi_dsub>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4640      	mov	r0, r8
 800b15a:	4649      	mov	r1, r9
 800b15c:	e7da      	b.n	800b114 <__kernel_cos+0xec>
 800b15e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b198 <__kernel_cos+0x170>
 800b162:	e7db      	b.n	800b11c <__kernel_cos+0xf4>
 800b164:	f3af 8000 	nop.w
 800b168:	be8838d4 	.word	0xbe8838d4
 800b16c:	bda8fae9 	.word	0xbda8fae9
 800b170:	bdb4b1c4 	.word	0xbdb4b1c4
 800b174:	3e21ee9e 	.word	0x3e21ee9e
 800b178:	809c52ad 	.word	0x809c52ad
 800b17c:	3e927e4f 	.word	0x3e927e4f
 800b180:	19cb1590 	.word	0x19cb1590
 800b184:	3efa01a0 	.word	0x3efa01a0
 800b188:	16c15177 	.word	0x16c15177
 800b18c:	3f56c16c 	.word	0x3f56c16c
 800b190:	5555554c 	.word	0x5555554c
 800b194:	3fa55555 	.word	0x3fa55555
 800b198:	00000000 	.word	0x00000000
 800b19c:	3ff00000 	.word	0x3ff00000
 800b1a0:	3fe00000 	.word	0x3fe00000
 800b1a4:	3fd33332 	.word	0x3fd33332
 800b1a8:	3ff00000 	.word	0x3ff00000
 800b1ac:	3fe90000 	.word	0x3fe90000
 800b1b0:	3fd20000 	.word	0x3fd20000
 800b1b4:	00000000 	.word	0x00000000

0800b1b8 <__kernel_rem_pio2>:
 800b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	ed2d 8b02 	vpush	{d8}
 800b1c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b1c4:	f112 0f14 	cmn.w	r2, #20
 800b1c8:	9308      	str	r3, [sp, #32]
 800b1ca:	9101      	str	r1, [sp, #4]
 800b1cc:	4bc4      	ldr	r3, [pc, #784]	; (800b4e0 <__kernel_rem_pio2+0x328>)
 800b1ce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b1d0:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1d6:	9302      	str	r3, [sp, #8]
 800b1d8:	9b08      	ldr	r3, [sp, #32]
 800b1da:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1de:	bfa8      	it	ge
 800b1e0:	1ed4      	subge	r4, r2, #3
 800b1e2:	9306      	str	r3, [sp, #24]
 800b1e4:	bfb2      	itee	lt
 800b1e6:	2400      	movlt	r4, #0
 800b1e8:	2318      	movge	r3, #24
 800b1ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800b1ee:	f06f 0317 	mvn.w	r3, #23
 800b1f2:	fb04 3303 	mla	r3, r4, r3, r3
 800b1f6:	eb03 0a02 	add.w	sl, r3, r2
 800b1fa:	9b02      	ldr	r3, [sp, #8]
 800b1fc:	9a06      	ldr	r2, [sp, #24]
 800b1fe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b4d0 <__kernel_rem_pio2+0x318>
 800b202:	eb03 0802 	add.w	r8, r3, r2
 800b206:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b208:	1aa7      	subs	r7, r4, r2
 800b20a:	ae22      	add	r6, sp, #136	; 0x88
 800b20c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b210:	2500      	movs	r5, #0
 800b212:	4545      	cmp	r5, r8
 800b214:	dd13      	ble.n	800b23e <__kernel_rem_pio2+0x86>
 800b216:	9b08      	ldr	r3, [sp, #32]
 800b218:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b4d0 <__kernel_rem_pio2+0x318>
 800b21c:	aa22      	add	r2, sp, #136	; 0x88
 800b21e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b222:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b226:	f04f 0800 	mov.w	r8, #0
 800b22a:	9b02      	ldr	r3, [sp, #8]
 800b22c:	4598      	cmp	r8, r3
 800b22e:	dc2f      	bgt.n	800b290 <__kernel_rem_pio2+0xd8>
 800b230:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b234:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b238:	462f      	mov	r7, r5
 800b23a:	2600      	movs	r6, #0
 800b23c:	e01b      	b.n	800b276 <__kernel_rem_pio2+0xbe>
 800b23e:	42ef      	cmn	r7, r5
 800b240:	d407      	bmi.n	800b252 <__kernel_rem_pio2+0x9a>
 800b242:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b246:	f7f5 f923 	bl	8000490 <__aeabi_i2d>
 800b24a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b24e:	3501      	adds	r5, #1
 800b250:	e7df      	b.n	800b212 <__kernel_rem_pio2+0x5a>
 800b252:	ec51 0b18 	vmov	r0, r1, d8
 800b256:	e7f8      	b.n	800b24a <__kernel_rem_pio2+0x92>
 800b258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b25c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b260:	f7f5 f980 	bl	8000564 <__aeabi_dmul>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b26c:	f7f4 ffc4 	bl	80001f8 <__adddf3>
 800b270:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b274:	3601      	adds	r6, #1
 800b276:	9b06      	ldr	r3, [sp, #24]
 800b278:	429e      	cmp	r6, r3
 800b27a:	f1a7 0708 	sub.w	r7, r7, #8
 800b27e:	ddeb      	ble.n	800b258 <__kernel_rem_pio2+0xa0>
 800b280:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b284:	f108 0801 	add.w	r8, r8, #1
 800b288:	ecab 7b02 	vstmia	fp!, {d7}
 800b28c:	3508      	adds	r5, #8
 800b28e:	e7cc      	b.n	800b22a <__kernel_rem_pio2+0x72>
 800b290:	9b02      	ldr	r3, [sp, #8]
 800b292:	aa0e      	add	r2, sp, #56	; 0x38
 800b294:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b298:	930d      	str	r3, [sp, #52]	; 0x34
 800b29a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b29c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b2a0:	9c02      	ldr	r4, [sp, #8]
 800b2a2:	930c      	str	r3, [sp, #48]	; 0x30
 800b2a4:	00e3      	lsls	r3, r4, #3
 800b2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2a8:	ab9a      	add	r3, sp, #616	; 0x268
 800b2aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b2b2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b2b6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b2b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b2bc:	46c3      	mov	fp, r8
 800b2be:	46a1      	mov	r9, r4
 800b2c0:	f1b9 0f00 	cmp.w	r9, #0
 800b2c4:	f1a5 0508 	sub.w	r5, r5, #8
 800b2c8:	dc77      	bgt.n	800b3ba <__kernel_rem_pio2+0x202>
 800b2ca:	ec47 6b10 	vmov	d0, r6, r7
 800b2ce:	4650      	mov	r0, sl
 800b2d0:	f000 fc0a 	bl	800bae8 <scalbn>
 800b2d4:	ec57 6b10 	vmov	r6, r7, d0
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b2de:	ee10 0a10 	vmov	r0, s0
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f5 f93e 	bl	8000564 <__aeabi_dmul>
 800b2e8:	ec41 0b10 	vmov	d0, r0, r1
 800b2ec:	f000 fb74 	bl	800b9d8 <floor>
 800b2f0:	4b7c      	ldr	r3, [pc, #496]	; (800b4e4 <__kernel_rem_pio2+0x32c>)
 800b2f2:	ec51 0b10 	vmov	r0, r1, d0
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f7f5 f934 	bl	8000564 <__aeabi_dmul>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	4630      	mov	r0, r6
 800b302:	4639      	mov	r1, r7
 800b304:	f7f4 ff76 	bl	80001f4 <__aeabi_dsub>
 800b308:	460f      	mov	r7, r1
 800b30a:	4606      	mov	r6, r0
 800b30c:	f7f5 fbda 	bl	8000ac4 <__aeabi_d2iz>
 800b310:	9004      	str	r0, [sp, #16]
 800b312:	f7f5 f8bd 	bl	8000490 <__aeabi_i2d>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f4 ff69 	bl	80001f4 <__aeabi_dsub>
 800b322:	f1ba 0f00 	cmp.w	sl, #0
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	dd6d      	ble.n	800b408 <__kernel_rem_pio2+0x250>
 800b32c:	1e62      	subs	r2, r4, #1
 800b32e:	ab0e      	add	r3, sp, #56	; 0x38
 800b330:	9d04      	ldr	r5, [sp, #16]
 800b332:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b336:	f1ca 0118 	rsb	r1, sl, #24
 800b33a:	fa40 f301 	asr.w	r3, r0, r1
 800b33e:	441d      	add	r5, r3
 800b340:	408b      	lsls	r3, r1
 800b342:	1ac0      	subs	r0, r0, r3
 800b344:	ab0e      	add	r3, sp, #56	; 0x38
 800b346:	9504      	str	r5, [sp, #16]
 800b348:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b34c:	f1ca 0317 	rsb	r3, sl, #23
 800b350:	fa40 fb03 	asr.w	fp, r0, r3
 800b354:	f1bb 0f00 	cmp.w	fp, #0
 800b358:	dd65      	ble.n	800b426 <__kernel_rem_pio2+0x26e>
 800b35a:	9b04      	ldr	r3, [sp, #16]
 800b35c:	2200      	movs	r2, #0
 800b35e:	3301      	adds	r3, #1
 800b360:	9304      	str	r3, [sp, #16]
 800b362:	4615      	mov	r5, r2
 800b364:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b368:	4294      	cmp	r4, r2
 800b36a:	f300 809c 	bgt.w	800b4a6 <__kernel_rem_pio2+0x2ee>
 800b36e:	f1ba 0f00 	cmp.w	sl, #0
 800b372:	dd07      	ble.n	800b384 <__kernel_rem_pio2+0x1cc>
 800b374:	f1ba 0f01 	cmp.w	sl, #1
 800b378:	f000 80c0 	beq.w	800b4fc <__kernel_rem_pio2+0x344>
 800b37c:	f1ba 0f02 	cmp.w	sl, #2
 800b380:	f000 80c6 	beq.w	800b510 <__kernel_rem_pio2+0x358>
 800b384:	f1bb 0f02 	cmp.w	fp, #2
 800b388:	d14d      	bne.n	800b426 <__kernel_rem_pio2+0x26e>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	4956      	ldr	r1, [pc, #344]	; (800b4e8 <__kernel_rem_pio2+0x330>)
 800b390:	2000      	movs	r0, #0
 800b392:	f7f4 ff2f 	bl	80001f4 <__aeabi_dsub>
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	2d00      	cmp	r5, #0
 800b39c:	d043      	beq.n	800b426 <__kernel_rem_pio2+0x26e>
 800b39e:	4650      	mov	r0, sl
 800b3a0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b4d8 <__kernel_rem_pio2+0x320>
 800b3a4:	f000 fba0 	bl	800bae8 <scalbn>
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	ec53 2b10 	vmov	r2, r3, d0
 800b3b0:	f7f4 ff20 	bl	80001f4 <__aeabi_dsub>
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	460f      	mov	r7, r1
 800b3b8:	e035      	b.n	800b426 <__kernel_rem_pio2+0x26e>
 800b3ba:	4b4c      	ldr	r3, [pc, #304]	; (800b4ec <__kernel_rem_pio2+0x334>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4630      	mov	r0, r6
 800b3c0:	4639      	mov	r1, r7
 800b3c2:	f7f5 f8cf 	bl	8000564 <__aeabi_dmul>
 800b3c6:	f7f5 fb7d 	bl	8000ac4 <__aeabi_d2iz>
 800b3ca:	f7f5 f861 	bl	8000490 <__aeabi_i2d>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	ec43 2b18 	vmov	d8, r2, r3
 800b3d6:	4b46      	ldr	r3, [pc, #280]	; (800b4f0 <__kernel_rem_pio2+0x338>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f7f5 f8c3 	bl	8000564 <__aeabi_dmul>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	f7f4 ff05 	bl	80001f4 <__aeabi_dsub>
 800b3ea:	f7f5 fb6b 	bl	8000ac4 <__aeabi_d2iz>
 800b3ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3f2:	f84b 0b04 	str.w	r0, [fp], #4
 800b3f6:	ec51 0b18 	vmov	r0, r1, d8
 800b3fa:	f7f4 fefd 	bl	80001f8 <__adddf3>
 800b3fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800b402:	4606      	mov	r6, r0
 800b404:	460f      	mov	r7, r1
 800b406:	e75b      	b.n	800b2c0 <__kernel_rem_pio2+0x108>
 800b408:	d106      	bne.n	800b418 <__kernel_rem_pio2+0x260>
 800b40a:	1e63      	subs	r3, r4, #1
 800b40c:	aa0e      	add	r2, sp, #56	; 0x38
 800b40e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b412:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b416:	e79d      	b.n	800b354 <__kernel_rem_pio2+0x19c>
 800b418:	4b36      	ldr	r3, [pc, #216]	; (800b4f4 <__kernel_rem_pio2+0x33c>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	f7f5 fb28 	bl	8000a70 <__aeabi_dcmpge>
 800b420:	2800      	cmp	r0, #0
 800b422:	d13d      	bne.n	800b4a0 <__kernel_rem_pio2+0x2e8>
 800b424:	4683      	mov	fp, r0
 800b426:	2200      	movs	r2, #0
 800b428:	2300      	movs	r3, #0
 800b42a:	4630      	mov	r0, r6
 800b42c:	4639      	mov	r1, r7
 800b42e:	f7f5 fb01 	bl	8000a34 <__aeabi_dcmpeq>
 800b432:	2800      	cmp	r0, #0
 800b434:	f000 80c0 	beq.w	800b5b8 <__kernel_rem_pio2+0x400>
 800b438:	1e65      	subs	r5, r4, #1
 800b43a:	462b      	mov	r3, r5
 800b43c:	2200      	movs	r2, #0
 800b43e:	9902      	ldr	r1, [sp, #8]
 800b440:	428b      	cmp	r3, r1
 800b442:	da6c      	bge.n	800b51e <__kernel_rem_pio2+0x366>
 800b444:	2a00      	cmp	r2, #0
 800b446:	f000 8089 	beq.w	800b55c <__kernel_rem_pio2+0x3a4>
 800b44a:	ab0e      	add	r3, sp, #56	; 0x38
 800b44c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b450:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 80ad 	beq.w	800b5b4 <__kernel_rem_pio2+0x3fc>
 800b45a:	4650      	mov	r0, sl
 800b45c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b4d8 <__kernel_rem_pio2+0x320>
 800b460:	f000 fb42 	bl	800bae8 <scalbn>
 800b464:	ab9a      	add	r3, sp, #616	; 0x268
 800b466:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b46a:	ec57 6b10 	vmov	r6, r7, d0
 800b46e:	00ec      	lsls	r4, r5, #3
 800b470:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b474:	46aa      	mov	sl, r5
 800b476:	f1ba 0f00 	cmp.w	sl, #0
 800b47a:	f280 80d6 	bge.w	800b62a <__kernel_rem_pio2+0x472>
 800b47e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b4d0 <__kernel_rem_pio2+0x318>
 800b482:	462e      	mov	r6, r5
 800b484:	2e00      	cmp	r6, #0
 800b486:	f2c0 8104 	blt.w	800b692 <__kernel_rem_pio2+0x4da>
 800b48a:	ab72      	add	r3, sp, #456	; 0x1c8
 800b48c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b490:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b4f8 <__kernel_rem_pio2+0x340>
 800b494:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b498:	f04f 0800 	mov.w	r8, #0
 800b49c:	1baf      	subs	r7, r5, r6
 800b49e:	e0ea      	b.n	800b676 <__kernel_rem_pio2+0x4be>
 800b4a0:	f04f 0b02 	mov.w	fp, #2
 800b4a4:	e759      	b.n	800b35a <__kernel_rem_pio2+0x1a2>
 800b4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b4aa:	b955      	cbnz	r5, 800b4c2 <__kernel_rem_pio2+0x30a>
 800b4ac:	b123      	cbz	r3, 800b4b8 <__kernel_rem_pio2+0x300>
 800b4ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b4b2:	f8c8 3000 	str.w	r3, [r8]
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	3201      	adds	r2, #1
 800b4ba:	f108 0804 	add.w	r8, r8, #4
 800b4be:	461d      	mov	r5, r3
 800b4c0:	e752      	b.n	800b368 <__kernel_rem_pio2+0x1b0>
 800b4c2:	1acb      	subs	r3, r1, r3
 800b4c4:	f8c8 3000 	str.w	r3, [r8]
 800b4c8:	462b      	mov	r3, r5
 800b4ca:	e7f5      	b.n	800b4b8 <__kernel_rem_pio2+0x300>
 800b4cc:	f3af 8000 	nop.w
	...
 800b4dc:	3ff00000 	.word	0x3ff00000
 800b4e0:	0800be78 	.word	0x0800be78
 800b4e4:	40200000 	.word	0x40200000
 800b4e8:	3ff00000 	.word	0x3ff00000
 800b4ec:	3e700000 	.word	0x3e700000
 800b4f0:	41700000 	.word	0x41700000
 800b4f4:	3fe00000 	.word	0x3fe00000
 800b4f8:	0800be38 	.word	0x0800be38
 800b4fc:	1e62      	subs	r2, r4, #1
 800b4fe:	ab0e      	add	r3, sp, #56	; 0x38
 800b500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b504:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b508:	a90e      	add	r1, sp, #56	; 0x38
 800b50a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b50e:	e739      	b.n	800b384 <__kernel_rem_pio2+0x1cc>
 800b510:	1e62      	subs	r2, r4, #1
 800b512:	ab0e      	add	r3, sp, #56	; 0x38
 800b514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b518:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b51c:	e7f4      	b.n	800b508 <__kernel_rem_pio2+0x350>
 800b51e:	a90e      	add	r1, sp, #56	; 0x38
 800b520:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b524:	3b01      	subs	r3, #1
 800b526:	430a      	orrs	r2, r1
 800b528:	e789      	b.n	800b43e <__kernel_rem_pio2+0x286>
 800b52a:	3301      	adds	r3, #1
 800b52c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b530:	2900      	cmp	r1, #0
 800b532:	d0fa      	beq.n	800b52a <__kernel_rem_pio2+0x372>
 800b534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b536:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b53a:	446a      	add	r2, sp
 800b53c:	3a98      	subs	r2, #152	; 0x98
 800b53e:	920a      	str	r2, [sp, #40]	; 0x28
 800b540:	9a08      	ldr	r2, [sp, #32]
 800b542:	18e3      	adds	r3, r4, r3
 800b544:	18a5      	adds	r5, r4, r2
 800b546:	aa22      	add	r2, sp, #136	; 0x88
 800b548:	f104 0801 	add.w	r8, r4, #1
 800b54c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b550:	9304      	str	r3, [sp, #16]
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	4543      	cmp	r3, r8
 800b556:	da04      	bge.n	800b562 <__kernel_rem_pio2+0x3aa>
 800b558:	461c      	mov	r4, r3
 800b55a:	e6a3      	b.n	800b2a4 <__kernel_rem_pio2+0xec>
 800b55c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b55e:	2301      	movs	r3, #1
 800b560:	e7e4      	b.n	800b52c <__kernel_rem_pio2+0x374>
 800b562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b564:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b568:	f7f4 ff92 	bl	8000490 <__aeabi_i2d>
 800b56c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b572:	46ab      	mov	fp, r5
 800b574:	461c      	mov	r4, r3
 800b576:	f04f 0900 	mov.w	r9, #0
 800b57a:	2600      	movs	r6, #0
 800b57c:	2700      	movs	r7, #0
 800b57e:	9b06      	ldr	r3, [sp, #24]
 800b580:	4599      	cmp	r9, r3
 800b582:	dd06      	ble.n	800b592 <__kernel_rem_pio2+0x3da>
 800b584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b586:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b58a:	f108 0801 	add.w	r8, r8, #1
 800b58e:	930a      	str	r3, [sp, #40]	; 0x28
 800b590:	e7df      	b.n	800b552 <__kernel_rem_pio2+0x39a>
 800b592:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b596:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b59a:	f7f4 ffe3 	bl	8000564 <__aeabi_dmul>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	f7f4 fe27 	bl	80001f8 <__adddf3>
 800b5aa:	f109 0901 	add.w	r9, r9, #1
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460f      	mov	r7, r1
 800b5b2:	e7e4      	b.n	800b57e <__kernel_rem_pio2+0x3c6>
 800b5b4:	3d01      	subs	r5, #1
 800b5b6:	e748      	b.n	800b44a <__kernel_rem_pio2+0x292>
 800b5b8:	ec47 6b10 	vmov	d0, r6, r7
 800b5bc:	f1ca 0000 	rsb	r0, sl, #0
 800b5c0:	f000 fa92 	bl	800bae8 <scalbn>
 800b5c4:	ec57 6b10 	vmov	r6, r7, d0
 800b5c8:	4ba0      	ldr	r3, [pc, #640]	; (800b84c <__kernel_rem_pio2+0x694>)
 800b5ca:	ee10 0a10 	vmov	r0, s0
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4639      	mov	r1, r7
 800b5d2:	f7f5 fa4d 	bl	8000a70 <__aeabi_dcmpge>
 800b5d6:	b1f8      	cbz	r0, 800b618 <__kernel_rem_pio2+0x460>
 800b5d8:	4b9d      	ldr	r3, [pc, #628]	; (800b850 <__kernel_rem_pio2+0x698>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	4630      	mov	r0, r6
 800b5de:	4639      	mov	r1, r7
 800b5e0:	f7f4 ffc0 	bl	8000564 <__aeabi_dmul>
 800b5e4:	f7f5 fa6e 	bl	8000ac4 <__aeabi_d2iz>
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	f7f4 ff51 	bl	8000490 <__aeabi_i2d>
 800b5ee:	4b97      	ldr	r3, [pc, #604]	; (800b84c <__kernel_rem_pio2+0x694>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f7f4 ffb7 	bl	8000564 <__aeabi_dmul>
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7f4 fdf9 	bl	80001f4 <__aeabi_dsub>
 800b602:	f7f5 fa5f 	bl	8000ac4 <__aeabi_d2iz>
 800b606:	1c65      	adds	r5, r4, #1
 800b608:	ab0e      	add	r3, sp, #56	; 0x38
 800b60a:	f10a 0a18 	add.w	sl, sl, #24
 800b60e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b612:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b616:	e720      	b.n	800b45a <__kernel_rem_pio2+0x2a2>
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f5 fa52 	bl	8000ac4 <__aeabi_d2iz>
 800b620:	ab0e      	add	r3, sp, #56	; 0x38
 800b622:	4625      	mov	r5, r4
 800b624:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b628:	e717      	b.n	800b45a <__kernel_rem_pio2+0x2a2>
 800b62a:	ab0e      	add	r3, sp, #56	; 0x38
 800b62c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b630:	f7f4 ff2e 	bl	8000490 <__aeabi_i2d>
 800b634:	4632      	mov	r2, r6
 800b636:	463b      	mov	r3, r7
 800b638:	f7f4 ff94 	bl	8000564 <__aeabi_dmul>
 800b63c:	4b84      	ldr	r3, [pc, #528]	; (800b850 <__kernel_rem_pio2+0x698>)
 800b63e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b642:	2200      	movs	r2, #0
 800b644:	4630      	mov	r0, r6
 800b646:	4639      	mov	r1, r7
 800b648:	f7f4 ff8c 	bl	8000564 <__aeabi_dmul>
 800b64c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b650:	4606      	mov	r6, r0
 800b652:	460f      	mov	r7, r1
 800b654:	e70f      	b.n	800b476 <__kernel_rem_pio2+0x2be>
 800b656:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b65a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b65e:	f7f4 ff81 	bl	8000564 <__aeabi_dmul>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b66a:	f7f4 fdc5 	bl	80001f8 <__adddf3>
 800b66e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b672:	f108 0801 	add.w	r8, r8, #1
 800b676:	9b02      	ldr	r3, [sp, #8]
 800b678:	4598      	cmp	r8, r3
 800b67a:	dc01      	bgt.n	800b680 <__kernel_rem_pio2+0x4c8>
 800b67c:	45b8      	cmp	r8, r7
 800b67e:	ddea      	ble.n	800b656 <__kernel_rem_pio2+0x49e>
 800b680:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b684:	ab4a      	add	r3, sp, #296	; 0x128
 800b686:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b68a:	ed87 7b00 	vstr	d7, [r7]
 800b68e:	3e01      	subs	r6, #1
 800b690:	e6f8      	b.n	800b484 <__kernel_rem_pio2+0x2cc>
 800b692:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b694:	2b02      	cmp	r3, #2
 800b696:	dc0b      	bgt.n	800b6b0 <__kernel_rem_pio2+0x4f8>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dc35      	bgt.n	800b708 <__kernel_rem_pio2+0x550>
 800b69c:	d059      	beq.n	800b752 <__kernel_rem_pio2+0x59a>
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	f003 0007 	and.w	r0, r3, #7
 800b6a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b6a8:	ecbd 8b02 	vpop	{d8}
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	d1f3      	bne.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b6b6:	ab4a      	add	r3, sp, #296	; 0x128
 800b6b8:	4423      	add	r3, r4
 800b6ba:	9306      	str	r3, [sp, #24]
 800b6bc:	461c      	mov	r4, r3
 800b6be:	469a      	mov	sl, r3
 800b6c0:	9502      	str	r5, [sp, #8]
 800b6c2:	9b02      	ldr	r3, [sp, #8]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f1aa 0a08 	sub.w	sl, sl, #8
 800b6ca:	dc6b      	bgt.n	800b7a4 <__kernel_rem_pio2+0x5ec>
 800b6cc:	46aa      	mov	sl, r5
 800b6ce:	f1ba 0f01 	cmp.w	sl, #1
 800b6d2:	f1a4 0408 	sub.w	r4, r4, #8
 800b6d6:	f300 8085 	bgt.w	800b7e4 <__kernel_rem_pio2+0x62c>
 800b6da:	9c06      	ldr	r4, [sp, #24]
 800b6dc:	2000      	movs	r0, #0
 800b6de:	3408      	adds	r4, #8
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	2d01      	cmp	r5, #1
 800b6e4:	f300 809d 	bgt.w	800b822 <__kernel_rem_pio2+0x66a>
 800b6e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b6ec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b6f0:	f1bb 0f00 	cmp.w	fp, #0
 800b6f4:	f040 809b 	bne.w	800b82e <__kernel_rem_pio2+0x676>
 800b6f8:	9b01      	ldr	r3, [sp, #4]
 800b6fa:	e9c3 5600 	strd	r5, r6, [r3]
 800b6fe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b702:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b706:	e7ca      	b.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b708:	3408      	adds	r4, #8
 800b70a:	ab4a      	add	r3, sp, #296	; 0x128
 800b70c:	441c      	add	r4, r3
 800b70e:	462e      	mov	r6, r5
 800b710:	2000      	movs	r0, #0
 800b712:	2100      	movs	r1, #0
 800b714:	2e00      	cmp	r6, #0
 800b716:	da36      	bge.n	800b786 <__kernel_rem_pio2+0x5ce>
 800b718:	f1bb 0f00 	cmp.w	fp, #0
 800b71c:	d039      	beq.n	800b792 <__kernel_rem_pio2+0x5da>
 800b71e:	4602      	mov	r2, r0
 800b720:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b724:	9c01      	ldr	r4, [sp, #4]
 800b726:	e9c4 2300 	strd	r2, r3, [r4]
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b732:	f7f4 fd5f 	bl	80001f4 <__aeabi_dsub>
 800b736:	ae4c      	add	r6, sp, #304	; 0x130
 800b738:	2401      	movs	r4, #1
 800b73a:	42a5      	cmp	r5, r4
 800b73c:	da2c      	bge.n	800b798 <__kernel_rem_pio2+0x5e0>
 800b73e:	f1bb 0f00 	cmp.w	fp, #0
 800b742:	d002      	beq.n	800b74a <__kernel_rem_pio2+0x592>
 800b744:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b748:	4619      	mov	r1, r3
 800b74a:	9b01      	ldr	r3, [sp, #4]
 800b74c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b750:	e7a5      	b.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b752:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b756:	eb0d 0403 	add.w	r4, sp, r3
 800b75a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b75e:	2000      	movs	r0, #0
 800b760:	2100      	movs	r1, #0
 800b762:	2d00      	cmp	r5, #0
 800b764:	da09      	bge.n	800b77a <__kernel_rem_pio2+0x5c2>
 800b766:	f1bb 0f00 	cmp.w	fp, #0
 800b76a:	d002      	beq.n	800b772 <__kernel_rem_pio2+0x5ba>
 800b76c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b770:	4619      	mov	r1, r3
 800b772:	9b01      	ldr	r3, [sp, #4]
 800b774:	e9c3 0100 	strd	r0, r1, [r3]
 800b778:	e791      	b.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b77a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b77e:	f7f4 fd3b 	bl	80001f8 <__adddf3>
 800b782:	3d01      	subs	r5, #1
 800b784:	e7ed      	b.n	800b762 <__kernel_rem_pio2+0x5aa>
 800b786:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b78a:	f7f4 fd35 	bl	80001f8 <__adddf3>
 800b78e:	3e01      	subs	r6, #1
 800b790:	e7c0      	b.n	800b714 <__kernel_rem_pio2+0x55c>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	e7c5      	b.n	800b724 <__kernel_rem_pio2+0x56c>
 800b798:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b79c:	f7f4 fd2c 	bl	80001f8 <__adddf3>
 800b7a0:	3401      	adds	r4, #1
 800b7a2:	e7ca      	b.n	800b73a <__kernel_rem_pio2+0x582>
 800b7a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b7a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	9302      	str	r3, [sp, #8]
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	f7f4 fd1d 	bl	80001f8 <__adddf3>
 800b7be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	f7f4 fd13 	bl	80001f4 <__aeabi_dsub>
 800b7ce:	4632      	mov	r2, r6
 800b7d0:	463b      	mov	r3, r7
 800b7d2:	f7f4 fd11 	bl	80001f8 <__adddf3>
 800b7d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b7da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7de:	ed8a 7b00 	vstr	d7, [sl]
 800b7e2:	e76e      	b.n	800b6c2 <__kernel_rem_pio2+0x50a>
 800b7e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b7e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b7ec:	4640      	mov	r0, r8
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	463b      	mov	r3, r7
 800b7f2:	4649      	mov	r1, r9
 800b7f4:	f7f4 fd00 	bl	80001f8 <__adddf3>
 800b7f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4640      	mov	r0, r8
 800b802:	4649      	mov	r1, r9
 800b804:	f7f4 fcf6 	bl	80001f4 <__aeabi_dsub>
 800b808:	4632      	mov	r2, r6
 800b80a:	463b      	mov	r3, r7
 800b80c:	f7f4 fcf4 	bl	80001f8 <__adddf3>
 800b810:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b814:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b818:	ed84 7b00 	vstr	d7, [r4]
 800b81c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b820:	e755      	b.n	800b6ce <__kernel_rem_pio2+0x516>
 800b822:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b826:	f7f4 fce7 	bl	80001f8 <__adddf3>
 800b82a:	3d01      	subs	r5, #1
 800b82c:	e759      	b.n	800b6e2 <__kernel_rem_pio2+0x52a>
 800b82e:	9b01      	ldr	r3, [sp, #4]
 800b830:	9a01      	ldr	r2, [sp, #4]
 800b832:	601d      	str	r5, [r3, #0]
 800b834:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b838:	605c      	str	r4, [r3, #4]
 800b83a:	609f      	str	r7, [r3, #8]
 800b83c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b840:	60d3      	str	r3, [r2, #12]
 800b842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b846:	6110      	str	r0, [r2, #16]
 800b848:	6153      	str	r3, [r2, #20]
 800b84a:	e728      	b.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b84c:	41700000 	.word	0x41700000
 800b850:	3e700000 	.word	0x3e700000
 800b854:	00000000 	.word	0x00000000

0800b858 <__kernel_sin>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	ed2d 8b04 	vpush	{d8-d9}
 800b860:	eeb0 8a41 	vmov.f32	s16, s2
 800b864:	eef0 8a61 	vmov.f32	s17, s3
 800b868:	ec55 4b10 	vmov	r4, r5, d0
 800b86c:	b083      	sub	sp, #12
 800b86e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b872:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b876:	9001      	str	r0, [sp, #4]
 800b878:	da06      	bge.n	800b888 <__kernel_sin+0x30>
 800b87a:	ee10 0a10 	vmov	r0, s0
 800b87e:	4629      	mov	r1, r5
 800b880:	f7f5 f920 	bl	8000ac4 <__aeabi_d2iz>
 800b884:	2800      	cmp	r0, #0
 800b886:	d051      	beq.n	800b92c <__kernel_sin+0xd4>
 800b888:	4622      	mov	r2, r4
 800b88a:	462b      	mov	r3, r5
 800b88c:	4620      	mov	r0, r4
 800b88e:	4629      	mov	r1, r5
 800b890:	f7f4 fe68 	bl	8000564 <__aeabi_dmul>
 800b894:	4682      	mov	sl, r0
 800b896:	468b      	mov	fp, r1
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4620      	mov	r0, r4
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f7f4 fe60 	bl	8000564 <__aeabi_dmul>
 800b8a4:	a341      	add	r3, pc, #260	; (adr r3, 800b9ac <__kernel_sin+0x154>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	4689      	mov	r9, r1
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	4659      	mov	r1, fp
 800b8b2:	f7f4 fe57 	bl	8000564 <__aeabi_dmul>
 800b8b6:	a33f      	add	r3, pc, #252	; (adr r3, 800b9b4 <__kernel_sin+0x15c>)
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	f7f4 fc9a 	bl	80001f4 <__aeabi_dsub>
 800b8c0:	4652      	mov	r2, sl
 800b8c2:	465b      	mov	r3, fp
 800b8c4:	f7f4 fe4e 	bl	8000564 <__aeabi_dmul>
 800b8c8:	a33c      	add	r3, pc, #240	; (adr r3, 800b9bc <__kernel_sin+0x164>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	f7f4 fc93 	bl	80001f8 <__adddf3>
 800b8d2:	4652      	mov	r2, sl
 800b8d4:	465b      	mov	r3, fp
 800b8d6:	f7f4 fe45 	bl	8000564 <__aeabi_dmul>
 800b8da:	a33a      	add	r3, pc, #232	; (adr r3, 800b9c4 <__kernel_sin+0x16c>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 fc88 	bl	80001f4 <__aeabi_dsub>
 800b8e4:	4652      	mov	r2, sl
 800b8e6:	465b      	mov	r3, fp
 800b8e8:	f7f4 fe3c 	bl	8000564 <__aeabi_dmul>
 800b8ec:	a337      	add	r3, pc, #220	; (adr r3, 800b9cc <__kernel_sin+0x174>)
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	f7f4 fc81 	bl	80001f8 <__adddf3>
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	460f      	mov	r7, r1
 800b8fc:	b9eb      	cbnz	r3, 800b93a <__kernel_sin+0xe2>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4650      	mov	r0, sl
 800b904:	4659      	mov	r1, fp
 800b906:	f7f4 fe2d 	bl	8000564 <__aeabi_dmul>
 800b90a:	a325      	add	r3, pc, #148	; (adr r3, 800b9a0 <__kernel_sin+0x148>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fc70 	bl	80001f4 <__aeabi_dsub>
 800b914:	4642      	mov	r2, r8
 800b916:	464b      	mov	r3, r9
 800b918:	f7f4 fe24 	bl	8000564 <__aeabi_dmul>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4620      	mov	r0, r4
 800b922:	4629      	mov	r1, r5
 800b924:	f7f4 fc68 	bl	80001f8 <__adddf3>
 800b928:	4604      	mov	r4, r0
 800b92a:	460d      	mov	r5, r1
 800b92c:	ec45 4b10 	vmov	d0, r4, r5
 800b930:	b003      	add	sp, #12
 800b932:	ecbd 8b04 	vpop	{d8-d9}
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	4b1b      	ldr	r3, [pc, #108]	; (800b9a8 <__kernel_sin+0x150>)
 800b93c:	ec51 0b18 	vmov	r0, r1, d8
 800b940:	2200      	movs	r2, #0
 800b942:	f7f4 fe0f 	bl	8000564 <__aeabi_dmul>
 800b946:	4632      	mov	r2, r6
 800b948:	ec41 0b19 	vmov	d9, r0, r1
 800b94c:	463b      	mov	r3, r7
 800b94e:	4640      	mov	r0, r8
 800b950:	4649      	mov	r1, r9
 800b952:	f7f4 fe07 	bl	8000564 <__aeabi_dmul>
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	ec51 0b19 	vmov	r0, r1, d9
 800b95e:	f7f4 fc49 	bl	80001f4 <__aeabi_dsub>
 800b962:	4652      	mov	r2, sl
 800b964:	465b      	mov	r3, fp
 800b966:	f7f4 fdfd 	bl	8000564 <__aeabi_dmul>
 800b96a:	ec53 2b18 	vmov	r2, r3, d8
 800b96e:	f7f4 fc41 	bl	80001f4 <__aeabi_dsub>
 800b972:	a30b      	add	r3, pc, #44	; (adr r3, 800b9a0 <__kernel_sin+0x148>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	4606      	mov	r6, r0
 800b97a:	460f      	mov	r7, r1
 800b97c:	4640      	mov	r0, r8
 800b97e:	4649      	mov	r1, r9
 800b980:	f7f4 fdf0 	bl	8000564 <__aeabi_dmul>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f4 fc34 	bl	80001f8 <__adddf3>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4620      	mov	r0, r4
 800b996:	4629      	mov	r1, r5
 800b998:	f7f4 fc2c 	bl	80001f4 <__aeabi_dsub>
 800b99c:	e7c4      	b.n	800b928 <__kernel_sin+0xd0>
 800b99e:	bf00      	nop
 800b9a0:	55555549 	.word	0x55555549
 800b9a4:	3fc55555 	.word	0x3fc55555
 800b9a8:	3fe00000 	.word	0x3fe00000
 800b9ac:	5acfd57c 	.word	0x5acfd57c
 800b9b0:	3de5d93a 	.word	0x3de5d93a
 800b9b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b9b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b9bc:	57b1fe7d 	.word	0x57b1fe7d
 800b9c0:	3ec71de3 	.word	0x3ec71de3
 800b9c4:	19c161d5 	.word	0x19c161d5
 800b9c8:	3f2a01a0 	.word	0x3f2a01a0
 800b9cc:	1110f8a6 	.word	0x1110f8a6
 800b9d0:	3f811111 	.word	0x3f811111
 800b9d4:	00000000 	.word	0x00000000

0800b9d8 <floor>:
 800b9d8:	ec51 0b10 	vmov	r0, r1, d0
 800b9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b9e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b9e8:	2e13      	cmp	r6, #19
 800b9ea:	ee10 5a10 	vmov	r5, s0
 800b9ee:	ee10 8a10 	vmov	r8, s0
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	dc32      	bgt.n	800ba5c <floor+0x84>
 800b9f6:	2e00      	cmp	r6, #0
 800b9f8:	da14      	bge.n	800ba24 <floor+0x4c>
 800b9fa:	a333      	add	r3, pc, #204	; (adr r3, 800bac8 <floor+0xf0>)
 800b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba00:	f7f4 fbfa 	bl	80001f8 <__adddf3>
 800ba04:	2200      	movs	r2, #0
 800ba06:	2300      	movs	r3, #0
 800ba08:	f7f5 f83c 	bl	8000a84 <__aeabi_dcmpgt>
 800ba0c:	b138      	cbz	r0, 800ba1e <floor+0x46>
 800ba0e:	2c00      	cmp	r4, #0
 800ba10:	da57      	bge.n	800bac2 <floor+0xea>
 800ba12:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ba16:	431d      	orrs	r5, r3
 800ba18:	d001      	beq.n	800ba1e <floor+0x46>
 800ba1a:	4c2d      	ldr	r4, [pc, #180]	; (800bad0 <floor+0xf8>)
 800ba1c:	2500      	movs	r5, #0
 800ba1e:	4621      	mov	r1, r4
 800ba20:	4628      	mov	r0, r5
 800ba22:	e025      	b.n	800ba70 <floor+0x98>
 800ba24:	4f2b      	ldr	r7, [pc, #172]	; (800bad4 <floor+0xfc>)
 800ba26:	4137      	asrs	r7, r6
 800ba28:	ea01 0307 	and.w	r3, r1, r7
 800ba2c:	4303      	orrs	r3, r0
 800ba2e:	d01f      	beq.n	800ba70 <floor+0x98>
 800ba30:	a325      	add	r3, pc, #148	; (adr r3, 800bac8 <floor+0xf0>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f7f4 fbdf 	bl	80001f8 <__adddf3>
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f7f5 f821 	bl	8000a84 <__aeabi_dcmpgt>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d0eb      	beq.n	800ba1e <floor+0x46>
 800ba46:	2c00      	cmp	r4, #0
 800ba48:	bfbe      	ittt	lt
 800ba4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ba4e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ba52:	19a4      	addlt	r4, r4, r6
 800ba54:	ea24 0407 	bic.w	r4, r4, r7
 800ba58:	2500      	movs	r5, #0
 800ba5a:	e7e0      	b.n	800ba1e <floor+0x46>
 800ba5c:	2e33      	cmp	r6, #51	; 0x33
 800ba5e:	dd0b      	ble.n	800ba78 <floor+0xa0>
 800ba60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba64:	d104      	bne.n	800ba70 <floor+0x98>
 800ba66:	ee10 2a10 	vmov	r2, s0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	f7f4 fbc4 	bl	80001f8 <__adddf3>
 800ba70:	ec41 0b10 	vmov	d0, r0, r1
 800ba74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba78:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ba7c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba80:	fa23 f707 	lsr.w	r7, r3, r7
 800ba84:	4207      	tst	r7, r0
 800ba86:	d0f3      	beq.n	800ba70 <floor+0x98>
 800ba88:	a30f      	add	r3, pc, #60	; (adr r3, 800bac8 <floor+0xf0>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f7f4 fbb3 	bl	80001f8 <__adddf3>
 800ba92:	2200      	movs	r2, #0
 800ba94:	2300      	movs	r3, #0
 800ba96:	f7f4 fff5 	bl	8000a84 <__aeabi_dcmpgt>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d0bf      	beq.n	800ba1e <floor+0x46>
 800ba9e:	2c00      	cmp	r4, #0
 800baa0:	da02      	bge.n	800baa8 <floor+0xd0>
 800baa2:	2e14      	cmp	r6, #20
 800baa4:	d103      	bne.n	800baae <floor+0xd6>
 800baa6:	3401      	adds	r4, #1
 800baa8:	ea25 0507 	bic.w	r5, r5, r7
 800baac:	e7b7      	b.n	800ba1e <floor+0x46>
 800baae:	2301      	movs	r3, #1
 800bab0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bab4:	fa03 f606 	lsl.w	r6, r3, r6
 800bab8:	4435      	add	r5, r6
 800baba:	4545      	cmp	r5, r8
 800babc:	bf38      	it	cc
 800babe:	18e4      	addcc	r4, r4, r3
 800bac0:	e7f2      	b.n	800baa8 <floor+0xd0>
 800bac2:	2500      	movs	r5, #0
 800bac4:	462c      	mov	r4, r5
 800bac6:	e7aa      	b.n	800ba1e <floor+0x46>
 800bac8:	8800759c 	.word	0x8800759c
 800bacc:	7e37e43c 	.word	0x7e37e43c
 800bad0:	bff00000 	.word	0xbff00000
 800bad4:	000fffff 	.word	0x000fffff

0800bad8 <nan>:
 800bad8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bae0 <nan+0x8>
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	00000000 	.word	0x00000000
 800bae4:	7ff80000 	.word	0x7ff80000

0800bae8 <scalbn>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	ec55 4b10 	vmov	r4, r5, d0
 800baee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800baf2:	4606      	mov	r6, r0
 800baf4:	462b      	mov	r3, r5
 800baf6:	b99a      	cbnz	r2, 800bb20 <scalbn+0x38>
 800baf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bafc:	4323      	orrs	r3, r4
 800bafe:	d036      	beq.n	800bb6e <scalbn+0x86>
 800bb00:	4b39      	ldr	r3, [pc, #228]	; (800bbe8 <scalbn+0x100>)
 800bb02:	4629      	mov	r1, r5
 800bb04:	ee10 0a10 	vmov	r0, s0
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f7f4 fd2b 	bl	8000564 <__aeabi_dmul>
 800bb0e:	4b37      	ldr	r3, [pc, #220]	; (800bbec <scalbn+0x104>)
 800bb10:	429e      	cmp	r6, r3
 800bb12:	4604      	mov	r4, r0
 800bb14:	460d      	mov	r5, r1
 800bb16:	da10      	bge.n	800bb3a <scalbn+0x52>
 800bb18:	a32b      	add	r3, pc, #172	; (adr r3, 800bbc8 <scalbn+0xe0>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	e03a      	b.n	800bb96 <scalbn+0xae>
 800bb20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bb24:	428a      	cmp	r2, r1
 800bb26:	d10c      	bne.n	800bb42 <scalbn+0x5a>
 800bb28:	ee10 2a10 	vmov	r2, s0
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	4629      	mov	r1, r5
 800bb30:	f7f4 fb62 	bl	80001f8 <__adddf3>
 800bb34:	4604      	mov	r4, r0
 800bb36:	460d      	mov	r5, r1
 800bb38:	e019      	b.n	800bb6e <scalbn+0x86>
 800bb3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bb3e:	460b      	mov	r3, r1
 800bb40:	3a36      	subs	r2, #54	; 0x36
 800bb42:	4432      	add	r2, r6
 800bb44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bb48:	428a      	cmp	r2, r1
 800bb4a:	dd08      	ble.n	800bb5e <scalbn+0x76>
 800bb4c:	2d00      	cmp	r5, #0
 800bb4e:	a120      	add	r1, pc, #128	; (adr r1, 800bbd0 <scalbn+0xe8>)
 800bb50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb54:	da1c      	bge.n	800bb90 <scalbn+0xa8>
 800bb56:	a120      	add	r1, pc, #128	; (adr r1, 800bbd8 <scalbn+0xf0>)
 800bb58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb5c:	e018      	b.n	800bb90 <scalbn+0xa8>
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	dd08      	ble.n	800bb74 <scalbn+0x8c>
 800bb62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb6e:	ec45 4b10 	vmov	d0, r4, r5
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb78:	da19      	bge.n	800bbae <scalbn+0xc6>
 800bb7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb7e:	429e      	cmp	r6, r3
 800bb80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bb84:	dd0a      	ble.n	800bb9c <scalbn+0xb4>
 800bb86:	a112      	add	r1, pc, #72	; (adr r1, 800bbd0 <scalbn+0xe8>)
 800bb88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e2      	bne.n	800bb56 <scalbn+0x6e>
 800bb90:	a30f      	add	r3, pc, #60	; (adr r3, 800bbd0 <scalbn+0xe8>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fce5 	bl	8000564 <__aeabi_dmul>
 800bb9a:	e7cb      	b.n	800bb34 <scalbn+0x4c>
 800bb9c:	a10a      	add	r1, pc, #40	; (adr r1, 800bbc8 <scalbn+0xe0>)
 800bb9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0b8      	beq.n	800bb18 <scalbn+0x30>
 800bba6:	a10e      	add	r1, pc, #56	; (adr r1, 800bbe0 <scalbn+0xf8>)
 800bba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbac:	e7b4      	b.n	800bb18 <scalbn+0x30>
 800bbae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bbb2:	3236      	adds	r2, #54	; 0x36
 800bbb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bbb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4b0c      	ldr	r3, [pc, #48]	; (800bbf0 <scalbn+0x108>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	e7e8      	b.n	800bb96 <scalbn+0xae>
 800bbc4:	f3af 8000 	nop.w
 800bbc8:	c2f8f359 	.word	0xc2f8f359
 800bbcc:	01a56e1f 	.word	0x01a56e1f
 800bbd0:	8800759c 	.word	0x8800759c
 800bbd4:	7e37e43c 	.word	0x7e37e43c
 800bbd8:	8800759c 	.word	0x8800759c
 800bbdc:	fe37e43c 	.word	0xfe37e43c
 800bbe0:	c2f8f359 	.word	0xc2f8f359
 800bbe4:	81a56e1f 	.word	0x81a56e1f
 800bbe8:	43500000 	.word	0x43500000
 800bbec:	ffff3cb0 	.word	0xffff3cb0
 800bbf0:	3c900000 	.word	0x3c900000

0800bbf4 <_init>:
 800bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf6:	bf00      	nop
 800bbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbfa:	bc08      	pop	{r3}
 800bbfc:	469e      	mov	lr, r3
 800bbfe:	4770      	bx	lr

0800bc00 <_fini>:
 800bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc02:	bf00      	nop
 800bc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc06:	bc08      	pop	{r3}
 800bc08:	469e      	mov	lr, r3
 800bc0a:	4770      	bx	lr
