
single_actuator_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b54c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  0800b6e8  0800b6e8  0001b6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b960  0800b960  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800b960  0800b960  0001b960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b968  0800b968  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b968  0800b968  0001b968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b96c  0800b96c  0001b96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800b970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015b0  20000188  0800baf8  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001738  0800baf8  00021738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014369  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003105  00000000  00000000  00034521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00037628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00038710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191df  00000000  00000000  000396b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014456  00000000  00000000  00052897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb04  00000000  00000000  00066ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f67f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c44  00000000  00000000  000f6844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000188 	.word	0x20000188
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b6cc 	.word	0x0800b6cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000018c 	.word	0x2000018c
 80001d4:	0800b6cc 	.word	0x0800b6cc

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b974 	b.w	8000eb4 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468e      	mov	lr, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14d      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	d969      	bls.n	8000ccc <__udivmoddi4+0xe8>
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	b152      	cbz	r2, 8000c14 <__udivmoddi4+0x30>
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	f1c2 0120 	rsb	r1, r2, #32
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c12:	4094      	lsls	r4, r2
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	0c21      	lsrs	r1, r4, #16
 8000c1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c1e:	fa1f f78c 	uxth.w	r7, ip
 8000c22:	fb08 e316 	mls	r3, r8, r6, lr
 8000c26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2a:	fb06 f107 	mul.w	r1, r6, r7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 811f 	bcs.w	8000e7c <__udivmoddi4+0x298>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 811c 	bls.w	8000e7c <__udivmoddi4+0x298>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x92>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 810a 	bcs.w	8000e80 <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8107 	bls.w	8000e80 <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	1be4      	subs	r4, r4, r7
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa4>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xc2>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80ef 	beq.w	8000e76 <__udivmoddi4+0x292>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x160>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd4>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80f9 	bhi.w	8000eaa <__udivmoddi4+0x2c6>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa4>
 8000cc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xec>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 8092 	bne.w	8000dfe <__udivmoddi4+0x21a>
 8000cda:	eba1 010c 	sub.w	r1, r1, ip
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	0c20      	lsrs	r0, r4, #16
 8000cea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cee:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf6:	fb0e f003 	mul.w	r0, lr, r3
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x12c>
 8000cfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000d02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x12a>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2c0>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	1a09      	subs	r1, r1, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d18:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x156>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x154>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2ca>
 8000d38:	4608      	mov	r0, r1
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d42:	e79c      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000d44:	f1c6 0720 	rsb	r7, r6, #32
 8000d48:	40b3      	lsls	r3, r6
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa20 f407 	lsr.w	r4, r0, r7
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	40f9      	lsrs	r1, r7
 8000d5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d62:	fa00 f306 	lsl.w	r3, r0, r6
 8000d66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6a:	0c20      	lsrs	r0, r4, #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fb09 1118 	mls	r1, r9, r8, r1
 8000d74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d78:	fb08 f00e 	mul.w	r0, r8, lr
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b8>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	1a09      	subs	r1, r1, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da4:	fb09 1110 	mls	r1, r9, r0, r1
 8000da8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db0:	458e      	cmp	lr, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1e2>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2b4>
 8000dbe:	458e      	cmp	lr, r1
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2b4>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dca:	fba0 9402 	umull	r9, r4, r0, r2
 8000dce:	eba1 010e 	sub.w	r1, r1, lr
 8000dd2:	42a1      	cmp	r1, r4
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46a6      	mov	lr, r4
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x2a4>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x2a0>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x212>
 8000dde:	ebb3 0208 	subs.w	r2, r3, r8
 8000de2:	eb61 010e 	sbc.w	r1, r1, lr
 8000de6:	fa01 f707 	lsl.w	r7, r1, r7
 8000dea:	fa22 f306 	lsr.w	r3, r2, r6
 8000dee:	40f1      	lsrs	r1, r6
 8000df0:	431f      	orrs	r7, r3
 8000df2:	e9c5 7100 	strd	r7, r1, [r5]
 8000df6:	2600      	movs	r6, #0
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1c2 0320 	rsb	r3, r2, #32
 8000e02:	40d8      	lsrs	r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e20:	0c0b      	lsrs	r3, r1, #16
 8000e22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e26:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x260>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b8>
 8000e3c:	429e      	cmp	r6, r3
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b8>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1b9b      	subs	r3, r3, r6
 8000e46:	b289      	uxth	r1, r1
 8000e48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb06 f30e 	mul.w	r3, r6, lr
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x28a>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e6a:	3e02      	subs	r6, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	1ac9      	subs	r1, r1, r3
 8000e70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0x104>
 8000e76:	462e      	mov	r6, r5
 8000e78:	4628      	mov	r0, r5
 8000e7a:	e705      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	e6e3      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e6f8      	b.n	8000c76 <__udivmoddi4+0x92>
 8000e84:	454b      	cmp	r3, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f8>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e90:	3801      	subs	r0, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f8>
 8000e94:	4646      	mov	r6, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x28a>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1e2>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x260>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b8>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x12c>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e709      	b.n	8000cc2 <__udivmoddi4+0xde>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x156>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f001 fa88 	bl	80023d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f82c 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 f9e8 	bl	8001298 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000ec8:	f008 f900 	bl	80090cc <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000ecc:	f000 f890 	bl	8000ff0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ed0:	f000 f994 	bl	80011fc <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ed4:	f000 f944 	bl	8001160 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <main+0x58>)
 8000eda:	f003 fd11 	bl	8004900 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <main+0x5c>)
 8000ee0:	f003 fd0e 	bl	8004900 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <main+0x5c>)
 8000ee8:	f003 fdc6 	bl	8004a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000eec:	2104      	movs	r1, #4
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <main+0x5c>)
 8000ef0:	f003 fdc2 	bl	8004a78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <main+0x5c>)
 8000ef8:	f003 fdbe 	bl	8004a78 <HAL_TIM_PWM_Start>

  // Store the frequency of PID loop
  PID_freq = HAL_RCC_GetSysClockFreq()/htim4.Init.Period;
 8000efc:	f003 fbde 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <main+0x58>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <main+0x60>)
 8000f0c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x56>
 8000f10:	20000234 	.word	0x20000234
 8000f14:	200001a4 	.word	0x200001a4
 8000f18:	2000027c 	.word	0x2000027c

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f008 fe08 	bl	8009b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <SystemClock_Config+0xd0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <SystemClock_Config+0xd0>)
 8000f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f90:	2319      	movs	r3, #25
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f94:	23c0      	movs	r3, #192	; 0xc0
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 f82b 	bl	8004000 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fb0:	f000 fc42 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 fa8d 	bl	80044f0 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fdc:	f000 fc2c 	bl	8001838 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3750      	adds	r7, #80	; 0x50
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	; 0x58
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2220      	movs	r2, #32
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f008 fd89 	bl	8009b40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800102e:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <MX_TIM1_Init+0x168>)
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <MX_TIM1_Init+0x16c>)
 8001032:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <MX_TIM1_Init+0x168>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <MX_TIM1_Init+0x168>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8001040:	4b45      	ldr	r3, [pc, #276]	; (8001158 <MX_TIM1_Init+0x168>)
 8001042:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001046:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b43      	ldr	r3, [pc, #268]	; (8001158 <MX_TIM1_Init+0x168>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800104e:	4b42      	ldr	r3, [pc, #264]	; (8001158 <MX_TIM1_Init+0x168>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <MX_TIM1_Init+0x168>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800105a:	483f      	ldr	r0, [pc, #252]	; (8001158 <MX_TIM1_Init+0x168>)
 800105c:	f003 fc00 	bl	8004860 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001066:	f000 fbe7 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001074:	4619      	mov	r1, r3
 8001076:	4838      	ldr	r0, [pc, #224]	; (8001158 <MX_TIM1_Init+0x168>)
 8001078:	f003 ff78 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001082:	f000 fbd9 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001086:	4834      	ldr	r0, [pc, #208]	; (8001158 <MX_TIM1_Init+0x168>)
 8001088:	f003 fc9c 	bl	80049c4 <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001092:	f000 fbd1 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010a2:	4619      	mov	r1, r3
 80010a4:	482c      	ldr	r0, [pc, #176]	; (8001158 <MX_TIM1_Init+0x168>)
 80010a6:	f004 fb27 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010b0:	f000 fbc2 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	; 0x60
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	481f      	ldr	r0, [pc, #124]	; (8001158 <MX_TIM1_Init+0x168>)
 80010da:	f003 fe85 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010e4:	f000 fba8 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	2204      	movs	r2, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4819      	ldr	r0, [pc, #100]	; (8001158 <MX_TIM1_Init+0x168>)
 80010f2:	f003 fe79 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010fc:	f000 fb9c 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	2208      	movs	r2, #8
 8001106:	4619      	mov	r1, r3
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <MX_TIM1_Init+0x168>)
 800110a:	f003 fe6d 	bl	8004de8 <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001114:	f000 fb90 	bl	8001838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM1_Init+0x168>)
 800113c:	f004 fb4a 	bl	80057d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001146:	f000 fb77 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM1_Init+0x168>)
 800114c:	f000 fbfe 	bl	800194c <HAL_TIM_MspPostInit>

}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	; 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001a4 	.word	0x200001a4
 800115c:	40010000 	.word	0x40010000

08001160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM3_Init+0x94>)
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <MX_TIM3_Init+0x98>)
 8001180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM3_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001190:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001194:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM3_Init+0x94>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a4:	f003 fb5c 	bl	8004860 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 fb43 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011c0:	f003 fed4 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 fb35 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011dc:	f004 fa8c 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011e6:	f000 fb27 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001ec 	.word	0x200001ec
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_TIM4_Init+0x94>)
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <MX_TIM4_Init+0x98>)
 800121c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_TIM4_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_TIM4_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_TIM4_Init+0x94>)
 800122c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001230:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_TIM4_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM4_Init+0x94>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_TIM4_Init+0x94>)
 8001240:	f003 fb0e 	bl	8004860 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800124a:	f000 faf5 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_TIM4_Init+0x94>)
 800125c:	f003 fe86 	bl	8004f6c <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 fae7 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_TIM4_Init+0x94>)
 8001278:	f004 fa3e 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001282:	f000 fad9 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000234 	.word	0x20000234
 8001294:	40000800 	.word	0x40000800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <MX_GPIO_Init+0x144>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a49      	ldr	r2, [pc, #292]	; (80013dc <MX_GPIO_Init+0x144>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <MX_GPIO_Init+0x144>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <MX_GPIO_Init+0x144>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a42      	ldr	r2, [pc, #264]	; (80013dc <MX_GPIO_Init+0x144>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b40      	ldr	r3, [pc, #256]	; (80013dc <MX_GPIO_Init+0x144>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <MX_GPIO_Init+0x144>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <MX_GPIO_Init+0x144>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b39      	ldr	r3, [pc, #228]	; (80013dc <MX_GPIO_Init+0x144>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MX_GPIO_Init+0x144>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a34      	ldr	r2, [pc, #208]	; (80013dc <MX_GPIO_Init+0x144>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b32      	ldr	r3, [pc, #200]	; (80013dc <MX_GPIO_Init+0x144>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001324:	482e      	ldr	r0, [pc, #184]	; (80013e0 <MX_GPIO_Init+0x148>)
 8001326:	f001 fb97 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001330:	482c      	ldr	r0, [pc, #176]	; (80013e4 <MX_GPIO_Init+0x14c>)
 8001332:	f001 fb91 	bl	8002a58 <HAL_GPIO_WritePin>
                          |IN3_A_Pin|IN3_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ERROR_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8001336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <MX_GPIO_Init+0x148>)
 8001350:	f001 f9e6 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_A_Pin ENC2_A_Pin ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC2_A_Pin|ENC3_A_Pin;
 8001354:	2315      	movs	r3, #21
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001358:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	481f      	ldr	r0, [pc, #124]	; (80013e8 <MX_GPIO_Init+0x150>)
 800136a:	f001 f9d9 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin ENC2_B_Pin ENC3_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|ENC2_B_Pin|ENC3_B_Pin;
 800136e:	232a      	movs	r3, #42	; 0x2a
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4819      	ldr	r0, [pc, #100]	; (80013e8 <MX_GPIO_Init+0x150>)
 8001382:	f001 f9cd 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_B_Pin IN2_A_Pin IN2_B_Pin
                           IN3_A_Pin IN3_B_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 8001386:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800138a:	617b      	str	r3, [r7, #20]
                          |IN3_A_Pin|IN3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_GPIO_Init+0x14c>)
 80013a0:	f001 f9be 	bl	8002720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2006      	movs	r0, #6
 80013aa:	f001 f982 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ae:	2006      	movs	r0, #6
 80013b0:	f001 f99b 	bl	80026ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2008      	movs	r0, #8
 80013ba:	f001 f97a 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013be:	2008      	movs	r0, #8
 80013c0:	f001 f993 	bl	80026ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	200a      	movs	r0, #10
 80013ca:	f001 f972 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013ce:	200a      	movs	r0, #10
 80013d0:	f001 f98b 	bl	80026ea <HAL_NVIC_EnableIRQ>

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020000 	.word	0x40020000
 80013ec:	00000000 	.word	0x00000000

080013f0 <inverse_kinematics>:

/* USER CODE BEGIN 4 */
void inverse_kinematics(float X_ref_temp){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	ed87 0a01 	vstr	s0, [r7, #4]

	// Determine the two angles and one length
	d_inner_ref = sqrt(X_ref_temp*X_ref_temp + 20*X_ref_temp + 1864);        // in cm
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001402:	edd7 7a01 	vldr	s15, [r7, #4]
 8001406:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800140a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80015b0 <inverse_kinematics+0x1c0>
 8001416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800141a:	ee17 0a90 	vmov	r0, s15
 800141e:	f7ff f849 	bl	80004b4 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ec43 2b10 	vmov	d0, r2, r3
 800142a:	f008 fe1d 	bl	800a068 <sqrt>
 800142e:	ec53 2b10 	vmov	r2, r3, d0
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb6d 	bl	8000b14 <__aeabi_d2f>
 800143a:	4603      	mov	r3, r0
 800143c:	4a5d      	ldr	r2, [pc, #372]	; (80015b4 <inverse_kinematics+0x1c4>)
 800143e:	6013      	str	r3, [r2, #0]
	theta_1_ref = 2*atan( (d_inner_ref + 42)/(X_ref_temp + 10) );  // in radians
 8001440:	4b5c      	ldr	r3, [pc, #368]	; (80015b4 <inverse_kinematics+0x1c4>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80015b8 <inverse_kinematics+0x1c8>
 800144a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800145a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800145e:	ee16 0a90 	vmov	r0, s13
 8001462:	f7ff f827 	bl	80004b4 <__aeabi_f2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	ec43 2b10 	vmov	d0, r2, r3
 800146e:	f008 fb6f 	bl	8009b50 <atan>
 8001472:	ec51 0b10 	vmov	r0, r1, d0
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	f7fe febd 	bl	80001f8 <__adddf3>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb45 	bl	8000b14 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <inverse_kinematics+0x1cc>)
 800148e:	6013      	str	r3, [r2, #0]
	// theta_3_ref = M_PI + theta_1_ref;                      // in radians -- NOT REQUIRED

	// Apply the cos theorem
	d_middle_ref = inverse_cos_theorem(D_LOWER_TO_MAIN_POLE, L_LOWER_POLE, (theta_1_ref - M_PI_2));
 8001490:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <inverse_kinematics+0x1cc>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f80d 	bl	80004b4 <__aeabi_f2d>
 800149a:	a343      	add	r3, pc, #268	; (adr r3, 80015a8 <inverse_kinematics+0x1b8>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7fe fea8 	bl	80001f4 <__aeabi_dsub>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fb32 	bl	8000b14 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	ee01 3a10 	vmov	s2, r3
 80014b6:	eddf 0a42 	vldr	s1, [pc, #264]	; 80015c0 <inverse_kinematics+0x1d0>
 80014ba:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80015c4 <inverse_kinematics+0x1d4>
 80014be:	f000 f8f5 	bl	80016ac <inverse_cos_theorem>
 80014c2:	eef0 7a40 	vmov.f32	s15, s0
 80014c6:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <inverse_kinematics+0x1d8>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
	d_outer_ref = inverse_cos_theorem(D_HIGHER_TO_MAIN_POLE, L_HIGHER_POLE, (theta_1_ref - M_PI_2));
 80014cc:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <inverse_kinematics+0x1cc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ffef 	bl	80004b4 <__aeabi_f2d>
 80014d6:	a334      	add	r3, pc, #208	; (adr r3, 80015a8 <inverse_kinematics+0x1b8>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fe8a 	bl	80001f4 <__aeabi_dsub>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb14 	bl	8000b14 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	ee01 3a10 	vmov	s2, r3
 80014f2:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 80014f6:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80014fa:	f000 f8d7 	bl	80016ac <inverse_cos_theorem>
 80014fe:	eef0 7a40 	vmov.f32	s15, s0
 8001502:	4b32      	ldr	r3, [pc, #200]	; (80015cc <inverse_kinematics+0x1dc>)
 8001504:	edc3 7a00 	vstr	s15, [r3]

	// Determine motor position reference values (everything in cm)
	mot_inner_set_pos = d_inner_ref - D_INNER_OFFSET;
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <inverse_kinematics+0x1c4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <inverse_kinematics+0x1e0>)
 800150e:	6013      	str	r3, [r2, #0]
	mot_middle_set_pos = d_middle_ref - D_MIDDLE_OFFSET;
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <inverse_kinematics+0x1d8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a2f      	ldr	r2, [pc, #188]	; (80015d4 <inverse_kinematics+0x1e4>)
 8001516:	6013      	str	r3, [r2, #0]
	mot_outer_set_pos = d_outer_ref - D_OUTER_OFFSET;
 8001518:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <inverse_kinematics+0x1dc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2e      	ldr	r2, [pc, #184]	; (80015d8 <inverse_kinematics+0x1e8>)
 800151e:	6013      	str	r3, [r2, #0]

	// If the set value is larger than the limit, set error code to 'r' ('out of range' error)
	if ((mot_inner_set_pos>INNER_SET_LIMIT_MAX) || (mot_inner_set_pos<INNER_SET_LIMIT_MIN)) error_code ='r';
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <inverse_kinematics+0x1e0>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	dc07      	bgt.n	8001544 <inverse_kinematics+0x154>
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <inverse_kinematics+0x1e0>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	d502      	bpl.n	800154a <inverse_kinematics+0x15a>
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <inverse_kinematics+0x1ec>)
 8001546:	2272      	movs	r2, #114	; 0x72
 8001548:	701a      	strb	r2, [r3, #0]
	if ((mot_middle_set_pos>MIDDLE_SET_LIMIT_MAX) || (mot_middle_set_pos<MIDDLE_SET_LIMIT_MIN)) error_code ='r';
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <inverse_kinematics+0x1e4>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155c:	dc07      	bgt.n	800156e <inverse_kinematics+0x17e>
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <inverse_kinematics+0x1e4>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d502      	bpl.n	8001574 <inverse_kinematics+0x184>
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <inverse_kinematics+0x1ec>)
 8001570:	2272      	movs	r2, #114	; 0x72
 8001572:	701a      	strb	r2, [r3, #0]
	if ((mot_outer_set_pos>OUTER_SET_LIMIT_MAX) || (mot_outer_set_pos<OUTER_SET_LIMIT_MIN)) error_code ='r';
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <inverse_kinematics+0x1e8>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800157e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	dc08      	bgt.n	800159a <inverse_kinematics+0x1aa>
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <inverse_kinematics+0x1e8>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	d400      	bmi.n	800159a <inverse_kinematics+0x1aa>
}
 8001598:	e002      	b.n	80015a0 <inverse_kinematics+0x1b0>
	if ((mot_outer_set_pos>OUTER_SET_LIMIT_MAX) || (mot_outer_set_pos<OUTER_SET_LIMIT_MIN)) error_code ='r';
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <inverse_kinematics+0x1ec>)
 800159c:	2272      	movs	r2, #114	; 0x72
 800159e:	701a      	strb	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	54442d18 	.word	0x54442d18
 80015ac:	3ff921fb 	.word	0x3ff921fb
 80015b0:	44e90000 	.word	0x44e90000
 80015b4:	20000288 	.word	0x20000288
 80015b8:	42280000 	.word	0x42280000
 80015bc:	20000284 	.word	0x20000284
 80015c0:	41c75bf5 	.word	0x41c75bf5
 80015c4:	41701d15 	.word	0x41701d15
 80015c8:	2000028c 	.word	0x2000028c
 80015cc:	20000290 	.word	0x20000290
 80015d0:	200002dc 	.word	0x200002dc
 80015d4:	200002e0 	.word	0x200002e0
 80015d8:	200002e4 	.word	0x200002e4
 80015dc:	200002a8 	.word	0x200002a8

080015e0 <forward_kinematics>:

void forward_kinematics(){
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	// Find d_middle_curr & d_inner_curr
	d_middle_curr = enc_middle_pos_cm + D_MIDDLE_OFFSET;
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <forward_kinematics+0xa4>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001688 <forward_kinematics+0xa8>
 80015ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <forward_kinematics+0xac>)
 80015f4:	edc3 7a00 	vstr	s15, [r3]
	d_inner_curr = enc_inner_pos_cm + D_INNER_OFFSET;
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <forward_kinematics+0xb0>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001688 <forward_kinematics+0xa8>
 8001602:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <forward_kinematics+0xb4>)
 8001608:	edc3 7a00 	vstr	s15, [r3]

	// Find theta_1_curr using cos theorem
	theta_1_curr = forward_cos_theorem(D_LOWER_TO_MAIN_POLE, L_LOWER_POLE, d_middle_curr);
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <forward_kinematics+0xac>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	eeb0 1a67 	vmov.f32	s2, s15
 8001616:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001698 <forward_kinematics+0xb8>
 800161a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800169c <forward_kinematics+0xbc>
 800161e:	f000 f8c3 	bl	80017a8 <forward_cos_theorem>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <forward_kinematics+0xc0>)
 8001628:	edc3 7a00 	vstr	s15, [r3]

	// Update X_curr from the values
	X_curr = d_inner_curr*sin(theta_1_curr) - 10;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <forward_kinematics+0xb4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff3f 	bl	80004b4 <__aeabi_f2d>
 8001636:	4604      	mov	r4, r0
 8001638:	460d      	mov	r5, r1
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <forward_kinematics+0xc0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff38 	bl	80004b4 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f008 fc80 	bl	8009f50 <sin>
 8001650:	ec53 2b10 	vmov	r2, r3, d0
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7fe ff84 	bl	8000564 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <forward_kinematics+0xc4>)
 800166a:	f7fe fdc3 	bl	80001f4 <__aeabi_dsub>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa4d 	bl	8000b14 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <forward_kinematics+0xc8>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	bdb0      	pop	{r4, r5, r7, pc}
 8001684:	200002d4 	.word	0x200002d4
 8001688:	00000000 	.word	0x00000000
 800168c:	2000029c 	.word	0x2000029c
 8001690:	200002d0 	.word	0x200002d0
 8001694:	200002a0 	.word	0x200002a0
 8001698:	41c75bf5 	.word	0x41c75bf5
 800169c:	41701d15 	.word	0x41701d15
 80016a0:	20000298 	.word	0x20000298
 80016a4:	40240000 	.word	0x40240000
 80016a8:	200002a4 	.word	0x200002a4

080016ac <inverse_cos_theorem>:

float inverse_cos_theorem(float a, float b, float beta){
 80016ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	ed87 0a03 	vstr	s0, [r7, #12]
 80016b8:	edc7 0a02 	vstr	s1, [r7, #8]
 80016bc:	ed87 1a01 	vstr	s2, [r7, #4]
	// Given a, b, and the angle beta; find the other side length of the triangle
	return sqrt( (b*b - a*a*sin(beta)*sin(beta)) ) + a*cos(beta);
 80016c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016c8:	ee17 0a90 	vmov	r0, s15
 80016cc:	f7fe fef2 	bl	80004b4 <__aeabi_f2d>
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
 80016d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016dc:	ee17 0a90 	vmov	r0, s15
 80016e0:	f7fe fee8 	bl	80004b4 <__aeabi_f2d>
 80016e4:	4680      	mov	r8, r0
 80016e6:	4689      	mov	r9, r1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7fe fee3 	bl	80004b4 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ec43 2b10 	vmov	d0, r2, r3
 80016f6:	f008 fc2b 	bl	8009f50 <sin>
 80016fa:	ec53 2b10 	vmov	r2, r3, d0
 80016fe:	4640      	mov	r0, r8
 8001700:	4649      	mov	r1, r9
 8001702:	f7fe ff2f 	bl	8000564 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4690      	mov	r8, r2
 800170c:	4699      	mov	r9, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7fe fed0 	bl	80004b4 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	ec43 2b10 	vmov	d0, r2, r3
 800171c:	f008 fc18 	bl	8009f50 <sin>
 8001720:	ec53 2b10 	vmov	r2, r3, d0
 8001724:	4640      	mov	r0, r8
 8001726:	4649      	mov	r1, r9
 8001728:	f7fe ff1c 	bl	8000564 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe fd5e 	bl	80001f4 <__aeabi_dsub>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	ec43 2b17 	vmov	d7, r2, r3
 8001740:	eeb0 0a47 	vmov.f32	s0, s14
 8001744:	eef0 0a67 	vmov.f32	s1, s15
 8001748:	f008 fc8e 	bl	800a068 <sqrt>
 800174c:	ec59 8b10 	vmov	r8, r9, d0
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7fe feaf 	bl	80004b4 <__aeabi_f2d>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe feaa 	bl	80004b4 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	ec43 2b10 	vmov	d0, r2, r3
 8001768:	f008 fb92 	bl	8009e90 <cos>
 800176c:	ec53 2b10 	vmov	r2, r3, d0
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe fef6 	bl	8000564 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4640      	mov	r0, r8
 800177e:	4649      	mov	r1, r9
 8001780:	f7fe fd3a 	bl	80001f8 <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f9c2 	bl	8000b14 <__aeabi_d2f>
 8001790:	4603      	mov	r3, r0
 8001792:	ee07 3a90 	vmov	s15, r3
}
 8001796:	eeb0 0a67 	vmov.f32	s0, s15
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017a2:	0000      	movs	r0, r0
 80017a4:	0000      	movs	r0, r0
	...

080017a8 <forward_cos_theorem>:

float forward_cos_theorem(float a, float b, float c){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80017b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80017b6:	ed87 1a01 	vstr	s2, [r7, #4]
	// Given a, b, and c; find the angle between a and c, then find theta_1
	return M_PI_2 + acos( (a*a + c*c - b*b)/(2*a*c) );
 80017ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80017be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80017d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017da:	edd7 7a03 	vldr	s15, [r7, #12]
 80017de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017ee:	ee16 0a90 	vmov	r0, s13
 80017f2:	f7fe fe5f 	bl	80004b4 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	ec43 2b10 	vmov	d0, r2, r3
 80017fe:	f008 fbff 	bl	800a000 <acos>
 8001802:	ec51 0b10 	vmov	r0, r1, d0
 8001806:	a30a      	add	r3, pc, #40	; (adr r3, 8001830 <forward_cos_theorem+0x88>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fcf4 	bl	80001f8 <__adddf3>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f97c 	bl	8000b14 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	ee07 3a90 	vmov	s15, r3
}
 8001822:	eeb0 0a67 	vmov.f32	s0, s15
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	54442d18 	.word	0x54442d18
 8001834:	3ff921fb 	.word	0x3ff921fb

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	e7fe      	b.n	8001840 <Error_Handler+0x8>
	...

08001844 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <HAL_MspInit+0x4c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <HAL_MspInit+0x4c>)
 8001854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001858:	6453      	str	r3, [r2, #68]	; 0x44
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_MspInit+0x4c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_MspInit+0x4c>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_MspInit+0x4c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <HAL_TIM_Base_MspInit+0xa8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d10e      	bne.n	80018c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a24      	ldr	r2, [pc, #144]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018c2:	e036      	b.n	8001932 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_TIM_Base_MspInit+0xb0>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d116      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a1a      	ldr	r2, [pc, #104]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	201d      	movs	r0, #29
 80018f0:	f000 fedf 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f4:	201d      	movs	r0, #29
 80018f6:	f000 fef8 	bl	80026ea <HAL_NVIC_EnableIRQ>
}
 80018fa:	e01a      	b.n	8001932 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a11      	ldr	r2, [pc, #68]	; (8001948 <HAL_TIM_Base_MspInit+0xb4>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d115      	bne.n	8001932 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_TIM_Base_MspInit+0xac>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	201e      	movs	r0, #30
 8001928:	f000 fec3 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800192c:	201e      	movs	r0, #30
 800192e:	f000 fedc 	bl	80026ea <HAL_NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40010000 	.word	0x40010000
 8001940:	40023800 	.word	0x40023800
 8001944:	40000400 	.word	0x40000400
 8001948:	40000800 	.word	0x40000800

0800194c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <HAL_TIM_MspPostInit+0x68>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d11e      	bne.n	80019ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_TIM_MspPostInit+0x6c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_TIM_MspPostInit+0x6c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_TIM_MspPostInit+0x6c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800198a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800198e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800199c:	2301      	movs	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <HAL_TIM_MspPostInit+0x70>)
 80019a8:	f000 feba 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40010000 	.word	0x40010000
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 fd32 	bl	8002474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	/* Check the direction of the first motor */
	if(HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4811      	ldr	r0, [pc, #68]	; (8001a60 <EXTI0_IRQHandler+0x4c>)
 8001a1c:	f001 f804 	bl	8002a28 <HAL_GPIO_ReadPin>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d005      	beq.n	8001a32 <EXTI0_IRQHandler+0x1e>
		/* Update the position of the first motor */
		enc_inner_pos ++;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e004      	b.n	8001a3c <EXTI0_IRQHandler+0x28>
	}else{
		enc_inner_pos --;
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a3a:	6013      	str	r3, [r2, #0]
	}
	enc_inner_pos_cm = (float)enc_inner_pos/(float)(INNER_GEAR_RATIO);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <EXTI0_IRQHandler+0x50>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001a68 <EXTI0_IRQHandler+0x54>
 8001a4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <EXTI0_IRQHandler+0x58>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f001 f832 	bl	8002ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40020000 	.word	0x40020000
 8001a64:	200002c4 	.word	0x200002c4
 8001a68:	42200000 	.word	0x42200000
 8001a6c:	200002d0 	.word	0x200002d0

08001a70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	/* Check the direction of the second motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC2_B_Pin)){
 8001a74:	2108      	movs	r1, #8
 8001a76:	4811      	ldr	r0, [pc, #68]	; (8001abc <EXTI2_IRQHandler+0x4c>)
 8001a78:	f000 ffd6 	bl	8002a28 <HAL_GPIO_ReadPin>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <EXTI2_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_middle_pos ++;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e004      	b.n	8001a98 <EXTI2_IRQHandler+0x28>
		}else{
			enc_middle_pos --;
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a96:	6013      	str	r3, [r2, #0]
		}
		enc_middle_pos_cm = (float)enc_middle_pos/(float)(MIDDLE_GEAR_RATIO);
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <EXTI2_IRQHandler+0x50>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ac4 <EXTI2_IRQHandler+0x54>
 8001aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <EXTI2_IRQHandler+0x58>)
 8001aae:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 8001ab2:	2004      	movs	r0, #4
 8001ab4:	f001 f804 	bl	8002ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	200002c8 	.word	0x200002c8
 8001ac4:	43480000 	.word	0x43480000
 8001ac8:	200002d4 	.word	0x200002d4

08001acc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	/* Check the direction of the third motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC3_B_Pin)){
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <EXTI4_IRQHandler+0x4c>)
 8001ad4:	f000 ffa8 	bl	8002a28 <HAL_GPIO_ReadPin>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <EXTI4_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_outer_pos ++;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e004      	b.n	8001af4 <EXTI4_IRQHandler+0x28>
		}else{
			enc_outer_pos --;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001af2:	6013      	str	r3, [r2, #0]
		}
		enc_outer_pos_cm = (float)enc_outer_pos/(float)(OUTER_GEAR_RATIO);
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <EXTI4_IRQHandler+0x50>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b00:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001b20 <EXTI4_IRQHandler+0x54>
 8001b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <EXTI4_IRQHandler+0x58>)
 8001b0a:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_A_Pin);
 8001b0e:	2010      	movs	r0, #16
 8001b10:	f000 ffd6 	bl	8002ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	200002cc 	.word	0x200002cc
 8001b20:	42200000 	.word	0x42200000
 8001b24:	200002d8 	.word	0x200002d8

08001b28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	// This timer frequency should be determined such that the interpolation
	// interval is approximately equal to the distance that the system can
	// travel in the timer period. (??? IS IT SO? IT LOOKS LIKE IT WILL WORK
	// AS SOON AS THE TIMER PERIOD IS LOW ENOUGH.)
	float X_ref_temp = X_curr + INTERPOLATION_INTERVAL;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <TIM3_IRQHandler+0x84>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b3c:	edc7 7a01 	vstr	s15, [r7, #4]
	if (X_ref_temp < X_ref){
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <TIM3_IRQHandler+0x88>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	d504      	bpl.n	8001b5e <TIM3_IRQHandler+0x36>
		inverse_kinematics(X_ref_temp);
 8001b54:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b58:	f7ff fc4a 	bl	80013f0 <inverse_kinematics>
 8001b5c:	e006      	b.n	8001b6c <TIM3_IRQHandler+0x44>
	}
	else{
		inverse_kinematics(X_ref);
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <TIM3_IRQHandler+0x88>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	eeb0 0a67 	vmov.f32	s0, s15
 8001b68:	f7ff fc42 	bl	80013f0 <inverse_kinematics>
	}

	if(X_ref == X_curr){
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <TIM3_IRQHandler+0x88>)
 8001b6e:	ed93 7a00 	vldr	s14, [r3]
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <TIM3_IRQHandler+0x84>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	d10c      	bne.n	8001b9c <TIM3_IRQHandler+0x74>
		memcpy(&usb_out, &acknowledge_message, sizeof(usb_out));
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <TIM3_IRQHandler+0x8c>)
 8001b84:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <TIM3_IRQHandler+0x90>)
 8001b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b8a:	e883 0003 	stmia.w	r3, {r0, r1}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 8001b8e:	2108      	movs	r1, #8
 8001b90:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <TIM3_IRQHandler+0x8c>)
 8001b92:	f007 fb59 	bl	8009248 <CDC_Transmit_FS>
		ack_to_be_sent = 0;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <TIM3_IRQHandler+0x94>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b9c:	4808      	ldr	r0, [pc, #32]	; (8001bc0 <TIM3_IRQHandler+0x98>)
 8001b9e:	f003 f81b 	bl	8004bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002a4 	.word	0x200002a4
 8001bb0:	20000294 	.word	0x20000294
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	200002aa 	.word	0x200002aa
 8001bc0:	200001ec 	.word	0x200001ec
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(error_code == 0 && external_shutdown == 0){
 8001bce:	4bad      	ldr	r3, [pc, #692]	; (8001e84 <TIM4_IRQHandler+0x2bc>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 825c 	bne.w	8002090 <TIM4_IRQHandler+0x4c8>
 8001bd8:	4bab      	ldr	r3, [pc, #684]	; (8001e88 <TIM4_IRQHandler+0x2c0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 8257 	bne.w	8002090 <TIM4_IRQHandler+0x4c8>

	/* Determine PID errors */
	float inner_pos_error = mot_inner_set_pos - enc_inner_pos_cm;
 8001be2:	4baa      	ldr	r3, [pc, #680]	; (8001e8c <TIM4_IRQHandler+0x2c4>)
 8001be4:	ed93 7a00 	vldr	s14, [r3]
 8001be8:	4ba9      	ldr	r3, [pc, #676]	; (8001e90 <TIM4_IRQHandler+0x2c8>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf2:	edc7 7a05 	vstr	s15, [r7, #20]
	float middle_pos_error = mot_middle_set_pos - enc_middle_pos_cm;
 8001bf6:	4ba7      	ldr	r3, [pc, #668]	; (8001e94 <TIM4_IRQHandler+0x2cc>)
 8001bf8:	ed93 7a00 	vldr	s14, [r3]
 8001bfc:	4ba6      	ldr	r3, [pc, #664]	; (8001e98 <TIM4_IRQHandler+0x2d0>)
 8001bfe:	edd3 7a00 	vldr	s15, [r3]
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	edc7 7a04 	vstr	s15, [r7, #16]
	float outer_pos_error = mot_outer_set_pos - enc_outer_pos_cm;
 8001c0a:	4ba4      	ldr	r3, [pc, #656]	; (8001e9c <TIM4_IRQHandler+0x2d4>)
 8001c0c:	ed93 7a00 	vldr	s14, [r3]
 8001c10:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <TIM4_IRQHandler+0x2d8>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	edc7 7a03 	vstr	s15, [r7, #12]

	float inner_der_error=(inner_pos_error-pre_inner_pos_error)*PID_freq;
 8001c1e:	4ba1      	ldr	r3, [pc, #644]	; (8001ea4 <TIM4_IRQHandler+0x2dc>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c2c:	4b9e      	ldr	r3, [pc, #632]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c3c:	edc7 7a02 	vstr	s15, [r7, #8]
	float middle_der_error=(middle_pos_error-pre_middle_pos_error)*PID_freq;
 8001c40:	4b9a      	ldr	r3, [pc, #616]	; (8001eac <TIM4_IRQHandler+0x2e4>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c4e:	4b96      	ldr	r3, [pc, #600]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	edc7 7a01 	vstr	s15, [r7, #4]
	float outer_der_error=(outer_pos_error-pre_outer_pos_error)*PID_freq;
 8001c62:	4b93      	ldr	r3, [pc, #588]	; (8001eb0 <TIM4_IRQHandler+0x2e8>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c70:	4b8d      	ldr	r3, [pc, #564]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c80:	edc7 7a00 	vstr	s15, [r7]

	inner_int_error+=inner_pos_error/PID_freq;
 8001c84:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c90:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c98:	4b86      	ldr	r3, [pc, #536]	; (8001eb4 <TIM4_IRQHandler+0x2ec>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca2:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <TIM4_IRQHandler+0x2ec>)
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
	middle_int_error+=middle_pos_error/PID_freq;
 8001ca8:	4b7f      	ldr	r3, [pc, #508]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb4:	edd7 6a04 	vldr	s13, [r7, #16]
 8001cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cbc:	4b7e      	ldr	r3, [pc, #504]	; (8001eb8 <TIM4_IRQHandler+0x2f0>)
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	4b7c      	ldr	r3, [pc, #496]	; (8001eb8 <TIM4_IRQHandler+0x2f0>)
 8001cc8:	edc3 7a00 	vstr	s15, [r3]
	outer_int_error+=outer_pos_error/PID_freq;
 8001ccc:	4b76      	ldr	r3, [pc, #472]	; (8001ea8 <TIM4_IRQHandler+0x2e0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd8:	edd7 6a03 	vldr	s13, [r7, #12]
 8001cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce0:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <TIM4_IRQHandler+0x2f4>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	4b74      	ldr	r3, [pc, #464]	; (8001ebc <TIM4_IRQHandler+0x2f4>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]

	pre_inner_pos_error=inner_pos_error;
 8001cf0:	4a6c      	ldr	r2, [pc, #432]	; (8001ea4 <TIM4_IRQHandler+0x2dc>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	6013      	str	r3, [r2, #0]
	pre_middle_pos_error=middle_pos_error;
 8001cf6:	4a6d      	ldr	r2, [pc, #436]	; (8001eac <TIM4_IRQHandler+0x2e4>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	6013      	str	r3, [r2, #0]
	pre_outer_pos_error=outer_pos_error;
 8001cfc:	4a6c      	ldr	r2, [pc, #432]	; (8001eb0 <TIM4_IRQHandler+0x2e8>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6013      	str	r3, [r2, #0]

	/* Set the duty (only proportional implemented for now) */
	duty_inner = (int)(kp_inner*inner_pos_error+kd_inner*inner_der_error+ki_inner*inner_int_error);
 8001d02:	4b6f      	ldr	r3, [pc, #444]	; (8001ec0 <TIM4_IRQHandler+0x2f8>)
 8001d04:	ed93 7a00 	vldr	s14, [r3]
 8001d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d10:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <TIM4_IRQHandler+0x2fc>)
 8001d12:	edd3 6a00 	vldr	s13, [r3]
 8001d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d22:	4b69      	ldr	r3, [pc, #420]	; (8001ec8 <TIM4_IRQHandler+0x300>)
 8001d24:	edd3 6a00 	vldr	s13, [r3]
 8001d28:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <TIM4_IRQHandler+0x2ec>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3a:	ee17 2a90 	vmov	r2, s15
 8001d3e:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <TIM4_IRQHandler+0x304>)
 8001d40:	601a      	str	r2, [r3, #0]
	duty_middle = (int)(kp_middle*middle_pos_error+kd_middle*middle_der_error+ki_middle*middle_int_error);
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <TIM4_IRQHandler+0x308>)
 8001d44:	ed93 7a00 	vldr	s14, [r3]
 8001d48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d50:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <TIM4_IRQHandler+0x30c>)
 8001d52:	edd3 6a00 	vldr	s13, [r3]
 8001d56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d62:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <TIM4_IRQHandler+0x310>)
 8001d64:	edd3 6a00 	vldr	s13, [r3]
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <TIM4_IRQHandler+0x2f0>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7a:	ee17 2a90 	vmov	r2, s15
 8001d7e:	4b57      	ldr	r3, [pc, #348]	; (8001edc <TIM4_IRQHandler+0x314>)
 8001d80:	601a      	str	r2, [r3, #0]
	duty_outer = (int)(kp_outer*outer_pos_error+kd_outer*outer_der_error+ki_outer*outer_int_error);
 8001d82:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <TIM4_IRQHandler+0x318>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d90:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <TIM4_IRQHandler+0x31c>)
 8001d92:	edd3 6a00 	vldr	s13, [r3]
 8001d96:	edd7 7a00 	vldr	s15, [r7]
 8001d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da2:	4b51      	ldr	r3, [pc, #324]	; (8001ee8 <TIM4_IRQHandler+0x320>)
 8001da4:	edd3 6a00 	vldr	s13, [r3]
 8001da8:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <TIM4_IRQHandler+0x2f4>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dba:	ee17 2a90 	vmov	r2, s15
 8001dbe:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <TIM4_IRQHandler+0x324>)
 8001dc0:	601a      	str	r2, [r3, #0]

	/* Set the direction */
	if(duty_inner > 0){
 8001dc2:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <TIM4_IRQHandler+0x304>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	dd0e      	ble.n	8001de8 <TIM4_IRQHandler+0x220>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, HIGH);
 8001dca:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2108      	movs	r1, #8
 8001dd2:	4848      	ldr	r0, [pc, #288]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001dd4:	f000 fe40 	bl	8002a58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 8001dd8:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	2110      	movs	r1, #16
 8001de0:	4844      	ldr	r0, [pc, #272]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001de2:	f000 fe39 	bl	8002a58 <HAL_GPIO_WritePin>
 8001de6:	e012      	b.n	8001e0e <TIM4_IRQHandler+0x246>
	}
	else{
			duty_inner = -duty_inner;
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <TIM4_IRQHandler+0x304>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	425b      	negs	r3, r3
 8001dee:	4a37      	ldr	r2, [pc, #220]	; (8001ecc <TIM4_IRQHandler+0x304>)
 8001df0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, HIGH);
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	2110      	movs	r1, #16
 8001dfa:	483e      	ldr	r0, [pc, #248]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001dfc:	f000 fe2c 	bl	8002a58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 8001e00:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	2108      	movs	r1, #8
 8001e08:	483a      	ldr	r0, [pc, #232]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e0a:	f000 fe25 	bl	8002a58 <HAL_GPIO_WritePin>
	}
	if(duty_middle > 0){
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <TIM4_IRQHandler+0x314>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	dd0e      	ble.n	8001e34 <TIM4_IRQHandler+0x26c>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, HIGH);
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	4835      	ldr	r0, [pc, #212]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e20:	f000 fe1a 	bl	8002a58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, LOW);
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2140      	movs	r1, #64	; 0x40
 8001e2c:	4831      	ldr	r0, [pc, #196]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e2e:	f000 fe13 	bl	8002a58 <HAL_GPIO_WritePin>
 8001e32:	e012      	b.n	8001e5a <TIM4_IRQHandler+0x292>
	}
	else{
			duty_middle = -duty_middle;
 8001e34:	4b29      	ldr	r3, [pc, #164]	; (8001edc <TIM4_IRQHandler+0x314>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	425b      	negs	r3, r3
 8001e3a:	4a28      	ldr	r2, [pc, #160]	; (8001edc <TIM4_IRQHandler+0x314>)
 8001e3c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, HIGH);
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	2140      	movs	r1, #64	; 0x40
 8001e46:	482b      	ldr	r0, [pc, #172]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e48:	f000 fe06 	bl	8002a58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, LOW);
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	2120      	movs	r1, #32
 8001e54:	4827      	ldr	r0, [pc, #156]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e56:	f000 fdff 	bl	8002a58 <HAL_GPIO_WritePin>
	}
	if(duty_outer > 0){
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <TIM4_IRQHandler+0x324>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	dd4c      	ble.n	8001efc <TIM4_IRQHandler+0x334>
			HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, HIGH);
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <TIM4_IRQHandler+0x328>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e6c:	f000 fdf4 	bl	8002a58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, LOW);
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <TIM4_IRQHandler+0x330>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7a:	481e      	ldr	r0, [pc, #120]	; (8001ef4 <TIM4_IRQHandler+0x32c>)
 8001e7c:	f000 fdec 	bl	8002a58 <HAL_GPIO_WritePin>
 8001e80:	e050      	b.n	8001f24 <TIM4_IRQHandler+0x35c>
 8001e82:	bf00      	nop
 8001e84:	200002a8 	.word	0x200002a8
 8001e88:	200002a9 	.word	0x200002a9
 8001e8c:	200002dc 	.word	0x200002dc
 8001e90:	200002d0 	.word	0x200002d0
 8001e94:	200002e0 	.word	0x200002e0
 8001e98:	200002d4 	.word	0x200002d4
 8001e9c:	200002e4 	.word	0x200002e4
 8001ea0:	200002d8 	.word	0x200002d8
 8001ea4:	200002e8 	.word	0x200002e8
 8001ea8:	2000027c 	.word	0x2000027c
 8001eac:	200002ec 	.word	0x200002ec
 8001eb0:	200002f0 	.word	0x200002f0
 8001eb4:	200002f4 	.word	0x200002f4
 8001eb8:	200002f8 	.word	0x200002f8
 8001ebc:	200002fc 	.word	0x200002fc
 8001ec0:	20000018 	.word	0x20000018
 8001ec4:	20000304 	.word	0x20000304
 8001ec8:	20000300 	.word	0x20000300
 8001ecc:	20000318 	.word	0x20000318
 8001ed0:	2000001c 	.word	0x2000001c
 8001ed4:	2000030c 	.word	0x2000030c
 8001ed8:	20000308 	.word	0x20000308
 8001edc:	2000031c 	.word	0x2000031c
 8001ee0:	20000020 	.word	0x20000020
 8001ee4:	20000314 	.word	0x20000314
 8001ee8:	20000310 	.word	0x20000310
 8001eec:	20000320 	.word	0x20000320
 8001ef0:	20000024 	.word	0x20000024
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	20000324 	.word	0x20000324
	}
	else{
			duty_outer = -duty_outer;
 8001efc:	4b74      	ldr	r3, [pc, #464]	; (80020d0 <TIM4_IRQHandler+0x508>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	425b      	negs	r3, r3
 8001f02:	4a73      	ldr	r2, [pc, #460]	; (80020d0 <TIM4_IRQHandler+0x508>)
 8001f04:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, HIGH);
 8001f06:	4b73      	ldr	r3, [pc, #460]	; (80020d4 <TIM4_IRQHandler+0x50c>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f10:	4871      	ldr	r0, [pc, #452]	; (80020d8 <TIM4_IRQHandler+0x510>)
 8001f12:	f000 fda1 	bl	8002a58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, LOW);
 8001f16:	4b71      	ldr	r3, [pc, #452]	; (80020dc <TIM4_IRQHandler+0x514>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	486e      	ldr	r0, [pc, #440]	; (80020d8 <TIM4_IRQHandler+0x510>)
 8001f20:	f000 fd9a 	bl	8002a58 <HAL_GPIO_WritePin>
	}

	/* Limit the duty */
	if(duty_inner > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001f24:	4b6e      	ldr	r3, [pc, #440]	; (80020e0 <TIM4_IRQHandler+0x518>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fab1 	bl	8000490 <__aeabi_i2d>
 8001f2e:	4604      	mov	r4, r0
 8001f30:	460d      	mov	r5, r1
 8001f32:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fa99 	bl	8000470 <__aeabi_ui2d>
 8001f3e:	a362      	add	r3, pc, #392	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb0e 	bl	8000564 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	4629      	mov	r1, r5
 8001f50:	f7fe fd98 	bl	8000a84 <__aeabi_dcmpgt>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d013      	beq.n	8001f82 <TIM4_IRQHandler+0x3ba>
			duty_inner = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001f5a:	4b62      	ldr	r3, [pc, #392]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fa85 	bl	8000470 <__aeabi_ui2d>
 8001f66:	a358      	add	r3, pc, #352	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fafa 	bl	8000564 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fda4 	bl	8000ac4 <__aeabi_d2iz>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <TIM4_IRQHandler+0x518>)
 8001f80:	6013      	str	r3, [r2, #0]
		}
	if(duty_middle > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001f82:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <TIM4_IRQHandler+0x520>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fa82 	bl	8000490 <__aeabi_i2d>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1
 8001f90:	4b54      	ldr	r3, [pc, #336]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fa6a 	bl	8000470 <__aeabi_ui2d>
 8001f9c:	a34a      	add	r3, pc, #296	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f7fe fadf 	bl	8000564 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4620      	mov	r0, r4
 8001fac:	4629      	mov	r1, r5
 8001fae:	f7fe fd69 	bl	8000a84 <__aeabi_dcmpgt>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <TIM4_IRQHandler+0x418>
			duty_middle = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fa56 	bl	8000470 <__aeabi_ui2d>
 8001fc4:	a340      	add	r3, pc, #256	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe facb 	bl	8000564 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fd75 	bl	8000ac4 <__aeabi_d2iz>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a42      	ldr	r2, [pc, #264]	; (80020e8 <TIM4_IRQHandler+0x520>)
 8001fde:	6013      	str	r3, [r2, #0]
		}
	if(duty_outer > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <TIM4_IRQHandler+0x508>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa53 	bl	8000490 <__aeabi_i2d>
 8001fea:	4604      	mov	r4, r0
 8001fec:	460d      	mov	r5, r1
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa3b 	bl	8000470 <__aeabi_ui2d>
 8001ffa:	a333      	add	r3, pc, #204	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe fab0 	bl	8000564 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe fd3a 	bl	8000a84 <__aeabi_dcmpgt>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d013      	beq.n	800203e <TIM4_IRQHandler+0x476>
			duty_outer = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <TIM4_IRQHandler+0x51c>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	3301      	adds	r3, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa27 	bl	8000470 <__aeabi_ui2d>
 8002022:	a329      	add	r3, pc, #164	; (adr r3, 80020c8 <TIM4_IRQHandler+0x500>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe fa9c 	bl	8000564 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fd46 	bl	8000ac4 <__aeabi_d2iz>
 8002038:	4603      	mov	r3, r0
 800203a:	4a25      	ldr	r2, [pc, #148]	; (80020d0 <TIM4_IRQHandler+0x508>)
 800203c:	6013      	str	r3, [r2, #0]
		}

	TIM1->CCR1 = duty_inner;
 800203e:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <TIM4_IRQHandler+0x518>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <TIM4_IRQHandler+0x524>)
 8002044:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_middle;
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <TIM4_IRQHandler+0x520>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <TIM4_IRQHandler+0x524>)
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_outer;
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <TIM4_IRQHandler+0x508>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <TIM4_IRQHandler+0x524>)
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c

	// Send acknowledge if the system reaches steady state
	if (ack_to_be_sent == 1 && inner_pos_error == 0){
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <TIM4_IRQHandler+0x528>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d114      	bne.n	8002088 <TIM4_IRQHandler+0x4c0>
 800205e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002062:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	d10d      	bne.n	8002088 <TIM4_IRQHandler+0x4c0>
		steady_state_counter++;
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <TIM4_IRQHandler+0x52c>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <TIM4_IRQHandler+0x52c>)
 8002076:	701a      	strb	r2, [r3, #0]
		if(steady_state_counter == 1){
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <TIM4_IRQHandler+0x52c>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <TIM4_IRQHandler+0x4bc>
			forward_kinematics();
 8002080:	f7ff faae 	bl	80015e0 <forward_kinematics>
		}

		if (steady_state_counter == 255){
 8002084:	bf00      	nop
	if(error_code == 0 && external_shutdown == 0){
 8002086:	e016      	b.n	80020b6 <TIM4_IRQHandler+0x4ee>
			// forward_kinematics(); X_curr should be updated above, as soon as inner_pos_error = 0 !!!
		}
	}
	else {
		steady_state_counter = 0;
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <TIM4_IRQHandler+0x52c>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
	if(error_code == 0 && external_shutdown == 0){
 800208e:	e012      	b.n	80020b6 <TIM4_IRQHandler+0x4ee>
	}

	}
	else{
		TIM1->CCR1 = 0;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <TIM4_IRQHandler+0x524>)
 8002092:	2200      	movs	r2, #0
 8002094:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <TIM4_IRQHandler+0x524>)
 8002098:	2200      	movs	r2, #0
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <TIM4_IRQHandler+0x524>)
 800209e:	2200      	movs	r2, #0
 80020a0:	63da      	str	r2, [r3, #60]	; 0x3c
		memcpy(&usb_out, &error_message, sizeof(usb_out));
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <TIM4_IRQHandler+0x530>)
 80020a4:	4a15      	ldr	r2, [pc, #84]	; (80020fc <TIM4_IRQHandler+0x534>)
 80020a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020aa:	e883 0003 	stmia.w	r3, {r0, r1}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 80020ae:	2108      	movs	r1, #8
 80020b0:	4811      	ldr	r0, [pc, #68]	; (80020f8 <TIM4_IRQHandler+0x530>)
 80020b2:	f007 f8c9 	bl	8009248 <CDC_Transmit_FS>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020b6:	4812      	ldr	r0, [pc, #72]	; (8002100 <TIM4_IRQHandler+0x538>)
 80020b8:	f002 fd8e 	bl	8004bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bdb0      	pop	{r4, r5, r7, pc}
 80020c4:	f3af 8000 	nop.w
 80020c8:	66666666 	.word	0x66666666
 80020cc:	3fee6666 	.word	0x3fee6666
 80020d0:	20000320 	.word	0x20000320
 80020d4:	20000024 	.word	0x20000024
 80020d8:	40020400 	.word	0x40020400
 80020dc:	20000324 	.word	0x20000324
 80020e0:	20000318 	.word	0x20000318
 80020e4:	200001a4 	.word	0x200001a4
 80020e8:	2000031c 	.word	0x2000031c
 80020ec:	40010000 	.word	0x40010000
 80020f0:	200002aa 	.word	0x200002aa
 80020f4:	200002ab 	.word	0x200002ab
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000010 	.word	0x20000010
 8002100:	20000234 	.word	0x20000234

08002104 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

	CDC_Receive_FS(usb_temp,sizeof(usb_temp));
 800210a:	2108      	movs	r1, #8
 800210c:	487e      	ldr	r0, [pc, #504]	; (8002308 <OTG_FS_IRQHandler+0x204>)
 800210e:	f007 f887 	bl	8009220 <CDC_Receive_FS>

	if(strcmp((char *)usb_temp, (char *)empty_string) != 0){
 8002112:	497e      	ldr	r1, [pc, #504]	; (800230c <OTG_FS_IRQHandler+0x208>)
 8002114:	487c      	ldr	r0, [pc, #496]	; (8002308 <OTG_FS_IRQHandler+0x204>)
 8002116:	f7fe f85f 	bl	80001d8 <strcmp>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80e6 	beq.w	80022ee <OTG_FS_IRQHandler+0x1ea>
		// Toggle the LED to indicate that message is received
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002126:	487a      	ldr	r0, [pc, #488]	; (8002310 <OTG_FS_IRQHandler+0x20c>)
 8002128:	f000 fcaf 	bl	8002a8a <HAL_GPIO_TogglePin>

		// Store the data in usb_in array if a non-empty message received
		memcpy(&usb_in, &usb_temp, sizeof(usb_in));
 800212c:	4b79      	ldr	r3, [pc, #484]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 800212e:	4a76      	ldr	r2, [pc, #472]	; (8002308 <OTG_FS_IRQHandler+0x204>)
 8002130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002134:	e883 0003 	stmia.w	r3, {r0, r1}

		/* Parsing USB Message*/
		if(usb_in[0] == 'm'){
 8002138:	4b76      	ldr	r3, [pc, #472]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b6d      	cmp	r3, #109	; 0x6d
 800213e:	d12f      	bne.n	80021a0 <OTG_FS_IRQHandler+0x9c>
			// Since STM32 byte size is 16 bits, there isn't a real uint8_t type
			// We manually do big endian storage, and manually decode them below here
			move_x = usb_in[1]*256 + usb_in[2];
 8002140:	4b74      	ldr	r3, [pc, #464]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	b29b      	uxth	r3, r3
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	b29a      	uxth	r2, r3
 800214a:	4b72      	ldr	r3, [pc, #456]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 800214c:	789b      	ldrb	r3, [r3, #2]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4413      	add	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	b21a      	sxth	r2, r3
 8002156:	4b70      	ldr	r3, [pc, #448]	; (8002318 <OTG_FS_IRQHandler+0x214>)
 8002158:	801a      	strh	r2, [r3, #0]
			move_y = usb_in[3]*256 + usb_in[4];
 800215a:	4b6e      	ldr	r3, [pc, #440]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 800215c:	78db      	ldrb	r3, [r3, #3]
 800215e:	b29b      	uxth	r3, r3
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b6b      	ldr	r3, [pc, #428]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	b29b      	uxth	r3, r3
 800216a:	4413      	add	r3, r2
 800216c:	b29b      	uxth	r3, r3
 800216e:	b21a      	sxth	r2, r3
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <OTG_FS_IRQHandler+0x218>)
 8002172:	801a      	strh	r2, [r3, #0]
			usb_in[4] = move_y%256;
			usb_in[5] = '\n';
			CDC_Transmit_FS(usb_in,sizeof(usb_in));
			*/

			X_ref = X_curr + (float)move_x/10;
 8002174:	4b68      	ldr	r3, [pc, #416]	; (8002318 <OTG_FS_IRQHandler+0x214>)
 8002176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002182:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002186:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800218a:	4b65      	ldr	r3, [pc, #404]	; (8002320 <OTG_FS_IRQHandler+0x21c>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	4b63      	ldr	r3, [pc, #396]	; (8002324 <OTG_FS_IRQHandler+0x220>)
 8002196:	edc3 7a00 	vstr	s15, [r3]

			ack_to_be_sent = 1;
 800219a:	4b63      	ldr	r3, [pc, #396]	; (8002328 <OTG_FS_IRQHandler+0x224>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]

		}

		if(usb_in[0] == 's'){
 80021a0:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b73      	cmp	r3, #115	; 0x73
 80021a6:	d102      	bne.n	80021ae <OTG_FS_IRQHandler+0xaa>
			external_shutdown = 1;
 80021a8:	4b60      	ldr	r3, [pc, #384]	; (800232c <OTG_FS_IRQHandler+0x228>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
		}

		if(usb_in[0] == 'i'){
 80021ae:	4b59      	ldr	r3, [pc, #356]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b69      	cmp	r3, #105	; 0x69
 80021b4:	d16e      	bne.n	8002294 <OTG_FS_IRQHandler+0x190>
			// Since STM32 byte size is 16 bits, there isn't a real uint8_t type
			// We manually do big endian storage, and manually decode them below here

			int16_t mot_inner_move_mm = usb_in[1]*256 + usb_in[2];
 80021b6:	4b57      	ldr	r3, [pc, #348]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 80021b8:	785b      	ldrb	r3, [r3, #1]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	b29a      	uxth	r2, r3
 80021c0:	4b54      	ldr	r3, [pc, #336]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 80021c2:	789b      	ldrb	r3, [r3, #2]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	80fb      	strh	r3, [r7, #6]
			int16_t mot_middle_move_mm = usb_in[3]*256 + usb_in[4];
 80021cc:	4b51      	ldr	r3, [pc, #324]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 80021ce:	78db      	ldrb	r3, [r3, #3]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 80021d8:	791b      	ldrb	r3, [r3, #4]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4413      	add	r3, r2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	80bb      	strh	r3, [r7, #4]
			int16_t mot_outer_move_mm = usb_in[5]*256 + usb_in[6];
 80021e2:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 80021e4:	795b      	ldrb	r3, [r3, #5]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b49      	ldr	r3, [pc, #292]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 80021ee:	799b      	ldrb	r3, [r3, #6]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	807b      	strh	r3, [r7, #2]

			// Limit initializing movements to 5 cm
			if(abs(mot_inner_move_mm) < 50){
 80021f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bfb8      	it	lt
 8002200:	425b      	neglt	r3, r3
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b31      	cmp	r3, #49	; 0x31
 8002206:	d811      	bhi.n	800222c <OTG_FS_IRQHandler+0x128>
				mot_inner_set_pos = mot_inner_set_pos + (float)mot_inner_move_mm/10;
 8002208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002214:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002218:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800221c:	4b44      	ldr	r3, [pc, #272]	; (8002330 <OTG_FS_IRQHandler+0x22c>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <OTG_FS_IRQHandler+0x22c>)
 8002228:	edc3 7a00 	vstr	s15, [r3]
			}
			if(abs(mot_middle_move_mm) < 50){
 800222c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	bfb8      	it	lt
 8002234:	425b      	neglt	r3, r3
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b31      	cmp	r3, #49	; 0x31
 800223a:	d811      	bhi.n	8002260 <OTG_FS_IRQHandler+0x15c>
				mot_middle_set_pos = mot_middle_set_pos + (float)mot_middle_move_mm/10;
 800223c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002248:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800224c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002250:	4b38      	ldr	r3, [pc, #224]	; (8002334 <OTG_FS_IRQHandler+0x230>)
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225a:	4b36      	ldr	r3, [pc, #216]	; (8002334 <OTG_FS_IRQHandler+0x230>)
 800225c:	edc3 7a00 	vstr	s15, [r3]
			}
			if(abs(mot_outer_move_mm) < 50){
 8002260:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002264:	2b00      	cmp	r3, #0
 8002266:	bfb8      	it	lt
 8002268:	425b      	neglt	r3, r3
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b31      	cmp	r3, #49	; 0x31
 800226e:	d811      	bhi.n	8002294 <OTG_FS_IRQHandler+0x190>
				mot_outer_set_pos = mot_outer_set_pos + (float)mot_outer_move_mm/10;
 8002270:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002280:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <OTG_FS_IRQHandler+0x234>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228e:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <OTG_FS_IRQHandler+0x234>)
 8002290:	edc3 7a00 	vstr	s15, [r3]

		if(usb_in[0] == 'o'){
			// TURN OFF CODE TO BE ADDED
		}

		if(usb_in[0] == 'b'){
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <OTG_FS_IRQHandler+0x210>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b62      	cmp	r3, #98	; 0x62
 800229a:	d128      	bne.n	80022ee <OTG_FS_IRQHandler+0x1ea>
			// Finish initializing and begin the main process by reseting
			// motor positions and set values
			mot_inner_set_pos = 0;
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <OTG_FS_IRQHandler+0x22c>)
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
			mot_middle_set_pos = 0;
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <OTG_FS_IRQHandler+0x230>)
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
			mot_outer_set_pos = 0;
 80022ac:	4b22      	ldr	r3, [pc, #136]	; (8002338 <OTG_FS_IRQHandler+0x234>)
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
			enc_inner_pos_cm = 0;
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <OTG_FS_IRQHandler+0x238>)
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
			enc_middle_pos_cm = 0;
 80022bc:	4b20      	ldr	r3, [pc, #128]	; (8002340 <OTG_FS_IRQHandler+0x23c>)
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
			enc_outer_pos_cm = 0;
 80022c4:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <OTG_FS_IRQHandler+0x240>)
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
			enc_inner_pos = 0;
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <OTG_FS_IRQHandler+0x244>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
			enc_middle_pos = 0;
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <OTG_FS_IRQHandler+0x248>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
			enc_outer_pos = 0;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <OTG_FS_IRQHandler+0x24c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
			X_ref = 0;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <OTG_FS_IRQHandler+0x220>)
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
			X_curr = 0;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <OTG_FS_IRQHandler+0x21c>)
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
		}

	}

	// Clear usb_temp array
	memset(usb_temp, 0, sizeof(usb_temp));
 80022ee:	2208      	movs	r2, #8
 80022f0:	2100      	movs	r1, #0
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <OTG_FS_IRQHandler+0x204>)
 80022f4:	f007 fc24 	bl	8009b40 <memset>

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022f8:	4816      	ldr	r0, [pc, #88]	; (8002354 <OTG_FS_IRQHandler+0x250>)
 80022fa:	f000 fd54 	bl	8002da6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200002b4 	.word	0x200002b4
 800230c:	200002bc 	.word	0x200002bc
 8002310:	40020800 	.word	0x40020800
 8002314:	200002ac 	.word	0x200002ac
 8002318:	20000280 	.word	0x20000280
 800231c:	20000282 	.word	0x20000282
 8002320:	200002a4 	.word	0x200002a4
 8002324:	20000294 	.word	0x20000294
 8002328:	200002aa 	.word	0x200002aa
 800232c:	200002a9 	.word	0x200002a9
 8002330:	200002dc 	.word	0x200002dc
 8002334:	200002e0 	.word	0x200002e0
 8002338:	200002e4 	.word	0x200002e4
 800233c:	200002d0 	.word	0x200002d0
 8002340:	200002d4 	.word	0x200002d4
 8002344:	200002d8 	.word	0x200002d8
 8002348:	200002c4 	.word	0x200002c4
 800234c:	200002c8 	.word	0x200002c8
 8002350:	200002cc 	.word	0x200002cc
 8002354:	2000100c 	.word	0x2000100c

08002358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <SystemInit+0x20>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <SystemInit+0x20>)
 8002364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002380:	480d      	ldr	r0, [pc, #52]	; (80023b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002382:	490e      	ldr	r1, [pc, #56]	; (80023bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002384:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002388:	e002      	b.n	8002390 <LoopCopyDataInit>

0800238a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800238c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238e:	3304      	adds	r3, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002394:	d3f9      	bcc.n	800238a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002398:	4c0b      	ldr	r4, [pc, #44]	; (80023c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800239c:	e001      	b.n	80023a2 <LoopFillZerobss>

0800239e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a0:	3204      	adds	r2, #4

080023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a4:	d3fb      	bcc.n	800239e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023a6:	f7ff ffd7 	bl	8002358 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023aa:	f007 fba5 	bl	8009af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ae:	f7fe fd83 	bl	8000eb8 <main>
  bx  lr    
 80023b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80023c0:	0800b970 	.word	0x0800b970
  ldr r2, =_sbss
 80023c4:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80023c8:	20001738 	.word	0x20001738

080023cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC_IRQHandler>
	...

080023d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <HAL_Init+0x40>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_Init+0x40>)
 80023da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_Init+0x40>)
 80023e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_Init+0x40>)
 80023f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 f94f 	bl	800269c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023fe:	200f      	movs	r0, #15
 8002400:	f000 f808 	bl	8002414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002404:	f7ff fa1e 	bl	8001844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023c00 	.word	0x40023c00

08002414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_InitTick+0x54>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x58>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	fbb3 f3f1 	udiv	r3, r3, r1
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f967 	bl	8002706 <HAL_SYSTICK_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e00e      	b.n	8002460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d80a      	bhi.n	800245e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002448:	2200      	movs	r2, #0
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f000 f92f 	bl	80026b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_InitTick+0x5c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000028 	.word	0x20000028
 800246c:	20000030 	.word	0x20000030
 8002470:	2000002c 	.word	0x2000002c

08002474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x20>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_IncTick+0x24>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_IncTick+0x24>)
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000030 	.word	0x20000030
 8002498:	20000328 	.word	0x20000328

0800249c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return uwTick;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_GetTick+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000328 	.word	0x20000328

080024b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff ffee 	bl	800249c <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d005      	beq.n	80024da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <HAL_Delay+0x44>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024da:	bf00      	nop
 80024dc:	f7ff ffde 	bl	800249c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d8f7      	bhi.n	80024dc <HAL_Delay+0x28>
  {
  }
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000030 	.word	0x20000030

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <__NVIC_EnableIRQ+0x38>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	; (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	; (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002668:	d301      	bcc.n	800266e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <SysTick_Config+0x40>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002676:	210f      	movs	r1, #15
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f7ff ff8e 	bl	800259c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <SysTick_Config+0x40>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <SysTick_Config+0x40>)
 8002688:	2207      	movs	r2, #7
 800268a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff29 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff3e 	bl	8002544 <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff8e 	bl	80025f0 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5d 	bl	800259c <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff31 	bl	8002560 <__NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffa2 	bl	8002658 <SysTick_Config>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e159      	b.n	80029f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8148 	bne.w	80029ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a2 	beq.w	80029ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b57      	ldr	r3, [pc, #348]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a56      	ldr	r2, [pc, #344]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_GPIO_Init+0x2ec>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a49      	ldr	r2, [pc, #292]	; (8002a10 <HAL_GPIO_Init+0x2f0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x202>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a48      	ldr	r2, [pc, #288]	; (8002a14 <HAL_GPIO_Init+0x2f4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x1fe>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a47      	ldr	r2, [pc, #284]	; (8002a18 <HAL_GPIO_Init+0x2f8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x1fa>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a46      	ldr	r2, [pc, #280]	; (8002a1c <HAL_GPIO_Init+0x2fc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x1f6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a45      	ldr	r2, [pc, #276]	; (8002a20 <HAL_GPIO_Init+0x300>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x1f2>
 800290e:	2304      	movs	r3, #4
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002912:	2307      	movs	r3, #7
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002922:	2300      	movs	r3, #0
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002934:	4935      	ldr	r1, [pc, #212]	; (8002a0c <HAL_GPIO_Init+0x2ec>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002942:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002966:	4a2f      	ldr	r2, [pc, #188]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800296c:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_GPIO_Init+0x304>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002990:	4a24      	ldr	r2, [pc, #144]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ba:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <HAL_GPIO_Init+0x304>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_GPIO_Init+0x304>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e4:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <HAL_GPIO_Init+0x304>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f67f aea2 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e001      	b.n	8002a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a68:	787b      	ldrb	r3, [r7, #1]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a74:	e003      	b.n	8002a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	041a      	lsls	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a9c:	887a      	ldrh	r2, [r7, #2]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	041a      	lsls	r2, r3, #16
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	43d9      	mvns	r1, r3
 8002aa8:	887b      	ldrh	r3, [r7, #2]
 8002aaa:	400b      	ands	r3, r1
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	619a      	str	r2, [r3, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ad6:	4a05      	ldr	r2, [pc, #20]	; (8002aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f806 	bl	8002af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b08:	b08f      	sub	sp, #60	; 0x3c
 8002b0a:	af0a      	add	r7, sp, #40	; 0x28
 8002b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e10f      	b.n	8002d38 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f006 fcd0 	bl	80094d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 ffb7 	bl	8005aca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	687e      	ldr	r6, [r7, #4]
 8002b64:	466d      	mov	r5, sp
 8002b66:	f106 0410 	add.w	r4, r6, #16
 8002b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b7a:	1d33      	adds	r3, r6, #4
 8002b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	f002 fe8e 	bl	80058a0 <USB_CoreInit>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0d0      	b.n	8002d38 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 ffa5 	bl	8005aec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	e04a      	b.n	8002c3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	333d      	adds	r3, #61	; 0x3d
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	333c      	adds	r3, #60	; 0x3c
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	b298      	uxth	r0, r3
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3344      	adds	r3, #68	; 0x44
 8002be4:	4602      	mov	r2, r0
 8002be6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3340      	adds	r3, #64	; 0x40
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3348      	adds	r3, #72	; 0x48
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	334c      	adds	r3, #76	; 0x4c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3354      	adds	r3, #84	; 0x54
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3af      	bcc.n	8002ba8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	e044      	b.n	8002cd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d3b5      	bcc.n	8002c4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	687e      	ldr	r6, [r7, #4]
 8002cea:	466d      	mov	r5, sp
 8002cec:	f106 0410 	add.w	r4, r6, #16
 8002cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d00:	1d33      	adds	r3, r6, #4
 8002d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d04:	6838      	ldr	r0, [r7, #0]
 8002d06:	f002 ff3d 	bl	8005b84 <USB_DevInit>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e00d      	b.n	8002d38 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 f88c 	bl	8006e4e <USB_DevDisconnect>

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_PCD_Start+0x1c>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e020      	b.n	8002d9e <HAL_PCD_Start+0x5e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d109      	bne.n	8002d80 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d005      	beq.n	8002d80 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 fe8f 	bl	8005aa8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 f83c 	bl	8006e0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002da6:	b590      	push	{r4, r7, lr}
 8002da8:	b08d      	sub	sp, #52	; 0x34
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f004 f8fa 	bl	8006fb6 <USB_GetMode>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f040 848a 	bne.w	80036de <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 f85e 	bl	8006e90 <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8480 	beq.w	80036dc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 f84b 	bl	8006e90 <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d107      	bne.n	8002e14 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f002 0202 	and.w	r2, r2, #2
 8002e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f004 f839 	bl	8006e90 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d161      	bne.n	8002eec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0210 	bic.w	r2, r2, #16
 8002e36:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 020f 	and.w	r2, r3, #15
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	0c5b      	lsrs	r3, r3, #17
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d124      	bne.n	8002eae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d035      	beq.n	8002edc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	6a38      	ldr	r0, [r7, #32]
 8002e84:	f003 fe70 	bl	8006b68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e94:	441a      	add	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea6:	441a      	add	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	621a      	str	r2, [r3, #32]
 8002eac:	e016      	b.n	8002edc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	0c5b      	lsrs	r3, r3, #17
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d110      	bne.n	8002edc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6a38      	ldr	r0, [r7, #32]
 8002ec6:	f003 fe4f 	bl	8006b68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed6:	441a      	add	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0210 	orr.w	r2, r2, #16
 8002eea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 ffcd 	bl	8006e90 <USB_ReadInterrupts>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f00:	f040 80a7 	bne.w	8003052 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 ffd2 	bl	8006eb6 <USB_ReadDevAllOutEpInterrupt>
 8002f12:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f14:	e099      	b.n	800304a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 808e 	beq.w	800303e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fff6 	bl	8006f1e <USB_ReadDevOutEPInterrupt>
 8002f32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fec2 	bl	8003cdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00c      	beq.n	8002f7c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2308      	movs	r3, #8
 8002f72:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 ff98 	bl	8003eac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f92:	461a      	mov	r2, r3
 8002f94:	2310      	movs	r3, #16
 8002f96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d030      	beq.n	8003004 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d109      	bne.n	8002fc2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	78db      	ldrb	r3, [r3, #3]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d108      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f006 fb6f 	bl	80096d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffe:	461a      	mov	r2, r3
 8003000:	2302      	movs	r3, #2
 8003002:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	2320      	movs	r3, #32
 800301e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	461a      	mov	r2, r3
 8003038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800303c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	3301      	adds	r3, #1
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f af62 	bne.w	8002f16 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f003 ff1a 	bl	8006e90 <USB_ReadInterrupts>
 800305c:	4603      	mov	r3, r0
 800305e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003062:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003066:	f040 80db 	bne.w	8003220 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f003 ff3b 	bl	8006eea <USB_ReadDevAllInEpInterrupt>
 8003074:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800307a:	e0cd      	b.n	8003218 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80c2 	beq.w	800320c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f003 ff61 	bl	8006f5a <USB_ReadDevInEPInterrupt>
 8003098:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d057      	beq.n	8003154 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	2201      	movs	r2, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69f9      	ldr	r1, [r7, #28]
 80030c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030c4:	4013      	ands	r3, r2
 80030c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d4:	461a      	mov	r2, r3
 80030d6:	2301      	movs	r3, #1
 80030d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d132      	bne.n	8003148 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	334c      	adds	r3, #76	; 0x4c
 80030f2:	6819      	ldr	r1, [r3, #0]
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4403      	add	r3, r0
 8003102:	3348      	adds	r3, #72	; 0x48
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4419      	add	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4403      	add	r3, r0
 8003116:	334c      	adds	r3, #76	; 0x4c
 8003118:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	2b00      	cmp	r3, #0
 800311e:	d113      	bne.n	8003148 <HAL_PCD_IRQHandler+0x3a2>
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	3354      	adds	r3, #84	; 0x54
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003140:	461a      	mov	r2, r3
 8003142:	2101      	movs	r1, #1
 8003144:	f003 ff68 	bl	8007018 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	b2db      	uxtb	r3, r3
 800314c:	4619      	mov	r1, r3
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f006 fa43 	bl	80095da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	461a      	mov	r2, r3
 800316c:	2308      	movs	r3, #8
 800316e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	461a      	mov	r2, r3
 8003188:	2310      	movs	r3, #16
 800318a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a2:	461a      	mov	r2, r3
 80031a4:	2340      	movs	r3, #64	; 0x40
 80031a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d023      	beq.n	80031fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b4:	6a38      	ldr	r0, [r7, #32]
 80031b6:	f002 fe49 	bl	8005e4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	3338      	adds	r3, #56	; 0x38
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	3304      	adds	r3, #4
 80031cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	78db      	ldrb	r3, [r3, #3]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d108      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2200      	movs	r2, #0
 80031da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	4619      	mov	r1, r3
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f006 fa86 	bl	80096f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f4:	461a      	mov	r2, r3
 80031f6:	2302      	movs	r3, #2
 80031f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fcdb 	bl	8003bc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	3301      	adds	r3, #1
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	f47f af2e 	bne.w	800307c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 fe33 	bl	8006e90 <USB_ReadInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003234:	d122      	bne.n	800327c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003250:	2b01      	cmp	r3, #1
 8003252:	d108      	bne.n	8003266 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800325c:	2100      	movs	r1, #0
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fec2 	bl	8003fe8 <HAL_PCDEx_LPM_Callback>
 8003264:	e002      	b.n	800326c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f006 fa24 	bl	80096b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800327a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f003 fe05 	bl	8006e90 <USB_ReadInterrupts>
 8003286:	4603      	mov	r3, r0
 8003288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003290:	d112      	bne.n	80032b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f006 f9e0 	bl	8009668 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032b6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f003 fde7 	bl	8006e90 <USB_ReadInterrupts>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032cc:	f040 80b7 	bne.w	800343e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2110      	movs	r1, #16
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 fdae 	bl	8005e4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f0:	2300      	movs	r3, #0
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f4:	e046      	b.n	8003384 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003302:	461a      	mov	r2, r3
 8003304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003308:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800331a:	0151      	lsls	r1, r2, #5
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	440a      	add	r2, r1
 8003320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003324:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003328:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003336:	461a      	mov	r2, r3
 8003338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800333c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334e:	0151      	lsls	r1, r2, #5
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	440a      	add	r2, r1
 8003354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003358:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800335c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336e:	0151      	lsls	r1, r2, #5
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	440a      	add	r2, r1
 8003374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003378:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800337c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	3301      	adds	r3, #1
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338a:	429a      	cmp	r2, r3
 800338c:	d3b3      	bcc.n	80032f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ba:	f043 030b 	orr.w	r3, r3, #11
 80033be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d0:	f043 030b 	orr.w	r3, r3, #11
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
 80033d6:	e015      	b.n	8003404 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fe:	f043 030b 	orr.w	r3, r3, #11
 8003402:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003412:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003416:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003428:	461a      	mov	r2, r3
 800342a:	f003 fdf5 	bl	8007018 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800343c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f003 fd24 	bl	8006e90 <USB_ReadInterrupts>
 8003448:	4603      	mov	r3, r0
 800344a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003452:	d124      	bne.n	800349e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f003 fdba 	bl	8006fd2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f002 fd6f 	bl	8005f46 <USB_GetDevSpeed>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681c      	ldr	r4, [r3, #0]
 8003474:	f001 f9e8 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8003478:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	4620      	mov	r0, r4
 8003484:	f002 fa6e 	bl	8005964 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f006 f8ce 	bl	800962a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800349c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 fcf4 	bl	8006e90 <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d10a      	bne.n	80034c8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f006 f8ab 	bl	800960e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f002 0208 	and.w	r2, r2, #8
 80034c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 fcdf 	bl	8006e90 <USB_ReadInterrupts>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b80      	cmp	r3, #128	; 0x80
 80034da:	d122      	bne.n	8003522 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e8:	2301      	movs	r3, #1
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
 80034ec:	e014      	b.n	8003518 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	b2db      	uxtb	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fb27 	bl	8003b60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	3301      	adds	r3, #1
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351e:	429a      	cmp	r2, r3
 8003520:	d3e5      	bcc.n	80034ee <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fcb2 	bl	8006e90 <USB_ReadInterrupts>
 800352c:	4603      	mov	r3, r0
 800352e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003536:	d13b      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003538:	2301      	movs	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
 800353c:	e02b      	b.n	8003596 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3340      	adds	r3, #64	; 0x40
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d115      	bne.n	8003590 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003564:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003566:	2b00      	cmp	r3, #0
 8003568:	da12      	bge.n	8003590 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	333f      	adds	r3, #63	; 0x3f
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fae8 	bl	8003b60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	3301      	adds	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	429a      	cmp	r2, r3
 800359e:	d3ce      	bcc.n	800353e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f003 fc6b 	bl	8006e90 <USB_ReadInterrupts>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c4:	d155      	bne.n	8003672 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c6:	2301      	movs	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ca:	e045      	b.n	8003658 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d12e      	bne.n	8003652 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da2b      	bge.n	8003652 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003606:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800360a:	429a      	cmp	r2, r3
 800360c:	d121      	bne.n	8003652 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800364e:	6053      	str	r3, [r2, #4]
            break;
 8003650:	e007      	b.n	8003662 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	3301      	adds	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	429a      	cmp	r2, r3
 8003660:	d3b4      	bcc.n	80035cc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f003 fc0a 	bl	8006e90 <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003686:	d10a      	bne.n	800369e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f006 f845 	bl	8009718 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800369c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 fbf4 	bl	8006e90 <USB_ReadInterrupts>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d115      	bne.n	80036de <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f006 f835 	bl	8009734 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	e000      	b.n	80036de <HAL_PCD_IRQHandler+0x938>
      return;
 80036dc:	bf00      	nop
    }
  }
}
 80036de:	3734      	adds	r7, #52	; 0x34
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd90      	pop	{r4, r7, pc}

080036e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_PCD_SetAddress+0x1a>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e013      	b.n	8003726 <HAL_PCD_SetAddress+0x42>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f003 fb52 	bl	8006dc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	4608      	mov	r0, r1
 8003738:	4611      	mov	r1, r2
 800373a:	461a      	mov	r2, r3
 800373c:	4603      	mov	r3, r0
 800373e:	70fb      	strb	r3, [r7, #3]
 8003740:	460b      	mov	r3, r1
 8003742:	803b      	strh	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800374c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003750:	2b00      	cmp	r3, #0
 8003752:	da0f      	bge.n	8003774 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	f003 020f 	and.w	r2, r3, #15
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	3338      	adds	r3, #56	; 0x38
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	705a      	strb	r2, [r3, #1]
 8003772:	e00f      	b.n	8003794 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	f003 020f 	and.w	r2, r3, #15
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	3304      	adds	r3, #4
 800378c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	b2da      	uxtb	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037a0:	883a      	ldrh	r2, [r7, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	78ba      	ldrb	r2, [r7, #2]
 80037aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037be:	78bb      	ldrb	r3, [r7, #2]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d102      	bne.n	80037ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_PCD_EP_Open+0xaa>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e00e      	b.n	80037f6 <HAL_PCD_EP_Open+0xc8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68f9      	ldr	r1, [r7, #12]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 fbd2 	bl	8005f90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80037f4:	7afb      	ldrb	r3, [r7, #11]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800380a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800380e:	2b00      	cmp	r3, #0
 8003810:	da0f      	bge.n	8003832 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 020f 	and.w	r2, r3, #15
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	3338      	adds	r3, #56	; 0x38
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	705a      	strb	r2, [r3, #1]
 8003830:	e00f      	b.n	8003852 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	f003 020f 	and.w	r2, r3, #15
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	3304      	adds	r3, #4
 800384a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_PCD_EP_Close+0x6e>
 8003868:	2302      	movs	r3, #2
 800386a:	e00e      	b.n	800388a <HAL_PCD_EP_Close+0x8c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68f9      	ldr	r1, [r7, #12]
 800387a:	4618      	mov	r0, r3
 800387c:	f002 fc10 	bl	80060a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	460b      	mov	r3, r1
 80038a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038a2:	7afb      	ldrb	r3, [r7, #11]
 80038a4:	f003 020f 	and.w	r2, r3, #15
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	3304      	adds	r3, #4
 80038ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2200      	movs	r2, #0
 80038cc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d4:	7afb      	ldrb	r3, [r7, #11]
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d102      	bne.n	80038ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038ee:	7afb      	ldrb	r3, [r7, #11]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	6979      	ldr	r1, [r7, #20]
 8003906:	f002 feef 	bl	80066e8 <USB_EP0StartXfer>
 800390a:	e008      	b.n	800391e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	6979      	ldr	r1, [r7, #20]
 800391a:	f002 fc9d 	bl	8006258 <USB_EPStartXfer>
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	f003 020f 	and.w	r2, r3, #15
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800394a:	681b      	ldr	r3, [r3, #0]
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	460b      	mov	r3, r1
 8003966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003968:	7afb      	ldrb	r3, [r7, #11]
 800396a:	f003 020f 	and.w	r2, r3, #15
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	3338      	adds	r3, #56	; 0x38
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	3304      	adds	r3, #4
 800397e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2201      	movs	r2, #1
 8003996:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003998:	7afb      	ldrb	r3, [r7, #11]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d102      	bne.n	80039b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039b2:	7afb      	ldrb	r3, [r7, #11]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	f002 fe8d 	bl	80066e8 <USB_EP0StartXfer>
 80039ce:	e008      	b.n	80039e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	6979      	ldr	r1, [r7, #20]
 80039de:	f002 fc3b 	bl	8006258 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 020f 	and.w	r2, r3, #15
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d901      	bls.n	8003a0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e050      	b.n	8003aac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da0f      	bge.n	8003a32 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	3338      	adds	r3, #56	; 0x38
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	3304      	adds	r3, #4
 8003a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	705a      	strb	r2, [r3, #1]
 8003a30:	e00d      	b.n	8003a4e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_PCD_EP_SetStall+0x82>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e01e      	b.n	8003aac <HAL_PCD_EP_SetStall+0xc0>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68f9      	ldr	r1, [r7, #12]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f003 f8cb 	bl	8006c18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	f003 030f 	and.w	r3, r3, #15
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	b2d9      	uxtb	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f003 fabb 	bl	8007018 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ac0:	78fb      	ldrb	r3, [r7, #3]
 8003ac2:	f003 020f 	and.w	r2, r3, #15
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d901      	bls.n	8003ad2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e042      	b.n	8003b58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	da0f      	bge.n	8003afa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	3338      	adds	r3, #56	; 0x38
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	3304      	adds	r3, #4
 8003af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	705a      	strb	r2, [r3, #1]
 8003af8:	e00f      	b.n	8003b1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	4613      	mov	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	3304      	adds	r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_PCD_EP_ClrStall+0x86>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e00e      	b.n	8003b58 <HAL_PCD_EP_ClrStall+0xa4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68f9      	ldr	r1, [r7, #12]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 f8d3 	bl	8006cf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	da0c      	bge.n	8003b8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 020f 	and.w	r2, r3, #15
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	3338      	adds	r3, #56	; 0x38
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	3304      	adds	r3, #4
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	e00c      	b.n	8003ba8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	f003 020f 	and.w	r2, r3, #15
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68f9      	ldr	r1, [r7, #12]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f002 fef2 	bl	8006998 <USB_EPStopXfer>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b08a      	sub	sp, #40	; 0x28
 8003bc6:	af02      	add	r7, sp, #8
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	3338      	adds	r3, #56	; 0x38
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	3304      	adds	r3, #4
 8003be8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1a      	ldr	r2, [r3, #32]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d901      	bls.n	8003bfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e06c      	b.n	8003cd4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d902      	bls.n	8003c16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3303      	adds	r3, #3
 8003c1a:	089b      	lsrs	r3, r3, #2
 8003c1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c1e:	e02b      	b.n	8003c78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	699a      	ldr	r2, [r3, #24]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d902      	bls.n	8003c3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	3303      	adds	r3, #3
 8003c40:	089b      	lsrs	r3, r3, #2
 8003c42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6919      	ldr	r1, [r3, #16]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	4603      	mov	r3, r0
 8003c5a:	6978      	ldr	r0, [r7, #20]
 8003c5c:	f002 ff46 	bl	8006aec <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	441a      	add	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1a      	ldr	r2, [r3, #32]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	441a      	add	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d809      	bhi.n	8003ca2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d203      	bcs.n	8003ca2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1be      	bne.n	8003c20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	699a      	ldr	r2, [r3, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d811      	bhi.n	8003cd2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	6939      	ldr	r1, [r7, #16]
 8003cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cce:	4013      	ands	r3, r2
 8003cd0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	333c      	adds	r3, #60	; 0x3c
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d17b      	bne.n	8003e0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d015      	beq.n	8003d48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4a61      	ldr	r2, [pc, #388]	; (8003ea4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	f240 80b9 	bls.w	8003e98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80b3 	beq.w	8003e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d44:	6093      	str	r3, [r2, #8]
 8003d46:	e0a7      	b.n	8003e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2320      	movs	r3, #32
 8003d62:	6093      	str	r3, [r2, #8]
 8003d64:	e098      	b.n	8003e98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f040 8093 	bne.w	8003e98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	4a4b      	ldr	r2, [pc, #300]	; (8003ea4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d90f      	bls.n	8003d9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	461a      	mov	r2, r3
 8003d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d96:	6093      	str	r3, [r2, #8]
 8003d98:	e07e      	b.n	8003e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	0159      	lsls	r1, r3, #5
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	440b      	add	r3, r1
 8003dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d114      	bne.n	8003dfc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003de4:	461a      	mov	r2, r3
 8003de6:	2101      	movs	r1, #1
 8003de8:	f003 f916 	bl	8007018 <USB_EP0_OutStart>
 8003dec:	e006      	b.n	8003dfc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f005 fbce 	bl	80095a4 <HAL_PCD_DataOutStageCallback>
 8003e08:	e046      	b.n	8003e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d124      	bne.n	8003e5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	6093      	str	r3, [r2, #8]
 8003e30:	e032      	b.n	8003e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f005 fba5 	bl	80095a4 <HAL_PCD_DataOutStageCallback>
 8003e5a:	e01d      	b.n	8003e98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d114      	bne.n	8003e8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d108      	bne.n	8003e8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e84:	461a      	mov	r2, r3
 8003e86:	2100      	movs	r1, #0
 8003e88:	f003 f8c6 	bl	8007018 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f005 fb86 	bl	80095a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	4f54300a 	.word	0x4f54300a
 8003ea8:	4f54310a 	.word	0x4f54310a

08003eac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	333c      	adds	r3, #60	; 0x3c
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d90e      	bls.n	8003f00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003efe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f005 fb3d 	bl	8009580 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d90c      	bls.n	8003f28 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d108      	bne.n	8003f28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f20:	461a      	mov	r2, r3
 8003f22:	2101      	movs	r1, #1
 8003f24:	f003 f878 	bl	8007018 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	4f54300a 	.word	0x4f54300a

08003f38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	70fb      	strb	r3, [r7, #3]
 8003f44:	4613      	mov	r3, r2
 8003f46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f56:	883b      	ldrh	r3, [r7, #0]
 8003f58:	0419      	lsls	r1, r3, #16
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
 8003f64:	e028      	b.n	8003fb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	4413      	add	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f74:	2300      	movs	r3, #0
 8003f76:	73fb      	strb	r3, [r7, #15]
 8003f78:	e00d      	b.n	8003f96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	3340      	adds	r3, #64	; 0x40
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	3301      	adds	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d3ec      	bcc.n	8003f7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003fa0:	883b      	ldrh	r3, [r7, #0]
 8003fa2:	0418      	lsls	r0, r3, #16
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	4302      	orrs	r2, r0
 8003fb0:	3340      	adds	r3, #64	; 0x40
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	887a      	ldrh	r2, [r7, #2]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e267      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d075      	beq.n	800410a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800401e:	4b88      	ldr	r3, [pc, #544]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b04      	cmp	r3, #4
 8004028:	d00c      	beq.n	8004044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800402a:	4b85      	ldr	r3, [pc, #532]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004032:	2b08      	cmp	r3, #8
 8004034:	d112      	bne.n	800405c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004036:	4b82      	ldr	r3, [pc, #520]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004042:	d10b      	bne.n	800405c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	4b7e      	ldr	r3, [pc, #504]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d05b      	beq.n	8004108 <HAL_RCC_OscConfig+0x108>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d157      	bne.n	8004108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e242      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d106      	bne.n	8004074 <HAL_RCC_OscConfig+0x74>
 8004066:	4b76      	ldr	r3, [pc, #472]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a75      	ldr	r2, [pc, #468]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e01d      	b.n	80040b0 <HAL_RCC_OscConfig+0xb0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800407c:	d10c      	bne.n	8004098 <HAL_RCC_OscConfig+0x98>
 800407e:	4b70      	ldr	r3, [pc, #448]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6f      	ldr	r2, [pc, #444]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	4b6d      	ldr	r3, [pc, #436]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6c      	ldr	r2, [pc, #432]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	e00b      	b.n	80040b0 <HAL_RCC_OscConfig+0xb0>
 8004098:	4b69      	ldr	r3, [pc, #420]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a68      	ldr	r2, [pc, #416]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 800409e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b66      	ldr	r3, [pc, #408]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a65      	ldr	r2, [pc, #404]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 80040aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d013      	beq.n	80040e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe f9f0 	bl	800249c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe f9ec 	bl	800249c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	; 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e207      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	4b5b      	ldr	r3, [pc, #364]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0xc0>
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fe f9dc 	bl	800249c <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fe f9d8 	bl	800249c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e1f3      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	4b51      	ldr	r3, [pc, #324]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0xe8>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d063      	beq.n	80041de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004116:	4b4a      	ldr	r3, [pc, #296]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004122:	4b47      	ldr	r3, [pc, #284]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800412a:	2b08      	cmp	r3, #8
 800412c:	d11c      	bne.n	8004168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412e:	4b44      	ldr	r3, [pc, #272]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d116      	bne.n	8004168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	4b41      	ldr	r3, [pc, #260]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_RCC_OscConfig+0x152>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d001      	beq.n	8004152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e1c7      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4937      	ldr	r1, [pc, #220]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004166:	e03a      	b.n	80041de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d020      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004170:	4b34      	ldr	r3, [pc, #208]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fe f991 	bl	800249c <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417e:	f7fe f98d 	bl	800249c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e1a8      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419c:	4b28      	ldr	r3, [pc, #160]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4925      	ldr	r1, [pc, #148]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]
 80041b0:	e015      	b.n	80041de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <HAL_RCC_OscConfig+0x244>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fe f970 	bl	800249c <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c0:	f7fe f96c 	bl	800249c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e187      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d036      	beq.n	8004258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d016      	beq.n	8004220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <HAL_RCC_OscConfig+0x248>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fe f950 	bl	800249c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004200:	f7fe f94c 	bl	800249c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e167      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_OscConfig+0x240>)
 8004214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x200>
 800421e:	e01b      	b.n	8004258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_OscConfig+0x248>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004226:	f7fe f939 	bl	800249c <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422c:	e00e      	b.n	800424c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800422e:	f7fe f935 	bl	800249c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d907      	bls.n	800424c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e150      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
 8004240:	40023800 	.word	0x40023800
 8004244:	42470000 	.word	0x42470000
 8004248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424c:	4b88      	ldr	r3, [pc, #544]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800424e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1ea      	bne.n	800422e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8097 	beq.w	8004394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426a:	4b81      	ldr	r3, [pc, #516]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	4b7d      	ldr	r3, [pc, #500]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a7c      	ldr	r2, [pc, #496]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b7a      	ldr	r3, [pc, #488]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004296:	4b77      	ldr	r3, [pc, #476]	; (8004474 <HAL_RCC_OscConfig+0x474>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d118      	bne.n	80042d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a2:	4b74      	ldr	r3, [pc, #464]	; (8004474 <HAL_RCC_OscConfig+0x474>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a73      	ldr	r2, [pc, #460]	; (8004474 <HAL_RCC_OscConfig+0x474>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ae:	f7fe f8f5 	bl	800249c <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fe f8f1 	bl	800249c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e10c      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <HAL_RCC_OscConfig+0x474>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d106      	bne.n	80042ea <HAL_RCC_OscConfig+0x2ea>
 80042dc:	4b64      	ldr	r3, [pc, #400]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	4a63      	ldr	r2, [pc, #396]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70
 80042e8:	e01c      	b.n	8004324 <HAL_RCC_OscConfig+0x324>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x30c>
 80042f2:	4b5f      	ldr	r3, [pc, #380]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a5e      	ldr	r2, [pc, #376]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 80042f8:	f043 0304 	orr.w	r3, r3, #4
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
 80042fe:	4b5c      	ldr	r3, [pc, #368]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a5b      	ldr	r2, [pc, #364]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0x324>
 800430c:	4b58      	ldr	r3, [pc, #352]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	4a57      	ldr	r2, [pc, #348]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	6713      	str	r3, [r2, #112]	; 0x70
 8004318:	4b55      	ldr	r3, [pc, #340]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a54      	ldr	r2, [pc, #336]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800431e:	f023 0304 	bic.w	r3, r3, #4
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fe f8b6 	bl	800249c <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004332:	e00a      	b.n	800434a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004334:	f7fe f8b2 	bl	800249c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0cb      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434a:	4b49      	ldr	r3, [pc, #292]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ee      	beq.n	8004334 <HAL_RCC_OscConfig+0x334>
 8004356:	e014      	b.n	8004382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004358:	f7fe f8a0 	bl	800249c <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fe f89c 	bl	800249c <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0b5      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004376:	4b3e      	ldr	r3, [pc, #248]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1ee      	bne.n	8004360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004382:	7dfb      	ldrb	r3, [r7, #23]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d105      	bne.n	8004394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004388:	4b39      	ldr	r3, [pc, #228]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	4a38      	ldr	r2, [pc, #224]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800438e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80a1 	beq.w	80044e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800439e:	4b34      	ldr	r3, [pc, #208]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d05c      	beq.n	8004464 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d141      	bne.n	8004436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCC_OscConfig+0x478>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fe f870 	bl	800249c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fe f86c 	bl	800249c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e087      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	019b      	lsls	r3, r3, #6
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	3b01      	subs	r3, #1
 80043f8:	041b      	lsls	r3, r3, #16
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	061b      	lsls	r3, r3, #24
 8004402:	491b      	ldr	r1, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <HAL_RCC_OscConfig+0x478>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fe f845 	bl	800249c <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004416:	f7fe f841 	bl	800249c <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e05c      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x416>
 8004434:	e054      	b.n	80044e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <HAL_RCC_OscConfig+0x478>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fe f82e 	bl	800249c <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004444:	f7fe f82a 	bl	800249c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e045      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCC_OscConfig+0x470>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x444>
 8004462:	e03d      	b.n	80044e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d107      	bne.n	800447c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e038      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
 8004470:	40023800 	.word	0x40023800
 8004474:	40007000 	.word	0x40007000
 8004478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800447c:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_RCC_OscConfig+0x4ec>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d028      	beq.n	80044dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004494:	429a      	cmp	r2, r3
 8004496:	d121      	bne.n	80044dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d11a      	bne.n	80044dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ac:	4013      	ands	r3, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d111      	bne.n	80044dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	3b01      	subs	r3, #1
 80044c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d107      	bne.n	80044dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800

080044f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0cc      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004504:	4b68      	ldr	r3, [pc, #416]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d90c      	bls.n	800452c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0b8      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d020      	beq.n	800457a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4a58      	ldr	r2, [pc, #352]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800454e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a52      	ldr	r2, [pc, #328]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	494d      	ldr	r1, [pc, #308]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d044      	beq.n	8004610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d119      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e07f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d003      	beq.n	80045ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ae:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e06f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e067      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4934      	ldr	r1, [pc, #208]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e0:	f7fd ff5c 	bl	800249c <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e8:	f7fd ff58 	bl	800249c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e04f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 020c 	and.w	r2, r3, #12
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	429a      	cmp	r2, r3
 800460e:	d1eb      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d20c      	bcs.n	8004638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e032      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4916      	ldr	r1, [pc, #88]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	490e      	ldr	r1, [pc, #56]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004676:	f000 f821 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800467a:	4602      	mov	r2, r0
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	490a      	ldr	r1, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004688:	5ccb      	ldrb	r3, [r1, r3]
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fd febc 	bl	8002414 <HAL_InitTick>

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023c00 	.word	0x40023c00
 80046ac:	40023800 	.word	0x40023800
 80046b0:	0800b730 	.word	0x0800b730
 80046b4:	20000028 	.word	0x20000028
 80046b8:	2000002c 	.word	0x2000002c

080046bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046c0:	b090      	sub	sp, #64	; 0x40
 80046c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
 80046c8:	2300      	movs	r3, #0
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046cc:	2300      	movs	r3, #0
 80046ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d4:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_RCC_GetSysClockFreq+0x180>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d00d      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x40>
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	f200 80a1 	bhi.w	8004828 <HAL_RCC_GetSysClockFreq+0x16c>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x34>
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d003      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ee:	e09b      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046f0:	4b53      	ldr	r3, [pc, #332]	; (8004840 <HAL_RCC_GetSysClockFreq+0x184>)
 80046f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046f4:	e09b      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f6:	4b53      	ldr	r3, [pc, #332]	; (8004844 <HAL_RCC_GetSysClockFreq+0x188>)
 80046f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046fa:	e098      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046fc:	4b4f      	ldr	r3, [pc, #316]	; (800483c <HAL_RCC_GetSysClockFreq+0x180>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004706:	4b4d      	ldr	r3, [pc, #308]	; (800483c <HAL_RCC_GetSysClockFreq+0x180>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d028      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004712:	4b4a      	ldr	r3, [pc, #296]	; (800483c <HAL_RCC_GetSysClockFreq+0x180>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	099b      	lsrs	r3, r3, #6
 8004718:	2200      	movs	r2, #0
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	627a      	str	r2, [r7, #36]	; 0x24
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004724:	2100      	movs	r1, #0
 8004726:	4b47      	ldr	r3, [pc, #284]	; (8004844 <HAL_RCC_GetSysClockFreq+0x188>)
 8004728:	fb03 f201 	mul.w	r2, r3, r1
 800472c:	2300      	movs	r3, #0
 800472e:	fb00 f303 	mul.w	r3, r0, r3
 8004732:	4413      	add	r3, r2
 8004734:	4a43      	ldr	r2, [pc, #268]	; (8004844 <HAL_RCC_GetSysClockFreq+0x188>)
 8004736:	fba0 1202 	umull	r1, r2, r0, r2
 800473a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800473c:	460a      	mov	r2, r1
 800473e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004742:	4413      	add	r3, r2
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004748:	2200      	movs	r2, #0
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	61fa      	str	r2, [r7, #28]
 800474e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004752:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004756:	f7fc fa2d 	bl	8000bb4 <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4613      	mov	r3, r2
 8004760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004762:	e053      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_RCC_GetSysClockFreq+0x180>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	2200      	movs	r2, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	617a      	str	r2, [r7, #20]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004776:	f04f 0b00 	mov.w	fp, #0
 800477a:	4652      	mov	r2, sl
 800477c:	465b      	mov	r3, fp
 800477e:	f04f 0000 	mov.w	r0, #0
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	0159      	lsls	r1, r3, #5
 8004788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800478c:	0150      	lsls	r0, r2, #5
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	ebb2 080a 	subs.w	r8, r2, sl
 8004796:	eb63 090b 	sbc.w	r9, r3, fp
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047ae:	ebb2 0408 	subs.w	r4, r2, r8
 80047b2:	eb63 0509 	sbc.w	r5, r3, r9
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	00eb      	lsls	r3, r5, #3
 80047c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047c4:	00e2      	lsls	r2, r4, #3
 80047c6:	4614      	mov	r4, r2
 80047c8:	461d      	mov	r5, r3
 80047ca:	eb14 030a 	adds.w	r3, r4, sl
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	eb45 030b 	adc.w	r3, r5, fp
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047e2:	4629      	mov	r1, r5
 80047e4:	028b      	lsls	r3, r1, #10
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ec:	4621      	mov	r1, r4
 80047ee:	028a      	lsls	r2, r1, #10
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f6:	2200      	movs	r2, #0
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	60fa      	str	r2, [r7, #12]
 80047fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004800:	f7fc f9d8 	bl	8000bb4 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCC_GetSysClockFreq+0x180>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	3301      	adds	r3, #1
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800481c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004826:	e002      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetSysClockFreq+0x184>)
 800482a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800482c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004830:	4618      	mov	r0, r3
 8004832:	3740      	adds	r7, #64	; 0x40
 8004834:	46bd      	mov	sp, r7
 8004836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	00f42400 	.word	0x00f42400
 8004844:	017d7840 	.word	0x017d7840

08004848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_RCC_GetHCLKFreq+0x14>)
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000028 	.word	0x20000028

08004860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e041      	b.n	80048f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7fd f804 	bl	8001894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f000 fc5e 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e044      	b.n	80049a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d018      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x6c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004942:	d013      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x6c>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1a      	ldr	r2, [pc, #104]	; (80049b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00e      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x6c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d009      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x6c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a17      	ldr	r2, [pc, #92]	; (80049bc <HAL_TIM_Base_Start_IT+0xbc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x6c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a16      	ldr	r2, [pc, #88]	; (80049c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d111      	bne.n	8004990 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b06      	cmp	r3, #6
 800497c:	d010      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498e:	e007      	b.n	80049a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40014000 	.word	0x40014000

080049c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e041      	b.n	8004a5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f839 	bl	8004a62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f000 fbac 	bl	8005160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <HAL_TIM_PWM_Start+0x24>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e022      	b.n	8004ae2 <HAL_TIM_PWM_Start+0x6a>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d109      	bne.n	8004ab6 <HAL_TIM_PWM_Start+0x3e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	bf14      	ite	ne
 8004aae:	2301      	movne	r3, #1
 8004ab0:	2300      	moveq	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e015      	b.n	8004ae2 <HAL_TIM_PWM_Start+0x6a>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d109      	bne.n	8004ad0 <HAL_TIM_PWM_Start+0x58>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	bf14      	ite	ne
 8004ac8:	2301      	movne	r3, #1
 8004aca:	2300      	moveq	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e008      	b.n	8004ae2 <HAL_TIM_PWM_Start+0x6a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e068      	b.n	8004bbc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_PWM_Start+0x82>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af8:	e013      	b.n	8004b22 <HAL_TIM_PWM_Start+0xaa>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_PWM_Start+0x92>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b08:	e00b      	b.n	8004b22 <HAL_TIM_PWM_Start+0xaa>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_PWM_Start+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b18:	e003      	b.n	8004b22 <HAL_TIM_PWM_Start+0xaa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2201      	movs	r2, #1
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fdbe 	bl	80056ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a23      	ldr	r2, [pc, #140]	; (8004bc4 <HAL_TIM_PWM_Start+0x14c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d107      	bne.n	8004b4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <HAL_TIM_PWM_Start+0x14c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d018      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x10e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5c:	d013      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x10e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a19      	ldr	r2, [pc, #100]	; (8004bc8 <HAL_TIM_PWM_Start+0x150>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x10e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <HAL_TIM_PWM_Start+0x154>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d009      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x10e>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a16      	ldr	r2, [pc, #88]	; (8004bd0 <HAL_TIM_PWM_Start+0x158>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x10e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <HAL_TIM_PWM_Start+0x15c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d111      	bne.n	8004baa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b06      	cmp	r3, #6
 8004b96:	d010      	beq.n	8004bba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba8:	e007      	b.n	8004bba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40010000 	.word	0x40010000
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40014000 	.word	0x40014000

08004bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d122      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d11b      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0202 	mvn.w	r2, #2
 8004c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa81 	bl	8005122 <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa73 	bl	800510e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fa84 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d122      	bne.n	8004c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d11b      	bne.n	8004c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0204 	mvn.w	r2, #4
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa57 	bl	8005122 <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fa49 	bl	800510e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fa5a 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d122      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d11b      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0208 	mvn.w	r2, #8
 8004cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa2d 	bl	8005122 <HAL_TIM_IC_CaptureCallback>
 8004cc8:	e005      	b.n	8004cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fa1f 	bl	800510e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 fa30 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d122      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d11b      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0210 	mvn.w	r2, #16
 8004d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2208      	movs	r2, #8
 8004d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa03 	bl	8005122 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f9f5 	bl	800510e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fa06 	bl	8005136 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d10e      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d107      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0201 	mvn.w	r2, #1
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f9cf 	bl	80050fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b80      	cmp	r3, #128	; 0x80
 8004d68:	d10e      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fd82 	bl	800588c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d10e      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9cb 	bl	800514a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0220 	mvn.w	r2, #32
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fd4c 	bl	8005878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e0ae      	b.n	8004f64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	f200 809f 	bhi.w	8004f54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004f55 	.word	0x08004f55
 8004e24:	08004f55 	.word	0x08004f55
 8004e28:	08004f55 	.word	0x08004f55
 8004e2c:	08004e91 	.word	0x08004e91
 8004e30:	08004f55 	.word	0x08004f55
 8004e34:	08004f55 	.word	0x08004f55
 8004e38:	08004f55 	.word	0x08004f55
 8004e3c:	08004ed3 	.word	0x08004ed3
 8004e40:	08004f55 	.word	0x08004f55
 8004e44:	08004f55 	.word	0x08004f55
 8004e48:	08004f55 	.word	0x08004f55
 8004e4c:	08004f13 	.word	0x08004f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fa02 	bl	8005260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0204 	bic.w	r2, r2, #4
 8004e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6999      	ldr	r1, [r3, #24]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	619a      	str	r2, [r3, #24]
      break;
 8004e8e:	e064      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fa48 	bl	800532c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699a      	ldr	r2, [r3, #24]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	021a      	lsls	r2, r3, #8
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	619a      	str	r2, [r3, #24]
      break;
 8004ed0:	e043      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fa93 	bl	8005404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0208 	orr.w	r2, r2, #8
 8004eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69da      	ldr	r2, [r3, #28]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0204 	bic.w	r2, r2, #4
 8004efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69d9      	ldr	r1, [r3, #28]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	61da      	str	r2, [r3, #28]
      break;
 8004f10:	e023      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fadd 	bl	80054d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69da      	ldr	r2, [r3, #28]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69d9      	ldr	r1, [r3, #28]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	021a      	lsls	r2, r3, #8
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	61da      	str	r2, [r3, #28]
      break;
 8004f52:	e002      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
      break;
 8004f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIM_ConfigClockSource+0x1c>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e0b4      	b.n	80050f2 <HAL_TIM_ConfigClockSource+0x186>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc0:	d03e      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0xd4>
 8004fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc6:	f200 8087 	bhi.w	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fce:	f000 8086 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x172>
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	d87f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b70      	cmp	r3, #112	; 0x70
 8004fda:	d01a      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xa6>
 8004fdc:	2b70      	cmp	r3, #112	; 0x70
 8004fde:	d87b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b60      	cmp	r3, #96	; 0x60
 8004fe2:	d050      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x11a>
 8004fe4:	2b60      	cmp	r3, #96	; 0x60
 8004fe6:	d877      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b50      	cmp	r3, #80	; 0x50
 8004fea:	d03c      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xfa>
 8004fec:	2b50      	cmp	r3, #80	; 0x50
 8004fee:	d873      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b40      	cmp	r3, #64	; 0x40
 8004ff2:	d058      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x13a>
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d86f      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b30      	cmp	r3, #48	; 0x30
 8004ffa:	d064      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	d86b      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d060      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005004:	2b20      	cmp	r3, #32
 8005006:	d867      	bhi.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d05c      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 800500c:	2b10      	cmp	r3, #16
 800500e:	d05a      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005010:	e062      	b.n	80050d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6899      	ldr	r1, [r3, #8]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f000 fb23 	bl	800566c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	609a      	str	r2, [r3, #8]
      break;
 800503e:	e04f      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6899      	ldr	r1, [r3, #8]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f000 fb0c 	bl	800566c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005062:	609a      	str	r2, [r3, #8]
      break;
 8005064:	e03c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	461a      	mov	r2, r3
 8005074:	f000 fa80 	bl	8005578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2150      	movs	r1, #80	; 0x50
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fad9 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 8005084:	e02c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	461a      	mov	r2, r3
 8005094:	f000 fa9f 	bl	80055d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2160      	movs	r1, #96	; 0x60
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fac9 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 80050a4:	e01c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 fa60 	bl	8005578 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2140      	movs	r1, #64	; 0x40
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fab9 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 80050c4:	e00c      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f000 fab0 	bl	8005636 <TIM_ITRx_SetConfig>
      break;
 80050d6:	e003      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a34      	ldr	r2, [pc, #208]	; (8005244 <TIM_Base_SetConfig+0xe4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00f      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517e:	d00b      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a31      	ldr	r2, [pc, #196]	; (8005248 <TIM_Base_SetConfig+0xe8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a30      	ldr	r2, [pc, #192]	; (800524c <TIM_Base_SetConfig+0xec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_Base_SetConfig+0x38>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <TIM_Base_SetConfig+0xf0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d108      	bne.n	80051aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a25      	ldr	r2, [pc, #148]	; (8005244 <TIM_Base_SetConfig+0xe4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d01b      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b8:	d017      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a22      	ldr	r2, [pc, #136]	; (8005248 <TIM_Base_SetConfig+0xe8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a21      	ldr	r2, [pc, #132]	; (800524c <TIM_Base_SetConfig+0xec>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00f      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a20      	ldr	r2, [pc, #128]	; (8005250 <TIM_Base_SetConfig+0xf0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <TIM_Base_SetConfig+0xf4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1e      	ldr	r2, [pc, #120]	; (8005258 <TIM_Base_SetConfig+0xf8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_Base_SetConfig+0x8a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1d      	ldr	r2, [pc, #116]	; (800525c <TIM_Base_SetConfig+0xfc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d108      	bne.n	80051fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a08      	ldr	r2, [pc, #32]	; (8005244 <TIM_Base_SetConfig+0xe4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d103      	bne.n	8005230 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	615a      	str	r2, [r3, #20]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400
 800525c:	40014800 	.word	0x40014800

08005260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0201 	bic.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0308 	bic.w	r3, r3, #8
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a13      	ldr	r2, [pc, #76]	; (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d111      	bne.n	8005302 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40010000 	.word	0x40010000

0800532c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0210 	bic.w	r2, r3, #16
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <TIM_OC2_SetConfig+0xd4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10d      	bne.n	80053a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a15      	ldr	r2, [pc, #84]	; (8005400 <TIM_OC2_SetConfig+0xd4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d113      	bne.n	80053d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000

08005404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800544c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <TIM_OC3_SetConfig+0xd0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10d      	bne.n	800547e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC3_SetConfig+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d113      	bne.n	80054ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40010000 	.word	0x40010000

080054d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a10      	ldr	r2, [pc, #64]	; (8005574 <TIM_OC4_SetConfig+0x9c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d109      	bne.n	800554c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000

08005578 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f023 030a 	bic.w	r3, r3, #10
 80055b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f023 0210 	bic.w	r2, r3, #16
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005600:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	031b      	lsls	r3, r3, #12
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005612:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	f043 0307 	orr.w	r3, r3, #7
 8005658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	609a      	str	r2, [r3, #8]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005686:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	021a      	lsls	r2, r3, #8
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	431a      	orrs	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	bf00      	nop
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2201      	movs	r2, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1a      	ldr	r2, [r3, #32]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e050      	b.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575c:	d013      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a16      	ldr	r2, [pc, #88]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10c      	bne.n	80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800578c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40014000 	.word	0x40014000

080057d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e03d      	b.n	800586c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	4313      	orrs	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058a0:	b084      	sub	sp, #16
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	f107 001c 	add.w	r0, r7, #28
 80058ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d122      	bne.n	80058fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d105      	bne.n	80058f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 fbee 	bl	80070d4 <USB_CoreReset>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]
 80058fc:	e01a      	b.n	8005934 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f001 fbe2 	bl	80070d4 <USB_CoreReset>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
 8005926:	e005      	b.n	8005934 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	2b01      	cmp	r3, #1
 8005938:	d10b      	bne.n	8005952 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f043 0206 	orr.w	r2, r3, #6
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f043 0220 	orr.w	r2, r3, #32
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800595e:	b004      	add	sp, #16
 8005960:	4770      	bx	lr
	...

08005964 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d165      	bne.n	8005a44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a41      	ldr	r2, [pc, #260]	; (8005a80 <USB_SetTurnaroundTime+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d906      	bls.n	800598e <USB_SetTurnaroundTime+0x2a>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <USB_SetTurnaroundTime+0x120>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d202      	bcs.n	800598e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005988:	230f      	movs	r3, #15
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e062      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <USB_SetTurnaroundTime+0x120>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d306      	bcc.n	80059a4 <USB_SetTurnaroundTime+0x40>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <USB_SetTurnaroundTime+0x124>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d202      	bcs.n	80059a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800599e:	230e      	movs	r3, #14
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e057      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4a38      	ldr	r2, [pc, #224]	; (8005a88 <USB_SetTurnaroundTime+0x124>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d306      	bcc.n	80059ba <USB_SetTurnaroundTime+0x56>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4a37      	ldr	r2, [pc, #220]	; (8005a8c <USB_SetTurnaroundTime+0x128>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d202      	bcs.n	80059ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80059b4:	230d      	movs	r3, #13
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e04c      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4a33      	ldr	r2, [pc, #204]	; (8005a8c <USB_SetTurnaroundTime+0x128>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d306      	bcc.n	80059d0 <USB_SetTurnaroundTime+0x6c>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4a32      	ldr	r2, [pc, #200]	; (8005a90 <USB_SetTurnaroundTime+0x12c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d802      	bhi.n	80059d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80059ca:	230c      	movs	r3, #12
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	e041      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4a2f      	ldr	r2, [pc, #188]	; (8005a90 <USB_SetTurnaroundTime+0x12c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d906      	bls.n	80059e6 <USB_SetTurnaroundTime+0x82>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4a2e      	ldr	r2, [pc, #184]	; (8005a94 <USB_SetTurnaroundTime+0x130>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d802      	bhi.n	80059e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80059e0:	230b      	movs	r3, #11
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e036      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4a2a      	ldr	r2, [pc, #168]	; (8005a94 <USB_SetTurnaroundTime+0x130>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d906      	bls.n	80059fc <USB_SetTurnaroundTime+0x98>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4a29      	ldr	r2, [pc, #164]	; (8005a98 <USB_SetTurnaroundTime+0x134>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d802      	bhi.n	80059fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80059f6:	230a      	movs	r3, #10
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	e02b      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <USB_SetTurnaroundTime+0x134>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d906      	bls.n	8005a12 <USB_SetTurnaroundTime+0xae>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <USB_SetTurnaroundTime+0x138>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d202      	bcs.n	8005a12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a0c:	2309      	movs	r3, #9
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e020      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <USB_SetTurnaroundTime+0x138>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d306      	bcc.n	8005a28 <USB_SetTurnaroundTime+0xc4>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <USB_SetTurnaroundTime+0x13c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d802      	bhi.n	8005a28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a22:	2308      	movs	r3, #8
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e015      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <USB_SetTurnaroundTime+0x13c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d906      	bls.n	8005a3e <USB_SetTurnaroundTime+0xda>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <USB_SetTurnaroundTime+0x140>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d202      	bcs.n	8005a3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a38:	2307      	movs	r3, #7
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e00a      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a3e:	2306      	movs	r3, #6
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	e007      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a4a:	2309      	movs	r3, #9
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e001      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a50:	2309      	movs	r3, #9
 8005a52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	029b      	lsls	r3, r3, #10
 8005a68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	00d8acbf 	.word	0x00d8acbf
 8005a84:	00e4e1c0 	.word	0x00e4e1c0
 8005a88:	00f42400 	.word	0x00f42400
 8005a8c:	01067380 	.word	0x01067380
 8005a90:	011a499f 	.word	0x011a499f
 8005a94:	01312cff 	.word	0x01312cff
 8005a98:	014ca43f 	.word	0x014ca43f
 8005a9c:	016e3600 	.word	0x016e3600
 8005aa0:	01a6ab1f 	.word	0x01a6ab1f
 8005aa4:	01e84800 	.word	0x01e84800

08005aa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f043 0201 	orr.w	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f023 0201 	bic.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d115      	bne.n	8005b3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	f7fc fcca 	bl	80024b4 <HAL_Delay>
      ms++;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 fa45 	bl	8006fb6 <USB_GetMode>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d01e      	beq.n	8005b70 <USB_SetCurrentMode+0x84>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b31      	cmp	r3, #49	; 0x31
 8005b36:	d9f0      	bls.n	8005b1a <USB_SetCurrentMode+0x2e>
 8005b38:	e01a      	b.n	8005b70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d115      	bne.n	8005b6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f7fc fcb1 	bl	80024b4 <HAL_Delay>
      ms++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3301      	adds	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 fa2c 	bl	8006fb6 <USB_GetMode>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <USB_SetCurrentMode+0x84>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b31      	cmp	r3, #49	; 0x31
 8005b68:	d9f0      	bls.n	8005b4c <USB_SetCurrentMode+0x60>
 8005b6a:	e001      	b.n	8005b70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e005      	b.n	8005b7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b32      	cmp	r3, #50	; 0x32
 8005b74:	d101      	bne.n	8005b7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b84:	b084      	sub	sp, #16
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b086      	sub	sp, #24
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	e009      	b.n	8005bb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	3340      	adds	r3, #64	; 0x40
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	2200      	movs	r2, #0
 8005bb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b0e      	cmp	r3, #14
 8005bbc:	d9f2      	bls.n	8005ba4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11c      	bne.n	8005bfe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd2:	f043 0302 	orr.w	r3, r3, #2
 8005bd6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38
 8005bfc:	e00b      	b.n	8005c16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2300      	movs	r3, #0
 8005c20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c28:	4619      	mov	r1, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c30:	461a      	mov	r2, r3
 8005c32:	680b      	ldr	r3, [r1, #0]
 8005c34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10c      	bne.n	8005c56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c42:	2100      	movs	r1, #0
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f965 	bl	8005f14 <USB_SetDevSpeed>
 8005c4a:	e008      	b.n	8005c5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f960 	bl	8005f14 <USB_SetDevSpeed>
 8005c54:	e003      	b.n	8005c5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c56:	2103      	movs	r1, #3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f95b 	bl	8005f14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c5e:	2110      	movs	r1, #16
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f8f3 	bl	8005e4c <USB_FlushTxFifo>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f91f 	bl	8005eb4 <USB_FlushRxFifo>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	461a      	mov	r2, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	461a      	mov	r2, r3
 8005c94:	2300      	movs	r3, #0
 8005c96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	e043      	b.n	8005d32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cc0:	d118      	bne.n	8005cf4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e013      	b.n	8005d06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cea:	461a      	mov	r2, r3
 8005cec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	e008      	b.n	8005d06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	461a      	mov	r2, r3
 8005d02:	2300      	movs	r3, #0
 8005d04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d12:	461a      	mov	r2, r3
 8005d14:	2300      	movs	r3, #0
 8005d16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	461a      	mov	r2, r3
 8005d26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d3b7      	bcc.n	8005caa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	e043      	b.n	8005dc8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d56:	d118      	bne.n	8005d8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10a      	bne.n	8005d74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	e013      	b.n	8005d9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d80:	461a      	mov	r2, r3
 8005d82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	e008      	b.n	8005d9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d96:	461a      	mov	r2, r3
 8005d98:	2300      	movs	r3, #0
 8005d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	461a      	mov	r2, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d3b7      	bcc.n	8005d40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005df0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	f043 0210 	orr.w	r2, r3, #16
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699a      	ldr	r2, [r3, #24]
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <USB_DevInit+0x2c4>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f043 0208 	orr.w	r2, r3, #8
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d107      	bne.n	8005e38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e30:	f043 0304 	orr.w	r3, r3, #4
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e44:	b004      	add	sp, #16
 8005e46:	4770      	bx	lr
 8005e48:	803c3800 	.word	0x803c3800

08005e4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <USB_FlushTxFifo+0x64>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d901      	bls.n	8005e6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e01b      	b.n	8005ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	daf2      	bge.n	8005e5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	019b      	lsls	r3, r3, #6
 8005e7c:	f043 0220 	orr.w	r2, r3, #32
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3301      	adds	r3, #1
 8005e88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a08      	ldr	r2, [pc, #32]	; (8005eb0 <USB_FlushTxFifo+0x64>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d901      	bls.n	8005e96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e006      	b.n	8005ea4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	d0f0      	beq.n	8005e84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	00030d40 	.word	0x00030d40

08005eb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <USB_FlushRxFifo+0x5c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e018      	b.n	8005f04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	daf2      	bge.n	8005ec0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2210      	movs	r2, #16
 8005ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4a08      	ldr	r2, [pc, #32]	; (8005f10 <USB_FlushRxFifo+0x5c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d901      	bls.n	8005ef6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e006      	b.n	8005f04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d0f0      	beq.n	8005ee4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	00030d40 	.word	0x00030d40

08005f14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f34:	4313      	orrs	r3, r2
 8005f36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b087      	sub	sp, #28
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0306 	and.w	r3, r3, #6
 8005f5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]
 8005f6a:	e00a      	b.n	8005f82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d002      	beq.n	8005f78 <USB_GetDevSpeed+0x32>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b06      	cmp	r3, #6
 8005f76:	d102      	bne.n	8005f7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	75fb      	strb	r3, [r7, #23]
 8005f7c:	e001      	b.n	8005f82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f7e:	230f      	movs	r3, #15
 8005f80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d13a      	bne.n	8006022 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f003 030f 	and.w	r3, r3, #15
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d155      	bne.n	8006090 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	791b      	ldrb	r3, [r3, #4]
 8005ffe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006000:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	059b      	lsls	r3, r3, #22
 8006006:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006008:	4313      	orrs	r3, r2
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	0151      	lsls	r1, r2, #5
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	440a      	add	r2, r1
 8006012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	e036      	b.n	8006090 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006028:	69da      	ldr	r2, [r3, #28]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	2101      	movs	r1, #1
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006040:	4313      	orrs	r3, r2
 8006042:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d11a      	bne.n	8006090 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	791b      	ldrb	r3, [r3, #4]
 8006074:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006076:	430b      	orrs	r3, r1
 8006078:	4313      	orrs	r3, r2
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	440a      	add	r2, r1
 8006082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800608e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d161      	bne.n	8006180 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d2:	d11f      	bne.n	8006114 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006112:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	2101      	movs	r1, #1
 8006126:	fa01 f303 	lsl.w	r3, r1, r3
 800612a:	b29b      	uxth	r3, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006134:	4013      	ands	r3, r2
 8006136:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	f003 030f 	and.w	r3, r3, #15
 8006148:	2101      	movs	r1, #1
 800614a:	fa01 f303 	lsl.w	r3, r1, r3
 800614e:	b29b      	uxth	r3, r3
 8006150:	43db      	mvns	r3, r3
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006158:	4013      	ands	r3, r2
 800615a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	0159      	lsls	r1, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	440b      	add	r3, r1
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	4619      	mov	r1, r3
 8006178:	4b35      	ldr	r3, [pc, #212]	; (8006250 <USB_DeactivateEndpoint+0x1b0>)
 800617a:	4013      	ands	r3, r2
 800617c:	600b      	str	r3, [r1, #0]
 800617e:	e060      	b.n	8006242 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006196:	d11f      	bne.n	80061d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	2101      	movs	r1, #1
 80061ea:	fa01 f303 	lsl.w	r3, r1, r3
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	43db      	mvns	r3, r3
 80061f2:	68f9      	ldr	r1, [r7, #12]
 80061f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f8:	4013      	ands	r3, r2
 80061fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	2101      	movs	r1, #1
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	43db      	mvns	r3, r3
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800621c:	4013      	ands	r3, r2
 800621e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	0159      	lsls	r1, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	440b      	add	r3, r1
 8006236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623a:	4619      	mov	r1, r3
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <USB_DeactivateEndpoint+0x1b4>)
 800623e:	4013      	ands	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	ec337800 	.word	0xec337800
 8006254:	eff37800 	.word	0xeff37800

08006258 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	785b      	ldrb	r3, [r3, #1]
 8006274:	2b01      	cmp	r3, #1
 8006276:	f040 815c 	bne.w	8006532 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d132      	bne.n	80062e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e0:	0cdb      	lsrs	r3, r3, #19
 80062e2:	04db      	lsls	r3, r3, #19
 80062e4:	6113      	str	r3, [r2, #16]
 80062e6:	e074      	b.n	80063d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006302:	0cdb      	lsrs	r3, r3, #19
 8006304:	04db      	lsls	r3, r3, #19
 8006306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	440a      	add	r2, r1
 800631e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006322:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006326:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800632a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6999      	ldr	r1, [r3, #24]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	440b      	add	r3, r1
 8006344:	1e59      	subs	r1, r3, #1
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	fbb1 f3f3 	udiv	r3, r1, r3
 800634e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006350:	4b9d      	ldr	r3, [pc, #628]	; (80065c8 <USB_EPStartXfer+0x370>)
 8006352:	400b      	ands	r3, r1
 8006354:	69b9      	ldr	r1, [r7, #24]
 8006356:	0148      	lsls	r0, r1, #5
 8006358:	69f9      	ldr	r1, [r7, #28]
 800635a:	4401      	add	r1, r0
 800635c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006360:	4313      	orrs	r3, r2
 8006362:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	691a      	ldr	r2, [r3, #16]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637a:	69b9      	ldr	r1, [r7, #24]
 800637c:	0148      	lsls	r0, r1, #5
 800637e:	69f9      	ldr	r1, [r7, #28]
 8006380:	4401      	add	r1, r0
 8006382:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006386:	4313      	orrs	r3, r2
 8006388:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	791b      	ldrb	r3, [r3, #4]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d11f      	bne.n	80063d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80063b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d14b      	bne.n	8006470 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	461a      	mov	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	791b      	ldrb	r3, [r3, #4]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d128      	bne.n	800644e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d110      	bne.n	800642e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	440a      	add	r2, r1
 8006422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006426:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	e00f      	b.n	800644e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006468:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e133      	b.n	80066d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800648e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d015      	beq.n	80064c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 811b 	beq.w	80066d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	2101      	movs	r1, #1
 80064b4:	fa01 f303 	lsl.w	r3, r1, r3
 80064b8:	69f9      	ldr	r1, [r7, #28]
 80064ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064be:	4313      	orrs	r3, r2
 80064c0:	634b      	str	r3, [r1, #52]	; 0x34
 80064c2:	e109      	b.n	80066d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d110      	bne.n	80064f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	e00f      	b.n	8006516 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006514:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6919      	ldr	r1, [r3, #16]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	b298      	uxth	r0, r3
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	4603      	mov	r3, r0
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fade 	bl	8006aec <USB_WritePacket>
 8006530:	e0d2      	b.n	80066d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654c:	0cdb      	lsrs	r3, r3, #19
 800654e:	04db      	lsls	r3, r3, #19
 8006550:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800656c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006570:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006574:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d126      	bne.n	80065cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006594:	69b9      	ldr	r1, [r7, #24]
 8006596:	0148      	lsls	r0, r1, #5
 8006598:	69f9      	ldr	r1, [r7, #28]
 800659a:	4401      	add	r1, r0
 800659c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065a0:	4313      	orrs	r3, r2
 80065a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065c2:	6113      	str	r3, [r2, #16]
 80065c4:	e03a      	b.n	800663c <USB_EPStartXfer+0x3e4>
 80065c6:	bf00      	nop
 80065c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	699a      	ldr	r2, [r3, #24]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	1e5a      	subs	r2, r3, #1
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	8afa      	ldrh	r2, [r7, #22]
 80065e8:	fb03 f202 	mul.w	r2, r3, r2
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	8afb      	ldrh	r3, [r7, #22]
 8006600:	04d9      	lsls	r1, r3, #19
 8006602:	4b38      	ldr	r3, [pc, #224]	; (80066e4 <USB_EPStartXfer+0x48c>)
 8006604:	400b      	ands	r3, r1
 8006606:	69b9      	ldr	r1, [r7, #24]
 8006608:	0148      	lsls	r0, r1, #5
 800660a:	69f9      	ldr	r1, [r7, #28]
 800660c:	4401      	add	r1, r0
 800660e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006612:	4313      	orrs	r3, r2
 8006614:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800662c:	69b9      	ldr	r1, [r7, #24]
 800662e:	0148      	lsls	r0, r1, #5
 8006630:	69f9      	ldr	r1, [r7, #28]
 8006632:	4401      	add	r1, r0
 8006634:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006638:	4313      	orrs	r3, r2
 800663a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10d      	bne.n	800665e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	6919      	ldr	r1, [r3, #16]
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	460a      	mov	r2, r1
 800665c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	791b      	ldrb	r3, [r3, #4]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d128      	bne.n	80066b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006672:	2b00      	cmp	r3, #0
 8006674:	d110      	bne.n	8006698 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006690:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e00f      	b.n	80066b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	0151      	lsls	r1, r2, #5
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	440a      	add	r2, r1
 80066ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	1ff80000 	.word	0x1ff80000

080066e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b01      	cmp	r3, #1
 8006706:	f040 80ce 	bne.w	80068a6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d132      	bne.n	8006778 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	0151      	lsls	r1, r2, #5
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	440a      	add	r2, r1
 8006728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006730:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006734:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	440a      	add	r2, r1
 800674c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	0151      	lsls	r1, r2, #5
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	440a      	add	r2, r1
 800676c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006770:	0cdb      	lsrs	r3, r3, #19
 8006772:	04db      	lsls	r3, r3, #19
 8006774:	6113      	str	r3, [r2, #16]
 8006776:	e04e      	b.n	8006816 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006792:	0cdb      	lsrs	r3, r3, #19
 8006794:	04db      	lsls	r3, r3, #19
 8006796:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	0151      	lsls	r1, r2, #5
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	440a      	add	r2, r1
 80067ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067ba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d903      	bls.n	80067d0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006806:	6939      	ldr	r1, [r7, #16]
 8006808:	0148      	lsls	r0, r1, #5
 800680a:	6979      	ldr	r1, [r7, #20]
 800680c:	4401      	add	r1, r0
 800680e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006812:	4313      	orrs	r3, r2
 8006814:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d11e      	bne.n	800685a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d009      	beq.n	8006838 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	461a      	mov	r2, r3
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006852:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	e097      	b.n	800698a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006874:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006878:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8083 	beq.w	800698a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	2101      	movs	r1, #1
 8006896:	fa01 f303 	lsl.w	r3, r1, r3
 800689a:	6979      	ldr	r1, [r7, #20]
 800689c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a0:	4313      	orrs	r3, r2
 80068a2:	634b      	str	r3, [r1, #52]	; 0x34
 80068a4:	e071      	b.n	800698a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c0:	0cdb      	lsrs	r3, r3, #19
 80068c2:	04db      	lsls	r3, r3, #19
 80068c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006920:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006938:	6939      	ldr	r1, [r7, #16]
 800693a:	0148      	lsls	r0, r1, #5
 800693c:	6979      	ldr	r1, [r7, #20]
 800693e:	4401      	add	r1, r0
 8006940:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006944:	4313      	orrs	r3, r2
 8006946:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d10d      	bne.n	800696a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6919      	ldr	r1, [r3, #16]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006966:	460a      	mov	r2, r1
 8006968:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	0151      	lsls	r1, r2, #5
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	440a      	add	r2, r1
 8006980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006984:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006988:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d14a      	bne.n	8006a4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ce:	f040 8086 	bne.w	8006ade <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	7812      	ldrb	r2, [r2, #0]
 80069e6:	0151      	lsls	r1, r2, #5
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	440a      	add	r2, r1
 80069ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	7812      	ldrb	r2, [r2, #0]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d902      	bls.n	8006a30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a2e:	e056      	b.n	8006ade <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a48:	d0e7      	beq.n	8006a1a <USB_EPStopXfer+0x82>
 8006a4a:	e048      	b.n	8006ade <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a64:	d13b      	bne.n	8006ade <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	0151      	lsls	r1, r2, #5
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	440a      	add	r2, r1
 8006a80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	7812      	ldrb	r2, [r2, #0]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d902      	bls.n	8006ac4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac2:	e00c      	b.n	8006ade <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006adc:	d0e7      	beq.n	8006aae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b089      	sub	sp, #36	; 0x24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	460b      	mov	r3, r1
 8006afc:	71fb      	strb	r3, [r7, #7]
 8006afe:	4613      	mov	r3, r2
 8006b00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d123      	bne.n	8006b5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b12:	88bb      	ldrh	r3, [r7, #4]
 8006b14:	3303      	adds	r3, #3
 8006b16:	089b      	lsrs	r3, r3, #2
 8006b18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	e018      	b.n	8006b52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	031a      	lsls	r2, r3, #12
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	3301      	adds	r3, #1
 8006b44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d3e2      	bcc.n	8006b20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3724      	adds	r7, #36	; 0x24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b08b      	sub	sp, #44	; 0x2c
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	4613      	mov	r3, r2
 8006b74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	089b      	lsrs	r3, r3, #2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b86:	88fb      	ldrh	r3, [r7, #6]
 8006b88:	f003 0303 	and.w	r3, r3, #3
 8006b8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b8e:	2300      	movs	r3, #0
 8006b90:	623b      	str	r3, [r7, #32]
 8006b92:	e014      	b.n	8006bbe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	3301      	adds	r3, #1
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	3301      	adds	r3, #1
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	623b      	str	r3, [r7, #32]
 8006bbe:	6a3a      	ldr	r2, [r7, #32]
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d3e6      	bcc.n	8006b94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bc6:	8bfb      	ldrh	r3, [r7, #30]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01e      	beq.n	8006c0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f107 0310 	add.w	r3, r7, #16
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	00db      	lsls	r3, r3, #3
 8006be8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	701a      	strb	r2, [r3, #0]
      i++;
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006bfe:	8bfb      	ldrh	r3, [r7, #30]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c04:	8bfb      	ldrh	r3, [r7, #30]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1ea      	bne.n	8006be0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	372c      	adds	r7, #44	; 0x2c
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d12c      	bne.n	8006c8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	db12      	blt.n	8006c6c <USB_EPSetStall+0x54>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00f      	beq.n	8006c6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	e02b      	b.n	8006ce6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	db12      	blt.n	8006cc6 <USB_EPSetStall+0xae>
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00f      	beq.n	8006cc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	0151      	lsls	r1, r2, #5
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	440a      	add	r2, r1
 8006cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ce4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d128      	bne.n	8006d62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	791b      	ldrb	r3, [r3, #4]
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d003      	beq.n	8006d40 <USB_EPClearStall+0x4c>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	791b      	ldrb	r3, [r3, #4]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d138      	bne.n	8006db2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e027      	b.n	8006db2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	791b      	ldrb	r3, [r3, #4]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d003      	beq.n	8006d92 <USB_EPClearStall+0x9e>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	791b      	ldrb	r3, [r3, #4]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d10f      	bne.n	8006db2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006de2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	011b      	lsls	r3, r3, #4
 8006df0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006df4:	68f9      	ldr	r1, [r7, #12]
 8006df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e3a:	f023 0302 	bic.w	r3, r3, #2
 8006e3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e68:	f023 0303 	bic.w	r3, r3, #3
 8006e6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e7c:	f043 0302 	orr.w	r3, r3, #2
 8006e80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	0c1b      	lsrs	r3, r3, #16
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	b29b      	uxth	r3, r3
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b085      	sub	sp, #20
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b087      	sub	sp, #28
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f7e:	78fb      	ldrb	r3, [r7, #3]
 8006f80:	f003 030f 	and.w	r3, r3, #15
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8a:	01db      	lsls	r3, r3, #7
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ff0:	f023 0307 	bic.w	r3, r3, #7
 8006ff4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007008:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	460b      	mov	r3, r1
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	333c      	adds	r3, #60	; 0x3c
 800702e:	3304      	adds	r3, #4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	4a26      	ldr	r2, [pc, #152]	; (80070d0 <USB_EP0_OutStart+0xb8>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d90a      	bls.n	8007052 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800704c:	d101      	bne.n	8007052 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e037      	b.n	80070c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	461a      	mov	r2, r3
 800705a:	2300      	movs	r3, #0
 800705c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800706c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007080:	f043 0318 	orr.w	r3, r3, #24
 8007084:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007094:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007098:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d10f      	bne.n	80070c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a6:	461a      	mov	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80070be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	4f54300a 	.word	0x4f54300a

080070d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	4a13      	ldr	r2, [pc, #76]	; (8007138 <USB_CoreReset+0x64>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d901      	bls.n	80070f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e01b      	b.n	800712a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	daf2      	bge.n	80070e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a09      	ldr	r2, [pc, #36]	; (8007138 <USB_CoreReset+0x64>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e006      	b.n	800712a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b01      	cmp	r3, #1
 8007126:	d0f0      	beq.n	800710a <USB_CoreReset+0x36>

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	00030d40 	.word	0x00030d40

0800713c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007148:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800714c:	f002 fc8a 	bl	8009a64 <USBD_static_malloc>
 8007150:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d109      	bne.n	800716c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	32b0      	adds	r2, #176	; 0xb0
 8007162:	2100      	movs	r1, #0
 8007164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007168:	2302      	movs	r3, #2
 800716a:	e0d4      	b.n	8007316 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800716c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007170:	2100      	movs	r1, #0
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f002 fce4 	bl	8009b40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	32b0      	adds	r2, #176	; 0xb0
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	32b0      	adds	r2, #176	; 0xb0
 8007192:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	7c1b      	ldrb	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d138      	bne.n	8007216 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80071a4:	4b5e      	ldr	r3, [pc, #376]	; (8007320 <USBD_CDC_Init+0x1e4>)
 80071a6:	7819      	ldrb	r1, [r3, #0]
 80071a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ac:	2202      	movs	r2, #2
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f002 fb35 	bl	800981e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071b4:	4b5a      	ldr	r3, [pc, #360]	; (8007320 <USBD_CDC_Init+0x1e4>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	f003 020f 	and.w	r2, r3, #15
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	2201      	movs	r2, #1
 80071cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071ce:	4b55      	ldr	r3, [pc, #340]	; (8007324 <USBD_CDC_Init+0x1e8>)
 80071d0:	7819      	ldrb	r1, [r3, #0]
 80071d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071d6:	2202      	movs	r2, #2
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 fb20 	bl	800981e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071de:	4b51      	ldr	r3, [pc, #324]	; (8007324 <USBD_CDC_Init+0x1e8>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	f003 020f 	and.w	r2, r3, #15
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	440b      	add	r3, r1
 80071f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071f6:	2201      	movs	r2, #1
 80071f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071fa:	4b4b      	ldr	r3, [pc, #300]	; (8007328 <USBD_CDC_Init+0x1ec>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	f003 020f 	and.w	r2, r3, #15
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	440b      	add	r3, r1
 800720e:	3326      	adds	r3, #38	; 0x26
 8007210:	2210      	movs	r2, #16
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	e035      	b.n	8007282 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007216:	4b42      	ldr	r3, [pc, #264]	; (8007320 <USBD_CDC_Init+0x1e4>)
 8007218:	7819      	ldrb	r1, [r3, #0]
 800721a:	2340      	movs	r3, #64	; 0x40
 800721c:	2202      	movs	r2, #2
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f002 fafd 	bl	800981e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007224:	4b3e      	ldr	r3, [pc, #248]	; (8007320 <USBD_CDC_Init+0x1e4>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f003 020f 	and.w	r2, r3, #15
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	440b      	add	r3, r1
 8007238:	3324      	adds	r3, #36	; 0x24
 800723a:	2201      	movs	r2, #1
 800723c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800723e:	4b39      	ldr	r3, [pc, #228]	; (8007324 <USBD_CDC_Init+0x1e8>)
 8007240:	7819      	ldrb	r1, [r3, #0]
 8007242:	2340      	movs	r3, #64	; 0x40
 8007244:	2202      	movs	r2, #2
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f002 fae9 	bl	800981e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800724c:	4b35      	ldr	r3, [pc, #212]	; (8007324 <USBD_CDC_Init+0x1e8>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	f003 020f 	and.w	r2, r3, #15
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007264:	2201      	movs	r2, #1
 8007266:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007268:	4b2f      	ldr	r3, [pc, #188]	; (8007328 <USBD_CDC_Init+0x1ec>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	3326      	adds	r3, #38	; 0x26
 800727e:	2210      	movs	r2, #16
 8007280:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007282:	4b29      	ldr	r3, [pc, #164]	; (8007328 <USBD_CDC_Init+0x1ec>)
 8007284:	7819      	ldrb	r1, [r3, #0]
 8007286:	2308      	movs	r3, #8
 8007288:	2203      	movs	r2, #3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f002 fac7 	bl	800981e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007290:	4b25      	ldr	r3, [pc, #148]	; (8007328 <USBD_CDC_Init+0x1ec>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	f003 020f 	and.w	r2, r3, #15
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	3324      	adds	r3, #36	; 0x24
 80072a6:	2201      	movs	r2, #1
 80072a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	33b0      	adds	r3, #176	; 0xb0
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80072e0:	2302      	movs	r3, #2
 80072e2:	e018      	b.n	8007316 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7c1b      	ldrb	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072ec:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <USBD_CDC_Init+0x1e8>)
 80072ee:	7819      	ldrb	r1, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80072f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f002 fb7e 	bl	80099fc <USBD_LL_PrepareReceive>
 8007300:	e008      	b.n	8007314 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007302:	4b08      	ldr	r3, [pc, #32]	; (8007324 <USBD_CDC_Init+0x1e8>)
 8007304:	7819      	ldrb	r1, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800730c:	2340      	movs	r3, #64	; 0x40
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f002 fb74 	bl	80099fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200000bb 	.word	0x200000bb
 8007324:	200000bc 	.word	0x200000bc
 8007328:	200000bd 	.word	0x200000bd

0800732c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007338:	4b3a      	ldr	r3, [pc, #232]	; (8007424 <USBD_CDC_DeInit+0xf8>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f002 fa93 	bl	800986a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007344:	4b37      	ldr	r3, [pc, #220]	; (8007424 <USBD_CDC_DeInit+0xf8>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 020f 	and.w	r2, r3, #15
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	3324      	adds	r3, #36	; 0x24
 800735a:	2200      	movs	r2, #0
 800735c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800735e:	4b32      	ldr	r3, [pc, #200]	; (8007428 <USBD_CDC_DeInit+0xfc>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f002 fa80 	bl	800986a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800736a:	4b2f      	ldr	r3, [pc, #188]	; (8007428 <USBD_CDC_DeInit+0xfc>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 020f 	and.w	r2, r3, #15
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007382:	2200      	movs	r2, #0
 8007384:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007386:	4b29      	ldr	r3, [pc, #164]	; (800742c <USBD_CDC_DeInit+0x100>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f002 fa6c 	bl	800986a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007392:	4b26      	ldr	r3, [pc, #152]	; (800742c <USBD_CDC_DeInit+0x100>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	f003 020f 	and.w	r2, r3, #15
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	3324      	adds	r3, #36	; 0x24
 80073a8:	2200      	movs	r2, #0
 80073aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80073ac:	4b1f      	ldr	r3, [pc, #124]	; (800742c <USBD_CDC_DeInit+0x100>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	f003 020f 	and.w	r2, r3, #15
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	3326      	adds	r3, #38	; 0x26
 80073c2:	2200      	movs	r2, #0
 80073c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	32b0      	adds	r2, #176	; 0xb0
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d01f      	beq.n	8007418 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	33b0      	adds	r3, #176	; 0xb0
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	32b0      	adds	r2, #176	; 0xb0
 80073f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f002 fb40 	bl	8009a80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	32b0      	adds	r2, #176	; 0xb0
 800740a:	2100      	movs	r1, #0
 800740c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	200000bb 	.word	0x200000bb
 8007428:	200000bc 	.word	0x200000bc
 800742c:	200000bd 	.word	0x200000bd

08007430 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	32b0      	adds	r2, #176	; 0xb0
 8007444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007448:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800745c:	2303      	movs	r3, #3
 800745e:	e0bf      	b.n	80075e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007468:	2b00      	cmp	r3, #0
 800746a:	d050      	beq.n	800750e <USBD_CDC_Setup+0xde>
 800746c:	2b20      	cmp	r3, #32
 800746e:	f040 80af 	bne.w	80075d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	88db      	ldrh	r3, [r3, #6]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d03a      	beq.n	80074f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	b25b      	sxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	da1b      	bge.n	80074bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	33b0      	adds	r3, #176	; 0xb0
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800749a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	88d2      	ldrh	r2, [r2, #6]
 80074a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	2b07      	cmp	r3, #7
 80074a8:	bf28      	it	cs
 80074aa:	2307      	movcs	r3, #7
 80074ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	89fa      	ldrh	r2, [r7, #14]
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 fd89 	bl	8008fcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80074ba:	e090      	b.n	80075de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	785a      	ldrb	r2, [r3, #1]
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	88db      	ldrh	r3, [r3, #6]
 80074ca:	2b3f      	cmp	r3, #63	; 0x3f
 80074cc:	d803      	bhi.n	80074d6 <USBD_CDC_Setup+0xa6>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	88db      	ldrh	r3, [r3, #6]
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	e000      	b.n	80074d8 <USBD_CDC_Setup+0xa8>
 80074d6:	2240      	movs	r2, #64	; 0x40
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80074de:	6939      	ldr	r1, [r7, #16]
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80074e6:	461a      	mov	r2, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 fd9b 	bl	8009024 <USBD_CtlPrepareRx>
      break;
 80074ee:	e076      	b.n	80075de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	33b0      	adds	r3, #176	; 0xb0
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	7850      	ldrb	r0, [r2, #1]
 8007506:	2200      	movs	r2, #0
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	4798      	blx	r3
      break;
 800750c:	e067      	b.n	80075de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	785b      	ldrb	r3, [r3, #1]
 8007512:	2b0b      	cmp	r3, #11
 8007514:	d851      	bhi.n	80075ba <USBD_CDC_Setup+0x18a>
 8007516:	a201      	add	r2, pc, #4	; (adr r2, 800751c <USBD_CDC_Setup+0xec>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	0800754d 	.word	0x0800754d
 8007520:	080075c9 	.word	0x080075c9
 8007524:	080075bb 	.word	0x080075bb
 8007528:	080075bb 	.word	0x080075bb
 800752c:	080075bb 	.word	0x080075bb
 8007530:	080075bb 	.word	0x080075bb
 8007534:	080075bb 	.word	0x080075bb
 8007538:	080075bb 	.word	0x080075bb
 800753c:	080075bb 	.word	0x080075bb
 8007540:	080075bb 	.word	0x080075bb
 8007544:	08007577 	.word	0x08007577
 8007548:	080075a1 	.word	0x080075a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b03      	cmp	r3, #3
 8007556:	d107      	bne.n	8007568 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007558:	f107 030a 	add.w	r3, r7, #10
 800755c:	2202      	movs	r2, #2
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 fd33 	bl	8008fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007566:	e032      	b.n	80075ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fcbd 	bl	8008eea <USBD_CtlError>
            ret = USBD_FAIL;
 8007570:	2303      	movs	r3, #3
 8007572:	75fb      	strb	r3, [r7, #23]
          break;
 8007574:	e02b      	b.n	80075ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b03      	cmp	r3, #3
 8007580:	d107      	bne.n	8007592 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007582:	f107 030d 	add.w	r3, r7, #13
 8007586:	2201      	movs	r2, #1
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 fd1e 	bl	8008fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007590:	e01d      	b.n	80075ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 fca8 	bl	8008eea <USBD_CtlError>
            ret = USBD_FAIL;
 800759a:	2303      	movs	r3, #3
 800759c:	75fb      	strb	r3, [r7, #23]
          break;
 800759e:	e016      	b.n	80075ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d00f      	beq.n	80075cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 fc9b 	bl	8008eea <USBD_CtlError>
            ret = USBD_FAIL;
 80075b4:	2303      	movs	r3, #3
 80075b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075b8:	e008      	b.n	80075cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fc94 	bl	8008eea <USBD_CtlError>
          ret = USBD_FAIL;
 80075c2:	2303      	movs	r3, #3
 80075c4:	75fb      	strb	r3, [r7, #23]
          break;
 80075c6:	e002      	b.n	80075ce <USBD_CDC_Setup+0x19e>
          break;
 80075c8:	bf00      	nop
 80075ca:	e008      	b.n	80075de <USBD_CDC_Setup+0x1ae>
          break;
 80075cc:	bf00      	nop
      }
      break;
 80075ce:	e006      	b.n	80075de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 fc89 	bl	8008eea <USBD_CtlError>
      ret = USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	75fb      	strb	r3, [r7, #23]
      break;
 80075dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32b0      	adds	r2, #176	; 0xb0
 8007606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800760e:	2303      	movs	r3, #3
 8007610:	e065      	b.n	80076de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	32b0      	adds	r2, #176	; 0xb0
 800761c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007620:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	f003 020f 	and.w	r2, r3, #15
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	3318      	adds	r3, #24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d02f      	beq.n	800769c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	f003 020f 	and.w	r2, r3, #15
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	3318      	adds	r3, #24
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	f003 010f 	and.w	r1, r3, #15
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	460b      	mov	r3, r1
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	440b      	add	r3, r1
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4403      	add	r3, r0
 8007664:	3348      	adds	r3, #72	; 0x48
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	fbb2 f1f3 	udiv	r1, r2, r3
 800766c:	fb01 f303 	mul.w	r3, r1, r3
 8007670:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007672:	2b00      	cmp	r3, #0
 8007674:	d112      	bne.n	800769c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	f003 020f 	and.w	r2, r3, #15
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	3318      	adds	r3, #24
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800768e:	78f9      	ldrb	r1, [r7, #3]
 8007690:	2300      	movs	r3, #0
 8007692:	2200      	movs	r2, #0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f002 f990 	bl	80099ba <USBD_LL_Transmit>
 800769a:	e01f      	b.n	80076dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	33b0      	adds	r3, #176	; 0xb0
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d010      	beq.n	80076dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	33b0      	adds	r3, #176	; 0xb0
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	32b0      	adds	r2, #176	; 0xb0
 80076fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007700:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	32b0      	adds	r2, #176	; 0xb0
 800770c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007714:	2303      	movs	r3, #3
 8007716:	e01a      	b.n	800774e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	4619      	mov	r1, r3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f002 f98e 	bl	8009a3e <USBD_LL_GetRxDataSize>
 8007722:	4602      	mov	r2, r0
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	33b0      	adds	r3, #176	; 0xb0
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007748:	4611      	mov	r1, r2
 800774a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	32b0      	adds	r2, #176	; 0xb0
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007774:	2303      	movs	r3, #3
 8007776:	e025      	b.n	80077c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	33b0      	adds	r3, #176	; 0xb0
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d01a      	beq.n	80077c2 <USBD_CDC_EP0_RxReady+0x6c>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007792:	2bff      	cmp	r3, #255	; 0xff
 8007794:	d015      	beq.n	80077c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	33b0      	adds	r3, #176	; 0xb0
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80077ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077b6:	b292      	uxth	r2, r2
 80077b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	22ff      	movs	r2, #255	; 0xff
 80077be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077d4:	2182      	movs	r1, #130	; 0x82
 80077d6:	4818      	ldr	r0, [pc, #96]	; (8007838 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077d8:	f000 fd4f 	bl	800827a <USBD_GetEpDesc>
 80077dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077de:	2101      	movs	r1, #1
 80077e0:	4815      	ldr	r0, [pc, #84]	; (8007838 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077e2:	f000 fd4a 	bl	800827a <USBD_GetEpDesc>
 80077e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077e8:	2181      	movs	r1, #129	; 0x81
 80077ea:	4813      	ldr	r0, [pc, #76]	; (8007838 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077ec:	f000 fd45 	bl	800827a <USBD_GetEpDesc>
 80077f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2210      	movs	r2, #16
 80077fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2200      	movs	r2, #0
 8007808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800780c:	711a      	strb	r2, [r3, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d006      	beq.n	8007826 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007820:	711a      	strb	r2, [r3, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2243      	movs	r2, #67	; 0x43
 800782a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800782c:	4b02      	ldr	r3, [pc, #8]	; (8007838 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000078 	.word	0x20000078

0800783c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007844:	2182      	movs	r1, #130	; 0x82
 8007846:	4818      	ldr	r0, [pc, #96]	; (80078a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007848:	f000 fd17 	bl	800827a <USBD_GetEpDesc>
 800784c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800784e:	2101      	movs	r1, #1
 8007850:	4815      	ldr	r0, [pc, #84]	; (80078a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007852:	f000 fd12 	bl	800827a <USBD_GetEpDesc>
 8007856:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007858:	2181      	movs	r1, #129	; 0x81
 800785a:	4813      	ldr	r0, [pc, #76]	; (80078a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800785c:	f000 fd0d 	bl	800827a <USBD_GetEpDesc>
 8007860:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2210      	movs	r2, #16
 800786c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d006      	beq.n	8007882 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	2200      	movs	r2, #0
 8007878:	711a      	strb	r2, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f042 0202 	orr.w	r2, r2, #2
 8007880:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d006      	beq.n	8007896 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	711a      	strb	r2, [r3, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f042 0202 	orr.w	r2, r2, #2
 8007894:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2243      	movs	r2, #67	; 0x43
 800789a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800789c:	4b02      	ldr	r3, [pc, #8]	; (80078a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000078 	.word	0x20000078

080078ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078b4:	2182      	movs	r1, #130	; 0x82
 80078b6:	4818      	ldr	r0, [pc, #96]	; (8007918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078b8:	f000 fcdf 	bl	800827a <USBD_GetEpDesc>
 80078bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078be:	2101      	movs	r1, #1
 80078c0:	4815      	ldr	r0, [pc, #84]	; (8007918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078c2:	f000 fcda 	bl	800827a <USBD_GetEpDesc>
 80078c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078c8:	2181      	movs	r1, #129	; 0x81
 80078ca:	4813      	ldr	r0, [pc, #76]	; (8007918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078cc:	f000 fcd5 	bl	800827a <USBD_GetEpDesc>
 80078d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2210      	movs	r2, #16
 80078dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d006      	beq.n	80078f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ec:	711a      	strb	r2, [r3, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d006      	beq.n	8007906 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007900:	711a      	strb	r2, [r3, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2243      	movs	r2, #67	; 0x43
 800790a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800790c:	4b02      	ldr	r3, [pc, #8]	; (8007918 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800790e:	4618      	mov	r0, r3
 8007910:	3718      	adds	r7, #24
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000078 	.word	0x20000078

0800791c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	220a      	movs	r2, #10
 8007928:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800792a:	4b03      	ldr	r3, [pc, #12]	; (8007938 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	20000034 	.word	0x20000034

0800793c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	e009      	b.n	8007964 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	33b0      	adds	r3, #176	; 0xb0
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	32b0      	adds	r2, #176	; 0xb0
 8007986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007992:	2303      	movs	r3, #3
 8007994:	e008      	b.n	80079a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	371c      	adds	r7, #28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	32b0      	adds	r2, #176	; 0xb0
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e004      	b.n	80079e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
	...

080079f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	32b0      	adds	r2, #176	; 0xb0
 8007a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a06:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	32b0      	adds	r2, #176	; 0xb0
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e025      	b.n	8007a6e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d11f      	bne.n	8007a6c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007a34:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <USBD_CDC_TransmitPacket+0x88>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	f003 020f 	and.w	r2, r3, #15
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4403      	add	r3, r0
 8007a4e:	3318      	adds	r3, #24
 8007a50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007a52:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <USBD_CDC_TransmitPacket+0x88>)
 8007a54:	7819      	ldrb	r1, [r3, #0]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 ffa9 	bl	80099ba <USBD_LL_Transmit>

    ret = USBD_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200000bb 	.word	0x200000bb

08007a7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	32b0      	adds	r2, #176	; 0xb0
 8007a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32b0      	adds	r2, #176	; 0xb0
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e018      	b.n	8007adc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7c1b      	ldrb	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <USBD_CDC_ReceivePacket+0x68>)
 8007ab4:	7819      	ldrb	r1, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 ff9b 	bl	80099fc <USBD_LL_PrepareReceive>
 8007ac6:	e008      	b.n	8007ada <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ac8:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <USBD_CDC_ReceivePacket+0x68>)
 8007aca:	7819      	ldrb	r1, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ad2:	2340      	movs	r3, #64	; 0x40
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 ff91 	bl	80099fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	200000bc 	.word	0x200000bc

08007ae8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	4613      	mov	r3, r2
 8007af4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e01f      	b.n	8007b40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	79fa      	ldrb	r2, [r7, #7]
 8007b32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f001 fe0b 	bl	8009750 <USBD_LL_Init>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e025      	b.n	8007bac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	32ae      	adds	r2, #174	; 0xae
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00f      	beq.n	8007b9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32ae      	adds	r2, #174	; 0xae
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	f107 020e 	add.w	r2, r7, #14
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	4602      	mov	r2, r0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 fe13 	bl	80097e8 <USBD_LL_Start>
 8007bc2:	4603      	mov	r3, r0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	78fa      	ldrb	r2, [r7, #3]
 8007c06:	4611      	mov	r1, r2
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	4798      	blx	r3
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	4611      	mov	r1, r2
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 f908 	bl	8008e76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c74:	461a      	mov	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c82:	f003 031f 	and.w	r3, r3, #31
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d01a      	beq.n	8007cc0 <USBD_LL_SetupStage+0x72>
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d822      	bhi.n	8007cd4 <USBD_LL_SetupStage+0x86>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <USBD_LL_SetupStage+0x4a>
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d00a      	beq.n	8007cac <USBD_LL_SetupStage+0x5e>
 8007c96:	e01d      	b.n	8007cd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fb5f 	bl	8008364 <USBD_StdDevReq>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8007caa:	e020      	b.n	8007cee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fbc7 	bl	8008448 <USBD_StdItfReq>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbe:	e016      	b.n	8007cee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc29 	bl	8008520 <USBD_StdEPReq>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd2:	e00c      	b.n	8007cee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 fde0 	bl	80098a8 <USBD_LL_StallEP>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]
      break;
 8007cec:	bf00      	nop
  }

  return ret;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	460b      	mov	r3, r1
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d16e      	bne.n	8007dee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	f040 8098 	bne.w	8007e54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d913      	bls.n	8007d58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	1ad2      	subs	r2, r2, r3
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	4293      	cmp	r3, r2
 8007d48:	bf28      	it	cs
 8007d4a:	4613      	movcs	r3, r2
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f001 f984 	bl	800905e <USBD_CtlContinueRx>
 8007d56:	e07d      	b.n	8007e54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d5e:	f003 031f 	and.w	r3, r3, #31
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d014      	beq.n	8007d90 <USBD_LL_DataOutStage+0x98>
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d81d      	bhi.n	8007da6 <USBD_LL_DataOutStage+0xae>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <USBD_LL_DataOutStage+0x7c>
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d003      	beq.n	8007d7a <USBD_LL_DataOutStage+0x82>
 8007d72:	e018      	b.n	8007da6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	75bb      	strb	r3, [r7, #22]
            break;
 8007d78:	e018      	b.n	8007dac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	4619      	mov	r1, r3
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 fa5e 	bl	8008246 <USBD_CoreFindIF>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	75bb      	strb	r3, [r7, #22]
            break;
 8007d8e:	e00d      	b.n	8007dac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	4619      	mov	r1, r3
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 fa60 	bl	8008260 <USBD_CoreFindEP>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75bb      	strb	r3, [r7, #22]
            break;
 8007da4:	e002      	b.n	8007dac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	75bb      	strb	r3, [r7, #22]
            break;
 8007daa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007dac:	7dbb      	ldrb	r3, [r7, #22]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d119      	bne.n	8007de6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d113      	bne.n	8007de6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007dbe:	7dba      	ldrb	r2, [r7, #22]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	32ae      	adds	r2, #174	; 0xae
 8007dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007dce:	7dba      	ldrb	r2, [r7, #22]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dd6:	7dba      	ldrb	r2, [r7, #22]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	32ae      	adds	r2, #174	; 0xae
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f001 f94a 	bl	8009080 <USBD_CtlSendStatus>
 8007dec:	e032      	b.n	8007e54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	4619      	mov	r1, r3
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fa31 	bl	8008260 <USBD_CoreFindEP>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e02:	7dbb      	ldrb	r3, [r7, #22]
 8007e04:	2bff      	cmp	r3, #255	; 0xff
 8007e06:	d025      	beq.n	8007e54 <USBD_LL_DataOutStage+0x15c>
 8007e08:	7dbb      	ldrb	r3, [r7, #22]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d122      	bne.n	8007e54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d117      	bne.n	8007e4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e1a:	7dba      	ldrb	r2, [r7, #22]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	32ae      	adds	r2, #174	; 0xae
 8007e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00f      	beq.n	8007e4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e2a:	7dba      	ldrb	r2, [r7, #22]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e32:	7dba      	ldrb	r2, [r7, #22]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	32ae      	adds	r2, #174	; 0xae
 8007e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	7afa      	ldrb	r2, [r7, #11]
 8007e40:	4611      	mov	r1, r2
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	4798      	blx	r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e4a:	7dfb      	ldrb	r3, [r7, #23]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	e000      	b.n	8007e56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b086      	sub	sp, #24
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	460b      	mov	r3, r1
 8007e68:	607a      	str	r2, [r7, #4]
 8007e6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d16f      	bne.n	8007f52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3314      	adds	r3, #20
 8007e76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d15a      	bne.n	8007f38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d914      	bls.n	8007eb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	1ad2      	subs	r2, r2, r3
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f001 f8ac 	bl	8009002 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2200      	movs	r2, #0
 8007eae:	2100      	movs	r1, #0
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f001 fda3 	bl	80099fc <USBD_LL_PrepareReceive>
 8007eb6:	e03f      	b.n	8007f38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d11c      	bne.n	8007efe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d316      	bcc.n	8007efe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d20f      	bcs.n	8007efe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f001 f88d 	bl	8009002 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f001 fd80 	bl	80099fc <USBD_LL_PrepareReceive>
 8007efc:	e01c      	b.n	8007f38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d10f      	bne.n	8007f2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d009      	beq.n	8007f2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f2a:	2180      	movs	r1, #128	; 0x80
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f001 fcbb 	bl	80098a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f001 f8b7 	bl	80090a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d03a      	beq.n	8007fb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff fe42 	bl	8007bcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f50:	e032      	b.n	8007fb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f52:	7afb      	ldrb	r3, [r7, #11]
 8007f54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 f97f 	bl	8008260 <USBD_CoreFindEP>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	2bff      	cmp	r3, #255	; 0xff
 8007f6a:	d025      	beq.n	8007fb8 <USBD_LL_DataInStage+0x15a>
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d122      	bne.n	8007fb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d11c      	bne.n	8007fb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f7e:	7dfa      	ldrb	r2, [r7, #23]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	32ae      	adds	r2, #174	; 0xae
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d014      	beq.n	8007fb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f8e:	7dfa      	ldrb	r2, [r7, #23]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f96:	7dfa      	ldrb	r2, [r7, #23]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	32ae      	adds	r2, #174	; 0xae
 8007f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	7afa      	ldrb	r2, [r7, #11]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	4798      	blx	r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fae:	7dbb      	ldrb	r3, [r7, #22]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fb4:	7dbb      	ldrb	r3, [r7, #22]
 8007fb6:	e000      	b.n	8007fba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d014      	beq.n	8008028 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6852      	ldr	r2, [r2, #4]
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	4611      	mov	r1, r2
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	2200      	movs	r2, #0
 800802c:	2100      	movs	r1, #0
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 fbf5 	bl	800981e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2240      	movs	r2, #64	; 0x40
 8008040:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	2200      	movs	r2, #0
 8008048:	2180      	movs	r1, #128	; 0x80
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 fbe7 	bl	800981e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2240      	movs	r2, #64	; 0x40
 800805a:	621a      	str	r2, [r3, #32]

  return ret;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	b2da      	uxtb	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2204      	movs	r2, #4
 80080a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d106      	bne.n	80080d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d110      	bne.n	8008118 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	32ae      	adds	r2, #174	; 0xae
 8008138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	e01c      	b.n	800817e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b03      	cmp	r3, #3
 800814e:	d115      	bne.n	800817c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	32ae      	adds	r2, #174	; 0xae
 800815a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	32ae      	adds	r2, #174	; 0xae
 800816e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	4611      	mov	r1, r2
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	32ae      	adds	r2, #174	; 0xae
 800819c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e01c      	b.n	80081e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d115      	bne.n	80081e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	32ae      	adds	r2, #174	; 0xae
 80081be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	32ae      	adds	r2, #174	; 0xae
 80081d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	4611      	mov	r1, r2
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00e      	beq.n	800823c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6852      	ldr	r2, [r2, #4]
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	4611      	mov	r1, r2
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008238:	2303      	movs	r3, #3
 800823a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008252:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800826c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800826e:	4618      	mov	r0, r3
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b086      	sub	sp, #24
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	885b      	ldrh	r3, [r3, #2]
 8008296:	b29a      	uxth	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	429a      	cmp	r2, r3
 80082a0:	d920      	bls.n	80082e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082aa:	e013      	b.n	80082d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082ac:	f107 030a 	add.w	r3, r7, #10
 80082b0:	4619      	mov	r1, r3
 80082b2:	6978      	ldr	r0, [r7, #20]
 80082b4:	f000 f81b 	bl	80082ee <USBD_GetNextDesc>
 80082b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d108      	bne.n	80082d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	789b      	ldrb	r3, [r3, #2]
 80082ca:	78fa      	ldrb	r2, [r7, #3]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d008      	beq.n	80082e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	885b      	ldrh	r3, [r3, #2]
 80082d8:	b29a      	uxth	r2, r3
 80082da:	897b      	ldrh	r3, [r7, #10]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d8e5      	bhi.n	80082ac <USBD_GetEpDesc+0x32>
 80082e0:	e000      	b.n	80082e4 <USBD_GetEpDesc+0x6a>
          break;
 80082e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082e4:	693b      	ldr	r3, [r7, #16]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	881a      	ldrh	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	4413      	add	r3, r2
 8008308:	b29a      	uxth	r2, r3
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4413      	add	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800831a:	68fb      	ldr	r3, [r7, #12]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	3301      	adds	r3, #1
 800833e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008346:	8a3b      	ldrh	r3, [r7, #16]
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	b21a      	sxth	r2, r3
 800834c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008350:	4313      	orrs	r3, r2
 8008352:	b21b      	sxth	r3, r3
 8008354:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008356:	89fb      	ldrh	r3, [r7, #14]
}
 8008358:	4618      	mov	r0, r3
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d005      	beq.n	800838a <USBD_StdDevReq+0x26>
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d857      	bhi.n	8008432 <USBD_StdDevReq+0xce>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00f      	beq.n	80083a6 <USBD_StdDevReq+0x42>
 8008386:	2b20      	cmp	r3, #32
 8008388:	d153      	bne.n	8008432 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	32ae      	adds	r2, #174	; 0xae
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]
      break;
 80083a4:	e04a      	b.n	800843c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	785b      	ldrb	r3, [r3, #1]
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d83b      	bhi.n	8008426 <USBD_StdDevReq+0xc2>
 80083ae:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <USBD_StdDevReq+0x50>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	08008409 	.word	0x08008409
 80083b8:	0800841d 	.word	0x0800841d
 80083bc:	08008427 	.word	0x08008427
 80083c0:	08008413 	.word	0x08008413
 80083c4:	08008427 	.word	0x08008427
 80083c8:	080083e7 	.word	0x080083e7
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	08008427 	.word	0x08008427
 80083d4:	080083ff 	.word	0x080083ff
 80083d8:	080083f1 	.word	0x080083f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa3c 	bl	800885c <USBD_GetDescriptor>
          break;
 80083e4:	e024      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fba1 	bl	8008b30 <USBD_SetAddress>
          break;
 80083ee:	e01f      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fbe0 	bl	8008bb8 <USBD_SetConfig>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]
          break;
 80083fc:	e018      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fc83 	bl	8008d0c <USBD_GetConfig>
          break;
 8008406:	e013      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fcb4 	bl	8008d78 <USBD_GetStatus>
          break;
 8008410:	e00e      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fce3 	bl	8008de0 <USBD_SetFeature>
          break;
 800841a:	e009      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fd07 	bl	8008e32 <USBD_ClrFeature>
          break;
 8008424:	e004      	b.n	8008430 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fd5e 	bl	8008eea <USBD_CtlError>
          break;
 800842e:	bf00      	nop
      }
      break;
 8008430:	e004      	b.n	800843c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fd58 	bl	8008eea <USBD_CtlError>
      break;
 800843a:	bf00      	nop
  }

  return ret;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop

08008448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800845e:	2b40      	cmp	r3, #64	; 0x40
 8008460:	d005      	beq.n	800846e <USBD_StdItfReq+0x26>
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d852      	bhi.n	800850c <USBD_StdItfReq+0xc4>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <USBD_StdItfReq+0x26>
 800846a:	2b20      	cmp	r3, #32
 800846c:	d14e      	bne.n	800850c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	2b02      	cmp	r3, #2
 800847a:	d840      	bhi.n	80084fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	889b      	ldrh	r3, [r3, #4]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b01      	cmp	r3, #1
 8008484:	d836      	bhi.n	80084f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	889b      	ldrh	r3, [r3, #4]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7ff fed9 	bl	8008246 <USBD_CoreFindIF>
 8008494:	4603      	mov	r3, r0
 8008496:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2bff      	cmp	r3, #255	; 0xff
 800849c:	d01d      	beq.n	80084da <USBD_StdItfReq+0x92>
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d11a      	bne.n	80084da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084a4:	7bba      	ldrb	r2, [r7, #14]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	32ae      	adds	r2, #174	; 0xae
 80084aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00f      	beq.n	80084d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084b4:	7bba      	ldrb	r2, [r7, #14]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084bc:	7bba      	ldrb	r2, [r7, #14]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	32ae      	adds	r2, #174	; 0xae
 80084c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	4798      	blx	r3
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d2:	e004      	b.n	80084de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084d4:	2303      	movs	r3, #3
 80084d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d8:	e001      	b.n	80084de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084da:	2303      	movs	r3, #3
 80084dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	88db      	ldrh	r3, [r3, #6]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d110      	bne.n	8008508 <USBD_StdItfReq+0xc0>
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10d      	bne.n	8008508 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fdc7 	bl	8009080 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084f2:	e009      	b.n	8008508 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fcf7 	bl	8008eea <USBD_CtlError>
          break;
 80084fc:	e004      	b.n	8008508 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fcf2 	bl	8008eea <USBD_CtlError>
          break;
 8008506:	e000      	b.n	800850a <USBD_StdItfReq+0xc2>
          break;
 8008508:	bf00      	nop
      }
      break;
 800850a:	e004      	b.n	8008516 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fceb 	bl	8008eea <USBD_CtlError>
      break;
 8008514:	bf00      	nop
  }

  return ret;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	889b      	ldrh	r3, [r3, #4]
 8008532:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800853c:	2b40      	cmp	r3, #64	; 0x40
 800853e:	d007      	beq.n	8008550 <USBD_StdEPReq+0x30>
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	f200 817f 	bhi.w	8008844 <USBD_StdEPReq+0x324>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d02a      	beq.n	80085a0 <USBD_StdEPReq+0x80>
 800854a:	2b20      	cmp	r3, #32
 800854c:	f040 817a 	bne.w	8008844 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff fe83 	bl	8008260 <USBD_CoreFindEP>
 800855a:	4603      	mov	r3, r0
 800855c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800855e:	7b7b      	ldrb	r3, [r7, #13]
 8008560:	2bff      	cmp	r3, #255	; 0xff
 8008562:	f000 8174 	beq.w	800884e <USBD_StdEPReq+0x32e>
 8008566:	7b7b      	ldrb	r3, [r7, #13]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 8170 	bne.w	800884e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800856e:	7b7a      	ldrb	r2, [r7, #13]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008576:	7b7a      	ldrb	r2, [r7, #13]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32ae      	adds	r2, #174	; 0xae
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 8163 	beq.w	800884e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008588:	7b7a      	ldrb	r2, [r7, #13]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32ae      	adds	r2, #174	; 0xae
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800859e:	e156      	b.n	800884e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d008      	beq.n	80085ba <USBD_StdEPReq+0x9a>
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	f300 8145 	bgt.w	8008838 <USBD_StdEPReq+0x318>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 809b 	beq.w	80086ea <USBD_StdEPReq+0x1ca>
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d03c      	beq.n	8008632 <USBD_StdEPReq+0x112>
 80085b8:	e13e      	b.n	8008838 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d002      	beq.n	80085cc <USBD_StdEPReq+0xac>
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d016      	beq.n	80085f8 <USBD_StdEPReq+0xd8>
 80085ca:	e02c      	b.n	8008626 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <USBD_StdEPReq+0xce>
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b80      	cmp	r3, #128	; 0x80
 80085d6:	d00a      	beq.n	80085ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 f963 	bl	80098a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085e2:	2180      	movs	r1, #128	; 0x80
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f95f 	bl	80098a8 <USBD_LL_StallEP>
 80085ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085ec:	e020      	b.n	8008630 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fc7a 	bl	8008eea <USBD_CtlError>
              break;
 80085f6:	e01b      	b.n	8008630 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10e      	bne.n	800861e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <USBD_StdEPReq+0xfe>
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	2b80      	cmp	r3, #128	; 0x80
 800860a:	d008      	beq.n	800861e <USBD_StdEPReq+0xfe>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	88db      	ldrh	r3, [r3, #6]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 f945 	bl	80098a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fd2e 	bl	8009080 <USBD_CtlSendStatus>

              break;
 8008624:	e004      	b.n	8008630 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fc5e 	bl	8008eea <USBD_CtlError>
              break;
 800862e:	bf00      	nop
          }
          break;
 8008630:	e107      	b.n	8008842 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d002      	beq.n	8008644 <USBD_StdEPReq+0x124>
 800863e:	2b03      	cmp	r3, #3
 8008640:	d016      	beq.n	8008670 <USBD_StdEPReq+0x150>
 8008642:	e04b      	b.n	80086dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00d      	beq.n	8008666 <USBD_StdEPReq+0x146>
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b80      	cmp	r3, #128	; 0x80
 800864e:	d00a      	beq.n	8008666 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f927 	bl	80098a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800865a:	2180      	movs	r1, #128	; 0x80
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f923 	bl	80098a8 <USBD_LL_StallEP>
 8008662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008664:	e040      	b.n	80086e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc3e 	bl	8008eea <USBD_CtlError>
              break;
 800866e:	e03b      	b.n	80086e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	885b      	ldrh	r3, [r3, #2]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d136      	bne.n	80086e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f92d 	bl	80098e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fcf7 	bl	8009080 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff fde2 	bl	8008260 <USBD_CoreFindEP>
 800869c:	4603      	mov	r3, r0
 800869e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086a0:	7b7b      	ldrb	r3, [r7, #13]
 80086a2:	2bff      	cmp	r3, #255	; 0xff
 80086a4:	d01f      	beq.n	80086e6 <USBD_StdEPReq+0x1c6>
 80086a6:	7b7b      	ldrb	r3, [r7, #13]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d11c      	bne.n	80086e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086ac:	7b7a      	ldrb	r2, [r7, #13]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086b4:	7b7a      	ldrb	r2, [r7, #13]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	32ae      	adds	r2, #174	; 0xae
 80086ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d010      	beq.n	80086e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086c4:	7b7a      	ldrb	r2, [r7, #13]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	32ae      	adds	r2, #174	; 0xae
 80086ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086da:	e004      	b.n	80086e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fc03 	bl	8008eea <USBD_CtlError>
              break;
 80086e4:	e000      	b.n	80086e8 <USBD_StdEPReq+0x1c8>
              break;
 80086e6:	bf00      	nop
          }
          break;
 80086e8:	e0ab      	b.n	8008842 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d002      	beq.n	80086fc <USBD_StdEPReq+0x1dc>
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d032      	beq.n	8008760 <USBD_StdEPReq+0x240>
 80086fa:	e097      	b.n	800882c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <USBD_StdEPReq+0x1f2>
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b80      	cmp	r3, #128	; 0x80
 8008706:	d004      	beq.n	8008712 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fbed 	bl	8008eea <USBD_CtlError>
                break;
 8008710:	e091      	b.n	8008836 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008716:	2b00      	cmp	r3, #0
 8008718:	da0b      	bge.n	8008732 <USBD_StdEPReq+0x212>
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	3310      	adds	r3, #16
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	3304      	adds	r3, #4
 8008730:	e00b      	b.n	800874a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	4413      	add	r3, r2
 8008748:	3304      	adds	r3, #4
 800874a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2202      	movs	r2, #2
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fc37 	bl	8008fcc <USBD_CtlSendData>
              break;
 800875e:	e06a      	b.n	8008836 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008764:	2b00      	cmp	r3, #0
 8008766:	da11      	bge.n	800878c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	f003 020f 	and.w	r2, r3, #15
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d117      	bne.n	80087b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fbb0 	bl	8008eea <USBD_CtlError>
                  break;
 800878a:	e054      	b.n	8008836 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	f003 020f 	and.w	r2, r3, #15
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	4613      	mov	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d104      	bne.n	80087b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fb9d 	bl	8008eea <USBD_CtlError>
                  break;
 80087b0:	e041      	b.n	8008836 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da0b      	bge.n	80087d2 <USBD_StdEPReq+0x2b2>
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	3310      	adds	r3, #16
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	3304      	adds	r3, #4
 80087d0:	e00b      	b.n	80087ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4413      	add	r3, r2
 80087e8:	3304      	adds	r3, #4
 80087ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <USBD_StdEPReq+0x2d8>
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d103      	bne.n	8008800 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e00e      	b.n	800881e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 f88d 	bl	8009924 <USBD_LL_IsStallEP>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2201      	movs	r2, #1
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	e002      	b.n	800881e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2202      	movs	r2, #2
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fbd1 	bl	8008fcc <USBD_CtlSendData>
              break;
 800882a:	e004      	b.n	8008836 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fb5b 	bl	8008eea <USBD_CtlError>
              break;
 8008834:	bf00      	nop
          }
          break;
 8008836:	e004      	b.n	8008842 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fb55 	bl	8008eea <USBD_CtlError>
          break;
 8008840:	bf00      	nop
      }
      break;
 8008842:	e005      	b.n	8008850 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fb4f 	bl	8008eea <USBD_CtlError>
      break;
 800884c:	e000      	b.n	8008850 <USBD_StdEPReq+0x330>
      break;
 800884e:	bf00      	nop
  }

  return ret;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	885b      	ldrh	r3, [r3, #2]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	2b06      	cmp	r3, #6
 800887e:	f200 8128 	bhi.w	8008ad2 <USBD_GetDescriptor+0x276>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <USBD_GetDescriptor+0x2c>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088a5 	.word	0x080088a5
 800888c:	080088bd 	.word	0x080088bd
 8008890:	080088fd 	.word	0x080088fd
 8008894:	08008ad3 	.word	0x08008ad3
 8008898:	08008ad3 	.word	0x08008ad3
 800889c:	08008a73 	.word	0x08008a73
 80088a0:	08008a9f 	.word	0x08008a9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	7c12      	ldrb	r2, [r2, #16]
 80088b0:	f107 0108 	add.w	r1, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
      break;
 80088ba:	e112      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	7c1b      	ldrb	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10d      	bne.n	80088e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	f107 0208 	add.w	r2, r7, #8
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
 80088d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	2202      	movs	r2, #2
 80088dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088de:	e100      	b.n	8008ae2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	f107 0208 	add.w	r2, r7, #8
 80088ec:	4610      	mov	r0, r2
 80088ee:	4798      	blx	r3
 80088f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	2202      	movs	r2, #2
 80088f8:	701a      	strb	r2, [r3, #0]
      break;
 80088fa:	e0f2      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	885b      	ldrh	r3, [r3, #2]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b05      	cmp	r3, #5
 8008904:	f200 80ac 	bhi.w	8008a60 <USBD_GetDescriptor+0x204>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <USBD_GetDescriptor+0xb4>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008929 	.word	0x08008929
 8008914:	0800895d 	.word	0x0800895d
 8008918:	08008991 	.word	0x08008991
 800891c:	080089c5 	.word	0x080089c5
 8008920:	080089f9 	.word	0x080089f9
 8008924:	08008a2d 	.word	0x08008a2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	7c12      	ldrb	r2, [r2, #16]
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894a:	e091      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 facb 	bl	8008eea <USBD_CtlError>
            err++;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	3301      	adds	r3, #1
 8008958:	72fb      	strb	r3, [r7, #11]
          break;
 800895a:	e089      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	7c12      	ldrb	r2, [r2, #16]
 8008974:	f107 0108 	add.w	r1, r7, #8
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897e:	e077      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fab1 	bl	8008eea <USBD_CtlError>
            err++;
 8008988:	7afb      	ldrb	r3, [r7, #11]
 800898a:	3301      	adds	r3, #1
 800898c:	72fb      	strb	r3, [r7, #11]
          break;
 800898e:	e06f      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	7c12      	ldrb	r2, [r2, #16]
 80089a8:	f107 0108 	add.w	r1, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089b2:	e05d      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa97 	bl	8008eea <USBD_CtlError>
            err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
          break;
 80089c2:	e055      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00b      	beq.n	80089e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7c12      	ldrb	r2, [r2, #16]
 80089dc:	f107 0108 	add.w	r1, r7, #8
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e6:	e043      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa7d 	bl	8008eea <USBD_CtlError>
            err++;
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	3301      	adds	r3, #1
 80089f4:	72fb      	strb	r3, [r7, #11]
          break;
 80089f6:	e03b      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7c12      	ldrb	r2, [r2, #16]
 8008a10:	f107 0108 	add.w	r1, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a1a:	e029      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa63 	bl	8008eea <USBD_CtlError>
            err++;
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	3301      	adds	r3, #1
 8008a28:	72fb      	strb	r3, [r7, #11]
          break;
 8008a2a:	e021      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00b      	beq.n	8008a50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	7c12      	ldrb	r2, [r2, #16]
 8008a44:	f107 0108 	add.w	r1, r7, #8
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4798      	blx	r3
 8008a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4e:	e00f      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa49 	bl	8008eea <USBD_CtlError>
            err++;
 8008a58:	7afb      	ldrb	r3, [r7, #11]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5e:	e007      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa41 	bl	8008eea <USBD_CtlError>
          err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a6e:	bf00      	nop
      }
      break;
 8008a70:	e037      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	7c1b      	ldrb	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a82:	f107 0208 	add.w	r2, r7, #8
 8008a86:	4610      	mov	r0, r2
 8008a88:	4798      	blx	r3
 8008a8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a8c:	e029      	b.n	8008ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fa2a 	bl	8008eea <USBD_CtlError>
        err++;
 8008a96:	7afb      	ldrb	r3, [r7, #11]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a9c:	e021      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7c1b      	ldrb	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10d      	bne.n	8008ac2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aae:	f107 0208 	add.w	r2, r7, #8
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	4798      	blx	r3
 8008ab6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	2207      	movs	r2, #7
 8008abe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ac0:	e00f      	b.n	8008ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fa10 	bl	8008eea <USBD_CtlError>
        err++;
 8008aca:	7afb      	ldrb	r3, [r7, #11]
 8008acc:	3301      	adds	r3, #1
 8008ace:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad0:	e007      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fa08 	bl	8008eea <USBD_CtlError>
      err++;
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	3301      	adds	r3, #1
 8008ade:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae0:	bf00      	nop
  }

  if (err != 0U)
 8008ae2:	7afb      	ldrb	r3, [r7, #11]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11e      	bne.n	8008b26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	88db      	ldrh	r3, [r3, #6]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d016      	beq.n	8008b1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008af0:	893b      	ldrh	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00e      	beq.n	8008b14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	88da      	ldrh	r2, [r3, #6]
 8008afa:	893b      	ldrh	r3, [r7, #8]
 8008afc:	4293      	cmp	r3, r2
 8008afe:	bf28      	it	cs
 8008b00:	4613      	movcs	r3, r2
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b06:	893b      	ldrh	r3, [r7, #8]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	68f9      	ldr	r1, [r7, #12]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fa5d 	bl	8008fcc <USBD_CtlSendData>
 8008b12:	e009      	b.n	8008b28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f9e7 	bl	8008eea <USBD_CtlError>
 8008b1c:	e004      	b.n	8008b28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 faae 	bl	8009080 <USBD_CtlSendStatus>
 8008b24:	e000      	b.n	8008b28 <USBD_GetDescriptor+0x2cc>
    return;
 8008b26:	bf00      	nop
  }
}
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop

08008b30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	889b      	ldrh	r3, [r3, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d131      	bne.n	8008ba6 <USBD_SetAddress+0x76>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	88db      	ldrh	r3, [r3, #6]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d12d      	bne.n	8008ba6 <USBD_SetAddress+0x76>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	885b      	ldrh	r3, [r3, #2]
 8008b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b50:	d829      	bhi.n	8008ba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	885b      	ldrh	r3, [r3, #2]
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d104      	bne.n	8008b74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f9bc 	bl	8008eea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b72:	e01d      	b.n	8008bb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7bfa      	ldrb	r2, [r7, #15]
 8008b78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fefb 	bl	800997c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa7a 	bl	8009080 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	e009      	b.n	8008bb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba4:	e004      	b.n	8008bb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f99e 	bl	8008eea <USBD_CtlError>
  }
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	885b      	ldrh	r3, [r3, #2]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	4b4e      	ldr	r3, [pc, #312]	; (8008d08 <USBD_SetConfig+0x150>)
 8008bce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bd0:	4b4d      	ldr	r3, [pc, #308]	; (8008d08 <USBD_SetConfig+0x150>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d905      	bls.n	8008be4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f985 	bl	8008eea <USBD_CtlError>
    return USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e08c      	b.n	8008cfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d002      	beq.n	8008bf6 <USBD_SetConfig+0x3e>
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d029      	beq.n	8008c48 <USBD_SetConfig+0x90>
 8008bf4:	e075      	b.n	8008ce2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bf6:	4b44      	ldr	r3, [pc, #272]	; (8008d08 <USBD_SetConfig+0x150>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d020      	beq.n	8008c40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008bfe:	4b42      	ldr	r3, [pc, #264]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c08:	4b3f      	ldr	r3, [pc, #252]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fe ffe7 	bl	8007be2 <USBD_SetClassConfig>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d008      	beq.n	8008c30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f962 	bl	8008eea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c2e:	e065      	b.n	8008cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa25 	bl	8009080 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c3e:	e05d      	b.n	8008cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fa1d 	bl	8009080 <USBD_CtlSendStatus>
      break;
 8008c46:	e059      	b.n	8008cfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c48:	4b2f      	ldr	r3, [pc, #188]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d112      	bne.n	8008c76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c58:	4b2b      	ldr	r3, [pc, #172]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c62:	4b29      	ldr	r3, [pc, #164]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fe ffd6 	bl	8007c1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa06 	bl	8009080 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c74:	e042      	b.n	8008cfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c76:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d02a      	beq.n	8008cda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7fe ffc4 	bl	8007c1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c92:	4b1d      	ldr	r3, [pc, #116]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c9c:	4b1a      	ldr	r3, [pc, #104]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7fe ff9d 	bl	8007be2 <USBD_SetClassConfig>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00f      	beq.n	8008cd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f918 	bl	8008eea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7fe ffa9 	bl	8007c1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cd0:	e014      	b.n	8008cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f9d4 	bl	8009080 <USBD_CtlSendStatus>
      break;
 8008cd8:	e010      	b.n	8008cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9d0 	bl	8009080 <USBD_CtlSendStatus>
      break;
 8008ce0:	e00c      	b.n	8008cfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f900 	bl	8008eea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cea:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <USBD_SetConfig+0x150>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7fe ff92 	bl	8007c1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfa:	bf00      	nop
  }

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	2000032c 	.word	0x2000032c

08008d0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	88db      	ldrh	r3, [r3, #6]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d004      	beq.n	8008d28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f8e2 	bl	8008eea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d26:	e023      	b.n	8008d70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	dc02      	bgt.n	8008d3a <USBD_GetConfig+0x2e>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dc03      	bgt.n	8008d40 <USBD_GetConfig+0x34>
 8008d38:	e015      	b.n	8008d66 <USBD_GetConfig+0x5a>
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d00b      	beq.n	8008d56 <USBD_GetConfig+0x4a>
 8008d3e:	e012      	b.n	8008d66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3308      	adds	r3, #8
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f93c 	bl	8008fcc <USBD_CtlSendData>
        break;
 8008d54:	e00c      	b.n	8008d70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f934 	bl	8008fcc <USBD_CtlSendData>
        break;
 8008d64:	e004      	b.n	8008d70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f8be 	bl	8008eea <USBD_CtlError>
        break;
 8008d6e:	bf00      	nop
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d81e      	bhi.n	8008dce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	88db      	ldrh	r3, [r3, #6]
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d004      	beq.n	8008da2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8a5 	bl	8008eea <USBD_CtlError>
        break;
 8008da0:	e01a      	b.n	8008dd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f043 0202 	orr.w	r2, r3, #2
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	330c      	adds	r3, #12
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f900 	bl	8008fcc <USBD_CtlSendData>
      break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f88a 	bl	8008eea <USBD_CtlError>
      break;
 8008dd6:	bf00      	nop
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	885b      	ldrh	r3, [r3, #2]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d107      	bne.n	8008e02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f940 	bl	8009080 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e00:	e013      	b.n	8008e2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	885b      	ldrh	r3, [r3, #2]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d10b      	bne.n	8008e22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	889b      	ldrh	r3, [r3, #4]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f930 	bl	8009080 <USBD_CtlSendStatus>
}
 8008e20:	e003      	b.n	8008e2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f860 	bl	8008eea <USBD_CtlError>
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d80b      	bhi.n	8008e62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d10c      	bne.n	8008e6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f910 	bl	8009080 <USBD_CtlSendStatus>
      }
      break;
 8008e60:	e004      	b.n	8008e6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f840 	bl	8008eea <USBD_CtlError>
      break;
 8008e6a:	e000      	b.n	8008e6e <USBD_ClrFeature+0x3c>
      break;
 8008e6c:	bf00      	nop
  }
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	781a      	ldrb	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	781a      	ldrb	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff fa41 	bl	8008328 <SWAPBYTE>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fa34 	bl	8008328 <SWAPBYTE>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fa27 	bl	8008328 <SWAPBYTE>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	80da      	strh	r2, [r3, #6]
}
 8008ee2:	bf00      	nop
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef4:	2180      	movs	r1, #128	; 0x80
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fcd6 	bl	80098a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008efc:	2100      	movs	r1, #0
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fcd2 	bl	80098a8 <USBD_LL_StallEP>
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d036      	beq.n	8008f90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f26:	6938      	ldr	r0, [r7, #16]
 8008f28:	f000 f836 	bl	8008f98 <USBD_GetLen>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	3301      	adds	r3, #1
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	4413      	add	r3, r2
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	2203      	movs	r2, #3
 8008f54:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f5c:	e013      	b.n	8008f86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	4413      	add	r3, r2
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	7812      	ldrb	r2, [r2, #0]
 8008f68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	613b      	str	r3, [r7, #16]
    idx++;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	3301      	adds	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	3301      	adds	r3, #1
 8008f84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e7      	bne.n	8008f5e <USBD_GetString+0x52>
 8008f8e:	e000      	b.n	8008f92 <USBD_GetString+0x86>
    return;
 8008f90:	bf00      	nop
  }
}
 8008f92:	3718      	adds	r7, #24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fa8:	e005      	b.n	8008fb6 <USBD_GetLen+0x1e>
  {
    len++;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
 8008fac:	3301      	adds	r3, #1
 8008fae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f5      	bne.n	8008faa <USBD_GetLen+0x12>
  }

  return len;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fce1 	bl	80099ba <USBD_LL_Transmit>

  return USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	60f8      	str	r0, [r7, #12]
 800900a:	60b9      	str	r1, [r7, #8]
 800900c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	2100      	movs	r1, #0
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fcd0 	bl	80099ba <USBD_LL_Transmit>

  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2203      	movs	r2, #3
 8009034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	2100      	movs	r1, #0
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 fcd4 	bl	80099fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	2100      	movs	r1, #0
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fcc3 	bl	80099fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2204      	movs	r2, #4
 800908c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009090:	2300      	movs	r3, #0
 8009092:	2200      	movs	r2, #0
 8009094:	2100      	movs	r1, #0
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fc8f 	bl	80099ba <USBD_LL_Transmit>

  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2205      	movs	r2, #5
 80090b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090b6:	2300      	movs	r3, #0
 80090b8:	2200      	movs	r2, #0
 80090ba:	2100      	movs	r1, #0
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fc9d 	bl	80099fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090d0:	2200      	movs	r2, #0
 80090d2:	4912      	ldr	r1, [pc, #72]	; (800911c <MX_USB_DEVICE_Init+0x50>)
 80090d4:	4812      	ldr	r0, [pc, #72]	; (8009120 <MX_USB_DEVICE_Init+0x54>)
 80090d6:	f7fe fd07 	bl	8007ae8 <USBD_Init>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090e0:	f7f8 fbaa 	bl	8001838 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090e4:	490f      	ldr	r1, [pc, #60]	; (8009124 <MX_USB_DEVICE_Init+0x58>)
 80090e6:	480e      	ldr	r0, [pc, #56]	; (8009120 <MX_USB_DEVICE_Init+0x54>)
 80090e8:	f7fe fd2e 	bl	8007b48 <USBD_RegisterClass>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090f2:	f7f8 fba1 	bl	8001838 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090f6:	490c      	ldr	r1, [pc, #48]	; (8009128 <MX_USB_DEVICE_Init+0x5c>)
 80090f8:	4809      	ldr	r0, [pc, #36]	; (8009120 <MX_USB_DEVICE_Init+0x54>)
 80090fa:	f7fe fc1f 	bl	800793c <USBD_CDC_RegisterInterface>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009104:	f7f8 fb98 	bl	8001838 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009108:	4805      	ldr	r0, [pc, #20]	; (8009120 <MX_USB_DEVICE_Init+0x54>)
 800910a:	f7fe fd53 	bl	8007bb4 <USBD_Start>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009114:	f7f8 fb90 	bl	8001838 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009118:	bf00      	nop
 800911a:	bd80      	pop	{r7, pc}
 800911c:	200000d4 	.word	0x200000d4
 8009120:	20000330 	.word	0x20000330
 8009124:	20000040 	.word	0x20000040
 8009128:	200000c0 	.word	0x200000c0

0800912c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009130:	2200      	movs	r2, #0
 8009132:	4905      	ldr	r1, [pc, #20]	; (8009148 <CDC_Init_FS+0x1c>)
 8009134:	4805      	ldr	r0, [pc, #20]	; (800914c <CDC_Init_FS+0x20>)
 8009136:	f7fe fc1b 	bl	8007970 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800913a:	4905      	ldr	r1, [pc, #20]	; (8009150 <CDC_Init_FS+0x24>)
 800913c:	4803      	ldr	r0, [pc, #12]	; (800914c <CDC_Init_FS+0x20>)
 800913e:	f7fe fc39 	bl	80079b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009142:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009144:	4618      	mov	r0, r3
 8009146:	bd80      	pop	{r7, pc}
 8009148:	20000a0c 	.word	0x20000a0c
 800914c:	20000330 	.word	0x20000330
 8009150:	2000060c 	.word	0x2000060c

08009154 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009158:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800915a:	4618      	mov	r0, r3
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	71fb      	strb	r3, [r7, #7]
 8009170:	4613      	mov	r3, r2
 8009172:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b23      	cmp	r3, #35	; 0x23
 8009178:	d84a      	bhi.n	8009210 <CDC_Control_FS+0xac>
 800917a:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <CDC_Control_FS+0x1c>)
 800917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009180:	08009211 	.word	0x08009211
 8009184:	08009211 	.word	0x08009211
 8009188:	08009211 	.word	0x08009211
 800918c:	08009211 	.word	0x08009211
 8009190:	08009211 	.word	0x08009211
 8009194:	08009211 	.word	0x08009211
 8009198:	08009211 	.word	0x08009211
 800919c:	08009211 	.word	0x08009211
 80091a0:	08009211 	.word	0x08009211
 80091a4:	08009211 	.word	0x08009211
 80091a8:	08009211 	.word	0x08009211
 80091ac:	08009211 	.word	0x08009211
 80091b0:	08009211 	.word	0x08009211
 80091b4:	08009211 	.word	0x08009211
 80091b8:	08009211 	.word	0x08009211
 80091bc:	08009211 	.word	0x08009211
 80091c0:	08009211 	.word	0x08009211
 80091c4:	08009211 	.word	0x08009211
 80091c8:	08009211 	.word	0x08009211
 80091cc:	08009211 	.word	0x08009211
 80091d0:	08009211 	.word	0x08009211
 80091d4:	08009211 	.word	0x08009211
 80091d8:	08009211 	.word	0x08009211
 80091dc:	08009211 	.word	0x08009211
 80091e0:	08009211 	.word	0x08009211
 80091e4:	08009211 	.word	0x08009211
 80091e8:	08009211 	.word	0x08009211
 80091ec:	08009211 	.word	0x08009211
 80091f0:	08009211 	.word	0x08009211
 80091f4:	08009211 	.word	0x08009211
 80091f8:	08009211 	.word	0x08009211
 80091fc:	08009211 	.word	0x08009211
 8009200:	08009211 	.word	0x08009211
 8009204:	08009211 	.word	0x08009211
 8009208:	08009211 	.word	0x08009211
 800920c:	08009211 	.word	0x08009211
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009210:	bf00      	nop
  }

  return (USBD_OK);
 8009212:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	4805      	ldr	r0, [pc, #20]	; (8009244 <CDC_Receive_FS+0x24>)
 800922e:	f7fe fbc1 	bl	80079b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009232:	4804      	ldr	r0, [pc, #16]	; (8009244 <CDC_Receive_FS+0x24>)
 8009234:	f7fe fc22 	bl	8007a7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009238:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20000330 	.word	0x20000330

08009248 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009258:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <CDC_Transmit_FS+0x48>)
 800925a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800925e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800926a:	2301      	movs	r3, #1
 800926c:	e00b      	b.n	8009286 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800926e:	887b      	ldrh	r3, [r7, #2]
 8009270:	461a      	mov	r2, r3
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	4806      	ldr	r0, [pc, #24]	; (8009290 <CDC_Transmit_FS+0x48>)
 8009276:	f7fe fb7b 	bl	8007970 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800927a:	4805      	ldr	r0, [pc, #20]	; (8009290 <CDC_Transmit_FS+0x48>)
 800927c:	f7fe fbb8 	bl	80079f0 <USBD_CDC_TransmitPacket>
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009284:	7bfb      	ldrb	r3, [r7, #15]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000330 	.word	0x20000330

08009294 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	4613      	mov	r3, r2
 80092a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80092a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	371c      	adds	r7, #28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
	...

080092b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2212      	movs	r2, #18
 80092c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092ca:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	200000f0 	.word	0x200000f0

080092dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2204      	movs	r2, #4
 80092ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092ee:	4b03      	ldr	r3, [pc, #12]	; (80092fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	20000104 	.word	0x20000104

08009300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4907      	ldr	r1, [pc, #28]	; (8009334 <USBD_FS_ProductStrDescriptor+0x34>)
 8009316:	4808      	ldr	r0, [pc, #32]	; (8009338 <USBD_FS_ProductStrDescriptor+0x38>)
 8009318:	f7ff fdf8 	bl	8008f0c <USBD_GetString>
 800931c:	e004      	b.n	8009328 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4904      	ldr	r1, [pc, #16]	; (8009334 <USBD_FS_ProductStrDescriptor+0x34>)
 8009322:	4805      	ldr	r0, [pc, #20]	; (8009338 <USBD_FS_ProductStrDescriptor+0x38>)
 8009324:	f7ff fdf2 	bl	8008f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009328:	4b02      	ldr	r3, [pc, #8]	; (8009334 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000e0c 	.word	0x20000e0c
 8009338:	0800b6e8 	.word	0x0800b6e8

0800933c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	4904      	ldr	r1, [pc, #16]	; (800935c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800934c:	4804      	ldr	r0, [pc, #16]	; (8009360 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800934e:	f7ff fddd 	bl	8008f0c <USBD_GetString>
  return USBD_StrDesc;
 8009352:	4b02      	ldr	r3, [pc, #8]	; (800935c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20000e0c 	.word	0x20000e0c
 8009360:	0800b700 	.word	0x0800b700

08009364 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	6039      	str	r1, [r7, #0]
 800936e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	221a      	movs	r2, #26
 8009374:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009376:	f000 f843 	bl	8009400 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800937a:	4b02      	ldr	r3, [pc, #8]	; (8009384 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000108 	.word	0x20000108

08009388 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d105      	bne.n	80093a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	4907      	ldr	r1, [pc, #28]	; (80093bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800939e:	4808      	ldr	r0, [pc, #32]	; (80093c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093a0:	f7ff fdb4 	bl	8008f0c <USBD_GetString>
 80093a4:	e004      	b.n	80093b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	4904      	ldr	r1, [pc, #16]	; (80093bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80093aa:	4805      	ldr	r0, [pc, #20]	; (80093c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093ac:	f7ff fdae 	bl	8008f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000e0c 	.word	0x20000e0c
 80093c0:	0800b714 	.word	0x0800b714

080093c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	6039      	str	r1, [r7, #0]
 80093ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d105      	bne.n	80093e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	4907      	ldr	r1, [pc, #28]	; (80093f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093da:	4808      	ldr	r0, [pc, #32]	; (80093fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093dc:	f7ff fd96 	bl	8008f0c <USBD_GetString>
 80093e0:	e004      	b.n	80093ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	4904      	ldr	r1, [pc, #16]	; (80093f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093e6:	4805      	ldr	r0, [pc, #20]	; (80093fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093e8:	f7ff fd90 	bl	8008f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80093ec:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20000e0c 	.word	0x20000e0c
 80093fc:	0800b720 	.word	0x0800b720

08009400 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009406:	4b0f      	ldr	r3, [pc, #60]	; (8009444 <Get_SerialNum+0x44>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800940c:	4b0e      	ldr	r3, [pc, #56]	; (8009448 <Get_SerialNum+0x48>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009412:	4b0e      	ldr	r3, [pc, #56]	; (800944c <Get_SerialNum+0x4c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4413      	add	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d009      	beq.n	800943a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009426:	2208      	movs	r2, #8
 8009428:	4909      	ldr	r1, [pc, #36]	; (8009450 <Get_SerialNum+0x50>)
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 f814 	bl	8009458 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009430:	2204      	movs	r2, #4
 8009432:	4908      	ldr	r1, [pc, #32]	; (8009454 <Get_SerialNum+0x54>)
 8009434:	68b8      	ldr	r0, [r7, #8]
 8009436:	f000 f80f 	bl	8009458 <IntToUnicode>
  }
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	1fff7a10 	.word	0x1fff7a10
 8009448:	1fff7a14 	.word	0x1fff7a14
 800944c:	1fff7a18 	.word	0x1fff7a18
 8009450:	2000010a 	.word	0x2000010a
 8009454:	2000011a 	.word	0x2000011a

08009458 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	4613      	mov	r3, r2
 8009464:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800946a:	2300      	movs	r3, #0
 800946c:	75fb      	strb	r3, [r7, #23]
 800946e:	e027      	b.n	80094c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	0f1b      	lsrs	r3, r3, #28
 8009474:	2b09      	cmp	r3, #9
 8009476:	d80b      	bhi.n	8009490 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	0f1b      	lsrs	r3, r3, #28
 800947c:	b2da      	uxtb	r2, r3
 800947e:	7dfb      	ldrb	r3, [r7, #23]
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	4619      	mov	r1, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	440b      	add	r3, r1
 8009488:	3230      	adds	r2, #48	; 0x30
 800948a:	b2d2      	uxtb	r2, r2
 800948c:	701a      	strb	r2, [r3, #0]
 800948e:	e00a      	b.n	80094a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	0f1b      	lsrs	r3, r3, #28
 8009494:	b2da      	uxtb	r2, r3
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	4619      	mov	r1, r3
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	440b      	add	r3, r1
 80094a0:	3237      	adds	r2, #55	; 0x37
 80094a2:	b2d2      	uxtb	r2, r2
 80094a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	011b      	lsls	r3, r3, #4
 80094aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	3301      	adds	r3, #1
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	4413      	add	r3, r2
 80094b6:	2200      	movs	r2, #0
 80094b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	3301      	adds	r3, #1
 80094be:	75fb      	strb	r3, [r7, #23]
 80094c0:	7dfa      	ldrb	r2, [r7, #23]
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d3d3      	bcc.n	8009470 <IntToUnicode+0x18>
  }
}
 80094c8:	bf00      	nop
 80094ca:	bf00      	nop
 80094cc:	371c      	adds	r7, #28
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
	...

080094d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b08a      	sub	sp, #40	; 0x28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094e0:	f107 0314 	add.w	r3, r7, #20
 80094e4:	2200      	movs	r2, #0
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	605a      	str	r2, [r3, #4]
 80094ea:	609a      	str	r2, [r3, #8]
 80094ec:	60da      	str	r2, [r3, #12]
 80094ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094f8:	d13a      	bne.n	8009570 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094fa:	2300      	movs	r3, #0
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	4b1e      	ldr	r3, [pc, #120]	; (8009578 <HAL_PCD_MspInit+0xa0>)
 8009500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009502:	4a1d      	ldr	r2, [pc, #116]	; (8009578 <HAL_PCD_MspInit+0xa0>)
 8009504:	f043 0301 	orr.w	r3, r3, #1
 8009508:	6313      	str	r3, [r2, #48]	; 0x30
 800950a:	4b1b      	ldr	r3, [pc, #108]	; (8009578 <HAL_PCD_MspInit+0xa0>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	f003 0301 	and.w	r3, r3, #1
 8009512:	613b      	str	r3, [r7, #16]
 8009514:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009516:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800951a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800951c:	2302      	movs	r3, #2
 800951e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009520:	2300      	movs	r3, #0
 8009522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009524:	2303      	movs	r3, #3
 8009526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009528:	230a      	movs	r3, #10
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800952c:	f107 0314 	add.w	r3, r7, #20
 8009530:	4619      	mov	r1, r3
 8009532:	4812      	ldr	r0, [pc, #72]	; (800957c <HAL_PCD_MspInit+0xa4>)
 8009534:	f7f9 f8f4 	bl	8002720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009538:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <HAL_PCD_MspInit+0xa0>)
 800953a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800953c:	4a0e      	ldr	r2, [pc, #56]	; (8009578 <HAL_PCD_MspInit+0xa0>)
 800953e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009542:	6353      	str	r3, [r2, #52]	; 0x34
 8009544:	2300      	movs	r3, #0
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <HAL_PCD_MspInit+0xa0>)
 800954a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954c:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <HAL_PCD_MspInit+0xa0>)
 800954e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009552:	6453      	str	r3, [r2, #68]	; 0x44
 8009554:	4b08      	ldr	r3, [pc, #32]	; (8009578 <HAL_PCD_MspInit+0xa0>)
 8009556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009560:	2200      	movs	r2, #0
 8009562:	2100      	movs	r1, #0
 8009564:	2043      	movs	r0, #67	; 0x43
 8009566:	f7f9 f8a4 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800956a:	2043      	movs	r0, #67	; 0x43
 800956c:	f7f9 f8bd 	bl	80026ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009570:	bf00      	nop
 8009572:	3728      	adds	r7, #40	; 0x28
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	40023800 	.word	0x40023800
 800957c:	40020000 	.word	0x40020000

08009580 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009594:	4619      	mov	r1, r3
 8009596:	4610      	mov	r0, r2
 8009598:	f7fe fb59 	bl	8007c4e <USBD_LL_SetupStage>
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095b6:	78fa      	ldrb	r2, [r7, #3]
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	4613      	mov	r3, r2
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	440b      	add	r3, r1
 80095c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	4619      	mov	r1, r3
 80095ce:	f7fe fb93 	bl	8007cf8 <USBD_LL_DataOutStage>
}
 80095d2:	bf00      	nop
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095ec:	78fa      	ldrb	r2, [r7, #3]
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4613      	mov	r3, r2
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	334c      	adds	r3, #76	; 0x4c
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	78fb      	ldrb	r3, [r7, #3]
 8009600:	4619      	mov	r1, r3
 8009602:	f7fe fc2c 	bl	8007e5e <USBD_LL_DataInStage>
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe fd60 	bl	80080e2 <USBD_LL_SOF>
}
 8009622:	bf00      	nop
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009632:	2301      	movs	r3, #1
 8009634:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	2b02      	cmp	r3, #2
 800963c:	d001      	beq.n	8009642 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800963e:	f7f8 f8fb 	bl	8001838 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009648:	7bfa      	ldrb	r2, [r7, #15]
 800964a:	4611      	mov	r1, r2
 800964c:	4618      	mov	r0, r3
 800964e:	f7fe fd0a 	bl	8008066 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fcb2 	bl	8007fc2 <USBD_LL_Reset>
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
	...

08009668 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fd05 	bl	8008086 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	6812      	ldr	r2, [r2, #0]
 800968a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d005      	beq.n	80096a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800969c:	4b04      	ldr	r3, [pc, #16]	; (80096b0 <HAL_PCD_SuspendCallback+0x48>)
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	4a03      	ldr	r2, [pc, #12]	; (80096b0 <HAL_PCD_SuspendCallback+0x48>)
 80096a2:	f043 0306 	orr.w	r3, r3, #6
 80096a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	e000ed00 	.word	0xe000ed00

080096b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fe fcf5 	bl	80080b2 <USBD_LL_Resume>
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096e2:	78fa      	ldrb	r2, [r7, #3]
 80096e4:	4611      	mov	r1, r2
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fd4d 	bl	8008186 <USBD_LL_IsoOUTIncomplete>
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009706:	78fa      	ldrb	r2, [r7, #3]
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fd09 	bl	8008122 <USBD_LL_IsoINIncomplete>
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe fd5f 	bl	80081ea <USBD_LL_DevConnected>
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fd5c 	bl	8008200 <USBD_LL_DevDisconnected>
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d13c      	bne.n	80097da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009760:	4a20      	ldr	r2, [pc, #128]	; (80097e4 <USBD_LL_Init+0x94>)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <USBD_LL_Init+0x94>)
 800976c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009770:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <USBD_LL_Init+0x94>)
 8009772:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009776:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009778:	4b1a      	ldr	r3, [pc, #104]	; (80097e4 <USBD_LL_Init+0x94>)
 800977a:	2204      	movs	r2, #4
 800977c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800977e:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <USBD_LL_Init+0x94>)
 8009780:	2202      	movs	r2, #2
 8009782:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009784:	4b17      	ldr	r3, [pc, #92]	; (80097e4 <USBD_LL_Init+0x94>)
 8009786:	2200      	movs	r2, #0
 8009788:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800978a:	4b16      	ldr	r3, [pc, #88]	; (80097e4 <USBD_LL_Init+0x94>)
 800978c:	2202      	movs	r2, #2
 800978e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009790:	4b14      	ldr	r3, [pc, #80]	; (80097e4 <USBD_LL_Init+0x94>)
 8009792:	2200      	movs	r2, #0
 8009794:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009796:	4b13      	ldr	r3, [pc, #76]	; (80097e4 <USBD_LL_Init+0x94>)
 8009798:	2200      	movs	r2, #0
 800979a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800979c:	4b11      	ldr	r3, [pc, #68]	; (80097e4 <USBD_LL_Init+0x94>)
 800979e:	2200      	movs	r2, #0
 80097a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80097a2:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <USBD_LL_Init+0x94>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80097a8:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <USBD_LL_Init+0x94>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80097ae:	480d      	ldr	r0, [pc, #52]	; (80097e4 <USBD_LL_Init+0x94>)
 80097b0:	f7f9 f9a9 	bl	8002b06 <HAL_PCD_Init>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80097ba:	f7f8 f83d 	bl	8001838 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80097be:	2180      	movs	r1, #128	; 0x80
 80097c0:	4808      	ldr	r0, [pc, #32]	; (80097e4 <USBD_LL_Init+0x94>)
 80097c2:	f7fa fc00 	bl	8003fc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80097c6:	2240      	movs	r2, #64	; 0x40
 80097c8:	2100      	movs	r1, #0
 80097ca:	4806      	ldr	r0, [pc, #24]	; (80097e4 <USBD_LL_Init+0x94>)
 80097cc:	f7fa fbb4 	bl	8003f38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80097d0:	2280      	movs	r2, #128	; 0x80
 80097d2:	2101      	movs	r1, #1
 80097d4:	4803      	ldr	r0, [pc, #12]	; (80097e4 <USBD_LL_Init+0x94>)
 80097d6:	f7fa fbaf 	bl	8003f38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	2000100c 	.word	0x2000100c

080097e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097fe:	4618      	mov	r0, r3
 8009800:	f7f9 fa9e 	bl	8002d40 <HAL_PCD_Start>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 f942 	bl	8009a94 <USBD_Get_USB_Status>
 8009810:	4603      	mov	r3, r0
 8009812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009814:	7bbb      	ldrb	r3, [r7, #14]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	4608      	mov	r0, r1
 8009828:	4611      	mov	r1, r2
 800982a:	461a      	mov	r2, r3
 800982c:	4603      	mov	r3, r0
 800982e:	70fb      	strb	r3, [r7, #3]
 8009830:	460b      	mov	r3, r1
 8009832:	70bb      	strb	r3, [r7, #2]
 8009834:	4613      	mov	r3, r2
 8009836:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009846:	78bb      	ldrb	r3, [r7, #2]
 8009848:	883a      	ldrh	r2, [r7, #0]
 800984a:	78f9      	ldrb	r1, [r7, #3]
 800984c:	f7f9 ff6f 	bl	800372e <HAL_PCD_EP_Open>
 8009850:	4603      	mov	r3, r0
 8009852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 f91c 	bl	8009a94 <USBD_Get_USB_Status>
 800985c:	4603      	mov	r3, r0
 800985e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009860:	7bbb      	ldrb	r3, [r7, #14]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009884:	78fa      	ldrb	r2, [r7, #3]
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7f9 ffb8 	bl	80037fe <HAL_PCD_EP_Close>
 800988e:	4603      	mov	r3, r0
 8009890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	4618      	mov	r0, r3
 8009896:	f000 f8fd 	bl	8009a94 <USBD_Get_USB_Status>
 800989a:	4603      	mov	r3, r0
 800989c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800989e:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098c2:	78fa      	ldrb	r2, [r7, #3]
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fa f890 	bl	80039ec <HAL_PCD_EP_SetStall>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 f8de 	bl	8009a94 <USBD_Get_USB_Status>
 80098d8:	4603      	mov	r3, r0
 80098da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009900:	78fa      	ldrb	r2, [r7, #3]
 8009902:	4611      	mov	r1, r2
 8009904:	4618      	mov	r0, r3
 8009906:	f7fa f8d5 	bl	8003ab4 <HAL_PCD_EP_ClrStall>
 800990a:	4603      	mov	r3, r0
 800990c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990e:	7bfb      	ldrb	r3, [r7, #15]
 8009910:	4618      	mov	r0, r3
 8009912:	f000 f8bf 	bl	8009a94 <USBD_Get_USB_Status>
 8009916:	4603      	mov	r3, r0
 8009918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800991a:	7bbb      	ldrb	r3, [r7, #14]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009936:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800993c:	2b00      	cmp	r3, #0
 800993e:	da0b      	bge.n	8009958 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	4613      	mov	r3, r2
 800994a:	00db      	lsls	r3, r3, #3
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	440b      	add	r3, r1
 8009952:	333e      	adds	r3, #62	; 0x3e
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	e00b      	b.n	8009970 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009958:	78fb      	ldrb	r3, [r7, #3]
 800995a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800995e:	68f9      	ldr	r1, [r7, #12]
 8009960:	4613      	mov	r3, r2
 8009962:	00db      	lsls	r3, r3, #3
 8009964:	4413      	add	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	440b      	add	r3, r1
 800996a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800996e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7f9 fea2 	bl	80036e4 <HAL_PCD_SetAddress>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f874 	bl	8009a94 <USBD_Get_USB_Status>
 80099ac:	4603      	mov	r3, r0
 80099ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b086      	sub	sp, #24
 80099be:	af00      	add	r7, sp, #0
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
 80099c6:	460b      	mov	r3, r1
 80099c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099d8:	7af9      	ldrb	r1, [r7, #11]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	f7f9 ffbb 	bl	8003958 <HAL_PCD_EP_Transmit>
 80099e2:	4603      	mov	r3, r0
 80099e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f853 	bl	8009a94 <USBD_Get_USB_Status>
 80099ee:	4603      	mov	r3, r0
 80099f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3718      	adds	r7, #24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	603b      	str	r3, [r7, #0]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a1a:	7af9      	ldrb	r1, [r7, #11]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	f7f9 ff37 	bl	8003892 <HAL_PCD_EP_Receive>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f832 	bl	8009a94 <USBD_Get_USB_Status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a34:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a50:	78fa      	ldrb	r2, [r7, #3]
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7f9 ff67 	bl	8003928 <HAL_PCD_EP_GetRxCount>
 8009a5a:	4603      	mov	r3, r0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a6c:	4b03      	ldr	r3, [pc, #12]	; (8009a7c <USBD_static_malloc+0x18>)
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	20001518 	.word	0x20001518

08009a80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]

}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d817      	bhi.n	8009ad8 <USBD_Get_USB_Status+0x44>
 8009aa8:	a201      	add	r2, pc, #4	; (adr r2, 8009ab0 <USBD_Get_USB_Status+0x1c>)
 8009aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aae:	bf00      	nop
 8009ab0:	08009ac1 	.word	0x08009ac1
 8009ab4:	08009ac7 	.word	0x08009ac7
 8009ab8:	08009acd 	.word	0x08009acd
 8009abc:	08009ad3 	.word	0x08009ad3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac4:	e00b      	b.n	8009ade <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aca:	e008      	b.n	8009ade <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009acc:	2301      	movs	r3, #1
 8009ace:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad0:	e005      	b.n	8009ade <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad6:	e002      	b.n	8009ade <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	73fb      	strb	r3, [r7, #15]
    break;
 8009adc:	bf00      	nop
  }
  return usb_status;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <__errno>:
 8009aec:	4b01      	ldr	r3, [pc, #4]	; (8009af4 <__errno+0x8>)
 8009aee:	6818      	ldr	r0, [r3, #0]
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000124 	.word	0x20000124

08009af8 <__libc_init_array>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	4d0d      	ldr	r5, [pc, #52]	; (8009b30 <__libc_init_array+0x38>)
 8009afc:	4c0d      	ldr	r4, [pc, #52]	; (8009b34 <__libc_init_array+0x3c>)
 8009afe:	1b64      	subs	r4, r4, r5
 8009b00:	10a4      	asrs	r4, r4, #2
 8009b02:	2600      	movs	r6, #0
 8009b04:	42a6      	cmp	r6, r4
 8009b06:	d109      	bne.n	8009b1c <__libc_init_array+0x24>
 8009b08:	4d0b      	ldr	r5, [pc, #44]	; (8009b38 <__libc_init_array+0x40>)
 8009b0a:	4c0c      	ldr	r4, [pc, #48]	; (8009b3c <__libc_init_array+0x44>)
 8009b0c:	f001 fdde 	bl	800b6cc <_init>
 8009b10:	1b64      	subs	r4, r4, r5
 8009b12:	10a4      	asrs	r4, r4, #2
 8009b14:	2600      	movs	r6, #0
 8009b16:	42a6      	cmp	r6, r4
 8009b18:	d105      	bne.n	8009b26 <__libc_init_array+0x2e>
 8009b1a:	bd70      	pop	{r4, r5, r6, pc}
 8009b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b20:	4798      	blx	r3
 8009b22:	3601      	adds	r6, #1
 8009b24:	e7ee      	b.n	8009b04 <__libc_init_array+0xc>
 8009b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b2a:	4798      	blx	r3
 8009b2c:	3601      	adds	r6, #1
 8009b2e:	e7f2      	b.n	8009b16 <__libc_init_array+0x1e>
 8009b30:	0800b968 	.word	0x0800b968
 8009b34:	0800b968 	.word	0x0800b968
 8009b38:	0800b968 	.word	0x0800b968
 8009b3c:	0800b96c 	.word	0x0800b96c

08009b40 <memset>:
 8009b40:	4402      	add	r2, r0
 8009b42:	4603      	mov	r3, r0
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d100      	bne.n	8009b4a <memset+0xa>
 8009b48:	4770      	bx	lr
 8009b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b4e:	e7f9      	b.n	8009b44 <memset+0x4>

08009b50 <atan>:
 8009b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	ec55 4b10 	vmov	r4, r5, d0
 8009b58:	4bc3      	ldr	r3, [pc, #780]	; (8009e68 <atan+0x318>)
 8009b5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b5e:	429e      	cmp	r6, r3
 8009b60:	46ab      	mov	fp, r5
 8009b62:	dd18      	ble.n	8009b96 <atan+0x46>
 8009b64:	4bc1      	ldr	r3, [pc, #772]	; (8009e6c <atan+0x31c>)
 8009b66:	429e      	cmp	r6, r3
 8009b68:	dc01      	bgt.n	8009b6e <atan+0x1e>
 8009b6a:	d109      	bne.n	8009b80 <atan+0x30>
 8009b6c:	b144      	cbz	r4, 8009b80 <atan+0x30>
 8009b6e:	4622      	mov	r2, r4
 8009b70:	462b      	mov	r3, r5
 8009b72:	4620      	mov	r0, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	f7f6 fb3f 	bl	80001f8 <__adddf3>
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	460d      	mov	r5, r1
 8009b7e:	e006      	b.n	8009b8e <atan+0x3e>
 8009b80:	f1bb 0f00 	cmp.w	fp, #0
 8009b84:	f300 8131 	bgt.w	8009dea <atan+0x29a>
 8009b88:	a59b      	add	r5, pc, #620	; (adr r5, 8009df8 <atan+0x2a8>)
 8009b8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b8e:	ec45 4b10 	vmov	d0, r4, r5
 8009b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	4bb6      	ldr	r3, [pc, #728]	; (8009e70 <atan+0x320>)
 8009b98:	429e      	cmp	r6, r3
 8009b9a:	dc14      	bgt.n	8009bc6 <atan+0x76>
 8009b9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009ba0:	429e      	cmp	r6, r3
 8009ba2:	dc0d      	bgt.n	8009bc0 <atan+0x70>
 8009ba4:	a396      	add	r3, pc, #600	; (adr r3, 8009e00 <atan+0x2b0>)
 8009ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009baa:	ee10 0a10 	vmov	r0, s0
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 fb22 	bl	80001f8 <__adddf3>
 8009bb4:	4baf      	ldr	r3, [pc, #700]	; (8009e74 <atan+0x324>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f7f6 ff64 	bl	8000a84 <__aeabi_dcmpgt>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d1e6      	bne.n	8009b8e <atan+0x3e>
 8009bc0:	f04f 3aff 	mov.w	sl, #4294967295
 8009bc4:	e02b      	b.n	8009c1e <atan+0xce>
 8009bc6:	f000 f9b7 	bl	8009f38 <fabs>
 8009bca:	4bab      	ldr	r3, [pc, #684]	; (8009e78 <atan+0x328>)
 8009bcc:	429e      	cmp	r6, r3
 8009bce:	ec55 4b10 	vmov	r4, r5, d0
 8009bd2:	f300 80bf 	bgt.w	8009d54 <atan+0x204>
 8009bd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009bda:	429e      	cmp	r6, r3
 8009bdc:	f300 80a0 	bgt.w	8009d20 <atan+0x1d0>
 8009be0:	ee10 2a10 	vmov	r2, s0
 8009be4:	ee10 0a10 	vmov	r0, s0
 8009be8:	462b      	mov	r3, r5
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7f6 fb04 	bl	80001f8 <__adddf3>
 8009bf0:	4ba0      	ldr	r3, [pc, #640]	; (8009e74 <atan+0x324>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f7f6 fafe 	bl	80001f4 <__aeabi_dsub>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c02:	4620      	mov	r0, r4
 8009c04:	4629      	mov	r1, r5
 8009c06:	f7f6 faf7 	bl	80001f8 <__adddf3>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 fdd1 	bl	80007b8 <__aeabi_ddiv>
 8009c16:	f04f 0a00 	mov.w	sl, #0
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	460d      	mov	r5, r1
 8009c1e:	4622      	mov	r2, r4
 8009c20:	462b      	mov	r3, r5
 8009c22:	4620      	mov	r0, r4
 8009c24:	4629      	mov	r1, r5
 8009c26:	f7f6 fc9d 	bl	8000564 <__aeabi_dmul>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4680      	mov	r8, r0
 8009c30:	4689      	mov	r9, r1
 8009c32:	f7f6 fc97 	bl	8000564 <__aeabi_dmul>
 8009c36:	a374      	add	r3, pc, #464	; (adr r3, 8009e08 <atan+0x2b8>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	460f      	mov	r7, r1
 8009c40:	f7f6 fc90 	bl	8000564 <__aeabi_dmul>
 8009c44:	a372      	add	r3, pc, #456	; (adr r3, 8009e10 <atan+0x2c0>)
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f7f6 fad5 	bl	80001f8 <__adddf3>
 8009c4e:	4632      	mov	r2, r6
 8009c50:	463b      	mov	r3, r7
 8009c52:	f7f6 fc87 	bl	8000564 <__aeabi_dmul>
 8009c56:	a370      	add	r3, pc, #448	; (adr r3, 8009e18 <atan+0x2c8>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	f7f6 facc 	bl	80001f8 <__adddf3>
 8009c60:	4632      	mov	r2, r6
 8009c62:	463b      	mov	r3, r7
 8009c64:	f7f6 fc7e 	bl	8000564 <__aeabi_dmul>
 8009c68:	a36d      	add	r3, pc, #436	; (adr r3, 8009e20 <atan+0x2d0>)
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	f7f6 fac3 	bl	80001f8 <__adddf3>
 8009c72:	4632      	mov	r2, r6
 8009c74:	463b      	mov	r3, r7
 8009c76:	f7f6 fc75 	bl	8000564 <__aeabi_dmul>
 8009c7a:	a36b      	add	r3, pc, #428	; (adr r3, 8009e28 <atan+0x2d8>)
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f7f6 faba 	bl	80001f8 <__adddf3>
 8009c84:	4632      	mov	r2, r6
 8009c86:	463b      	mov	r3, r7
 8009c88:	f7f6 fc6c 	bl	8000564 <__aeabi_dmul>
 8009c8c:	a368      	add	r3, pc, #416	; (adr r3, 8009e30 <atan+0x2e0>)
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	f7f6 fab1 	bl	80001f8 <__adddf3>
 8009c96:	4642      	mov	r2, r8
 8009c98:	464b      	mov	r3, r9
 8009c9a:	f7f6 fc63 	bl	8000564 <__aeabi_dmul>
 8009c9e:	a366      	add	r3, pc, #408	; (adr r3, 8009e38 <atan+0x2e8>)
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	4680      	mov	r8, r0
 8009ca6:	4689      	mov	r9, r1
 8009ca8:	4630      	mov	r0, r6
 8009caa:	4639      	mov	r1, r7
 8009cac:	f7f6 fc5a 	bl	8000564 <__aeabi_dmul>
 8009cb0:	a363      	add	r3, pc, #396	; (adr r3, 8009e40 <atan+0x2f0>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	f7f6 fa9d 	bl	80001f4 <__aeabi_dsub>
 8009cba:	4632      	mov	r2, r6
 8009cbc:	463b      	mov	r3, r7
 8009cbe:	f7f6 fc51 	bl	8000564 <__aeabi_dmul>
 8009cc2:	a361      	add	r3, pc, #388	; (adr r3, 8009e48 <atan+0x2f8>)
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f7f6 fa94 	bl	80001f4 <__aeabi_dsub>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	f7f6 fc48 	bl	8000564 <__aeabi_dmul>
 8009cd4:	a35e      	add	r3, pc, #376	; (adr r3, 8009e50 <atan+0x300>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	f7f6 fa8b 	bl	80001f4 <__aeabi_dsub>
 8009cde:	4632      	mov	r2, r6
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	f7f6 fc3f 	bl	8000564 <__aeabi_dmul>
 8009ce6:	a35c      	add	r3, pc, #368	; (adr r3, 8009e58 <atan+0x308>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fa82 	bl	80001f4 <__aeabi_dsub>
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	f7f6 fc36 	bl	8000564 <__aeabi_dmul>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4649      	mov	r1, r9
 8009d00:	f7f6 fa7a 	bl	80001f8 <__adddf3>
 8009d04:	4622      	mov	r2, r4
 8009d06:	462b      	mov	r3, r5
 8009d08:	f7f6 fc2c 	bl	8000564 <__aeabi_dmul>
 8009d0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	d14b      	bne.n	8009dae <atan+0x25e>
 8009d16:	4620      	mov	r0, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f6 fa6b 	bl	80001f4 <__aeabi_dsub>
 8009d1e:	e72c      	b.n	8009b7a <atan+0x2a>
 8009d20:	ee10 0a10 	vmov	r0, s0
 8009d24:	4b53      	ldr	r3, [pc, #332]	; (8009e74 <atan+0x324>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7f6 fa63 	bl	80001f4 <__aeabi_dsub>
 8009d2e:	4b51      	ldr	r3, [pc, #324]	; (8009e74 <atan+0x324>)
 8009d30:	4606      	mov	r6, r0
 8009d32:	460f      	mov	r7, r1
 8009d34:	2200      	movs	r2, #0
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 fa5d 	bl	80001f8 <__adddf3>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4630      	mov	r0, r6
 8009d44:	4639      	mov	r1, r7
 8009d46:	f7f6 fd37 	bl	80007b8 <__aeabi_ddiv>
 8009d4a:	f04f 0a01 	mov.w	sl, #1
 8009d4e:	4604      	mov	r4, r0
 8009d50:	460d      	mov	r5, r1
 8009d52:	e764      	b.n	8009c1e <atan+0xce>
 8009d54:	4b49      	ldr	r3, [pc, #292]	; (8009e7c <atan+0x32c>)
 8009d56:	429e      	cmp	r6, r3
 8009d58:	da1d      	bge.n	8009d96 <atan+0x246>
 8009d5a:	ee10 0a10 	vmov	r0, s0
 8009d5e:	4b48      	ldr	r3, [pc, #288]	; (8009e80 <atan+0x330>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f6 fa46 	bl	80001f4 <__aeabi_dsub>
 8009d68:	4b45      	ldr	r3, [pc, #276]	; (8009e80 <atan+0x330>)
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4620      	mov	r0, r4
 8009d72:	4629      	mov	r1, r5
 8009d74:	f7f6 fbf6 	bl	8000564 <__aeabi_dmul>
 8009d78:	4b3e      	ldr	r3, [pc, #248]	; (8009e74 <atan+0x324>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f7f6 fa3c 	bl	80001f8 <__adddf3>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4630      	mov	r0, r6
 8009d86:	4639      	mov	r1, r7
 8009d88:	f7f6 fd16 	bl	80007b8 <__aeabi_ddiv>
 8009d8c:	f04f 0a02 	mov.w	sl, #2
 8009d90:	4604      	mov	r4, r0
 8009d92:	460d      	mov	r5, r1
 8009d94:	e743      	b.n	8009c1e <atan+0xce>
 8009d96:	462b      	mov	r3, r5
 8009d98:	ee10 2a10 	vmov	r2, s0
 8009d9c:	4939      	ldr	r1, [pc, #228]	; (8009e84 <atan+0x334>)
 8009d9e:	2000      	movs	r0, #0
 8009da0:	f7f6 fd0a 	bl	80007b8 <__aeabi_ddiv>
 8009da4:	f04f 0a03 	mov.w	sl, #3
 8009da8:	4604      	mov	r4, r0
 8009daa:	460d      	mov	r5, r1
 8009dac:	e737      	b.n	8009c1e <atan+0xce>
 8009dae:	4b36      	ldr	r3, [pc, #216]	; (8009e88 <atan+0x338>)
 8009db0:	4e36      	ldr	r6, [pc, #216]	; (8009e8c <atan+0x33c>)
 8009db2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009db6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009dba:	e9da 2300 	ldrd	r2, r3, [sl]
 8009dbe:	f7f6 fa19 	bl	80001f4 <__aeabi_dsub>
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	462b      	mov	r3, r5
 8009dc6:	f7f6 fa15 	bl	80001f4 <__aeabi_dsub>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009dd2:	f7f6 fa0f 	bl	80001f4 <__aeabi_dsub>
 8009dd6:	f1bb 0f00 	cmp.w	fp, #0
 8009dda:	4604      	mov	r4, r0
 8009ddc:	460d      	mov	r5, r1
 8009dde:	f6bf aed6 	bge.w	8009b8e <atan+0x3e>
 8009de2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009de6:	461d      	mov	r5, r3
 8009de8:	e6d1      	b.n	8009b8e <atan+0x3e>
 8009dea:	a51d      	add	r5, pc, #116	; (adr r5, 8009e60 <atan+0x310>)
 8009dec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009df0:	e6cd      	b.n	8009b8e <atan+0x3e>
 8009df2:	bf00      	nop
 8009df4:	f3af 8000 	nop.w
 8009df8:	54442d18 	.word	0x54442d18
 8009dfc:	bff921fb 	.word	0xbff921fb
 8009e00:	8800759c 	.word	0x8800759c
 8009e04:	7e37e43c 	.word	0x7e37e43c
 8009e08:	e322da11 	.word	0xe322da11
 8009e0c:	3f90ad3a 	.word	0x3f90ad3a
 8009e10:	24760deb 	.word	0x24760deb
 8009e14:	3fa97b4b 	.word	0x3fa97b4b
 8009e18:	a0d03d51 	.word	0xa0d03d51
 8009e1c:	3fb10d66 	.word	0x3fb10d66
 8009e20:	c54c206e 	.word	0xc54c206e
 8009e24:	3fb745cd 	.word	0x3fb745cd
 8009e28:	920083ff 	.word	0x920083ff
 8009e2c:	3fc24924 	.word	0x3fc24924
 8009e30:	5555550d 	.word	0x5555550d
 8009e34:	3fd55555 	.word	0x3fd55555
 8009e38:	2c6a6c2f 	.word	0x2c6a6c2f
 8009e3c:	bfa2b444 	.word	0xbfa2b444
 8009e40:	52defd9a 	.word	0x52defd9a
 8009e44:	3fadde2d 	.word	0x3fadde2d
 8009e48:	af749a6d 	.word	0xaf749a6d
 8009e4c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009e50:	fe231671 	.word	0xfe231671
 8009e54:	3fbc71c6 	.word	0x3fbc71c6
 8009e58:	9998ebc4 	.word	0x9998ebc4
 8009e5c:	3fc99999 	.word	0x3fc99999
 8009e60:	54442d18 	.word	0x54442d18
 8009e64:	3ff921fb 	.word	0x3ff921fb
 8009e68:	440fffff 	.word	0x440fffff
 8009e6c:	7ff00000 	.word	0x7ff00000
 8009e70:	3fdbffff 	.word	0x3fdbffff
 8009e74:	3ff00000 	.word	0x3ff00000
 8009e78:	3ff2ffff 	.word	0x3ff2ffff
 8009e7c:	40038000 	.word	0x40038000
 8009e80:	3ff80000 	.word	0x3ff80000
 8009e84:	bff00000 	.word	0xbff00000
 8009e88:	0800b760 	.word	0x0800b760
 8009e8c:	0800b740 	.word	0x0800b740

08009e90 <cos>:
 8009e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e92:	ec53 2b10 	vmov	r2, r3, d0
 8009e96:	4826      	ldr	r0, [pc, #152]	; (8009f30 <cos+0xa0>)
 8009e98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e9c:	4281      	cmp	r1, r0
 8009e9e:	dc06      	bgt.n	8009eae <cos+0x1e>
 8009ea0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009f28 <cos+0x98>
 8009ea4:	b005      	add	sp, #20
 8009ea6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eaa:	f000 be29 	b.w	800ab00 <__kernel_cos>
 8009eae:	4821      	ldr	r0, [pc, #132]	; (8009f34 <cos+0xa4>)
 8009eb0:	4281      	cmp	r1, r0
 8009eb2:	dd09      	ble.n	8009ec8 <cos+0x38>
 8009eb4:	ee10 0a10 	vmov	r0, s0
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f7f6 f99b 	bl	80001f4 <__aeabi_dsub>
 8009ebe:	ec41 0b10 	vmov	d0, r0, r1
 8009ec2:	b005      	add	sp, #20
 8009ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ec8:	4668      	mov	r0, sp
 8009eca:	f000 fb59 	bl	800a580 <__ieee754_rem_pio2>
 8009ece:	f000 0003 	and.w	r0, r0, #3
 8009ed2:	2801      	cmp	r0, #1
 8009ed4:	d00b      	beq.n	8009eee <cos+0x5e>
 8009ed6:	2802      	cmp	r0, #2
 8009ed8:	d016      	beq.n	8009f08 <cos+0x78>
 8009eda:	b9e0      	cbnz	r0, 8009f16 <cos+0x86>
 8009edc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ee0:	ed9d 0b00 	vldr	d0, [sp]
 8009ee4:	f000 fe0c 	bl	800ab00 <__kernel_cos>
 8009ee8:	ec51 0b10 	vmov	r0, r1, d0
 8009eec:	e7e7      	b.n	8009ebe <cos+0x2e>
 8009eee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ef2:	ed9d 0b00 	vldr	d0, [sp]
 8009ef6:	f001 fa1b 	bl	800b330 <__kernel_sin>
 8009efa:	ec53 2b10 	vmov	r2, r3, d0
 8009efe:	ee10 0a10 	vmov	r0, s0
 8009f02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f06:	e7da      	b.n	8009ebe <cos+0x2e>
 8009f08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f0c:	ed9d 0b00 	vldr	d0, [sp]
 8009f10:	f000 fdf6 	bl	800ab00 <__kernel_cos>
 8009f14:	e7f1      	b.n	8009efa <cos+0x6a>
 8009f16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f1a:	ed9d 0b00 	vldr	d0, [sp]
 8009f1e:	2001      	movs	r0, #1
 8009f20:	f001 fa06 	bl	800b330 <__kernel_sin>
 8009f24:	e7e0      	b.n	8009ee8 <cos+0x58>
 8009f26:	bf00      	nop
	...
 8009f30:	3fe921fb 	.word	0x3fe921fb
 8009f34:	7fefffff 	.word	0x7fefffff

08009f38 <fabs>:
 8009f38:	ec51 0b10 	vmov	r0, r1, d0
 8009f3c:	ee10 2a10 	vmov	r2, s0
 8009f40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f44:	ec43 2b10 	vmov	d0, r2, r3
 8009f48:	4770      	bx	lr
 8009f4a:	0000      	movs	r0, r0
 8009f4c:	0000      	movs	r0, r0
	...

08009f50 <sin>:
 8009f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f52:	ec53 2b10 	vmov	r2, r3, d0
 8009f56:	4828      	ldr	r0, [pc, #160]	; (8009ff8 <sin+0xa8>)
 8009f58:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f5c:	4281      	cmp	r1, r0
 8009f5e:	dc07      	bgt.n	8009f70 <sin+0x20>
 8009f60:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009ff0 <sin+0xa0>
 8009f64:	2000      	movs	r0, #0
 8009f66:	b005      	add	sp, #20
 8009f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f6c:	f001 b9e0 	b.w	800b330 <__kernel_sin>
 8009f70:	4822      	ldr	r0, [pc, #136]	; (8009ffc <sin+0xac>)
 8009f72:	4281      	cmp	r1, r0
 8009f74:	dd09      	ble.n	8009f8a <sin+0x3a>
 8009f76:	ee10 0a10 	vmov	r0, s0
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	f7f6 f93a 	bl	80001f4 <__aeabi_dsub>
 8009f80:	ec41 0b10 	vmov	d0, r0, r1
 8009f84:	b005      	add	sp, #20
 8009f86:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f8a:	4668      	mov	r0, sp
 8009f8c:	f000 faf8 	bl	800a580 <__ieee754_rem_pio2>
 8009f90:	f000 0003 	and.w	r0, r0, #3
 8009f94:	2801      	cmp	r0, #1
 8009f96:	d00c      	beq.n	8009fb2 <sin+0x62>
 8009f98:	2802      	cmp	r0, #2
 8009f9a:	d011      	beq.n	8009fc0 <sin+0x70>
 8009f9c:	b9f0      	cbnz	r0, 8009fdc <sin+0x8c>
 8009f9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fa2:	ed9d 0b00 	vldr	d0, [sp]
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	f001 f9c2 	bl	800b330 <__kernel_sin>
 8009fac:	ec51 0b10 	vmov	r0, r1, d0
 8009fb0:	e7e6      	b.n	8009f80 <sin+0x30>
 8009fb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fb6:	ed9d 0b00 	vldr	d0, [sp]
 8009fba:	f000 fda1 	bl	800ab00 <__kernel_cos>
 8009fbe:	e7f5      	b.n	8009fac <sin+0x5c>
 8009fc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fc4:	ed9d 0b00 	vldr	d0, [sp]
 8009fc8:	2001      	movs	r0, #1
 8009fca:	f001 f9b1 	bl	800b330 <__kernel_sin>
 8009fce:	ec53 2b10 	vmov	r2, r3, d0
 8009fd2:	ee10 0a10 	vmov	r0, s0
 8009fd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009fda:	e7d1      	b.n	8009f80 <sin+0x30>
 8009fdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009fe0:	ed9d 0b00 	vldr	d0, [sp]
 8009fe4:	f000 fd8c 	bl	800ab00 <__kernel_cos>
 8009fe8:	e7f1      	b.n	8009fce <sin+0x7e>
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w
	...
 8009ff8:	3fe921fb 	.word	0x3fe921fb
 8009ffc:	7fefffff 	.word	0x7fefffff

0800a000 <acos>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	ed2d 8b02 	vpush	{d8}
 800a006:	ec55 4b10 	vmov	r4, r5, d0
 800a00a:	f000 f859 	bl	800a0c0 <__ieee754_acos>
 800a00e:	4622      	mov	r2, r4
 800a010:	462b      	mov	r3, r5
 800a012:	4620      	mov	r0, r4
 800a014:	4629      	mov	r1, r5
 800a016:	eeb0 8a40 	vmov.f32	s16, s0
 800a01a:	eef0 8a60 	vmov.f32	s17, s1
 800a01e:	f7f6 fd3b 	bl	8000a98 <__aeabi_dcmpun>
 800a022:	b9a8      	cbnz	r0, 800a050 <acos+0x50>
 800a024:	ec45 4b10 	vmov	d0, r4, r5
 800a028:	f7ff ff86 	bl	8009f38 <fabs>
 800a02c:	4b0c      	ldr	r3, [pc, #48]	; (800a060 <acos+0x60>)
 800a02e:	ec51 0b10 	vmov	r0, r1, d0
 800a032:	2200      	movs	r2, #0
 800a034:	f7f6 fd26 	bl	8000a84 <__aeabi_dcmpgt>
 800a038:	b150      	cbz	r0, 800a050 <acos+0x50>
 800a03a:	f7ff fd57 	bl	8009aec <__errno>
 800a03e:	ecbd 8b02 	vpop	{d8}
 800a042:	2321      	movs	r3, #33	; 0x21
 800a044:	6003      	str	r3, [r0, #0]
 800a046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a04a:	4806      	ldr	r0, [pc, #24]	; (800a064 <acos+0x64>)
 800a04c:	f001 bab0 	b.w	800b5b0 <nan>
 800a050:	eeb0 0a48 	vmov.f32	s0, s16
 800a054:	eef0 0a68 	vmov.f32	s1, s17
 800a058:	ecbd 8b02 	vpop	{d8}
 800a05c:	bd38      	pop	{r3, r4, r5, pc}
 800a05e:	bf00      	nop
 800a060:	3ff00000 	.word	0x3ff00000
 800a064:	0800b780 	.word	0x0800b780

0800a068 <sqrt>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	ed2d 8b02 	vpush	{d8}
 800a06e:	ec55 4b10 	vmov	r4, r5, d0
 800a072:	f000 fc91 	bl	800a998 <__ieee754_sqrt>
 800a076:	4622      	mov	r2, r4
 800a078:	462b      	mov	r3, r5
 800a07a:	4620      	mov	r0, r4
 800a07c:	4629      	mov	r1, r5
 800a07e:	eeb0 8a40 	vmov.f32	s16, s0
 800a082:	eef0 8a60 	vmov.f32	s17, s1
 800a086:	f7f6 fd07 	bl	8000a98 <__aeabi_dcmpun>
 800a08a:	b990      	cbnz	r0, 800a0b2 <sqrt+0x4a>
 800a08c:	2200      	movs	r2, #0
 800a08e:	2300      	movs	r3, #0
 800a090:	4620      	mov	r0, r4
 800a092:	4629      	mov	r1, r5
 800a094:	f7f6 fcd8 	bl	8000a48 <__aeabi_dcmplt>
 800a098:	b158      	cbz	r0, 800a0b2 <sqrt+0x4a>
 800a09a:	f7ff fd27 	bl	8009aec <__errno>
 800a09e:	2321      	movs	r3, #33	; 0x21
 800a0a0:	6003      	str	r3, [r0, #0]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	f7f6 fb85 	bl	80007b8 <__aeabi_ddiv>
 800a0ae:	ec41 0b18 	vmov	d8, r0, r1
 800a0b2:	eeb0 0a48 	vmov.f32	s0, s16
 800a0b6:	eef0 0a68 	vmov.f32	s1, s17
 800a0ba:	ecbd 8b02 	vpop	{d8}
 800a0be:	bd38      	pop	{r3, r4, r5, pc}

0800a0c0 <__ieee754_acos>:
 800a0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	ec55 4b10 	vmov	r4, r5, d0
 800a0c8:	49b7      	ldr	r1, [pc, #732]	; (800a3a8 <__ieee754_acos+0x2e8>)
 800a0ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a0ce:	428b      	cmp	r3, r1
 800a0d0:	dd1b      	ble.n	800a10a <__ieee754_acos+0x4a>
 800a0d2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a0d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a0da:	4323      	orrs	r3, r4
 800a0dc:	d106      	bne.n	800a0ec <__ieee754_acos+0x2c>
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	f300 8211 	bgt.w	800a506 <__ieee754_acos+0x446>
 800a0e4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800a340 <__ieee754_acos+0x280>
 800a0e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ec:	ee10 2a10 	vmov	r2, s0
 800a0f0:	462b      	mov	r3, r5
 800a0f2:	ee10 0a10 	vmov	r0, s0
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	f7f6 f87c 	bl	80001f4 <__aeabi_dsub>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	f7f6 fb5a 	bl	80007b8 <__aeabi_ddiv>
 800a104:	ec41 0b10 	vmov	d0, r0, r1
 800a108:	e7ee      	b.n	800a0e8 <__ieee754_acos+0x28>
 800a10a:	49a8      	ldr	r1, [pc, #672]	; (800a3ac <__ieee754_acos+0x2ec>)
 800a10c:	428b      	cmp	r3, r1
 800a10e:	f300 8087 	bgt.w	800a220 <__ieee754_acos+0x160>
 800a112:	4aa7      	ldr	r2, [pc, #668]	; (800a3b0 <__ieee754_acos+0x2f0>)
 800a114:	4293      	cmp	r3, r2
 800a116:	f340 81f9 	ble.w	800a50c <__ieee754_acos+0x44c>
 800a11a:	ee10 2a10 	vmov	r2, s0
 800a11e:	ee10 0a10 	vmov	r0, s0
 800a122:	462b      	mov	r3, r5
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 fa1d 	bl	8000564 <__aeabi_dmul>
 800a12a:	a387      	add	r3, pc, #540	; (adr r3, 800a348 <__ieee754_acos+0x288>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	4606      	mov	r6, r0
 800a132:	460f      	mov	r7, r1
 800a134:	f7f6 fa16 	bl	8000564 <__aeabi_dmul>
 800a138:	a385      	add	r3, pc, #532	; (adr r3, 800a350 <__ieee754_acos+0x290>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	f7f6 f85b 	bl	80001f8 <__adddf3>
 800a142:	4632      	mov	r2, r6
 800a144:	463b      	mov	r3, r7
 800a146:	f7f6 fa0d 	bl	8000564 <__aeabi_dmul>
 800a14a:	a383      	add	r3, pc, #524	; (adr r3, 800a358 <__ieee754_acos+0x298>)
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f7f6 f850 	bl	80001f4 <__aeabi_dsub>
 800a154:	4632      	mov	r2, r6
 800a156:	463b      	mov	r3, r7
 800a158:	f7f6 fa04 	bl	8000564 <__aeabi_dmul>
 800a15c:	a380      	add	r3, pc, #512	; (adr r3, 800a360 <__ieee754_acos+0x2a0>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7f6 f849 	bl	80001f8 <__adddf3>
 800a166:	4632      	mov	r2, r6
 800a168:	463b      	mov	r3, r7
 800a16a:	f7f6 f9fb 	bl	8000564 <__aeabi_dmul>
 800a16e:	a37e      	add	r3, pc, #504	; (adr r3, 800a368 <__ieee754_acos+0x2a8>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f7f6 f83e 	bl	80001f4 <__aeabi_dsub>
 800a178:	4632      	mov	r2, r6
 800a17a:	463b      	mov	r3, r7
 800a17c:	f7f6 f9f2 	bl	8000564 <__aeabi_dmul>
 800a180:	a37b      	add	r3, pc, #492	; (adr r3, 800a370 <__ieee754_acos+0x2b0>)
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f7f6 f837 	bl	80001f8 <__adddf3>
 800a18a:	4632      	mov	r2, r6
 800a18c:	463b      	mov	r3, r7
 800a18e:	f7f6 f9e9 	bl	8000564 <__aeabi_dmul>
 800a192:	a379      	add	r3, pc, #484	; (adr r3, 800a378 <__ieee754_acos+0x2b8>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	4680      	mov	r8, r0
 800a19a:	4689      	mov	r9, r1
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 f9e0 	bl	8000564 <__aeabi_dmul>
 800a1a4:	a376      	add	r3, pc, #472	; (adr r3, 800a380 <__ieee754_acos+0x2c0>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	f7f6 f823 	bl	80001f4 <__aeabi_dsub>
 800a1ae:	4632      	mov	r2, r6
 800a1b0:	463b      	mov	r3, r7
 800a1b2:	f7f6 f9d7 	bl	8000564 <__aeabi_dmul>
 800a1b6:	a374      	add	r3, pc, #464	; (adr r3, 800a388 <__ieee754_acos+0x2c8>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	f7f6 f81c 	bl	80001f8 <__adddf3>
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	463b      	mov	r3, r7
 800a1c4:	f7f6 f9ce 	bl	8000564 <__aeabi_dmul>
 800a1c8:	a371      	add	r3, pc, #452	; (adr r3, 800a390 <__ieee754_acos+0x2d0>)
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	f7f6 f811 	bl	80001f4 <__aeabi_dsub>
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	f7f6 f9c5 	bl	8000564 <__aeabi_dmul>
 800a1da:	4b76      	ldr	r3, [pc, #472]	; (800a3b4 <__ieee754_acos+0x2f4>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f7f6 f80b 	bl	80001f8 <__adddf3>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	f7f6 fae5 	bl	80007b8 <__aeabi_ddiv>
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	462b      	mov	r3, r5
 800a1f2:	f7f6 f9b7 	bl	8000564 <__aeabi_dmul>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	a167      	add	r1, pc, #412	; (adr r1, 800a398 <__ieee754_acos+0x2d8>)
 800a1fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a200:	f7f5 fff8 	bl	80001f4 <__aeabi_dsub>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4620      	mov	r0, r4
 800a20a:	4629      	mov	r1, r5
 800a20c:	f7f5 fff2 	bl	80001f4 <__aeabi_dsub>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	a162      	add	r1, pc, #392	; (adr r1, 800a3a0 <__ieee754_acos+0x2e0>)
 800a216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a21a:	f7f5 ffeb 	bl	80001f4 <__aeabi_dsub>
 800a21e:	e771      	b.n	800a104 <__ieee754_acos+0x44>
 800a220:	2d00      	cmp	r5, #0
 800a222:	f280 80cb 	bge.w	800a3bc <__ieee754_acos+0x2fc>
 800a226:	ee10 0a10 	vmov	r0, s0
 800a22a:	4b62      	ldr	r3, [pc, #392]	; (800a3b4 <__ieee754_acos+0x2f4>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	4629      	mov	r1, r5
 800a230:	f7f5 ffe2 	bl	80001f8 <__adddf3>
 800a234:	4b60      	ldr	r3, [pc, #384]	; (800a3b8 <__ieee754_acos+0x2f8>)
 800a236:	2200      	movs	r2, #0
 800a238:	f7f6 f994 	bl	8000564 <__aeabi_dmul>
 800a23c:	a342      	add	r3, pc, #264	; (adr r3, 800a348 <__ieee754_acos+0x288>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	4604      	mov	r4, r0
 800a244:	460d      	mov	r5, r1
 800a246:	f7f6 f98d 	bl	8000564 <__aeabi_dmul>
 800a24a:	a341      	add	r3, pc, #260	; (adr r3, 800a350 <__ieee754_acos+0x290>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f7f5 ffd2 	bl	80001f8 <__adddf3>
 800a254:	4622      	mov	r2, r4
 800a256:	462b      	mov	r3, r5
 800a258:	f7f6 f984 	bl	8000564 <__aeabi_dmul>
 800a25c:	a33e      	add	r3, pc, #248	; (adr r3, 800a358 <__ieee754_acos+0x298>)
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	f7f5 ffc7 	bl	80001f4 <__aeabi_dsub>
 800a266:	4622      	mov	r2, r4
 800a268:	462b      	mov	r3, r5
 800a26a:	f7f6 f97b 	bl	8000564 <__aeabi_dmul>
 800a26e:	a33c      	add	r3, pc, #240	; (adr r3, 800a360 <__ieee754_acos+0x2a0>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f7f5 ffc0 	bl	80001f8 <__adddf3>
 800a278:	4622      	mov	r2, r4
 800a27a:	462b      	mov	r3, r5
 800a27c:	f7f6 f972 	bl	8000564 <__aeabi_dmul>
 800a280:	a339      	add	r3, pc, #228	; (adr r3, 800a368 <__ieee754_acos+0x2a8>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	f7f5 ffb5 	bl	80001f4 <__aeabi_dsub>
 800a28a:	4622      	mov	r2, r4
 800a28c:	462b      	mov	r3, r5
 800a28e:	f7f6 f969 	bl	8000564 <__aeabi_dmul>
 800a292:	a337      	add	r3, pc, #220	; (adr r3, 800a370 <__ieee754_acos+0x2b0>)
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f7f5 ffae 	bl	80001f8 <__adddf3>
 800a29c:	4622      	mov	r2, r4
 800a29e:	462b      	mov	r3, r5
 800a2a0:	f7f6 f960 	bl	8000564 <__aeabi_dmul>
 800a2a4:	ec45 4b10 	vmov	d0, r4, r5
 800a2a8:	4680      	mov	r8, r0
 800a2aa:	4689      	mov	r9, r1
 800a2ac:	f000 fb74 	bl	800a998 <__ieee754_sqrt>
 800a2b0:	a331      	add	r3, pc, #196	; (adr r3, 800a378 <__ieee754_acos+0x2b8>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	ec57 6b10 	vmov	r6, r7, d0
 800a2be:	f7f6 f951 	bl	8000564 <__aeabi_dmul>
 800a2c2:	a32f      	add	r3, pc, #188	; (adr r3, 800a380 <__ieee754_acos+0x2c0>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f7f5 ff94 	bl	80001f4 <__aeabi_dsub>
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	462b      	mov	r3, r5
 800a2d0:	f7f6 f948 	bl	8000564 <__aeabi_dmul>
 800a2d4:	a32c      	add	r3, pc, #176	; (adr r3, 800a388 <__ieee754_acos+0x2c8>)
 800a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2da:	f7f5 ff8d 	bl	80001f8 <__adddf3>
 800a2de:	4622      	mov	r2, r4
 800a2e0:	462b      	mov	r3, r5
 800a2e2:	f7f6 f93f 	bl	8000564 <__aeabi_dmul>
 800a2e6:	a32a      	add	r3, pc, #168	; (adr r3, 800a390 <__ieee754_acos+0x2d0>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f7f5 ff82 	bl	80001f4 <__aeabi_dsub>
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	462b      	mov	r3, r5
 800a2f4:	f7f6 f936 	bl	8000564 <__aeabi_dmul>
 800a2f8:	4b2e      	ldr	r3, [pc, #184]	; (800a3b4 <__ieee754_acos+0x2f4>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f7f5 ff7c 	bl	80001f8 <__adddf3>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4640      	mov	r0, r8
 800a306:	4649      	mov	r1, r9
 800a308:	f7f6 fa56 	bl	80007b8 <__aeabi_ddiv>
 800a30c:	4632      	mov	r2, r6
 800a30e:	463b      	mov	r3, r7
 800a310:	f7f6 f928 	bl	8000564 <__aeabi_dmul>
 800a314:	a320      	add	r3, pc, #128	; (adr r3, 800a398 <__ieee754_acos+0x2d8>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	f7f5 ff6b 	bl	80001f4 <__aeabi_dsub>
 800a31e:	4632      	mov	r2, r6
 800a320:	463b      	mov	r3, r7
 800a322:	f7f5 ff69 	bl	80001f8 <__adddf3>
 800a326:	4602      	mov	r2, r0
 800a328:	460b      	mov	r3, r1
 800a32a:	f7f5 ff65 	bl	80001f8 <__adddf3>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	a103      	add	r1, pc, #12	; (adr r1, 800a340 <__ieee754_acos+0x280>)
 800a334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a338:	e76f      	b.n	800a21a <__ieee754_acos+0x15a>
 800a33a:	bf00      	nop
 800a33c:	f3af 8000 	nop.w
 800a340:	54442d18 	.word	0x54442d18
 800a344:	400921fb 	.word	0x400921fb
 800a348:	0dfdf709 	.word	0x0dfdf709
 800a34c:	3f023de1 	.word	0x3f023de1
 800a350:	7501b288 	.word	0x7501b288
 800a354:	3f49efe0 	.word	0x3f49efe0
 800a358:	b5688f3b 	.word	0xb5688f3b
 800a35c:	3fa48228 	.word	0x3fa48228
 800a360:	0e884455 	.word	0x0e884455
 800a364:	3fc9c155 	.word	0x3fc9c155
 800a368:	03eb6f7d 	.word	0x03eb6f7d
 800a36c:	3fd4d612 	.word	0x3fd4d612
 800a370:	55555555 	.word	0x55555555
 800a374:	3fc55555 	.word	0x3fc55555
 800a378:	b12e9282 	.word	0xb12e9282
 800a37c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a380:	1b8d0159 	.word	0x1b8d0159
 800a384:	3fe6066c 	.word	0x3fe6066c
 800a388:	9c598ac8 	.word	0x9c598ac8
 800a38c:	40002ae5 	.word	0x40002ae5
 800a390:	1c8a2d4b 	.word	0x1c8a2d4b
 800a394:	40033a27 	.word	0x40033a27
 800a398:	33145c07 	.word	0x33145c07
 800a39c:	3c91a626 	.word	0x3c91a626
 800a3a0:	54442d18 	.word	0x54442d18
 800a3a4:	3ff921fb 	.word	0x3ff921fb
 800a3a8:	3fefffff 	.word	0x3fefffff
 800a3ac:	3fdfffff 	.word	0x3fdfffff
 800a3b0:	3c600000 	.word	0x3c600000
 800a3b4:	3ff00000 	.word	0x3ff00000
 800a3b8:	3fe00000 	.word	0x3fe00000
 800a3bc:	ee10 2a10 	vmov	r2, s0
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	496d      	ldr	r1, [pc, #436]	; (800a578 <__ieee754_acos+0x4b8>)
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	f7f5 ff15 	bl	80001f4 <__aeabi_dsub>
 800a3ca:	4b6c      	ldr	r3, [pc, #432]	; (800a57c <__ieee754_acos+0x4bc>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f7f6 f8c9 	bl	8000564 <__aeabi_dmul>
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	460d      	mov	r5, r1
 800a3d6:	ec45 4b10 	vmov	d0, r4, r5
 800a3da:	f000 fadd 	bl	800a998 <__ieee754_sqrt>
 800a3de:	a34e      	add	r3, pc, #312	; (adr r3, 800a518 <__ieee754_acos+0x458>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	ec59 8b10 	vmov	r8, r9, d0
 800a3ec:	f7f6 f8ba 	bl	8000564 <__aeabi_dmul>
 800a3f0:	a34b      	add	r3, pc, #300	; (adr r3, 800a520 <__ieee754_acos+0x460>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f5 feff 	bl	80001f8 <__adddf3>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	f7f6 f8b1 	bl	8000564 <__aeabi_dmul>
 800a402:	a349      	add	r3, pc, #292	; (adr r3, 800a528 <__ieee754_acos+0x468>)
 800a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a408:	f7f5 fef4 	bl	80001f4 <__aeabi_dsub>
 800a40c:	4622      	mov	r2, r4
 800a40e:	462b      	mov	r3, r5
 800a410:	f7f6 f8a8 	bl	8000564 <__aeabi_dmul>
 800a414:	a346      	add	r3, pc, #280	; (adr r3, 800a530 <__ieee754_acos+0x470>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f7f5 feed 	bl	80001f8 <__adddf3>
 800a41e:	4622      	mov	r2, r4
 800a420:	462b      	mov	r3, r5
 800a422:	f7f6 f89f 	bl	8000564 <__aeabi_dmul>
 800a426:	a344      	add	r3, pc, #272	; (adr r3, 800a538 <__ieee754_acos+0x478>)
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	f7f5 fee2 	bl	80001f4 <__aeabi_dsub>
 800a430:	4622      	mov	r2, r4
 800a432:	462b      	mov	r3, r5
 800a434:	f7f6 f896 	bl	8000564 <__aeabi_dmul>
 800a438:	a341      	add	r3, pc, #260	; (adr r3, 800a540 <__ieee754_acos+0x480>)
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	f7f5 fedb 	bl	80001f8 <__adddf3>
 800a442:	4622      	mov	r2, r4
 800a444:	462b      	mov	r3, r5
 800a446:	f7f6 f88d 	bl	8000564 <__aeabi_dmul>
 800a44a:	a33f      	add	r3, pc, #252	; (adr r3, 800a548 <__ieee754_acos+0x488>)
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	4682      	mov	sl, r0
 800a452:	468b      	mov	fp, r1
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f6 f884 	bl	8000564 <__aeabi_dmul>
 800a45c:	a33c      	add	r3, pc, #240	; (adr r3, 800a550 <__ieee754_acos+0x490>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f7f5 fec7 	bl	80001f4 <__aeabi_dsub>
 800a466:	4622      	mov	r2, r4
 800a468:	462b      	mov	r3, r5
 800a46a:	f7f6 f87b 	bl	8000564 <__aeabi_dmul>
 800a46e:	a33a      	add	r3, pc, #232	; (adr r3, 800a558 <__ieee754_acos+0x498>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	f7f5 fec0 	bl	80001f8 <__adddf3>
 800a478:	4622      	mov	r2, r4
 800a47a:	462b      	mov	r3, r5
 800a47c:	f7f6 f872 	bl	8000564 <__aeabi_dmul>
 800a480:	a337      	add	r3, pc, #220	; (adr r3, 800a560 <__ieee754_acos+0x4a0>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f5 feb5 	bl	80001f4 <__aeabi_dsub>
 800a48a:	4622      	mov	r2, r4
 800a48c:	462b      	mov	r3, r5
 800a48e:	f7f6 f869 	bl	8000564 <__aeabi_dmul>
 800a492:	4b39      	ldr	r3, [pc, #228]	; (800a578 <__ieee754_acos+0x4b8>)
 800a494:	2200      	movs	r2, #0
 800a496:	f7f5 feaf 	bl	80001f8 <__adddf3>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4650      	mov	r0, sl
 800a4a0:	4659      	mov	r1, fp
 800a4a2:	f7f6 f989 	bl	80007b8 <__aeabi_ddiv>
 800a4a6:	4642      	mov	r2, r8
 800a4a8:	464b      	mov	r3, r9
 800a4aa:	f7f6 f85b 	bl	8000564 <__aeabi_dmul>
 800a4ae:	2600      	movs	r6, #0
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	468b      	mov	fp, r1
 800a4b4:	4632      	mov	r2, r6
 800a4b6:	464b      	mov	r3, r9
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	f7f6 f852 	bl	8000564 <__aeabi_dmul>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f7f5 fe94 	bl	80001f4 <__aeabi_dsub>
 800a4cc:	4632      	mov	r2, r6
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	460d      	mov	r5, r1
 800a4d2:	464b      	mov	r3, r9
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	f7f5 fe8e 	bl	80001f8 <__adddf3>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	f7f6 f968 	bl	80007b8 <__aeabi_ddiv>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4650      	mov	r0, sl
 800a4ee:	4659      	mov	r1, fp
 800a4f0:	f7f5 fe82 	bl	80001f8 <__adddf3>
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	464b      	mov	r3, r9
 800a4f8:	f7f5 fe7e 	bl	80001f8 <__adddf3>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	f7f5 fe7a 	bl	80001f8 <__adddf3>
 800a504:	e5fe      	b.n	800a104 <__ieee754_acos+0x44>
 800a506:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a568 <__ieee754_acos+0x4a8>
 800a50a:	e5ed      	b.n	800a0e8 <__ieee754_acos+0x28>
 800a50c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a570 <__ieee754_acos+0x4b0>
 800a510:	e5ea      	b.n	800a0e8 <__ieee754_acos+0x28>
 800a512:	bf00      	nop
 800a514:	f3af 8000 	nop.w
 800a518:	0dfdf709 	.word	0x0dfdf709
 800a51c:	3f023de1 	.word	0x3f023de1
 800a520:	7501b288 	.word	0x7501b288
 800a524:	3f49efe0 	.word	0x3f49efe0
 800a528:	b5688f3b 	.word	0xb5688f3b
 800a52c:	3fa48228 	.word	0x3fa48228
 800a530:	0e884455 	.word	0x0e884455
 800a534:	3fc9c155 	.word	0x3fc9c155
 800a538:	03eb6f7d 	.word	0x03eb6f7d
 800a53c:	3fd4d612 	.word	0x3fd4d612
 800a540:	55555555 	.word	0x55555555
 800a544:	3fc55555 	.word	0x3fc55555
 800a548:	b12e9282 	.word	0xb12e9282
 800a54c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a550:	1b8d0159 	.word	0x1b8d0159
 800a554:	3fe6066c 	.word	0x3fe6066c
 800a558:	9c598ac8 	.word	0x9c598ac8
 800a55c:	40002ae5 	.word	0x40002ae5
 800a560:	1c8a2d4b 	.word	0x1c8a2d4b
 800a564:	40033a27 	.word	0x40033a27
	...
 800a570:	54442d18 	.word	0x54442d18
 800a574:	3ff921fb 	.word	0x3ff921fb
 800a578:	3ff00000 	.word	0x3ff00000
 800a57c:	3fe00000 	.word	0x3fe00000

0800a580 <__ieee754_rem_pio2>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	ed2d 8b02 	vpush	{d8}
 800a588:	ec55 4b10 	vmov	r4, r5, d0
 800a58c:	4bca      	ldr	r3, [pc, #808]	; (800a8b8 <__ieee754_rem_pio2+0x338>)
 800a58e:	b08b      	sub	sp, #44	; 0x2c
 800a590:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a594:	4598      	cmp	r8, r3
 800a596:	4682      	mov	sl, r0
 800a598:	9502      	str	r5, [sp, #8]
 800a59a:	dc08      	bgt.n	800a5ae <__ieee754_rem_pio2+0x2e>
 800a59c:	2200      	movs	r2, #0
 800a59e:	2300      	movs	r3, #0
 800a5a0:	ed80 0b00 	vstr	d0, [r0]
 800a5a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a5a8:	f04f 0b00 	mov.w	fp, #0
 800a5ac:	e028      	b.n	800a600 <__ieee754_rem_pio2+0x80>
 800a5ae:	4bc3      	ldr	r3, [pc, #780]	; (800a8bc <__ieee754_rem_pio2+0x33c>)
 800a5b0:	4598      	cmp	r8, r3
 800a5b2:	dc78      	bgt.n	800a6a6 <__ieee754_rem_pio2+0x126>
 800a5b4:	9b02      	ldr	r3, [sp, #8]
 800a5b6:	4ec2      	ldr	r6, [pc, #776]	; (800a8c0 <__ieee754_rem_pio2+0x340>)
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	ee10 0a10 	vmov	r0, s0
 800a5be:	a3b0      	add	r3, pc, #704	; (adr r3, 800a880 <__ieee754_rem_pio2+0x300>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	dd39      	ble.n	800a63c <__ieee754_rem_pio2+0xbc>
 800a5c8:	f7f5 fe14 	bl	80001f4 <__aeabi_dsub>
 800a5cc:	45b0      	cmp	r8, r6
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	460d      	mov	r5, r1
 800a5d2:	d01b      	beq.n	800a60c <__ieee754_rem_pio2+0x8c>
 800a5d4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a888 <__ieee754_rem_pio2+0x308>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f7f5 fe0b 	bl	80001f4 <__aeabi_dsub>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	e9ca 2300 	strd	r2, r3, [sl]
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	f7f5 fe03 	bl	80001f4 <__aeabi_dsub>
 800a5ee:	a3a6      	add	r3, pc, #664	; (adr r3, 800a888 <__ieee754_rem_pio2+0x308>)
 800a5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f4:	f7f5 fdfe 	bl	80001f4 <__aeabi_dsub>
 800a5f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5fc:	f04f 0b01 	mov.w	fp, #1
 800a600:	4658      	mov	r0, fp
 800a602:	b00b      	add	sp, #44	; 0x2c
 800a604:	ecbd 8b02 	vpop	{d8}
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a890 <__ieee754_rem_pio2+0x310>)
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f5 fdef 	bl	80001f4 <__aeabi_dsub>
 800a616:	a3a0      	add	r3, pc, #640	; (adr r3, 800a898 <__ieee754_rem_pio2+0x318>)
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	f7f5 fde8 	bl	80001f4 <__aeabi_dsub>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	e9ca 2300 	strd	r2, r3, [sl]
 800a62c:	4620      	mov	r0, r4
 800a62e:	4629      	mov	r1, r5
 800a630:	f7f5 fde0 	bl	80001f4 <__aeabi_dsub>
 800a634:	a398      	add	r3, pc, #608	; (adr r3, 800a898 <__ieee754_rem_pio2+0x318>)
 800a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63a:	e7db      	b.n	800a5f4 <__ieee754_rem_pio2+0x74>
 800a63c:	f7f5 fddc 	bl	80001f8 <__adddf3>
 800a640:	45b0      	cmp	r8, r6
 800a642:	4604      	mov	r4, r0
 800a644:	460d      	mov	r5, r1
 800a646:	d016      	beq.n	800a676 <__ieee754_rem_pio2+0xf6>
 800a648:	a38f      	add	r3, pc, #572	; (adr r3, 800a888 <__ieee754_rem_pio2+0x308>)
 800a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64e:	f7f5 fdd3 	bl	80001f8 <__adddf3>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	e9ca 2300 	strd	r2, r3, [sl]
 800a65a:	4620      	mov	r0, r4
 800a65c:	4629      	mov	r1, r5
 800a65e:	f7f5 fdc9 	bl	80001f4 <__aeabi_dsub>
 800a662:	a389      	add	r3, pc, #548	; (adr r3, 800a888 <__ieee754_rem_pio2+0x308>)
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	f7f5 fdc6 	bl	80001f8 <__adddf3>
 800a66c:	f04f 3bff 	mov.w	fp, #4294967295
 800a670:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a674:	e7c4      	b.n	800a600 <__ieee754_rem_pio2+0x80>
 800a676:	a386      	add	r3, pc, #536	; (adr r3, 800a890 <__ieee754_rem_pio2+0x310>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	f7f5 fdbc 	bl	80001f8 <__adddf3>
 800a680:	a385      	add	r3, pc, #532	; (adr r3, 800a898 <__ieee754_rem_pio2+0x318>)
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	4604      	mov	r4, r0
 800a688:	460d      	mov	r5, r1
 800a68a:	f7f5 fdb5 	bl	80001f8 <__adddf3>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	e9ca 2300 	strd	r2, r3, [sl]
 800a696:	4620      	mov	r0, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	f7f5 fdab 	bl	80001f4 <__aeabi_dsub>
 800a69e:	a37e      	add	r3, pc, #504	; (adr r3, 800a898 <__ieee754_rem_pio2+0x318>)
 800a6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a4:	e7e0      	b.n	800a668 <__ieee754_rem_pio2+0xe8>
 800a6a6:	4b87      	ldr	r3, [pc, #540]	; (800a8c4 <__ieee754_rem_pio2+0x344>)
 800a6a8:	4598      	cmp	r8, r3
 800a6aa:	f300 80d9 	bgt.w	800a860 <__ieee754_rem_pio2+0x2e0>
 800a6ae:	f7ff fc43 	bl	8009f38 <fabs>
 800a6b2:	ec55 4b10 	vmov	r4, r5, d0
 800a6b6:	ee10 0a10 	vmov	r0, s0
 800a6ba:	a379      	add	r3, pc, #484	; (adr r3, 800a8a0 <__ieee754_rem_pio2+0x320>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	f7f5 ff4f 	bl	8000564 <__aeabi_dmul>
 800a6c6:	4b80      	ldr	r3, [pc, #512]	; (800a8c8 <__ieee754_rem_pio2+0x348>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f7f5 fd95 	bl	80001f8 <__adddf3>
 800a6ce:	f7f6 f9f9 	bl	8000ac4 <__aeabi_d2iz>
 800a6d2:	4683      	mov	fp, r0
 800a6d4:	f7f5 fedc 	bl	8000490 <__aeabi_i2d>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	ec43 2b18 	vmov	d8, r2, r3
 800a6e0:	a367      	add	r3, pc, #412	; (adr r3, 800a880 <__ieee754_rem_pio2+0x300>)
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	f7f5 ff3d 	bl	8000564 <__aeabi_dmul>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	f7f5 fd7f 	bl	80001f4 <__aeabi_dsub>
 800a6f6:	a364      	add	r3, pc, #400	; (adr r3, 800a888 <__ieee754_rem_pio2+0x308>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	460f      	mov	r7, r1
 800a700:	ec51 0b18 	vmov	r0, r1, d8
 800a704:	f7f5 ff2e 	bl	8000564 <__aeabi_dmul>
 800a708:	f1bb 0f1f 	cmp.w	fp, #31
 800a70c:	4604      	mov	r4, r0
 800a70e:	460d      	mov	r5, r1
 800a710:	dc0d      	bgt.n	800a72e <__ieee754_rem_pio2+0x1ae>
 800a712:	4b6e      	ldr	r3, [pc, #440]	; (800a8cc <__ieee754_rem_pio2+0x34c>)
 800a714:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71c:	4543      	cmp	r3, r8
 800a71e:	d006      	beq.n	800a72e <__ieee754_rem_pio2+0x1ae>
 800a720:	4622      	mov	r2, r4
 800a722:	462b      	mov	r3, r5
 800a724:	4630      	mov	r0, r6
 800a726:	4639      	mov	r1, r7
 800a728:	f7f5 fd64 	bl	80001f4 <__aeabi_dsub>
 800a72c:	e00f      	b.n	800a74e <__ieee754_rem_pio2+0x1ce>
 800a72e:	462b      	mov	r3, r5
 800a730:	4622      	mov	r2, r4
 800a732:	4630      	mov	r0, r6
 800a734:	4639      	mov	r1, r7
 800a736:	f7f5 fd5d 	bl	80001f4 <__aeabi_dsub>
 800a73a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a73e:	9303      	str	r3, [sp, #12]
 800a740:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a744:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a748:	f1b8 0f10 	cmp.w	r8, #16
 800a74c:	dc02      	bgt.n	800a754 <__ieee754_rem_pio2+0x1d4>
 800a74e:	e9ca 0100 	strd	r0, r1, [sl]
 800a752:	e039      	b.n	800a7c8 <__ieee754_rem_pio2+0x248>
 800a754:	a34e      	add	r3, pc, #312	; (adr r3, 800a890 <__ieee754_rem_pio2+0x310>)
 800a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75a:	ec51 0b18 	vmov	r0, r1, d8
 800a75e:	f7f5 ff01 	bl	8000564 <__aeabi_dmul>
 800a762:	4604      	mov	r4, r0
 800a764:	460d      	mov	r5, r1
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	4630      	mov	r0, r6
 800a76c:	4639      	mov	r1, r7
 800a76e:	f7f5 fd41 	bl	80001f4 <__aeabi_dsub>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4680      	mov	r8, r0
 800a778:	4689      	mov	r9, r1
 800a77a:	4630      	mov	r0, r6
 800a77c:	4639      	mov	r1, r7
 800a77e:	f7f5 fd39 	bl	80001f4 <__aeabi_dsub>
 800a782:	4622      	mov	r2, r4
 800a784:	462b      	mov	r3, r5
 800a786:	f7f5 fd35 	bl	80001f4 <__aeabi_dsub>
 800a78a:	a343      	add	r3, pc, #268	; (adr r3, 800a898 <__ieee754_rem_pio2+0x318>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	4604      	mov	r4, r0
 800a792:	460d      	mov	r5, r1
 800a794:	ec51 0b18 	vmov	r0, r1, d8
 800a798:	f7f5 fee4 	bl	8000564 <__aeabi_dmul>
 800a79c:	4622      	mov	r2, r4
 800a79e:	462b      	mov	r3, r5
 800a7a0:	f7f5 fd28 	bl	80001f4 <__aeabi_dsub>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	460d      	mov	r5, r1
 800a7ac:	4640      	mov	r0, r8
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	f7f5 fd20 	bl	80001f4 <__aeabi_dsub>
 800a7b4:	9a03      	ldr	r2, [sp, #12]
 800a7b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	2b31      	cmp	r3, #49	; 0x31
 800a7be:	dc24      	bgt.n	800a80a <__ieee754_rem_pio2+0x28a>
 800a7c0:	e9ca 0100 	strd	r0, r1, [sl]
 800a7c4:	4646      	mov	r6, r8
 800a7c6:	464f      	mov	r7, r9
 800a7c8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	4642      	mov	r2, r8
 800a7d0:	464b      	mov	r3, r9
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	f7f5 fd0e 	bl	80001f4 <__aeabi_dsub>
 800a7d8:	462b      	mov	r3, r5
 800a7da:	4622      	mov	r2, r4
 800a7dc:	f7f5 fd0a 	bl	80001f4 <__aeabi_dsub>
 800a7e0:	9b02      	ldr	r3, [sp, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a7e8:	f6bf af0a 	bge.w	800a600 <__ieee754_rem_pio2+0x80>
 800a7ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a7f0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a7f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7f8:	f8ca 8000 	str.w	r8, [sl]
 800a7fc:	f8ca 0008 	str.w	r0, [sl, #8]
 800a800:	f8ca 300c 	str.w	r3, [sl, #12]
 800a804:	f1cb 0b00 	rsb	fp, fp, #0
 800a808:	e6fa      	b.n	800a600 <__ieee754_rem_pio2+0x80>
 800a80a:	a327      	add	r3, pc, #156	; (adr r3, 800a8a8 <__ieee754_rem_pio2+0x328>)
 800a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a810:	ec51 0b18 	vmov	r0, r1, d8
 800a814:	f7f5 fea6 	bl	8000564 <__aeabi_dmul>
 800a818:	4604      	mov	r4, r0
 800a81a:	460d      	mov	r5, r1
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4640      	mov	r0, r8
 800a822:	4649      	mov	r1, r9
 800a824:	f7f5 fce6 	bl	80001f4 <__aeabi_dsub>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4606      	mov	r6, r0
 800a82e:	460f      	mov	r7, r1
 800a830:	4640      	mov	r0, r8
 800a832:	4649      	mov	r1, r9
 800a834:	f7f5 fcde 	bl	80001f4 <__aeabi_dsub>
 800a838:	4622      	mov	r2, r4
 800a83a:	462b      	mov	r3, r5
 800a83c:	f7f5 fcda 	bl	80001f4 <__aeabi_dsub>
 800a840:	a31b      	add	r3, pc, #108	; (adr r3, 800a8b0 <__ieee754_rem_pio2+0x330>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	4604      	mov	r4, r0
 800a848:	460d      	mov	r5, r1
 800a84a:	ec51 0b18 	vmov	r0, r1, d8
 800a84e:	f7f5 fe89 	bl	8000564 <__aeabi_dmul>
 800a852:	4622      	mov	r2, r4
 800a854:	462b      	mov	r3, r5
 800a856:	f7f5 fccd 	bl	80001f4 <__aeabi_dsub>
 800a85a:	4604      	mov	r4, r0
 800a85c:	460d      	mov	r5, r1
 800a85e:	e75f      	b.n	800a720 <__ieee754_rem_pio2+0x1a0>
 800a860:	4b1b      	ldr	r3, [pc, #108]	; (800a8d0 <__ieee754_rem_pio2+0x350>)
 800a862:	4598      	cmp	r8, r3
 800a864:	dd36      	ble.n	800a8d4 <__ieee754_rem_pio2+0x354>
 800a866:	ee10 2a10 	vmov	r2, s0
 800a86a:	462b      	mov	r3, r5
 800a86c:	4620      	mov	r0, r4
 800a86e:	4629      	mov	r1, r5
 800a870:	f7f5 fcc0 	bl	80001f4 <__aeabi_dsub>
 800a874:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a878:	e9ca 0100 	strd	r0, r1, [sl]
 800a87c:	e694      	b.n	800a5a8 <__ieee754_rem_pio2+0x28>
 800a87e:	bf00      	nop
 800a880:	54400000 	.word	0x54400000
 800a884:	3ff921fb 	.word	0x3ff921fb
 800a888:	1a626331 	.word	0x1a626331
 800a88c:	3dd0b461 	.word	0x3dd0b461
 800a890:	1a600000 	.word	0x1a600000
 800a894:	3dd0b461 	.word	0x3dd0b461
 800a898:	2e037073 	.word	0x2e037073
 800a89c:	3ba3198a 	.word	0x3ba3198a
 800a8a0:	6dc9c883 	.word	0x6dc9c883
 800a8a4:	3fe45f30 	.word	0x3fe45f30
 800a8a8:	2e000000 	.word	0x2e000000
 800a8ac:	3ba3198a 	.word	0x3ba3198a
 800a8b0:	252049c1 	.word	0x252049c1
 800a8b4:	397b839a 	.word	0x397b839a
 800a8b8:	3fe921fb 	.word	0x3fe921fb
 800a8bc:	4002d97b 	.word	0x4002d97b
 800a8c0:	3ff921fb 	.word	0x3ff921fb
 800a8c4:	413921fb 	.word	0x413921fb
 800a8c8:	3fe00000 	.word	0x3fe00000
 800a8cc:	0800b784 	.word	0x0800b784
 800a8d0:	7fefffff 	.word	0x7fefffff
 800a8d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a8d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a8dc:	ee10 0a10 	vmov	r0, s0
 800a8e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a8e4:	ee10 6a10 	vmov	r6, s0
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	f7f6 f8eb 	bl	8000ac4 <__aeabi_d2iz>
 800a8ee:	f7f5 fdcf 	bl	8000490 <__aeabi_i2d>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a8fe:	f7f5 fc79 	bl	80001f4 <__aeabi_dsub>
 800a902:	4b23      	ldr	r3, [pc, #140]	; (800a990 <__ieee754_rem_pio2+0x410>)
 800a904:	2200      	movs	r2, #0
 800a906:	f7f5 fe2d 	bl	8000564 <__aeabi_dmul>
 800a90a:	460f      	mov	r7, r1
 800a90c:	4606      	mov	r6, r0
 800a90e:	f7f6 f8d9 	bl	8000ac4 <__aeabi_d2iz>
 800a912:	f7f5 fdbd 	bl	8000490 <__aeabi_i2d>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4630      	mov	r0, r6
 800a91c:	4639      	mov	r1, r7
 800a91e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a922:	f7f5 fc67 	bl	80001f4 <__aeabi_dsub>
 800a926:	4b1a      	ldr	r3, [pc, #104]	; (800a990 <__ieee754_rem_pio2+0x410>)
 800a928:	2200      	movs	r2, #0
 800a92a:	f7f5 fe1b 	bl	8000564 <__aeabi_dmul>
 800a92e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a932:	ad04      	add	r5, sp, #16
 800a934:	f04f 0803 	mov.w	r8, #3
 800a938:	46a9      	mov	r9, r5
 800a93a:	2600      	movs	r6, #0
 800a93c:	2700      	movs	r7, #0
 800a93e:	4632      	mov	r2, r6
 800a940:	463b      	mov	r3, r7
 800a942:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a946:	46c3      	mov	fp, r8
 800a948:	3d08      	subs	r5, #8
 800a94a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a94e:	f7f6 f871 	bl	8000a34 <__aeabi_dcmpeq>
 800a952:	2800      	cmp	r0, #0
 800a954:	d1f3      	bne.n	800a93e <__ieee754_rem_pio2+0x3be>
 800a956:	4b0f      	ldr	r3, [pc, #60]	; (800a994 <__ieee754_rem_pio2+0x414>)
 800a958:	9301      	str	r3, [sp, #4]
 800a95a:	2302      	movs	r3, #2
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	4622      	mov	r2, r4
 800a960:	465b      	mov	r3, fp
 800a962:	4651      	mov	r1, sl
 800a964:	4648      	mov	r0, r9
 800a966:	f000 f993 	bl	800ac90 <__kernel_rem_pio2>
 800a96a:	9b02      	ldr	r3, [sp, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	4683      	mov	fp, r0
 800a970:	f6bf ae46 	bge.w	800a600 <__ieee754_rem_pio2+0x80>
 800a974:	e9da 2100 	ldrd	r2, r1, [sl]
 800a978:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a97c:	e9ca 2300 	strd	r2, r3, [sl]
 800a980:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a988:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a98c:	e73a      	b.n	800a804 <__ieee754_rem_pio2+0x284>
 800a98e:	bf00      	nop
 800a990:	41700000 	.word	0x41700000
 800a994:	0800b804 	.word	0x0800b804

0800a998 <__ieee754_sqrt>:
 800a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a99c:	ec55 4b10 	vmov	r4, r5, d0
 800a9a0:	4e55      	ldr	r6, [pc, #340]	; (800aaf8 <__ieee754_sqrt+0x160>)
 800a9a2:	43ae      	bics	r6, r5
 800a9a4:	ee10 0a10 	vmov	r0, s0
 800a9a8:	ee10 3a10 	vmov	r3, s0
 800a9ac:	462a      	mov	r2, r5
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	d110      	bne.n	800a9d4 <__ieee754_sqrt+0x3c>
 800a9b2:	ee10 2a10 	vmov	r2, s0
 800a9b6:	462b      	mov	r3, r5
 800a9b8:	f7f5 fdd4 	bl	8000564 <__aeabi_dmul>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	4629      	mov	r1, r5
 800a9c4:	f7f5 fc18 	bl	80001f8 <__adddf3>
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	ec45 4b10 	vmov	d0, r4, r5
 800a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d4:	2d00      	cmp	r5, #0
 800a9d6:	dc10      	bgt.n	800a9fa <__ieee754_sqrt+0x62>
 800a9d8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a9dc:	4330      	orrs	r0, r6
 800a9de:	d0f5      	beq.n	800a9cc <__ieee754_sqrt+0x34>
 800a9e0:	b15d      	cbz	r5, 800a9fa <__ieee754_sqrt+0x62>
 800a9e2:	ee10 2a10 	vmov	r2, s0
 800a9e6:	462b      	mov	r3, r5
 800a9e8:	ee10 0a10 	vmov	r0, s0
 800a9ec:	f7f5 fc02 	bl	80001f4 <__aeabi_dsub>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	f7f5 fee0 	bl	80007b8 <__aeabi_ddiv>
 800a9f8:	e7e6      	b.n	800a9c8 <__ieee754_sqrt+0x30>
 800a9fa:	1512      	asrs	r2, r2, #20
 800a9fc:	d074      	beq.n	800aae8 <__ieee754_sqrt+0x150>
 800a9fe:	07d4      	lsls	r4, r2, #31
 800aa00:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aa04:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800aa08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800aa0c:	bf5e      	ittt	pl
 800aa0e:	0fda      	lsrpl	r2, r3, #31
 800aa10:	005b      	lslpl	r3, r3, #1
 800aa12:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800aa16:	2400      	movs	r4, #0
 800aa18:	0fda      	lsrs	r2, r3, #31
 800aa1a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800aa1e:	107f      	asrs	r7, r7, #1
 800aa20:	005b      	lsls	r3, r3, #1
 800aa22:	2516      	movs	r5, #22
 800aa24:	4620      	mov	r0, r4
 800aa26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800aa2a:	1886      	adds	r6, r0, r2
 800aa2c:	428e      	cmp	r6, r1
 800aa2e:	bfde      	ittt	le
 800aa30:	1b89      	suble	r1, r1, r6
 800aa32:	18b0      	addle	r0, r6, r2
 800aa34:	18a4      	addle	r4, r4, r2
 800aa36:	0049      	lsls	r1, r1, #1
 800aa38:	3d01      	subs	r5, #1
 800aa3a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800aa3e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800aa42:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa46:	d1f0      	bne.n	800aa2a <__ieee754_sqrt+0x92>
 800aa48:	462a      	mov	r2, r5
 800aa4a:	f04f 0e20 	mov.w	lr, #32
 800aa4e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa52:	4281      	cmp	r1, r0
 800aa54:	eb06 0c05 	add.w	ip, r6, r5
 800aa58:	dc02      	bgt.n	800aa60 <__ieee754_sqrt+0xc8>
 800aa5a:	d113      	bne.n	800aa84 <__ieee754_sqrt+0xec>
 800aa5c:	459c      	cmp	ip, r3
 800aa5e:	d811      	bhi.n	800aa84 <__ieee754_sqrt+0xec>
 800aa60:	f1bc 0f00 	cmp.w	ip, #0
 800aa64:	eb0c 0506 	add.w	r5, ip, r6
 800aa68:	da43      	bge.n	800aaf2 <__ieee754_sqrt+0x15a>
 800aa6a:	2d00      	cmp	r5, #0
 800aa6c:	db41      	blt.n	800aaf2 <__ieee754_sqrt+0x15a>
 800aa6e:	f100 0801 	add.w	r8, r0, #1
 800aa72:	1a09      	subs	r1, r1, r0
 800aa74:	459c      	cmp	ip, r3
 800aa76:	bf88      	it	hi
 800aa78:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800aa7c:	eba3 030c 	sub.w	r3, r3, ip
 800aa80:	4432      	add	r2, r6
 800aa82:	4640      	mov	r0, r8
 800aa84:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aa88:	f1be 0e01 	subs.w	lr, lr, #1
 800aa8c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800aa90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa94:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aa98:	d1db      	bne.n	800aa52 <__ieee754_sqrt+0xba>
 800aa9a:	430b      	orrs	r3, r1
 800aa9c:	d006      	beq.n	800aaac <__ieee754_sqrt+0x114>
 800aa9e:	1c50      	adds	r0, r2, #1
 800aaa0:	bf13      	iteet	ne
 800aaa2:	3201      	addne	r2, #1
 800aaa4:	3401      	addeq	r4, #1
 800aaa6:	4672      	moveq	r2, lr
 800aaa8:	f022 0201 	bicne.w	r2, r2, #1
 800aaac:	1063      	asrs	r3, r4, #1
 800aaae:	0852      	lsrs	r2, r2, #1
 800aab0:	07e1      	lsls	r1, r4, #31
 800aab2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aab6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aaba:	bf48      	it	mi
 800aabc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800aac0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800aac4:	4614      	mov	r4, r2
 800aac6:	e781      	b.n	800a9cc <__ieee754_sqrt+0x34>
 800aac8:	0ad9      	lsrs	r1, r3, #11
 800aaca:	3815      	subs	r0, #21
 800aacc:	055b      	lsls	r3, r3, #21
 800aace:	2900      	cmp	r1, #0
 800aad0:	d0fa      	beq.n	800aac8 <__ieee754_sqrt+0x130>
 800aad2:	02cd      	lsls	r5, r1, #11
 800aad4:	d50a      	bpl.n	800aaec <__ieee754_sqrt+0x154>
 800aad6:	f1c2 0420 	rsb	r4, r2, #32
 800aada:	fa23 f404 	lsr.w	r4, r3, r4
 800aade:	1e55      	subs	r5, r2, #1
 800aae0:	4093      	lsls	r3, r2
 800aae2:	4321      	orrs	r1, r4
 800aae4:	1b42      	subs	r2, r0, r5
 800aae6:	e78a      	b.n	800a9fe <__ieee754_sqrt+0x66>
 800aae8:	4610      	mov	r0, r2
 800aaea:	e7f0      	b.n	800aace <__ieee754_sqrt+0x136>
 800aaec:	0049      	lsls	r1, r1, #1
 800aaee:	3201      	adds	r2, #1
 800aaf0:	e7ef      	b.n	800aad2 <__ieee754_sqrt+0x13a>
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	e7bd      	b.n	800aa72 <__ieee754_sqrt+0xda>
 800aaf6:	bf00      	nop
 800aaf8:	7ff00000 	.word	0x7ff00000
 800aafc:	00000000 	.word	0x00000000

0800ab00 <__kernel_cos>:
 800ab00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	ec57 6b10 	vmov	r6, r7, d0
 800ab08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ab0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ab10:	ed8d 1b00 	vstr	d1, [sp]
 800ab14:	da07      	bge.n	800ab26 <__kernel_cos+0x26>
 800ab16:	ee10 0a10 	vmov	r0, s0
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	f7f5 ffd2 	bl	8000ac4 <__aeabi_d2iz>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	f000 8088 	beq.w	800ac36 <__kernel_cos+0x136>
 800ab26:	4632      	mov	r2, r6
 800ab28:	463b      	mov	r3, r7
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	f7f5 fd19 	bl	8000564 <__aeabi_dmul>
 800ab32:	4b51      	ldr	r3, [pc, #324]	; (800ac78 <__kernel_cos+0x178>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	460d      	mov	r5, r1
 800ab3a:	f7f5 fd13 	bl	8000564 <__aeabi_dmul>
 800ab3e:	a340      	add	r3, pc, #256	; (adr r3, 800ac40 <__kernel_cos+0x140>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	4682      	mov	sl, r0
 800ab46:	468b      	mov	fp, r1
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 fd0a 	bl	8000564 <__aeabi_dmul>
 800ab50:	a33d      	add	r3, pc, #244	; (adr r3, 800ac48 <__kernel_cos+0x148>)
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	f7f5 fb4f 	bl	80001f8 <__adddf3>
 800ab5a:	4622      	mov	r2, r4
 800ab5c:	462b      	mov	r3, r5
 800ab5e:	f7f5 fd01 	bl	8000564 <__aeabi_dmul>
 800ab62:	a33b      	add	r3, pc, #236	; (adr r3, 800ac50 <__kernel_cos+0x150>)
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	f7f5 fb44 	bl	80001f4 <__aeabi_dsub>
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	462b      	mov	r3, r5
 800ab70:	f7f5 fcf8 	bl	8000564 <__aeabi_dmul>
 800ab74:	a338      	add	r3, pc, #224	; (adr r3, 800ac58 <__kernel_cos+0x158>)
 800ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7a:	f7f5 fb3d 	bl	80001f8 <__adddf3>
 800ab7e:	4622      	mov	r2, r4
 800ab80:	462b      	mov	r3, r5
 800ab82:	f7f5 fcef 	bl	8000564 <__aeabi_dmul>
 800ab86:	a336      	add	r3, pc, #216	; (adr r3, 800ac60 <__kernel_cos+0x160>)
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7f5 fb32 	bl	80001f4 <__aeabi_dsub>
 800ab90:	4622      	mov	r2, r4
 800ab92:	462b      	mov	r3, r5
 800ab94:	f7f5 fce6 	bl	8000564 <__aeabi_dmul>
 800ab98:	a333      	add	r3, pc, #204	; (adr r3, 800ac68 <__kernel_cos+0x168>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f7f5 fb2b 	bl	80001f8 <__adddf3>
 800aba2:	4622      	mov	r2, r4
 800aba4:	462b      	mov	r3, r5
 800aba6:	f7f5 fcdd 	bl	8000564 <__aeabi_dmul>
 800abaa:	4622      	mov	r2, r4
 800abac:	462b      	mov	r3, r5
 800abae:	f7f5 fcd9 	bl	8000564 <__aeabi_dmul>
 800abb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abb6:	4604      	mov	r4, r0
 800abb8:	460d      	mov	r5, r1
 800abba:	4630      	mov	r0, r6
 800abbc:	4639      	mov	r1, r7
 800abbe:	f7f5 fcd1 	bl	8000564 <__aeabi_dmul>
 800abc2:	460b      	mov	r3, r1
 800abc4:	4602      	mov	r2, r0
 800abc6:	4629      	mov	r1, r5
 800abc8:	4620      	mov	r0, r4
 800abca:	f7f5 fb13 	bl	80001f4 <__aeabi_dsub>
 800abce:	4b2b      	ldr	r3, [pc, #172]	; (800ac7c <__kernel_cos+0x17c>)
 800abd0:	4598      	cmp	r8, r3
 800abd2:	4606      	mov	r6, r0
 800abd4:	460f      	mov	r7, r1
 800abd6:	dc10      	bgt.n	800abfa <__kernel_cos+0xfa>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4650      	mov	r0, sl
 800abde:	4659      	mov	r1, fp
 800abe0:	f7f5 fb08 	bl	80001f4 <__aeabi_dsub>
 800abe4:	460b      	mov	r3, r1
 800abe6:	4926      	ldr	r1, [pc, #152]	; (800ac80 <__kernel_cos+0x180>)
 800abe8:	4602      	mov	r2, r0
 800abea:	2000      	movs	r0, #0
 800abec:	f7f5 fb02 	bl	80001f4 <__aeabi_dsub>
 800abf0:	ec41 0b10 	vmov	d0, r0, r1
 800abf4:	b003      	add	sp, #12
 800abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfa:	4b22      	ldr	r3, [pc, #136]	; (800ac84 <__kernel_cos+0x184>)
 800abfc:	4920      	ldr	r1, [pc, #128]	; (800ac80 <__kernel_cos+0x180>)
 800abfe:	4598      	cmp	r8, r3
 800ac00:	bfcc      	ite	gt
 800ac02:	4d21      	ldrgt	r5, [pc, #132]	; (800ac88 <__kernel_cos+0x188>)
 800ac04:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ac08:	2400      	movs	r4, #0
 800ac0a:	4622      	mov	r2, r4
 800ac0c:	462b      	mov	r3, r5
 800ac0e:	2000      	movs	r0, #0
 800ac10:	f7f5 faf0 	bl	80001f4 <__aeabi_dsub>
 800ac14:	4622      	mov	r2, r4
 800ac16:	4680      	mov	r8, r0
 800ac18:	4689      	mov	r9, r1
 800ac1a:	462b      	mov	r3, r5
 800ac1c:	4650      	mov	r0, sl
 800ac1e:	4659      	mov	r1, fp
 800ac20:	f7f5 fae8 	bl	80001f4 <__aeabi_dsub>
 800ac24:	4632      	mov	r2, r6
 800ac26:	463b      	mov	r3, r7
 800ac28:	f7f5 fae4 	bl	80001f4 <__aeabi_dsub>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4640      	mov	r0, r8
 800ac32:	4649      	mov	r1, r9
 800ac34:	e7da      	b.n	800abec <__kernel_cos+0xec>
 800ac36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ac70 <__kernel_cos+0x170>
 800ac3a:	e7db      	b.n	800abf4 <__kernel_cos+0xf4>
 800ac3c:	f3af 8000 	nop.w
 800ac40:	be8838d4 	.word	0xbe8838d4
 800ac44:	bda8fae9 	.word	0xbda8fae9
 800ac48:	bdb4b1c4 	.word	0xbdb4b1c4
 800ac4c:	3e21ee9e 	.word	0x3e21ee9e
 800ac50:	809c52ad 	.word	0x809c52ad
 800ac54:	3e927e4f 	.word	0x3e927e4f
 800ac58:	19cb1590 	.word	0x19cb1590
 800ac5c:	3efa01a0 	.word	0x3efa01a0
 800ac60:	16c15177 	.word	0x16c15177
 800ac64:	3f56c16c 	.word	0x3f56c16c
 800ac68:	5555554c 	.word	0x5555554c
 800ac6c:	3fa55555 	.word	0x3fa55555
 800ac70:	00000000 	.word	0x00000000
 800ac74:	3ff00000 	.word	0x3ff00000
 800ac78:	3fe00000 	.word	0x3fe00000
 800ac7c:	3fd33332 	.word	0x3fd33332
 800ac80:	3ff00000 	.word	0x3ff00000
 800ac84:	3fe90000 	.word	0x3fe90000
 800ac88:	3fd20000 	.word	0x3fd20000
 800ac8c:	00000000 	.word	0x00000000

0800ac90 <__kernel_rem_pio2>:
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac94:	ed2d 8b02 	vpush	{d8}
 800ac98:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ac9c:	f112 0f14 	cmn.w	r2, #20
 800aca0:	9308      	str	r3, [sp, #32]
 800aca2:	9101      	str	r1, [sp, #4]
 800aca4:	4bc4      	ldr	r3, [pc, #784]	; (800afb8 <__kernel_rem_pio2+0x328>)
 800aca6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800aca8:	900b      	str	r0, [sp, #44]	; 0x2c
 800acaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acae:	9302      	str	r3, [sp, #8]
 800acb0:	9b08      	ldr	r3, [sp, #32]
 800acb2:	f103 33ff 	add.w	r3, r3, #4294967295
 800acb6:	bfa8      	it	ge
 800acb8:	1ed4      	subge	r4, r2, #3
 800acba:	9306      	str	r3, [sp, #24]
 800acbc:	bfb2      	itee	lt
 800acbe:	2400      	movlt	r4, #0
 800acc0:	2318      	movge	r3, #24
 800acc2:	fb94 f4f3 	sdivge	r4, r4, r3
 800acc6:	f06f 0317 	mvn.w	r3, #23
 800acca:	fb04 3303 	mla	r3, r4, r3, r3
 800acce:	eb03 0a02 	add.w	sl, r3, r2
 800acd2:	9b02      	ldr	r3, [sp, #8]
 800acd4:	9a06      	ldr	r2, [sp, #24]
 800acd6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800afa8 <__kernel_rem_pio2+0x318>
 800acda:	eb03 0802 	add.w	r8, r3, r2
 800acde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ace0:	1aa7      	subs	r7, r4, r2
 800ace2:	ae22      	add	r6, sp, #136	; 0x88
 800ace4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ace8:	2500      	movs	r5, #0
 800acea:	4545      	cmp	r5, r8
 800acec:	dd13      	ble.n	800ad16 <__kernel_rem_pio2+0x86>
 800acee:	9b08      	ldr	r3, [sp, #32]
 800acf0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800afa8 <__kernel_rem_pio2+0x318>
 800acf4:	aa22      	add	r2, sp, #136	; 0x88
 800acf6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800acfa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800acfe:	f04f 0800 	mov.w	r8, #0
 800ad02:	9b02      	ldr	r3, [sp, #8]
 800ad04:	4598      	cmp	r8, r3
 800ad06:	dc2f      	bgt.n	800ad68 <__kernel_rem_pio2+0xd8>
 800ad08:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ad0c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ad10:	462f      	mov	r7, r5
 800ad12:	2600      	movs	r6, #0
 800ad14:	e01b      	b.n	800ad4e <__kernel_rem_pio2+0xbe>
 800ad16:	42ef      	cmn	r7, r5
 800ad18:	d407      	bmi.n	800ad2a <__kernel_rem_pio2+0x9a>
 800ad1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad1e:	f7f5 fbb7 	bl	8000490 <__aeabi_i2d>
 800ad22:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad26:	3501      	adds	r5, #1
 800ad28:	e7df      	b.n	800acea <__kernel_rem_pio2+0x5a>
 800ad2a:	ec51 0b18 	vmov	r0, r1, d8
 800ad2e:	e7f8      	b.n	800ad22 <__kernel_rem_pio2+0x92>
 800ad30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ad38:	f7f5 fc14 	bl	8000564 <__aeabi_dmul>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad44:	f7f5 fa58 	bl	80001f8 <__adddf3>
 800ad48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad4c:	3601      	adds	r6, #1
 800ad4e:	9b06      	ldr	r3, [sp, #24]
 800ad50:	429e      	cmp	r6, r3
 800ad52:	f1a7 0708 	sub.w	r7, r7, #8
 800ad56:	ddeb      	ble.n	800ad30 <__kernel_rem_pio2+0xa0>
 800ad58:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ad5c:	f108 0801 	add.w	r8, r8, #1
 800ad60:	ecab 7b02 	vstmia	fp!, {d7}
 800ad64:	3508      	adds	r5, #8
 800ad66:	e7cc      	b.n	800ad02 <__kernel_rem_pio2+0x72>
 800ad68:	9b02      	ldr	r3, [sp, #8]
 800ad6a:	aa0e      	add	r2, sp, #56	; 0x38
 800ad6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad70:	930d      	str	r3, [sp, #52]	; 0x34
 800ad72:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ad74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad78:	9c02      	ldr	r4, [sp, #8]
 800ad7a:	930c      	str	r3, [sp, #48]	; 0x30
 800ad7c:	00e3      	lsls	r3, r4, #3
 800ad7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad80:	ab9a      	add	r3, sp, #616	; 0x268
 800ad82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad86:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ad8a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ad8e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ad90:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ad94:	46c3      	mov	fp, r8
 800ad96:	46a1      	mov	r9, r4
 800ad98:	f1b9 0f00 	cmp.w	r9, #0
 800ad9c:	f1a5 0508 	sub.w	r5, r5, #8
 800ada0:	dc77      	bgt.n	800ae92 <__kernel_rem_pio2+0x202>
 800ada2:	ec47 6b10 	vmov	d0, r6, r7
 800ada6:	4650      	mov	r0, sl
 800ada8:	f000 fc0a 	bl	800b5c0 <scalbn>
 800adac:	ec57 6b10 	vmov	r6, r7, d0
 800adb0:	2200      	movs	r2, #0
 800adb2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800adb6:	ee10 0a10 	vmov	r0, s0
 800adba:	4639      	mov	r1, r7
 800adbc:	f7f5 fbd2 	bl	8000564 <__aeabi_dmul>
 800adc0:	ec41 0b10 	vmov	d0, r0, r1
 800adc4:	f000 fb74 	bl	800b4b0 <floor>
 800adc8:	4b7c      	ldr	r3, [pc, #496]	; (800afbc <__kernel_rem_pio2+0x32c>)
 800adca:	ec51 0b10 	vmov	r0, r1, d0
 800adce:	2200      	movs	r2, #0
 800add0:	f7f5 fbc8 	bl	8000564 <__aeabi_dmul>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4630      	mov	r0, r6
 800adda:	4639      	mov	r1, r7
 800addc:	f7f5 fa0a 	bl	80001f4 <__aeabi_dsub>
 800ade0:	460f      	mov	r7, r1
 800ade2:	4606      	mov	r6, r0
 800ade4:	f7f5 fe6e 	bl	8000ac4 <__aeabi_d2iz>
 800ade8:	9004      	str	r0, [sp, #16]
 800adea:	f7f5 fb51 	bl	8000490 <__aeabi_i2d>
 800adee:	4602      	mov	r2, r0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4630      	mov	r0, r6
 800adf4:	4639      	mov	r1, r7
 800adf6:	f7f5 f9fd 	bl	80001f4 <__aeabi_dsub>
 800adfa:	f1ba 0f00 	cmp.w	sl, #0
 800adfe:	4606      	mov	r6, r0
 800ae00:	460f      	mov	r7, r1
 800ae02:	dd6d      	ble.n	800aee0 <__kernel_rem_pio2+0x250>
 800ae04:	1e62      	subs	r2, r4, #1
 800ae06:	ab0e      	add	r3, sp, #56	; 0x38
 800ae08:	9d04      	ldr	r5, [sp, #16]
 800ae0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ae0e:	f1ca 0118 	rsb	r1, sl, #24
 800ae12:	fa40 f301 	asr.w	r3, r0, r1
 800ae16:	441d      	add	r5, r3
 800ae18:	408b      	lsls	r3, r1
 800ae1a:	1ac0      	subs	r0, r0, r3
 800ae1c:	ab0e      	add	r3, sp, #56	; 0x38
 800ae1e:	9504      	str	r5, [sp, #16]
 800ae20:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ae24:	f1ca 0317 	rsb	r3, sl, #23
 800ae28:	fa40 fb03 	asr.w	fp, r0, r3
 800ae2c:	f1bb 0f00 	cmp.w	fp, #0
 800ae30:	dd65      	ble.n	800aefe <__kernel_rem_pio2+0x26e>
 800ae32:	9b04      	ldr	r3, [sp, #16]
 800ae34:	2200      	movs	r2, #0
 800ae36:	3301      	adds	r3, #1
 800ae38:	9304      	str	r3, [sp, #16]
 800ae3a:	4615      	mov	r5, r2
 800ae3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ae40:	4294      	cmp	r4, r2
 800ae42:	f300 809c 	bgt.w	800af7e <__kernel_rem_pio2+0x2ee>
 800ae46:	f1ba 0f00 	cmp.w	sl, #0
 800ae4a:	dd07      	ble.n	800ae5c <__kernel_rem_pio2+0x1cc>
 800ae4c:	f1ba 0f01 	cmp.w	sl, #1
 800ae50:	f000 80c0 	beq.w	800afd4 <__kernel_rem_pio2+0x344>
 800ae54:	f1ba 0f02 	cmp.w	sl, #2
 800ae58:	f000 80c6 	beq.w	800afe8 <__kernel_rem_pio2+0x358>
 800ae5c:	f1bb 0f02 	cmp.w	fp, #2
 800ae60:	d14d      	bne.n	800aefe <__kernel_rem_pio2+0x26e>
 800ae62:	4632      	mov	r2, r6
 800ae64:	463b      	mov	r3, r7
 800ae66:	4956      	ldr	r1, [pc, #344]	; (800afc0 <__kernel_rem_pio2+0x330>)
 800ae68:	2000      	movs	r0, #0
 800ae6a:	f7f5 f9c3 	bl	80001f4 <__aeabi_dsub>
 800ae6e:	4606      	mov	r6, r0
 800ae70:	460f      	mov	r7, r1
 800ae72:	2d00      	cmp	r5, #0
 800ae74:	d043      	beq.n	800aefe <__kernel_rem_pio2+0x26e>
 800ae76:	4650      	mov	r0, sl
 800ae78:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800afb0 <__kernel_rem_pio2+0x320>
 800ae7c:	f000 fba0 	bl	800b5c0 <scalbn>
 800ae80:	4630      	mov	r0, r6
 800ae82:	4639      	mov	r1, r7
 800ae84:	ec53 2b10 	vmov	r2, r3, d0
 800ae88:	f7f5 f9b4 	bl	80001f4 <__aeabi_dsub>
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	460f      	mov	r7, r1
 800ae90:	e035      	b.n	800aefe <__kernel_rem_pio2+0x26e>
 800ae92:	4b4c      	ldr	r3, [pc, #304]	; (800afc4 <__kernel_rem_pio2+0x334>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	4630      	mov	r0, r6
 800ae98:	4639      	mov	r1, r7
 800ae9a:	f7f5 fb63 	bl	8000564 <__aeabi_dmul>
 800ae9e:	f7f5 fe11 	bl	8000ac4 <__aeabi_d2iz>
 800aea2:	f7f5 faf5 	bl	8000490 <__aeabi_i2d>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	ec43 2b18 	vmov	d8, r2, r3
 800aeae:	4b46      	ldr	r3, [pc, #280]	; (800afc8 <__kernel_rem_pio2+0x338>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f7f5 fb57 	bl	8000564 <__aeabi_dmul>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4630      	mov	r0, r6
 800aebc:	4639      	mov	r1, r7
 800aebe:	f7f5 f999 	bl	80001f4 <__aeabi_dsub>
 800aec2:	f7f5 fdff 	bl	8000ac4 <__aeabi_d2iz>
 800aec6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aeca:	f84b 0b04 	str.w	r0, [fp], #4
 800aece:	ec51 0b18 	vmov	r0, r1, d8
 800aed2:	f7f5 f991 	bl	80001f8 <__adddf3>
 800aed6:	f109 39ff 	add.w	r9, r9, #4294967295
 800aeda:	4606      	mov	r6, r0
 800aedc:	460f      	mov	r7, r1
 800aede:	e75b      	b.n	800ad98 <__kernel_rem_pio2+0x108>
 800aee0:	d106      	bne.n	800aef0 <__kernel_rem_pio2+0x260>
 800aee2:	1e63      	subs	r3, r4, #1
 800aee4:	aa0e      	add	r2, sp, #56	; 0x38
 800aee6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aeea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800aeee:	e79d      	b.n	800ae2c <__kernel_rem_pio2+0x19c>
 800aef0:	4b36      	ldr	r3, [pc, #216]	; (800afcc <__kernel_rem_pio2+0x33c>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	f7f5 fdbc 	bl	8000a70 <__aeabi_dcmpge>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d13d      	bne.n	800af78 <__kernel_rem_pio2+0x2e8>
 800aefc:	4683      	mov	fp, r0
 800aefe:	2200      	movs	r2, #0
 800af00:	2300      	movs	r3, #0
 800af02:	4630      	mov	r0, r6
 800af04:	4639      	mov	r1, r7
 800af06:	f7f5 fd95 	bl	8000a34 <__aeabi_dcmpeq>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	f000 80c0 	beq.w	800b090 <__kernel_rem_pio2+0x400>
 800af10:	1e65      	subs	r5, r4, #1
 800af12:	462b      	mov	r3, r5
 800af14:	2200      	movs	r2, #0
 800af16:	9902      	ldr	r1, [sp, #8]
 800af18:	428b      	cmp	r3, r1
 800af1a:	da6c      	bge.n	800aff6 <__kernel_rem_pio2+0x366>
 800af1c:	2a00      	cmp	r2, #0
 800af1e:	f000 8089 	beq.w	800b034 <__kernel_rem_pio2+0x3a4>
 800af22:	ab0e      	add	r3, sp, #56	; 0x38
 800af24:	f1aa 0a18 	sub.w	sl, sl, #24
 800af28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 80ad 	beq.w	800b08c <__kernel_rem_pio2+0x3fc>
 800af32:	4650      	mov	r0, sl
 800af34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800afb0 <__kernel_rem_pio2+0x320>
 800af38:	f000 fb42 	bl	800b5c0 <scalbn>
 800af3c:	ab9a      	add	r3, sp, #616	; 0x268
 800af3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800af42:	ec57 6b10 	vmov	r6, r7, d0
 800af46:	00ec      	lsls	r4, r5, #3
 800af48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800af4c:	46aa      	mov	sl, r5
 800af4e:	f1ba 0f00 	cmp.w	sl, #0
 800af52:	f280 80d6 	bge.w	800b102 <__kernel_rem_pio2+0x472>
 800af56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800afa8 <__kernel_rem_pio2+0x318>
 800af5a:	462e      	mov	r6, r5
 800af5c:	2e00      	cmp	r6, #0
 800af5e:	f2c0 8104 	blt.w	800b16a <__kernel_rem_pio2+0x4da>
 800af62:	ab72      	add	r3, sp, #456	; 0x1c8
 800af64:	ed8d 8b06 	vstr	d8, [sp, #24]
 800af68:	f8df a064 	ldr.w	sl, [pc, #100]	; 800afd0 <__kernel_rem_pio2+0x340>
 800af6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800af70:	f04f 0800 	mov.w	r8, #0
 800af74:	1baf      	subs	r7, r5, r6
 800af76:	e0ea      	b.n	800b14e <__kernel_rem_pio2+0x4be>
 800af78:	f04f 0b02 	mov.w	fp, #2
 800af7c:	e759      	b.n	800ae32 <__kernel_rem_pio2+0x1a2>
 800af7e:	f8d8 3000 	ldr.w	r3, [r8]
 800af82:	b955      	cbnz	r5, 800af9a <__kernel_rem_pio2+0x30a>
 800af84:	b123      	cbz	r3, 800af90 <__kernel_rem_pio2+0x300>
 800af86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800af8a:	f8c8 3000 	str.w	r3, [r8]
 800af8e:	2301      	movs	r3, #1
 800af90:	3201      	adds	r2, #1
 800af92:	f108 0804 	add.w	r8, r8, #4
 800af96:	461d      	mov	r5, r3
 800af98:	e752      	b.n	800ae40 <__kernel_rem_pio2+0x1b0>
 800af9a:	1acb      	subs	r3, r1, r3
 800af9c:	f8c8 3000 	str.w	r3, [r8]
 800afa0:	462b      	mov	r3, r5
 800afa2:	e7f5      	b.n	800af90 <__kernel_rem_pio2+0x300>
 800afa4:	f3af 8000 	nop.w
	...
 800afb4:	3ff00000 	.word	0x3ff00000
 800afb8:	0800b950 	.word	0x0800b950
 800afbc:	40200000 	.word	0x40200000
 800afc0:	3ff00000 	.word	0x3ff00000
 800afc4:	3e700000 	.word	0x3e700000
 800afc8:	41700000 	.word	0x41700000
 800afcc:	3fe00000 	.word	0x3fe00000
 800afd0:	0800b910 	.word	0x0800b910
 800afd4:	1e62      	subs	r2, r4, #1
 800afd6:	ab0e      	add	r3, sp, #56	; 0x38
 800afd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afdc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800afe0:	a90e      	add	r1, sp, #56	; 0x38
 800afe2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800afe6:	e739      	b.n	800ae5c <__kernel_rem_pio2+0x1cc>
 800afe8:	1e62      	subs	r2, r4, #1
 800afea:	ab0e      	add	r3, sp, #56	; 0x38
 800afec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aff4:	e7f4      	b.n	800afe0 <__kernel_rem_pio2+0x350>
 800aff6:	a90e      	add	r1, sp, #56	; 0x38
 800aff8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800affc:	3b01      	subs	r3, #1
 800affe:	430a      	orrs	r2, r1
 800b000:	e789      	b.n	800af16 <__kernel_rem_pio2+0x286>
 800b002:	3301      	adds	r3, #1
 800b004:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b008:	2900      	cmp	r1, #0
 800b00a:	d0fa      	beq.n	800b002 <__kernel_rem_pio2+0x372>
 800b00c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b00e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b012:	446a      	add	r2, sp
 800b014:	3a98      	subs	r2, #152	; 0x98
 800b016:	920a      	str	r2, [sp, #40]	; 0x28
 800b018:	9a08      	ldr	r2, [sp, #32]
 800b01a:	18e3      	adds	r3, r4, r3
 800b01c:	18a5      	adds	r5, r4, r2
 800b01e:	aa22      	add	r2, sp, #136	; 0x88
 800b020:	f104 0801 	add.w	r8, r4, #1
 800b024:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b028:	9304      	str	r3, [sp, #16]
 800b02a:	9b04      	ldr	r3, [sp, #16]
 800b02c:	4543      	cmp	r3, r8
 800b02e:	da04      	bge.n	800b03a <__kernel_rem_pio2+0x3aa>
 800b030:	461c      	mov	r4, r3
 800b032:	e6a3      	b.n	800ad7c <__kernel_rem_pio2+0xec>
 800b034:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b036:	2301      	movs	r3, #1
 800b038:	e7e4      	b.n	800b004 <__kernel_rem_pio2+0x374>
 800b03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b03c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b040:	f7f5 fa26 	bl	8000490 <__aeabi_i2d>
 800b044:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b04a:	46ab      	mov	fp, r5
 800b04c:	461c      	mov	r4, r3
 800b04e:	f04f 0900 	mov.w	r9, #0
 800b052:	2600      	movs	r6, #0
 800b054:	2700      	movs	r7, #0
 800b056:	9b06      	ldr	r3, [sp, #24]
 800b058:	4599      	cmp	r9, r3
 800b05a:	dd06      	ble.n	800b06a <__kernel_rem_pio2+0x3da>
 800b05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b05e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b062:	f108 0801 	add.w	r8, r8, #1
 800b066:	930a      	str	r3, [sp, #40]	; 0x28
 800b068:	e7df      	b.n	800b02a <__kernel_rem_pio2+0x39a>
 800b06a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b06e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b072:	f7f5 fa77 	bl	8000564 <__aeabi_dmul>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4630      	mov	r0, r6
 800b07c:	4639      	mov	r1, r7
 800b07e:	f7f5 f8bb 	bl	80001f8 <__adddf3>
 800b082:	f109 0901 	add.w	r9, r9, #1
 800b086:	4606      	mov	r6, r0
 800b088:	460f      	mov	r7, r1
 800b08a:	e7e4      	b.n	800b056 <__kernel_rem_pio2+0x3c6>
 800b08c:	3d01      	subs	r5, #1
 800b08e:	e748      	b.n	800af22 <__kernel_rem_pio2+0x292>
 800b090:	ec47 6b10 	vmov	d0, r6, r7
 800b094:	f1ca 0000 	rsb	r0, sl, #0
 800b098:	f000 fa92 	bl	800b5c0 <scalbn>
 800b09c:	ec57 6b10 	vmov	r6, r7, d0
 800b0a0:	4ba0      	ldr	r3, [pc, #640]	; (800b324 <__kernel_rem_pio2+0x694>)
 800b0a2:	ee10 0a10 	vmov	r0, s0
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	f7f5 fce1 	bl	8000a70 <__aeabi_dcmpge>
 800b0ae:	b1f8      	cbz	r0, 800b0f0 <__kernel_rem_pio2+0x460>
 800b0b0:	4b9d      	ldr	r3, [pc, #628]	; (800b328 <__kernel_rem_pio2+0x698>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	f7f5 fa54 	bl	8000564 <__aeabi_dmul>
 800b0bc:	f7f5 fd02 	bl	8000ac4 <__aeabi_d2iz>
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	f7f5 f9e5 	bl	8000490 <__aeabi_i2d>
 800b0c6:	4b97      	ldr	r3, [pc, #604]	; (800b324 <__kernel_rem_pio2+0x694>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f7f5 fa4b 	bl	8000564 <__aeabi_dmul>
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	4639      	mov	r1, r7
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7f5 f88d 	bl	80001f4 <__aeabi_dsub>
 800b0da:	f7f5 fcf3 	bl	8000ac4 <__aeabi_d2iz>
 800b0de:	1c65      	adds	r5, r4, #1
 800b0e0:	ab0e      	add	r3, sp, #56	; 0x38
 800b0e2:	f10a 0a18 	add.w	sl, sl, #24
 800b0e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b0ea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b0ee:	e720      	b.n	800af32 <__kernel_rem_pio2+0x2a2>
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	f7f5 fce6 	bl	8000ac4 <__aeabi_d2iz>
 800b0f8:	ab0e      	add	r3, sp, #56	; 0x38
 800b0fa:	4625      	mov	r5, r4
 800b0fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b100:	e717      	b.n	800af32 <__kernel_rem_pio2+0x2a2>
 800b102:	ab0e      	add	r3, sp, #56	; 0x38
 800b104:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b108:	f7f5 f9c2 	bl	8000490 <__aeabi_i2d>
 800b10c:	4632      	mov	r2, r6
 800b10e:	463b      	mov	r3, r7
 800b110:	f7f5 fa28 	bl	8000564 <__aeabi_dmul>
 800b114:	4b84      	ldr	r3, [pc, #528]	; (800b328 <__kernel_rem_pio2+0x698>)
 800b116:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b11a:	2200      	movs	r2, #0
 800b11c:	4630      	mov	r0, r6
 800b11e:	4639      	mov	r1, r7
 800b120:	f7f5 fa20 	bl	8000564 <__aeabi_dmul>
 800b124:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b128:	4606      	mov	r6, r0
 800b12a:	460f      	mov	r7, r1
 800b12c:	e70f      	b.n	800af4e <__kernel_rem_pio2+0x2be>
 800b12e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b132:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b136:	f7f5 fa15 	bl	8000564 <__aeabi_dmul>
 800b13a:	4602      	mov	r2, r0
 800b13c:	460b      	mov	r3, r1
 800b13e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b142:	f7f5 f859 	bl	80001f8 <__adddf3>
 800b146:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b14a:	f108 0801 	add.w	r8, r8, #1
 800b14e:	9b02      	ldr	r3, [sp, #8]
 800b150:	4598      	cmp	r8, r3
 800b152:	dc01      	bgt.n	800b158 <__kernel_rem_pio2+0x4c8>
 800b154:	45b8      	cmp	r8, r7
 800b156:	ddea      	ble.n	800b12e <__kernel_rem_pio2+0x49e>
 800b158:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b15c:	ab4a      	add	r3, sp, #296	; 0x128
 800b15e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b162:	ed87 7b00 	vstr	d7, [r7]
 800b166:	3e01      	subs	r6, #1
 800b168:	e6f8      	b.n	800af5c <__kernel_rem_pio2+0x2cc>
 800b16a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	dc0b      	bgt.n	800b188 <__kernel_rem_pio2+0x4f8>
 800b170:	2b00      	cmp	r3, #0
 800b172:	dc35      	bgt.n	800b1e0 <__kernel_rem_pio2+0x550>
 800b174:	d059      	beq.n	800b22a <__kernel_rem_pio2+0x59a>
 800b176:	9b04      	ldr	r3, [sp, #16]
 800b178:	f003 0007 	and.w	r0, r3, #7
 800b17c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b180:	ecbd 8b02 	vpop	{d8}
 800b184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b188:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d1f3      	bne.n	800b176 <__kernel_rem_pio2+0x4e6>
 800b18e:	ab4a      	add	r3, sp, #296	; 0x128
 800b190:	4423      	add	r3, r4
 800b192:	9306      	str	r3, [sp, #24]
 800b194:	461c      	mov	r4, r3
 800b196:	469a      	mov	sl, r3
 800b198:	9502      	str	r5, [sp, #8]
 800b19a:	9b02      	ldr	r3, [sp, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b1a2:	dc6b      	bgt.n	800b27c <__kernel_rem_pio2+0x5ec>
 800b1a4:	46aa      	mov	sl, r5
 800b1a6:	f1ba 0f01 	cmp.w	sl, #1
 800b1aa:	f1a4 0408 	sub.w	r4, r4, #8
 800b1ae:	f300 8085 	bgt.w	800b2bc <__kernel_rem_pio2+0x62c>
 800b1b2:	9c06      	ldr	r4, [sp, #24]
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	3408      	adds	r4, #8
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	2d01      	cmp	r5, #1
 800b1bc:	f300 809d 	bgt.w	800b2fa <__kernel_rem_pio2+0x66a>
 800b1c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b1c4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b1c8:	f1bb 0f00 	cmp.w	fp, #0
 800b1cc:	f040 809b 	bne.w	800b306 <__kernel_rem_pio2+0x676>
 800b1d0:	9b01      	ldr	r3, [sp, #4]
 800b1d2:	e9c3 5600 	strd	r5, r6, [r3]
 800b1d6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b1da:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b1de:	e7ca      	b.n	800b176 <__kernel_rem_pio2+0x4e6>
 800b1e0:	3408      	adds	r4, #8
 800b1e2:	ab4a      	add	r3, sp, #296	; 0x128
 800b1e4:	441c      	add	r4, r3
 800b1e6:	462e      	mov	r6, r5
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	2e00      	cmp	r6, #0
 800b1ee:	da36      	bge.n	800b25e <__kernel_rem_pio2+0x5ce>
 800b1f0:	f1bb 0f00 	cmp.w	fp, #0
 800b1f4:	d039      	beq.n	800b26a <__kernel_rem_pio2+0x5da>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1fc:	9c01      	ldr	r4, [sp, #4]
 800b1fe:	e9c4 2300 	strd	r2, r3, [r4]
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b20a:	f7f4 fff3 	bl	80001f4 <__aeabi_dsub>
 800b20e:	ae4c      	add	r6, sp, #304	; 0x130
 800b210:	2401      	movs	r4, #1
 800b212:	42a5      	cmp	r5, r4
 800b214:	da2c      	bge.n	800b270 <__kernel_rem_pio2+0x5e0>
 800b216:	f1bb 0f00 	cmp.w	fp, #0
 800b21a:	d002      	beq.n	800b222 <__kernel_rem_pio2+0x592>
 800b21c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b220:	4619      	mov	r1, r3
 800b222:	9b01      	ldr	r3, [sp, #4]
 800b224:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b228:	e7a5      	b.n	800b176 <__kernel_rem_pio2+0x4e6>
 800b22a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b22e:	eb0d 0403 	add.w	r4, sp, r3
 800b232:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b236:	2000      	movs	r0, #0
 800b238:	2100      	movs	r1, #0
 800b23a:	2d00      	cmp	r5, #0
 800b23c:	da09      	bge.n	800b252 <__kernel_rem_pio2+0x5c2>
 800b23e:	f1bb 0f00 	cmp.w	fp, #0
 800b242:	d002      	beq.n	800b24a <__kernel_rem_pio2+0x5ba>
 800b244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b248:	4619      	mov	r1, r3
 800b24a:	9b01      	ldr	r3, [sp, #4]
 800b24c:	e9c3 0100 	strd	r0, r1, [r3]
 800b250:	e791      	b.n	800b176 <__kernel_rem_pio2+0x4e6>
 800b252:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b256:	f7f4 ffcf 	bl	80001f8 <__adddf3>
 800b25a:	3d01      	subs	r5, #1
 800b25c:	e7ed      	b.n	800b23a <__kernel_rem_pio2+0x5aa>
 800b25e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b262:	f7f4 ffc9 	bl	80001f8 <__adddf3>
 800b266:	3e01      	subs	r6, #1
 800b268:	e7c0      	b.n	800b1ec <__kernel_rem_pio2+0x55c>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	e7c5      	b.n	800b1fc <__kernel_rem_pio2+0x56c>
 800b270:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b274:	f7f4 ffc0 	bl	80001f8 <__adddf3>
 800b278:	3401      	adds	r4, #1
 800b27a:	e7ca      	b.n	800b212 <__kernel_rem_pio2+0x582>
 800b27c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b280:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b284:	9b02      	ldr	r3, [sp, #8]
 800b286:	3b01      	subs	r3, #1
 800b288:	9302      	str	r3, [sp, #8]
 800b28a:	4632      	mov	r2, r6
 800b28c:	463b      	mov	r3, r7
 800b28e:	4640      	mov	r0, r8
 800b290:	4649      	mov	r1, r9
 800b292:	f7f4 ffb1 	bl	80001f8 <__adddf3>
 800b296:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4640      	mov	r0, r8
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	f7f4 ffa7 	bl	80001f4 <__aeabi_dsub>
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	f7f4 ffa5 	bl	80001f8 <__adddf3>
 800b2ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b2b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b2b6:	ed8a 7b00 	vstr	d7, [sl]
 800b2ba:	e76e      	b.n	800b19a <__kernel_rem_pio2+0x50a>
 800b2bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b2c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	4632      	mov	r2, r6
 800b2c8:	463b      	mov	r3, r7
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	f7f4 ff94 	bl	80001f8 <__adddf3>
 800b2d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4640      	mov	r0, r8
 800b2da:	4649      	mov	r1, r9
 800b2dc:	f7f4 ff8a 	bl	80001f4 <__aeabi_dsub>
 800b2e0:	4632      	mov	r2, r6
 800b2e2:	463b      	mov	r3, r7
 800b2e4:	f7f4 ff88 	bl	80001f8 <__adddf3>
 800b2e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2f0:	ed84 7b00 	vstr	d7, [r4]
 800b2f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2f8:	e755      	b.n	800b1a6 <__kernel_rem_pio2+0x516>
 800b2fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2fe:	f7f4 ff7b 	bl	80001f8 <__adddf3>
 800b302:	3d01      	subs	r5, #1
 800b304:	e759      	b.n	800b1ba <__kernel_rem_pio2+0x52a>
 800b306:	9b01      	ldr	r3, [sp, #4]
 800b308:	9a01      	ldr	r2, [sp, #4]
 800b30a:	601d      	str	r5, [r3, #0]
 800b30c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b310:	605c      	str	r4, [r3, #4]
 800b312:	609f      	str	r7, [r3, #8]
 800b314:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b318:	60d3      	str	r3, [r2, #12]
 800b31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b31e:	6110      	str	r0, [r2, #16]
 800b320:	6153      	str	r3, [r2, #20]
 800b322:	e728      	b.n	800b176 <__kernel_rem_pio2+0x4e6>
 800b324:	41700000 	.word	0x41700000
 800b328:	3e700000 	.word	0x3e700000
 800b32c:	00000000 	.word	0x00000000

0800b330 <__kernel_sin>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	ed2d 8b04 	vpush	{d8-d9}
 800b338:	eeb0 8a41 	vmov.f32	s16, s2
 800b33c:	eef0 8a61 	vmov.f32	s17, s3
 800b340:	ec55 4b10 	vmov	r4, r5, d0
 800b344:	b083      	sub	sp, #12
 800b346:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b34a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b34e:	9001      	str	r0, [sp, #4]
 800b350:	da06      	bge.n	800b360 <__kernel_sin+0x30>
 800b352:	ee10 0a10 	vmov	r0, s0
 800b356:	4629      	mov	r1, r5
 800b358:	f7f5 fbb4 	bl	8000ac4 <__aeabi_d2iz>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d051      	beq.n	800b404 <__kernel_sin+0xd4>
 800b360:	4622      	mov	r2, r4
 800b362:	462b      	mov	r3, r5
 800b364:	4620      	mov	r0, r4
 800b366:	4629      	mov	r1, r5
 800b368:	f7f5 f8fc 	bl	8000564 <__aeabi_dmul>
 800b36c:	4682      	mov	sl, r0
 800b36e:	468b      	mov	fp, r1
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4620      	mov	r0, r4
 800b376:	4629      	mov	r1, r5
 800b378:	f7f5 f8f4 	bl	8000564 <__aeabi_dmul>
 800b37c:	a341      	add	r3, pc, #260	; (adr r3, 800b484 <__kernel_sin+0x154>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	4680      	mov	r8, r0
 800b384:	4689      	mov	r9, r1
 800b386:	4650      	mov	r0, sl
 800b388:	4659      	mov	r1, fp
 800b38a:	f7f5 f8eb 	bl	8000564 <__aeabi_dmul>
 800b38e:	a33f      	add	r3, pc, #252	; (adr r3, 800b48c <__kernel_sin+0x15c>)
 800b390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b394:	f7f4 ff2e 	bl	80001f4 <__aeabi_dsub>
 800b398:	4652      	mov	r2, sl
 800b39a:	465b      	mov	r3, fp
 800b39c:	f7f5 f8e2 	bl	8000564 <__aeabi_dmul>
 800b3a0:	a33c      	add	r3, pc, #240	; (adr r3, 800b494 <__kernel_sin+0x164>)
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	f7f4 ff27 	bl	80001f8 <__adddf3>
 800b3aa:	4652      	mov	r2, sl
 800b3ac:	465b      	mov	r3, fp
 800b3ae:	f7f5 f8d9 	bl	8000564 <__aeabi_dmul>
 800b3b2:	a33a      	add	r3, pc, #232	; (adr r3, 800b49c <__kernel_sin+0x16c>)
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	f7f4 ff1c 	bl	80001f4 <__aeabi_dsub>
 800b3bc:	4652      	mov	r2, sl
 800b3be:	465b      	mov	r3, fp
 800b3c0:	f7f5 f8d0 	bl	8000564 <__aeabi_dmul>
 800b3c4:	a337      	add	r3, pc, #220	; (adr r3, 800b4a4 <__kernel_sin+0x174>)
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	f7f4 ff15 	bl	80001f8 <__adddf3>
 800b3ce:	9b01      	ldr	r3, [sp, #4]
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	460f      	mov	r7, r1
 800b3d4:	b9eb      	cbnz	r3, 800b412 <__kernel_sin+0xe2>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	4650      	mov	r0, sl
 800b3dc:	4659      	mov	r1, fp
 800b3de:	f7f5 f8c1 	bl	8000564 <__aeabi_dmul>
 800b3e2:	a325      	add	r3, pc, #148	; (adr r3, 800b478 <__kernel_sin+0x148>)
 800b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e8:	f7f4 ff04 	bl	80001f4 <__aeabi_dsub>
 800b3ec:	4642      	mov	r2, r8
 800b3ee:	464b      	mov	r3, r9
 800b3f0:	f7f5 f8b8 	bl	8000564 <__aeabi_dmul>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	f7f4 fefc 	bl	80001f8 <__adddf3>
 800b400:	4604      	mov	r4, r0
 800b402:	460d      	mov	r5, r1
 800b404:	ec45 4b10 	vmov	d0, r4, r5
 800b408:	b003      	add	sp, #12
 800b40a:	ecbd 8b04 	vpop	{d8-d9}
 800b40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b412:	4b1b      	ldr	r3, [pc, #108]	; (800b480 <__kernel_sin+0x150>)
 800b414:	ec51 0b18 	vmov	r0, r1, d8
 800b418:	2200      	movs	r2, #0
 800b41a:	f7f5 f8a3 	bl	8000564 <__aeabi_dmul>
 800b41e:	4632      	mov	r2, r6
 800b420:	ec41 0b19 	vmov	d9, r0, r1
 800b424:	463b      	mov	r3, r7
 800b426:	4640      	mov	r0, r8
 800b428:	4649      	mov	r1, r9
 800b42a:	f7f5 f89b 	bl	8000564 <__aeabi_dmul>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	ec51 0b19 	vmov	r0, r1, d9
 800b436:	f7f4 fedd 	bl	80001f4 <__aeabi_dsub>
 800b43a:	4652      	mov	r2, sl
 800b43c:	465b      	mov	r3, fp
 800b43e:	f7f5 f891 	bl	8000564 <__aeabi_dmul>
 800b442:	ec53 2b18 	vmov	r2, r3, d8
 800b446:	f7f4 fed5 	bl	80001f4 <__aeabi_dsub>
 800b44a:	a30b      	add	r3, pc, #44	; (adr r3, 800b478 <__kernel_sin+0x148>)
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	4606      	mov	r6, r0
 800b452:	460f      	mov	r7, r1
 800b454:	4640      	mov	r0, r8
 800b456:	4649      	mov	r1, r9
 800b458:	f7f5 f884 	bl	8000564 <__aeabi_dmul>
 800b45c:	4602      	mov	r2, r0
 800b45e:	460b      	mov	r3, r1
 800b460:	4630      	mov	r0, r6
 800b462:	4639      	mov	r1, r7
 800b464:	f7f4 fec8 	bl	80001f8 <__adddf3>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	4620      	mov	r0, r4
 800b46e:	4629      	mov	r1, r5
 800b470:	f7f4 fec0 	bl	80001f4 <__aeabi_dsub>
 800b474:	e7c4      	b.n	800b400 <__kernel_sin+0xd0>
 800b476:	bf00      	nop
 800b478:	55555549 	.word	0x55555549
 800b47c:	3fc55555 	.word	0x3fc55555
 800b480:	3fe00000 	.word	0x3fe00000
 800b484:	5acfd57c 	.word	0x5acfd57c
 800b488:	3de5d93a 	.word	0x3de5d93a
 800b48c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b490:	3e5ae5e6 	.word	0x3e5ae5e6
 800b494:	57b1fe7d 	.word	0x57b1fe7d
 800b498:	3ec71de3 	.word	0x3ec71de3
 800b49c:	19c161d5 	.word	0x19c161d5
 800b4a0:	3f2a01a0 	.word	0x3f2a01a0
 800b4a4:	1110f8a6 	.word	0x1110f8a6
 800b4a8:	3f811111 	.word	0x3f811111
 800b4ac:	00000000 	.word	0x00000000

0800b4b0 <floor>:
 800b4b0:	ec51 0b10 	vmov	r0, r1, d0
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b4bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b4c0:	2e13      	cmp	r6, #19
 800b4c2:	ee10 5a10 	vmov	r5, s0
 800b4c6:	ee10 8a10 	vmov	r8, s0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	dc32      	bgt.n	800b534 <floor+0x84>
 800b4ce:	2e00      	cmp	r6, #0
 800b4d0:	da14      	bge.n	800b4fc <floor+0x4c>
 800b4d2:	a333      	add	r3, pc, #204	; (adr r3, 800b5a0 <floor+0xf0>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	f7f4 fe8e 	bl	80001f8 <__adddf3>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2300      	movs	r3, #0
 800b4e0:	f7f5 fad0 	bl	8000a84 <__aeabi_dcmpgt>
 800b4e4:	b138      	cbz	r0, 800b4f6 <floor+0x46>
 800b4e6:	2c00      	cmp	r4, #0
 800b4e8:	da57      	bge.n	800b59a <floor+0xea>
 800b4ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b4ee:	431d      	orrs	r5, r3
 800b4f0:	d001      	beq.n	800b4f6 <floor+0x46>
 800b4f2:	4c2d      	ldr	r4, [pc, #180]	; (800b5a8 <floor+0xf8>)
 800b4f4:	2500      	movs	r5, #0
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	e025      	b.n	800b548 <floor+0x98>
 800b4fc:	4f2b      	ldr	r7, [pc, #172]	; (800b5ac <floor+0xfc>)
 800b4fe:	4137      	asrs	r7, r6
 800b500:	ea01 0307 	and.w	r3, r1, r7
 800b504:	4303      	orrs	r3, r0
 800b506:	d01f      	beq.n	800b548 <floor+0x98>
 800b508:	a325      	add	r3, pc, #148	; (adr r3, 800b5a0 <floor+0xf0>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f4 fe73 	bl	80001f8 <__adddf3>
 800b512:	2200      	movs	r2, #0
 800b514:	2300      	movs	r3, #0
 800b516:	f7f5 fab5 	bl	8000a84 <__aeabi_dcmpgt>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d0eb      	beq.n	800b4f6 <floor+0x46>
 800b51e:	2c00      	cmp	r4, #0
 800b520:	bfbe      	ittt	lt
 800b522:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b526:	fa43 f606 	asrlt.w	r6, r3, r6
 800b52a:	19a4      	addlt	r4, r4, r6
 800b52c:	ea24 0407 	bic.w	r4, r4, r7
 800b530:	2500      	movs	r5, #0
 800b532:	e7e0      	b.n	800b4f6 <floor+0x46>
 800b534:	2e33      	cmp	r6, #51	; 0x33
 800b536:	dd0b      	ble.n	800b550 <floor+0xa0>
 800b538:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b53c:	d104      	bne.n	800b548 <floor+0x98>
 800b53e:	ee10 2a10 	vmov	r2, s0
 800b542:	460b      	mov	r3, r1
 800b544:	f7f4 fe58 	bl	80001f8 <__adddf3>
 800b548:	ec41 0b10 	vmov	d0, r0, r1
 800b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b550:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b554:	f04f 33ff 	mov.w	r3, #4294967295
 800b558:	fa23 f707 	lsr.w	r7, r3, r7
 800b55c:	4207      	tst	r7, r0
 800b55e:	d0f3      	beq.n	800b548 <floor+0x98>
 800b560:	a30f      	add	r3, pc, #60	; (adr r3, 800b5a0 <floor+0xf0>)
 800b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b566:	f7f4 fe47 	bl	80001f8 <__adddf3>
 800b56a:	2200      	movs	r2, #0
 800b56c:	2300      	movs	r3, #0
 800b56e:	f7f5 fa89 	bl	8000a84 <__aeabi_dcmpgt>
 800b572:	2800      	cmp	r0, #0
 800b574:	d0bf      	beq.n	800b4f6 <floor+0x46>
 800b576:	2c00      	cmp	r4, #0
 800b578:	da02      	bge.n	800b580 <floor+0xd0>
 800b57a:	2e14      	cmp	r6, #20
 800b57c:	d103      	bne.n	800b586 <floor+0xd6>
 800b57e:	3401      	adds	r4, #1
 800b580:	ea25 0507 	bic.w	r5, r5, r7
 800b584:	e7b7      	b.n	800b4f6 <floor+0x46>
 800b586:	2301      	movs	r3, #1
 800b588:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b58c:	fa03 f606 	lsl.w	r6, r3, r6
 800b590:	4435      	add	r5, r6
 800b592:	4545      	cmp	r5, r8
 800b594:	bf38      	it	cc
 800b596:	18e4      	addcc	r4, r4, r3
 800b598:	e7f2      	b.n	800b580 <floor+0xd0>
 800b59a:	2500      	movs	r5, #0
 800b59c:	462c      	mov	r4, r5
 800b59e:	e7aa      	b.n	800b4f6 <floor+0x46>
 800b5a0:	8800759c 	.word	0x8800759c
 800b5a4:	7e37e43c 	.word	0x7e37e43c
 800b5a8:	bff00000 	.word	0xbff00000
 800b5ac:	000fffff 	.word	0x000fffff

0800b5b0 <nan>:
 800b5b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5b8 <nan+0x8>
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	00000000 	.word	0x00000000
 800b5bc:	7ff80000 	.word	0x7ff80000

0800b5c0 <scalbn>:
 800b5c0:	b570      	push	{r4, r5, r6, lr}
 800b5c2:	ec55 4b10 	vmov	r4, r5, d0
 800b5c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b5ca:	4606      	mov	r6, r0
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	b99a      	cbnz	r2, 800b5f8 <scalbn+0x38>
 800b5d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b5d4:	4323      	orrs	r3, r4
 800b5d6:	d036      	beq.n	800b646 <scalbn+0x86>
 800b5d8:	4b39      	ldr	r3, [pc, #228]	; (800b6c0 <scalbn+0x100>)
 800b5da:	4629      	mov	r1, r5
 800b5dc:	ee10 0a10 	vmov	r0, s0
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f7f4 ffbf 	bl	8000564 <__aeabi_dmul>
 800b5e6:	4b37      	ldr	r3, [pc, #220]	; (800b6c4 <scalbn+0x104>)
 800b5e8:	429e      	cmp	r6, r3
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	460d      	mov	r5, r1
 800b5ee:	da10      	bge.n	800b612 <scalbn+0x52>
 800b5f0:	a32b      	add	r3, pc, #172	; (adr r3, 800b6a0 <scalbn+0xe0>)
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	e03a      	b.n	800b66e <scalbn+0xae>
 800b5f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b5fc:	428a      	cmp	r2, r1
 800b5fe:	d10c      	bne.n	800b61a <scalbn+0x5a>
 800b600:	ee10 2a10 	vmov	r2, s0
 800b604:	4620      	mov	r0, r4
 800b606:	4629      	mov	r1, r5
 800b608:	f7f4 fdf6 	bl	80001f8 <__adddf3>
 800b60c:	4604      	mov	r4, r0
 800b60e:	460d      	mov	r5, r1
 800b610:	e019      	b.n	800b646 <scalbn+0x86>
 800b612:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b616:	460b      	mov	r3, r1
 800b618:	3a36      	subs	r2, #54	; 0x36
 800b61a:	4432      	add	r2, r6
 800b61c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b620:	428a      	cmp	r2, r1
 800b622:	dd08      	ble.n	800b636 <scalbn+0x76>
 800b624:	2d00      	cmp	r5, #0
 800b626:	a120      	add	r1, pc, #128	; (adr r1, 800b6a8 <scalbn+0xe8>)
 800b628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b62c:	da1c      	bge.n	800b668 <scalbn+0xa8>
 800b62e:	a120      	add	r1, pc, #128	; (adr r1, 800b6b0 <scalbn+0xf0>)
 800b630:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b634:	e018      	b.n	800b668 <scalbn+0xa8>
 800b636:	2a00      	cmp	r2, #0
 800b638:	dd08      	ble.n	800b64c <scalbn+0x8c>
 800b63a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b63e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b642:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b646:	ec45 4b10 	vmov	d0, r4, r5
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b650:	da19      	bge.n	800b686 <scalbn+0xc6>
 800b652:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b656:	429e      	cmp	r6, r3
 800b658:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b65c:	dd0a      	ble.n	800b674 <scalbn+0xb4>
 800b65e:	a112      	add	r1, pc, #72	; (adr r1, 800b6a8 <scalbn+0xe8>)
 800b660:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1e2      	bne.n	800b62e <scalbn+0x6e>
 800b668:	a30f      	add	r3, pc, #60	; (adr r3, 800b6a8 <scalbn+0xe8>)
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	f7f4 ff79 	bl	8000564 <__aeabi_dmul>
 800b672:	e7cb      	b.n	800b60c <scalbn+0x4c>
 800b674:	a10a      	add	r1, pc, #40	; (adr r1, 800b6a0 <scalbn+0xe0>)
 800b676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d0b8      	beq.n	800b5f0 <scalbn+0x30>
 800b67e:	a10e      	add	r1, pc, #56	; (adr r1, 800b6b8 <scalbn+0xf8>)
 800b680:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b684:	e7b4      	b.n	800b5f0 <scalbn+0x30>
 800b686:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b68a:	3236      	adds	r2, #54	; 0x36
 800b68c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b690:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b694:	4620      	mov	r0, r4
 800b696:	4b0c      	ldr	r3, [pc, #48]	; (800b6c8 <scalbn+0x108>)
 800b698:	2200      	movs	r2, #0
 800b69a:	e7e8      	b.n	800b66e <scalbn+0xae>
 800b69c:	f3af 8000 	nop.w
 800b6a0:	c2f8f359 	.word	0xc2f8f359
 800b6a4:	01a56e1f 	.word	0x01a56e1f
 800b6a8:	8800759c 	.word	0x8800759c
 800b6ac:	7e37e43c 	.word	0x7e37e43c
 800b6b0:	8800759c 	.word	0x8800759c
 800b6b4:	fe37e43c 	.word	0xfe37e43c
 800b6b8:	c2f8f359 	.word	0xc2f8f359
 800b6bc:	81a56e1f 	.word	0x81a56e1f
 800b6c0:	43500000 	.word	0x43500000
 800b6c4:	ffff3cb0 	.word	0xffff3cb0
 800b6c8:	3c900000 	.word	0x3c900000

0800b6cc <_init>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	bf00      	nop
 800b6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6d2:	bc08      	pop	{r3}
 800b6d4:	469e      	mov	lr, r3
 800b6d6:	4770      	bx	lr

0800b6d8 <_fini>:
 800b6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6da:	bf00      	nop
 800b6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6de:	bc08      	pop	{r3}
 800b6e0:	469e      	mov	lr, r3
 800b6e2:	4770      	bx	lr
