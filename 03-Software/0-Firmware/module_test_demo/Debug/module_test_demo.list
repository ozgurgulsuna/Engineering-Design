
module_test_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002e10  08002e10  00012e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e38  08002e38  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002e38  08002e38  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e38  08002e38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e3c  08002e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000010  08002e50  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08002e50  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9f4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac3  00000000  00000000  0002aa2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c5c  00000000  00000000  0002dc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bddb  00000000  00000000  000448f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008677b  00000000  00000000  000506cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6e4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003298  00000000  00000000  000d6e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002df8 	.word	0x08002df8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002df8 	.word	0x08002df8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcd2 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82e 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9c8 	bl	80004ec <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f9a0 	bl	80004a0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000160:	f000 f86e 	bl	8000240 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000164:	f000 f924 	bl	80003b0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f970 	bl	800044c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 800016c:	480d      	ldr	r0, [pc, #52]	; (80001a4 <main+0x58>)
 800016e:	f001 fdd3 	bl	8001d18 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000172:	480d      	ldr	r0, [pc, #52]	; (80001a8 <main+0x5c>)
 8000174:	f001 fdd0 	bl	8001d18 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000178:	2100      	movs	r1, #0
 800017a:	480b      	ldr	r0, [pc, #44]	; (80001a8 <main+0x5c>)
 800017c:	f001 fe76 	bl	8001e6c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <main+0x60>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800018a:	4809      	ldr	r0, [pc, #36]	; (80001b0 <main+0x64>)
 800018c:	f001 f91f 	bl	80013ce <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 8000190:	4b06      	ldr	r3, [pc, #24]	; (80001ac <main+0x60>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	461a      	mov	r2, r3
 8000196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <main+0x64>)
 800019c:	f001 f917 	bl	80013ce <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a0:	e7fe      	b.n	80001a0 <main+0x54>
 80001a2:	bf00      	nop
 80001a4:	20000074 	.word	0x20000074
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	20000198 	.word	0x20000198
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f002 fe10 	bl	8002de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e8:	2302      	movs	r3, #2
 80001ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 f921 	bl	8001444 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000208:	f000 f9fc 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f001 fb8e 	bl	8001948 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000232:	f000 f9e7 	bl	8000604 <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	; 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	; 0x58
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800025e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2220      	movs	r2, #32
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f002 fdb5 	bl	8002de8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800027e:	4b4a      	ldr	r3, [pc, #296]	; (80003a8 <MX_TIM1_Init+0x168>)
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <MX_TIM1_Init+0x16c>)
 8000282:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000284:	4b48      	ldr	r3, [pc, #288]	; (80003a8 <MX_TIM1_Init+0x168>)
 8000286:	2200      	movs	r2, #0
 8000288:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800028a:	4b47      	ldr	r3, [pc, #284]	; (80003a8 <MX_TIM1_Init+0x168>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8000290:	4b45      	ldr	r3, [pc, #276]	; (80003a8 <MX_TIM1_Init+0x168>)
 8000292:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000296:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000298:	4b43      	ldr	r3, [pc, #268]	; (80003a8 <MX_TIM1_Init+0x168>)
 800029a:	2200      	movs	r2, #0
 800029c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800029e:	4b42      	ldr	r3, [pc, #264]	; (80003a8 <MX_TIM1_Init+0x168>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002a4:	4b40      	ldr	r3, [pc, #256]	; (80003a8 <MX_TIM1_Init+0x168>)
 80002a6:	2280      	movs	r2, #128	; 0x80
 80002a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002aa:	483f      	ldr	r0, [pc, #252]	; (80003a8 <MX_TIM1_Init+0x168>)
 80002ac:	f001 fce4 	bl	8001c78 <HAL_TIM_Base_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80002b6:	f000 f9a5 	bl	8000604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002c4:	4619      	mov	r1, r3
 80002c6:	4838      	ldr	r0, [pc, #224]	; (80003a8 <MX_TIM1_Init+0x168>)
 80002c8:	f002 f838 	bl	800233c <HAL_TIM_ConfigClockSource>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80002d2:	f000 f997 	bl	8000604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80002d6:	4834      	ldr	r0, [pc, #208]	; (80003a8 <MX_TIM1_Init+0x168>)
 80002d8:	f001 fd70 	bl	8001dbc <HAL_TIM_PWM_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80002e2:	f000 f98f 	bl	8000604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002e6:	2300      	movs	r3, #0
 80002e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002ea:	2300      	movs	r3, #0
 80002ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002f2:	4619      	mov	r1, r3
 80002f4:	482c      	ldr	r0, [pc, #176]	; (80003a8 <MX_TIM1_Init+0x168>)
 80002f6:	f002 fbb7 	bl	8002a68 <HAL_TIMEx_MasterConfigSynchronization>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000300:	f000 f980 	bl	8000604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000304:	2360      	movs	r3, #96	; 0x60
 8000306:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800030c:	2300      	movs	r3, #0
 800030e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000310:	2300      	movs	r3, #0
 8000312:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000314:	2300      	movs	r3, #0
 8000316:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000318:	2300      	movs	r3, #0
 800031a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000324:	2200      	movs	r2, #0
 8000326:	4619      	mov	r1, r3
 8000328:	481f      	ldr	r0, [pc, #124]	; (80003a8 <MX_TIM1_Init+0x168>)
 800032a:	f001 ff49 	bl	80021c0 <HAL_TIM_PWM_ConfigChannel>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000334:	f000 f966 	bl	8000604 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800033c:	2204      	movs	r2, #4
 800033e:	4619      	mov	r1, r3
 8000340:	4819      	ldr	r0, [pc, #100]	; (80003a8 <MX_TIM1_Init+0x168>)
 8000342:	f001 ff3d 	bl	80021c0 <HAL_TIM_PWM_ConfigChannel>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800034c:	f000 f95a 	bl	8000604 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000354:	2208      	movs	r2, #8
 8000356:	4619      	mov	r1, r3
 8000358:	4813      	ldr	r0, [pc, #76]	; (80003a8 <MX_TIM1_Init+0x168>)
 800035a:	f001 ff31 	bl	80021c0 <HAL_TIM_PWM_ConfigChannel>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000364:	f000 f94e 	bl	8000604 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800037c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000380:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	4619      	mov	r1, r3
 800038a:	4807      	ldr	r0, [pc, #28]	; (80003a8 <MX_TIM1_Init+0x168>)
 800038c:	f002 fbca 	bl	8002b24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000396:	f000 f935 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800039a:	4803      	ldr	r0, [pc, #12]	; (80003a8 <MX_TIM1_Init+0x168>)
 800039c:	f000 f9ac 	bl	80006f8 <HAL_TIM_MspPostInit>

}
 80003a0:	bf00      	nop
 80003a2:	3758      	adds	r7, #88	; 0x58
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	2000002c 	.word	0x2000002c
 80003ac:	40012c00 	.word	0x40012c00

080003b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b6:	f107 0308 	add.w	r3, r7, #8
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c4:	463b      	mov	r3, r7
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <MX_TIM4_Init+0x94>)
 80003ce:	4a1e      	ldr	r2, [pc, #120]	; (8000448 <MX_TIM4_Init+0x98>)
 80003d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80003d2:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <MX_TIM4_Init+0x94>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_TIM4_Init+0x94>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80003de:	4b19      	ldr	r3, [pc, #100]	; (8000444 <MX_TIM4_Init+0x94>)
 80003e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_TIM4_Init+0x94>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_TIM4_Init+0x94>)
 80003ee:	2280      	movs	r2, #128	; 0x80
 80003f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003f2:	4814      	ldr	r0, [pc, #80]	; (8000444 <MX_TIM4_Init+0x94>)
 80003f4:	f001 fc40 	bl	8001c78 <HAL_TIM_Base_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80003fe:	f000 f901 	bl	8000604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	4619      	mov	r1, r3
 800040e:	480d      	ldr	r0, [pc, #52]	; (8000444 <MX_TIM4_Init+0x94>)
 8000410:	f001 ff94 	bl	800233c <HAL_TIM_ConfigClockSource>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800041a:	f000 f8f3 	bl	8000604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041e:	2300      	movs	r3, #0
 8000420:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000426:	463b      	mov	r3, r7
 8000428:	4619      	mov	r1, r3
 800042a:	4806      	ldr	r0, [pc, #24]	; (8000444 <MX_TIM4_Init+0x94>)
 800042c:	f002 fb1c 	bl	8002a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000436:	f000 f8e5 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	3718      	adds	r7, #24
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000074 	.word	0x20000074
 8000448:	40000800 	.word	0x40000800

0800044c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000452:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_USART1_UART_Init+0x50>)
 8000454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800045c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000484:	f002 fbb1 	bl	8002bea <HAL_UART_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800048e:	f000 f8b9 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000bc 	.word	0x200000bc
 800049c:	40013800 	.word	0x40013800

080004a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_DMA_Init+0x48>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <MX_DMA_Init+0x48>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <MX_DMA_Init+0x48>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2100      	movs	r1, #0
 80004c2:	200e      	movs	r0, #14
 80004c4:	f000 fc51 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80004c8:	200e      	movs	r0, #14
 80004ca:	f000 fc6a 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	200f      	movs	r0, #15
 80004d4:	f000 fc49 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004d8:	200f      	movs	r0, #15
 80004da:	f000 fc62 	bl	8000da2 <HAL_NVIC_EnableIRQ>

}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000500:	4b3c      	ldr	r3, [pc, #240]	; (80005f4 <MX_GPIO_Init+0x108>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a3b      	ldr	r2, [pc, #236]	; (80005f4 <MX_GPIO_Init+0x108>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b39      	ldr	r3, [pc, #228]	; (80005f4 <MX_GPIO_Init+0x108>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000518:	4b36      	ldr	r3, [pc, #216]	; (80005f4 <MX_GPIO_Init+0x108>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a35      	ldr	r2, [pc, #212]	; (80005f4 <MX_GPIO_Init+0x108>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <MX_GPIO_Init+0x108>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <MX_GPIO_Init+0x108>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a2f      	ldr	r2, [pc, #188]	; (80005f4 <MX_GPIO_Init+0x108>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <MX_GPIO_Init+0x108>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0308 	and.w	r3, r3, #8
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800054e:	482a      	ldr	r0, [pc, #168]	; (80005f8 <MX_GPIO_Init+0x10c>)
 8000550:	f000 ff3d 	bl	80013ce <HAL_GPIO_WritePin>
                          |IN3_A_Pin|IN3_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ENC1_A_Pin ENC1_B_Pin ENC2_A_Pin ENC2_B_Pin
                           ENC3_A_Pin ENC3_B_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin|ENC2_A_Pin|ENC2_B_Pin
 8000554:	233f      	movs	r3, #63	; 0x3f
 8000556:	613b      	str	r3, [r7, #16]
                          |ENC3_A_Pin|ENC3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <MX_GPIO_Init+0x110>)
 800055a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4826      	ldr	r0, [pc, #152]	; (8000600 <MX_GPIO_Init+0x114>)
 8000568:	f000 fd96 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_B_Pin IN2_A_Pin IN2_B_Pin
                           IN3_A_Pin IN3_B_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 800056c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000570:	613b      	str	r3, [r7, #16]
                          |IN3_A_Pin|IN3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2302      	movs	r3, #2
 800057c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	481c      	ldr	r0, [pc, #112]	; (80005f8 <MX_GPIO_Init+0x10c>)
 8000586:	f000 fd87 	bl	8001098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	2006      	movs	r0, #6
 8000590:	f000 fbeb 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000594:	2006      	movs	r0, #6
 8000596:	f000 fc04 	bl	8000da2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2007      	movs	r0, #7
 80005a0:	f000 fbe3 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005a4:	2007      	movs	r0, #7
 80005a6:	f000 fbfc 	bl	8000da2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	2008      	movs	r0, #8
 80005b0:	f000 fbdb 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005b4:	2008      	movs	r0, #8
 80005b6:	f000 fbf4 	bl	8000da2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	2009      	movs	r0, #9
 80005c0:	f000 fbd3 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005c4:	2009      	movs	r0, #9
 80005c6:	f000 fbec 	bl	8000da2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	200a      	movs	r0, #10
 80005d0:	f000 fbcb 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80005d4:	200a      	movs	r0, #10
 80005d6:	f000 fbe4 	bl	8000da2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	2017      	movs	r0, #23
 80005e0:	f000 fbc3 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005e4:	2017      	movs	r0, #23
 80005e6:	f000 fbdc 	bl	8000da2 <HAL_NVIC_EnableIRQ>

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	10110000 	.word	0x10110000
 8000600:	40010800 	.word	0x40010800

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_MspInit+0x5c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <HAL_MspInit+0x5c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_MspInit+0x5c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x5c>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_MspInit+0x5c>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x5c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_MspInit+0x60>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_MspInit+0x60>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000
 8000670:	40010000 	.word	0x40010000

08000674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <HAL_TIM_Base_MspInit+0x78>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d114      	bne.n	80006b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <HAL_TIM_Base_MspInit+0x7c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <HAL_TIM_Base_MspInit+0x7c>)
 800068c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_TIM_Base_MspInit+0x7c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2018      	movs	r0, #24
 80006a4:	f000 fb61 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80006a8:	2018      	movs	r0, #24
 80006aa:	f000 fb7a 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80006ae:	e018      	b.n	80006e2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <HAL_TIM_Base_MspInit+0x80>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d113      	bne.n	80006e2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_TIM_Base_MspInit+0x7c>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <HAL_TIM_Base_MspInit+0x7c>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_TIM_Base_MspInit+0x7c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	201e      	movs	r0, #30
 80006d8:	f000 fb47 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006dc:	201e      	movs	r0, #30
 80006de:	f000 fb60 	bl	8000da2 <HAL_NVIC_EnableIRQ>
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40012c00 	.word	0x40012c00
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40000800 	.word	0x40000800

080006f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <HAL_TIM_MspPostInit+0x5c>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d118      	bne.n	800074a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <HAL_TIM_MspPostInit+0x60>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <HAL_TIM_MspPostInit+0x60>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_TIM_MspPostInit+0x60>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000730:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2302      	movs	r3, #2
 800073c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	; (800075c <HAL_TIM_MspPostInit+0x64>)
 8000746:	f000 fca7 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40012c00 	.word	0x40012c00
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800

08000760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a49      	ldr	r2, [pc, #292]	; (80008a0 <HAL_UART_MspInit+0x140>)
 800077c:	4293      	cmp	r3, r2
 800077e:	f040 808a 	bne.w	8000896 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000782:	4b48      	ldr	r3, [pc, #288]	; (80008a4 <HAL_UART_MspInit+0x144>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a47      	ldr	r2, [pc, #284]	; (80008a4 <HAL_UART_MspInit+0x144>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b45      	ldr	r3, [pc, #276]	; (80008a4 <HAL_UART_MspInit+0x144>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <HAL_UART_MspInit+0x144>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a41      	ldr	r2, [pc, #260]	; (80008a4 <HAL_UART_MspInit+0x144>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b3f      	ldr	r3, [pc, #252]	; (80008a4 <HAL_UART_MspInit+0x144>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4838      	ldr	r0, [pc, #224]	; (80008a8 <HAL_UART_MspInit+0x148>)
 80007c6:	f000 fc67 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4832      	ldr	r0, [pc, #200]	; (80008a8 <HAL_UART_MspInit+0x148>)
 80007de:	f000 fc5b 	bl	8001098 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80007e2:	4b32      	ldr	r3, [pc, #200]	; (80008ac <HAL_UART_MspInit+0x14c>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
 80007f8:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <HAL_UART_MspInit+0x14c>)
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <HAL_UART_MspInit+0x150>)
 8000800:	4a2c      	ldr	r2, [pc, #176]	; (80008b4 <HAL_UART_MspInit+0x154>)
 8000802:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <HAL_UART_MspInit+0x150>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <HAL_UART_MspInit+0x150>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <HAL_UART_MspInit+0x150>)
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <HAL_UART_MspInit+0x150>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <HAL_UART_MspInit+0x150>)
 800081e:	2200      	movs	r2, #0
 8000820:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <HAL_UART_MspInit+0x150>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <HAL_UART_MspInit+0x150>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800082e:	4820      	ldr	r0, [pc, #128]	; (80008b0 <HAL_UART_MspInit+0x150>)
 8000830:	f000 fad2 	bl	8000dd8 <HAL_DMA_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800083a:	f7ff fee3 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <HAL_UART_MspInit+0x150>)
 8000842:	639a      	str	r2, [r3, #56]	; 0x38
 8000844:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <HAL_UART_MspInit+0x150>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <HAL_UART_MspInit+0x158>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <HAL_UART_MspInit+0x15c>)
 800084e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_UART_MspInit+0x158>)
 8000852:	2210      	movs	r2, #16
 8000854:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_UART_MspInit+0x158>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_UART_MspInit+0x158>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_UART_MspInit+0x158>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_UART_MspInit+0x158>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_UART_MspInit+0x158>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_UART_MspInit+0x158>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800087a:	480f      	ldr	r0, [pc, #60]	; (80008b8 <HAL_UART_MspInit+0x158>)
 800087c:	f000 faac 	bl	8000dd8 <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000886:	f7ff febd 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_UART_MspInit+0x158>)
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <HAL_UART_MspInit+0x158>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40013800 	.word	0x40013800
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40010000 	.word	0x40010000
 80008b0:	20000100 	.word	0x20000100
 80008b4:	40020058 	.word	0x40020058
 80008b8:	20000144 	.word	0x20000144
 80008bc:	40020044 	.word	0x40020044

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 f93d 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	/* Check the direction of the first motor */
	if(HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 8000914:	2102      	movs	r1, #2
 8000916:	480b      	ldr	r0, [pc, #44]	; (8000944 <EXTI0_IRQHandler+0x34>)
 8000918:	f000 fd42 	bl	80013a0 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d005      	beq.n	800092e <EXTI0_IRQHandler+0x1e>
		/* Update the position of the first motor */
		enc1_pos ++;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <EXTI0_IRQHandler+0x38>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	4a07      	ldr	r2, [pc, #28]	; (8000948 <EXTI0_IRQHandler+0x38>)
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	e004      	b.n	8000938 <EXTI0_IRQHandler+0x28>
	}else{
		enc1_pos --;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <EXTI0_IRQHandler+0x38>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	3b01      	subs	r3, #1
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <EXTI0_IRQHandler+0x38>)
 8000936:	6013      	str	r3, [r2, #0]

	}


  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8000938:	2001      	movs	r0, #1
 800093a:	f000 fd61 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010800 	.word	0x40010800
 8000948:	20000188 	.word	0x20000188

0800094c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_B_Pin);
 8000950:	2002      	movs	r0, #2
 8000952:	f000 fd55 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}

0800095a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 800095e:	2004      	movs	r0, #4
 8000960:	f000 fd4e 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_B_Pin);
 800096c:	2008      	movs	r0, #8
 800096e:	f000 fd47 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}

08000976 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_A_Pin);
 800097a:	2010      	movs	r0, #16
 800097c:	f000 fd40 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <DMA1_Channel4_IRQHandler+0x10>)
 800098a:	f000 fa7f 	bl	8000e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000144 	.word	0x20000144

08000998 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <DMA1_Channel5_IRQHandler+0x10>)
 800099e:	f000 fa75 	bl	8000e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000100 	.word	0x20000100

080009ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_B_Pin);
 80009b0:	2020      	movs	r0, #32
 80009b2:	f000 fd25 	bl	8001400 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */
  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <TIM1_BRK_IRQHandler+0x10>)
 80009c2:	f001 faf5 	bl	8001fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000002c 	.word	0x2000002c

080009d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	/* PID for motor 1*/
	int pos1_error = mot1_set_pos - enc1_pos;
 80009d6:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <TIM4_IRQHandler+0xac>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <TIM4_IRQHandler+0xb0>)
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	1a9b      	subs	r3, r3, r2
 80009e0:	607b      	str	r3, [r7, #4]

	/* 1/(delta t) = 72MHz/65535 = 1098.6496 */
	/* SYSCLK/ARR - Write this in a better format !!!!!!!!!!!!!!!!!!!!!!!!!!  */
	uint32_t delta_t = 1099;
 80009e2:	f240 434b 	movw	r3, #1099	; 0x44b
 80009e6:	603b      	str	r3, [r7, #0]

	/* Set the duty (only proportional implemented for now) */
	duty = Kp*pos1_error;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2264      	movs	r2, #100	; 0x64
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	4a24      	ldr	r2, [pc, #144]	; (8000a84 <TIM4_IRQHandler+0xb4>)
 80009f2:	6013      	str	r3, [r2, #0]

	/* Set the direction */
	if(duty > 0){
 80009f4:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <TIM4_IRQHandler+0xb4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	dd13      	ble.n	8000a24 <TIM4_IRQHandler+0x54>
		mot1_dir = 0;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <TIM4_IRQHandler+0xb8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, HIGH);
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <TIM4_IRQHandler+0xbc>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0c:	4820      	ldr	r0, [pc, #128]	; (8000a90 <TIM4_IRQHandler+0xc0>)
 8000a0e:	f000 fcde 	bl	80013ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <TIM4_IRQHandler+0xc4>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1c:	481c      	ldr	r0, [pc, #112]	; (8000a90 <TIM4_IRQHandler+0xc0>)
 8000a1e:	f000 fcd6 	bl	80013ce <HAL_GPIO_WritePin>
 8000a22:	e017      	b.n	8000a54 <TIM4_IRQHandler+0x84>

	}
	else{
		duty = -duty;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <TIM4_IRQHandler+0xb4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	425b      	negs	r3, r3
 8000a2a:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <TIM4_IRQHandler+0xb4>)
 8000a2c:	6013      	str	r3, [r2, #0]
		mot1_dir = 1;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <TIM4_IRQHandler+0xb8>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, HIGH);
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <TIM4_IRQHandler+0xbc>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <TIM4_IRQHandler+0xc0>)
 8000a40:	f000 fcc5 	bl	80013ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <TIM4_IRQHandler+0xc4>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4e:	4810      	ldr	r0, [pc, #64]	; (8000a90 <TIM4_IRQHandler+0xc0>)
 8000a50:	f000 fcbd 	bl	80013ce <HAL_GPIO_WritePin>
	}

	/* Limit the duty */
	if(duty > 3599){
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <TIM4_IRQHandler+0xb4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000a5c:	db03      	blt.n	8000a66 <TIM4_IRQHandler+0x96>
		duty = 3599;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <TIM4_IRQHandler+0xb4>)
 8000a60:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000a64:	601a      	str	r2, [r3, #0]
	}

	TIM1->CCR1 = duty;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <TIM4_IRQHandler+0xb4>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <TIM4_IRQHandler+0xc8>)
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a6e:	480b      	ldr	r0, [pc, #44]	; (8000a9c <TIM4_IRQHandler+0xcc>)
 8000a70:	f001 fa9e 	bl	8001fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000194 	.word	0x20000194
 8000a80:	20000188 	.word	0x20000188
 8000a84:	20000190 	.word	0x20000190
 8000a88:	2000018c 	.word	0x2000018c
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	20000198 	.word	0x20000198
 8000a98:	40012c00 	.word	0x40012c00
 8000a9c:	20000074 	.word	0x20000074

08000aa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad2:	f7ff ffe5 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f002 f963 	bl	8002da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ada:	f7ff fb37 	bl	800014c <main>
  bx lr
 8000ade:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ae8:	08002e40 	.word	0x08002e40
  ldr r2, =_sbss
 8000aec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000af0:	200001a0 	.word	0x200001a0

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x28>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f923 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fd7c 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f93b 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f903 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	2000000c 	.word	0x2000000c
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x1c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	2000019c 	.word	0x2000019c

08000ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <HAL_GetTick+0x10>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	2000019c 	.word	0x2000019c

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4906      	ldr	r1, [pc, #24]	; (8000c54 <__NVIC_EnableIRQ+0x34>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff90 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff2d 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff42 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff35 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e043      	b.n	8000e76 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_DMA_Init+0xa8>)
 8000df6:	4413      	add	r3, r2
 8000df8:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <HAL_DMA_Init+0xac>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	009a      	lsls	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_DMA_Init+0xb0>)
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	bffdfff8 	.word	0xbffdfff8
 8000e84:	cccccccd 	.word	0xcccccccd
 8000e88:	40020000 	.word	0x40020000

08000e8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d04f      	beq.n	8000f54 <HAL_DMA_IRQHandler+0xc8>
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d04a      	beq.n	8000f54 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0320 	and.w	r3, r3, #32
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d107      	bne.n	8000edc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0204 	bic.w	r2, r2, #4
 8000eda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a66      	ldr	r2, [pc, #408]	; (800107c <HAL_DMA_IRQHandler+0x1f0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d029      	beq.n	8000f3a <HAL_DMA_IRQHandler+0xae>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a65      	ldr	r2, [pc, #404]	; (8001080 <HAL_DMA_IRQHandler+0x1f4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d022      	beq.n	8000f36 <HAL_DMA_IRQHandler+0xaa>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a63      	ldr	r2, [pc, #396]	; (8001084 <HAL_DMA_IRQHandler+0x1f8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d01a      	beq.n	8000f30 <HAL_DMA_IRQHandler+0xa4>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a62      	ldr	r2, [pc, #392]	; (8001088 <HAL_DMA_IRQHandler+0x1fc>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d012      	beq.n	8000f2a <HAL_DMA_IRQHandler+0x9e>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a60      	ldr	r2, [pc, #384]	; (800108c <HAL_DMA_IRQHandler+0x200>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00a      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x98>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a5f      	ldr	r2, [pc, #380]	; (8001090 <HAL_DMA_IRQHandler+0x204>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d102      	bne.n	8000f1e <HAL_DMA_IRQHandler+0x92>
 8000f18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f1c:	e00e      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f22:	e00b      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f28:	e008      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2e:	e005      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f34:	e002      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f36:	2340      	movs	r3, #64	; 0x40
 8000f38:	e000      	b.n	8000f3c <HAL_DMA_IRQHandler+0xb0>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	4a55      	ldr	r2, [pc, #340]	; (8001094 <HAL_DMA_IRQHandler+0x208>)
 8000f3e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 8094 	beq.w	8001072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f52:	e08e      	b.n	8001072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	2202      	movs	r2, #2
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d056      	beq.n	8001012 <HAL_DMA_IRQHandler+0x186>
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d051      	beq.n	8001012 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0320 	and.w	r3, r3, #32
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10b      	bne.n	8000f94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020a 	bic.w	r2, r2, #10
 8000f8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a38      	ldr	r2, [pc, #224]	; (800107c <HAL_DMA_IRQHandler+0x1f0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d029      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x166>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a37      	ldr	r2, [pc, #220]	; (8001080 <HAL_DMA_IRQHandler+0x1f4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d022      	beq.n	8000fee <HAL_DMA_IRQHandler+0x162>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a35      	ldr	r2, [pc, #212]	; (8001084 <HAL_DMA_IRQHandler+0x1f8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01a      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x15c>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a34      	ldr	r2, [pc, #208]	; (8001088 <HAL_DMA_IRQHandler+0x1fc>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d012      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x156>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a32      	ldr	r2, [pc, #200]	; (800108c <HAL_DMA_IRQHandler+0x200>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00a      	beq.n	8000fdc <HAL_DMA_IRQHandler+0x150>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a31      	ldr	r2, [pc, #196]	; (8001090 <HAL_DMA_IRQHandler+0x204>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d102      	bne.n	8000fd6 <HAL_DMA_IRQHandler+0x14a>
 8000fd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fd4:	e00e      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fda:	e00b      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe0:	e008      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe6:	e005      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fec:	e002      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000fee:	2320      	movs	r3, #32
 8000ff0:	e000      	b.n	8000ff4 <HAL_DMA_IRQHandler+0x168>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	4a27      	ldr	r2, [pc, #156]	; (8001094 <HAL_DMA_IRQHandler+0x208>)
 8000ff6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	2b00      	cmp	r3, #0
 8001006:	d034      	beq.n	8001072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001010:	e02f      	b.n	8001072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	2208      	movs	r2, #8
 8001018:	409a      	lsls	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d028      	beq.n	8001074 <HAL_DMA_IRQHandler+0x1e8>
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f003 0308 	and.w	r3, r3, #8
 8001028:	2b00      	cmp	r3, #0
 800102a:	d023      	beq.n	8001074 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 020e 	bic.w	r2, r2, #14
 800103a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001044:	2101      	movs	r1, #1
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	4798      	blx	r3
    }
  }
  return;
 8001072:	bf00      	nop
 8001074:	bf00      	nop
}
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40020008 	.word	0x40020008
 8001080:	4002001c 	.word	0x4002001c
 8001084:	40020030 	.word	0x40020030
 8001088:	40020044 	.word	0x40020044
 800108c:	40020058 	.word	0x40020058
 8001090:	4002006c 	.word	0x4002006c
 8001094:	40020000 	.word	0x40020000

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b08b      	sub	sp, #44	; 0x2c
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	e169      	b.n	8001380 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010ac:	2201      	movs	r2, #1
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 8158 	bne.w	800137a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a9a      	ldr	r2, [pc, #616]	; (8001338 <HAL_GPIO_Init+0x2a0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d05e      	beq.n	8001192 <HAL_GPIO_Init+0xfa>
 80010d4:	4a98      	ldr	r2, [pc, #608]	; (8001338 <HAL_GPIO_Init+0x2a0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d875      	bhi.n	80011c6 <HAL_GPIO_Init+0x12e>
 80010da:	4a98      	ldr	r2, [pc, #608]	; (800133c <HAL_GPIO_Init+0x2a4>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d058      	beq.n	8001192 <HAL_GPIO_Init+0xfa>
 80010e0:	4a96      	ldr	r2, [pc, #600]	; (800133c <HAL_GPIO_Init+0x2a4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d86f      	bhi.n	80011c6 <HAL_GPIO_Init+0x12e>
 80010e6:	4a96      	ldr	r2, [pc, #600]	; (8001340 <HAL_GPIO_Init+0x2a8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d052      	beq.n	8001192 <HAL_GPIO_Init+0xfa>
 80010ec:	4a94      	ldr	r2, [pc, #592]	; (8001340 <HAL_GPIO_Init+0x2a8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d869      	bhi.n	80011c6 <HAL_GPIO_Init+0x12e>
 80010f2:	4a94      	ldr	r2, [pc, #592]	; (8001344 <HAL_GPIO_Init+0x2ac>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d04c      	beq.n	8001192 <HAL_GPIO_Init+0xfa>
 80010f8:	4a92      	ldr	r2, [pc, #584]	; (8001344 <HAL_GPIO_Init+0x2ac>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d863      	bhi.n	80011c6 <HAL_GPIO_Init+0x12e>
 80010fe:	4a92      	ldr	r2, [pc, #584]	; (8001348 <HAL_GPIO_Init+0x2b0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d046      	beq.n	8001192 <HAL_GPIO_Init+0xfa>
 8001104:	4a90      	ldr	r2, [pc, #576]	; (8001348 <HAL_GPIO_Init+0x2b0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d85d      	bhi.n	80011c6 <HAL_GPIO_Init+0x12e>
 800110a:	2b12      	cmp	r3, #18
 800110c:	d82a      	bhi.n	8001164 <HAL_GPIO_Init+0xcc>
 800110e:	2b12      	cmp	r3, #18
 8001110:	d859      	bhi.n	80011c6 <HAL_GPIO_Init+0x12e>
 8001112:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <HAL_GPIO_Init+0x80>)
 8001114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001118:	08001193 	.word	0x08001193
 800111c:	0800116d 	.word	0x0800116d
 8001120:	0800117f 	.word	0x0800117f
 8001124:	080011c1 	.word	0x080011c1
 8001128:	080011c7 	.word	0x080011c7
 800112c:	080011c7 	.word	0x080011c7
 8001130:	080011c7 	.word	0x080011c7
 8001134:	080011c7 	.word	0x080011c7
 8001138:	080011c7 	.word	0x080011c7
 800113c:	080011c7 	.word	0x080011c7
 8001140:	080011c7 	.word	0x080011c7
 8001144:	080011c7 	.word	0x080011c7
 8001148:	080011c7 	.word	0x080011c7
 800114c:	080011c7 	.word	0x080011c7
 8001150:	080011c7 	.word	0x080011c7
 8001154:	080011c7 	.word	0x080011c7
 8001158:	080011c7 	.word	0x080011c7
 800115c:	08001175 	.word	0x08001175
 8001160:	08001189 	.word	0x08001189
 8001164:	4a79      	ldr	r2, [pc, #484]	; (800134c <HAL_GPIO_Init+0x2b4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d013      	beq.n	8001192 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800116a:	e02c      	b.n	80011c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	623b      	str	r3, [r7, #32]
          break;
 8001172:	e029      	b.n	80011c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	3304      	adds	r3, #4
 800117a:	623b      	str	r3, [r7, #32]
          break;
 800117c:	e024      	b.n	80011c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	3308      	adds	r3, #8
 8001184:	623b      	str	r3, [r7, #32]
          break;
 8001186:	e01f      	b.n	80011c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	330c      	adds	r3, #12
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	e01a      	b.n	80011c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800119a:	2304      	movs	r3, #4
 800119c:	623b      	str	r3, [r7, #32]
          break;
 800119e:	e013      	b.n	80011c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d105      	bne.n	80011b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a8:	2308      	movs	r3, #8
 80011aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	611a      	str	r2, [r3, #16]
          break;
 80011b2:	e009      	b.n	80011c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b4:	2308      	movs	r3, #8
 80011b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	615a      	str	r2, [r3, #20]
          break;
 80011be:	e003      	b.n	80011c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x130>
          break;
 80011c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d801      	bhi.n	80011d2 <HAL_GPIO_Init+0x13a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	e001      	b.n	80011d6 <HAL_GPIO_Init+0x13e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3304      	adds	r3, #4
 80011d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2bff      	cmp	r3, #255	; 0xff
 80011dc:	d802      	bhi.n	80011e4 <HAL_GPIO_Init+0x14c>
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	e002      	b.n	80011ea <HAL_GPIO_Init+0x152>
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	3b08      	subs	r3, #8
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	210f      	movs	r1, #15
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	401a      	ands	r2, r3
 80011fc:	6a39      	ldr	r1, [r7, #32]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	431a      	orrs	r2, r3
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 80b1 	beq.w	800137a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001218:	4b4d      	ldr	r3, [pc, #308]	; (8001350 <HAL_GPIO_Init+0x2b8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a4c      	ldr	r2, [pc, #304]	; (8001350 <HAL_GPIO_Init+0x2b8>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <HAL_GPIO_Init+0x2b8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001230:	4a48      	ldr	r2, [pc, #288]	; (8001354 <HAL_GPIO_Init+0x2bc>)
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a40      	ldr	r2, [pc, #256]	; (8001358 <HAL_GPIO_Init+0x2c0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d013      	beq.n	8001284 <HAL_GPIO_Init+0x1ec>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a3f      	ldr	r2, [pc, #252]	; (800135c <HAL_GPIO_Init+0x2c4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d00d      	beq.n	8001280 <HAL_GPIO_Init+0x1e8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a3e      	ldr	r2, [pc, #248]	; (8001360 <HAL_GPIO_Init+0x2c8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d007      	beq.n	800127c <HAL_GPIO_Init+0x1e4>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a3d      	ldr	r2, [pc, #244]	; (8001364 <HAL_GPIO_Init+0x2cc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d101      	bne.n	8001278 <HAL_GPIO_Init+0x1e0>
 8001274:	2303      	movs	r3, #3
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001278:	2304      	movs	r3, #4
 800127a:	e004      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 800127c:	2302      	movs	r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001284:	2300      	movs	r3, #0
 8001286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001288:	f002 0203 	and.w	r2, r2, #3
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	4093      	lsls	r3, r2
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001296:	492f      	ldr	r1, [pc, #188]	; (8001354 <HAL_GPIO_Init+0x2bc>)
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	492c      	ldr	r1, [pc, #176]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4928      	ldr	r1, [pc, #160]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4922      	ldr	r1, [pc, #136]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	491e      	ldr	r1, [pc, #120]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d006      	beq.n	800130e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	4918      	ldr	r1, [pc, #96]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	43db      	mvns	r3, r3
 8001316:	4914      	ldr	r1, [pc, #80]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 8001318:	4013      	ands	r3, r2
 800131a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d021      	beq.n	800136c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	490e      	ldr	r1, [pc, #56]	; (8001368 <HAL_GPIO_Init+0x2d0>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	60cb      	str	r3, [r1, #12]
 8001334:	e021      	b.n	800137a <HAL_GPIO_Init+0x2e2>
 8001336:	bf00      	nop
 8001338:	10320000 	.word	0x10320000
 800133c:	10310000 	.word	0x10310000
 8001340:	10220000 	.word	0x10220000
 8001344:	10210000 	.word	0x10210000
 8001348:	10120000 	.word	0x10120000
 800134c:	10110000 	.word	0x10110000
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000
 8001358:	40010800 	.word	0x40010800
 800135c:	40010c00 	.word	0x40010c00
 8001360:	40011000 	.word	0x40011000
 8001364:	40011400 	.word	0x40011400
 8001368:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_GPIO_Init+0x304>)
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	43db      	mvns	r3, r3
 8001374:	4909      	ldr	r1, [pc, #36]	; (800139c <HAL_GPIO_Init+0x304>)
 8001376:	4013      	ands	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	3301      	adds	r3, #1
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	fa22 f303 	lsr.w	r3, r2, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	f47f ae8e 	bne.w	80010ac <HAL_GPIO_Init+0x14>
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	372c      	adds	r7, #44	; 0x2c
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40010400 	.word	0x40010400

080013a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e001      	b.n	80013c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	807b      	strh	r3, [r7, #2]
 80013da:	4613      	mov	r3, r2
 80013dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013de:	787b      	ldrb	r3, [r7, #1]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e4:	887a      	ldrh	r2, [r7, #2]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013ea:	e003      	b.n	80013f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	611a      	str	r2, [r3, #16]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f806 	bl	8001430 <HAL_GPIO_EXTI_Callback>
  }
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40010400 	.word	0x40010400

08001430 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e272      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8087 	beq.w	8001572 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001464:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b04      	cmp	r3, #4
 800146e:	d00c      	beq.n	800148a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001470:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b08      	cmp	r3, #8
 800147a:	d112      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5e>
 800147c:	4b8c      	ldr	r3, [pc, #560]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d10b      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148a:	4b89      	ldr	r3, [pc, #548]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d06c      	beq.n	8001570 <HAL_RCC_OscConfig+0x12c>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d168      	bne.n	8001570 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e24c      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x76>
 80014ac:	4b80      	ldr	r3, [pc, #512]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a7f      	ldr	r2, [pc, #508]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e02e      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x98>
 80014c2:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7a      	ldr	r2, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b78      	ldr	r3, [pc, #480]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e01d      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0xbc>
 80014e6:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a71      	ldr	r2, [pc, #452]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a6e      	ldr	r2, [pc, #440]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 8001500:	4b6b      	ldr	r3, [pc, #428]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a6a      	ldr	r2, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a67      	ldr	r2, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fb42 	bl	8000ba8 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fb3e 	bl	8000ba8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e200      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0xe4>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fb2e 	bl	8000ba8 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fb2a 	bl	8000ba8 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1ec      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x10c>
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d063      	beq.n	8001646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800158a:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b08      	cmp	r3, #8
 8001594:	d11c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x18c>
 8001596:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x176>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1c0      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4939      	ldr	r1, [pc, #228]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	e03a      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fae3 	bl	8000ba8 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fadf 	bl	8000ba8 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e1a1      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e015      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fac2 	bl	8000ba8 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001628:	f7ff fabe 	bl	8000ba8 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e180      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03a      	beq.n	80016c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d019      	beq.n	800168e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_RCC_OscConfig+0x274>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff faa2 	bl	8000ba8 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fa9e 	bl	8000ba8 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e160      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f000 fad8 	bl	8001c3c <RCC_Delay>
 800168c:	e01c      	b.n	80016c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fa88 	bl	8000ba8 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169a:	e00f      	b.n	80016bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fa84 	bl	8000ba8 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d908      	bls.n	80016bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e146      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	42420000 	.word	0x42420000
 80016b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b92      	ldr	r3, [pc, #584]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e9      	bne.n	800169c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a6 	beq.w	8001822 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b8b      	ldr	r3, [pc, #556]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10d      	bne.n	8001702 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b88      	ldr	r3, [pc, #544]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a87      	ldr	r2, [pc, #540]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b85      	ldr	r3, [pc, #532]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001702:	4b82      	ldr	r3, [pc, #520]	; (800190c <HAL_RCC_OscConfig+0x4c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170e:	4b7f      	ldr	r3, [pc, #508]	; (800190c <HAL_RCC_OscConfig+0x4c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7e      	ldr	r2, [pc, #504]	; (800190c <HAL_RCC_OscConfig+0x4c8>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff fa45 	bl	8000ba8 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff fa41 	bl	8000ba8 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e103      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b75      	ldr	r3, [pc, #468]	; (800190c <HAL_RCC_OscConfig+0x4c8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x312>
 8001748:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a6e      	ldr	r2, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e02d      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x334>
 800175e:	4b6a      	ldr	r3, [pc, #424]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a69      	ldr	r2, [pc, #420]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	4b67      	ldr	r3, [pc, #412]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a66      	ldr	r2, [pc, #408]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	e01c      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x356>
 8001780:	4b61      	ldr	r3, [pc, #388]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a60      	ldr	r2, [pc, #384]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	4b5e      	ldr	r3, [pc, #376]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 800179a:	4b5b      	ldr	r3, [pc, #364]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a5a      	ldr	r2, [pc, #360]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6213      	str	r3, [r2, #32]
 80017a6:	4b58      	ldr	r3, [pc, #352]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a57      	ldr	r2, [pc, #348]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d015      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff f9f5 	bl	8000ba8 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff f9f1 	bl	8000ba8 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0b1      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ee      	beq.n	80017c2 <HAL_RCC_OscConfig+0x37e>
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff f9df 	bl	8000ba8 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff f9db 	bl	8000ba8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e09b      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	4b40      	ldr	r3, [pc, #256]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001816:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a3b      	ldr	r2, [pc, #236]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8087 	beq.w	800193a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d061      	beq.n	80018fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d146      	bne.n	80018ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <HAL_RCC_OscConfig+0x4cc>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff f9af 	bl	8000ba8 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff f9ab 	bl	8000ba8 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e06d      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d108      	bne.n	8001888 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4921      	ldr	r1, [pc, #132]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001888:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a19      	ldr	r1, [r3, #32]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	430b      	orrs	r3, r1
 800189a:	491b      	ldr	r1, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x4cc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff f97f 	bl	8000ba8 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f97b 	bl	8000ba8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e03d      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x46a>
 80018cc:	e035      	b.n	800193a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_RCC_OscConfig+0x4cc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff f968 	bl	8000ba8 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f964 	bl	8000ba8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e026      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x498>
 80018fa:	e01e      	b.n	800193a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e019      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
 8001908:	40021000 	.word	0x40021000
 800190c:	40007000 	.word	0x40007000
 8001910:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_OscConfig+0x500>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	429a      	cmp	r2, r3
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0d0      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d910      	bls.n	800198c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b67      	ldr	r3, [pc, #412]	; (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 0207 	bic.w	r2, r3, #7
 8001972:	4965      	ldr	r1, [pc, #404]	; (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	494d      	ldr	r1, [pc, #308]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d040      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d115      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a06:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e073      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e06b      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f023 0203 	bic.w	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4936      	ldr	r1, [pc, #216]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a38:	f7ff f8b6 	bl	8000ba8 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7ff f8b2 	bl	8000ba8 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e053      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 020c 	and.w	r2, r3, #12
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1eb      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d210      	bcs.n	8001a98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 0207 	bic.w	r2, r3, #7
 8001a7e:	4922      	ldr	r1, [pc, #136]	; (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e032      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4916      	ldr	r1, [pc, #88]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 f821 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	490a      	ldr	r1, [pc, #40]	; (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	5ccb      	ldrb	r3, [r1, r3]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1cc>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1d0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f814 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40022000 	.word	0x40022000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	08002e20 	.word	0x08002e20
 8001b14:	20000004 	.word	0x20000004
 8001b18:	20000008 	.word	0x20000008

08001b1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	b490      	push	{r4, r7}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b22:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b24:	1d3c      	adds	r4, r7, #4
 8001b26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b2c:	f240 2301 	movw	r3, #513	; 0x201
 8001b30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d002      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x40>
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0x46>
 8001b5a:	e02b      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b5e:	623b      	str	r3, [r7, #32]
      break;
 8001b60:	e02b      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	0c9b      	lsrs	r3, r3, #18
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3328      	adds	r3, #40	; 0x28
 8001b6c:	443b      	add	r3, r7
 8001b6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d012      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	0c5b      	lsrs	r3, r3, #17
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	3328      	adds	r3, #40	; 0x28
 8001b8a:	443b      	add	r3, r7
 8001b8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b96:	fb03 f202 	mul.w	r2, r3, r2
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	e004      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	623b      	str	r3, [r7, #32]
      break;
 8001bb2:	e002      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bb6:	623b      	str	r3, [r7, #32]
      break;
 8001bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bba:	6a3b      	ldr	r3, [r7, #32]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc90      	pop	{r4, r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	08002e10 	.word	0x08002e10
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	007a1200 	.word	0x007a1200
 8001bd4:	003d0900 	.word	0x003d0900

08001bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	20000004 	.word	0x20000004

08001bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bf0:	f7ff fff2 	bl	8001bd8 <HAL_RCC_GetHCLKFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	4903      	ldr	r1, [pc, #12]	; (8001c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	08002e30 	.word	0x08002e30

08001c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_RCC_GetHCLKFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	0adb      	lsrs	r3, r3, #11
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	4903      	ldr	r1, [pc, #12]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08002e30 	.word	0x08002e30

08001c3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <RCC_Delay+0x34>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <RCC_Delay+0x38>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	0a5b      	lsrs	r3, r3, #9
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c58:	bf00      	nop
  }
  while (Delay --);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1e5a      	subs	r2, r3, #1
 8001c5e:	60fa      	str	r2, [r7, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f9      	bne.n	8001c58 <RCC_Delay+0x1c>
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000004 	.word	0x20000004
 8001c74:	10624dd3 	.word	0x10624dd3

08001c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e041      	b.n	8001d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7fe fce8 	bl	8000674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f000 fc32 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d001      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e03a      	b.n	8001da6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_TIM_Base_Start_IT+0x98>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x58>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5a:	d009      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x58>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x58>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d010      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	40012c00 	.word	0x40012c00
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40000800 	.word	0x40000800

08001dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e041      	b.n	8001e52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f839 	bl	8001e5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f000 fb90 	bl	8002520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_TIM_PWM_Start+0x24>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	bf14      	ite	ne
 8001e88:	2301      	movne	r3, #1
 8001e8a:	2300      	moveq	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e022      	b.n	8001ed6 <HAL_TIM_PWM_Start+0x6a>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d109      	bne.n	8001eaa <HAL_TIM_PWM_Start+0x3e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	e015      	b.n	8001ed6 <HAL_TIM_PWM_Start+0x6a>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d109      	bne.n	8001ec4 <HAL_TIM_PWM_Start+0x58>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e008      	b.n	8001ed6 <HAL_TIM_PWM_Start+0x6a>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e05e      	b.n	8001f9c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d104      	bne.n	8001eee <HAL_TIM_PWM_Start+0x82>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eec:	e013      	b.n	8001f16 <HAL_TIM_PWM_Start+0xaa>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d104      	bne.n	8001efe <HAL_TIM_PWM_Start+0x92>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001efc:	e00b      	b.n	8001f16 <HAL_TIM_PWM_Start+0xaa>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d104      	bne.n	8001f0e <HAL_TIM_PWM_Start+0xa2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f0c:	e003      	b.n	8001f16 <HAL_TIM_PWM_Start+0xaa>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	6839      	ldr	r1, [r7, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fd7e 	bl	8002a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <HAL_TIM_PWM_Start+0x138>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d107      	bne.n	8001f3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_TIM_PWM_Start+0x138>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00e      	beq.n	8001f66 <HAL_TIM_PWM_Start+0xfa>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f50:	d009      	beq.n	8001f66 <HAL_TIM_PWM_Start+0xfa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_TIM_PWM_Start+0x13c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d004      	beq.n	8001f66 <HAL_TIM_PWM_Start+0xfa>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_TIM_PWM_Start+0x140>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d111      	bne.n	8001f8a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	d010      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f88:	e007      	b.n	8001f9a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40012c00 	.word	0x40012c00
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800

08001fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d122      	bne.n	800200c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0202 	mvn.w	r2, #2
 8001fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fa78 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fa6b 	bl	80024d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fa7a 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b04      	cmp	r3, #4
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0204 	mvn.w	r2, #4
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fa4e 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa41 	bl	80024d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fa50 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b08      	cmp	r3, #8
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b08      	cmp	r3, #8
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0208 	mvn.w	r2, #8
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa24 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fa17 	bl	80024d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fa26 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0210 	mvn.w	r2, #16
 80020d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2208      	movs	r2, #8
 80020de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f9fa 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f9ed 	bl	80024d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f9fc 	bl	80024fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0201 	mvn.w	r2, #1
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f9c8 	bl	80024c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fd3c 	bl	8002bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f9c0 	bl	800250c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d107      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0220 	mvn.w	r2, #32
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fd07 	bl	8002bc6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e0ac      	b.n	8002334 <HAL_TIM_PWM_ConfigChannel+0x174>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	f200 809f 	bhi.w	8002328 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021ea:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f0:	08002225 	.word	0x08002225
 80021f4:	08002329 	.word	0x08002329
 80021f8:	08002329 	.word	0x08002329
 80021fc:	08002329 	.word	0x08002329
 8002200:	08002265 	.word	0x08002265
 8002204:	08002329 	.word	0x08002329
 8002208:	08002329 	.word	0x08002329
 800220c:	08002329 	.word	0x08002329
 8002210:	080022a7 	.word	0x080022a7
 8002214:	08002329 	.word	0x08002329
 8002218:	08002329 	.word	0x08002329
 800221c:	08002329 	.word	0x08002329
 8002220:	080022e7 	.word	0x080022e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f9da 	bl	80025e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0208 	orr.w	r2, r2, #8
 800223e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6999      	ldr	r1, [r3, #24]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	619a      	str	r2, [r3, #24]
      break;
 8002262:	e062      	b.n	800232a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fa20 	bl	80026b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800227e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800228e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6999      	ldr	r1, [r3, #24]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	021a      	lsls	r2, r3, #8
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	619a      	str	r2, [r3, #24]
      break;
 80022a4:	e041      	b.n	800232a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fa69 	bl	8002784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0208 	orr.w	r2, r2, #8
 80022c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69da      	ldr	r2, [r3, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0204 	bic.w	r2, r2, #4
 80022d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69d9      	ldr	r1, [r3, #28]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	61da      	str	r2, [r3, #28]
      break;
 80022e4:	e021      	b.n	800232a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fab3 	bl	8002858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69da      	ldr	r2, [r3, #28]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69d9      	ldr	r1, [r3, #28]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	61da      	str	r2, [r3, #28]
      break;
 8002326:	e000      	b.n	800232a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002328:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_TIM_ConfigClockSource+0x18>
 8002350:	2302      	movs	r3, #2
 8002352:	e0b3      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x180>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800237a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238c:	d03e      	beq.n	800240c <HAL_TIM_ConfigClockSource+0xd0>
 800238e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002392:	f200 8087 	bhi.w	80024a4 <HAL_TIM_ConfigClockSource+0x168>
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	f000 8085 	beq.w	80024a8 <HAL_TIM_ConfigClockSource+0x16c>
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	d87f      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x168>
 80023a4:	2b70      	cmp	r3, #112	; 0x70
 80023a6:	d01a      	beq.n	80023de <HAL_TIM_ConfigClockSource+0xa2>
 80023a8:	2b70      	cmp	r3, #112	; 0x70
 80023aa:	d87b      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x168>
 80023ac:	2b60      	cmp	r3, #96	; 0x60
 80023ae:	d050      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x116>
 80023b0:	2b60      	cmp	r3, #96	; 0x60
 80023b2:	d877      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x168>
 80023b4:	2b50      	cmp	r3, #80	; 0x50
 80023b6:	d03c      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0xf6>
 80023b8:	2b50      	cmp	r3, #80	; 0x50
 80023ba:	d873      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x168>
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d058      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x136>
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d86f      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x168>
 80023c4:	2b30      	cmp	r3, #48	; 0x30
 80023c6:	d064      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x156>
 80023c8:	2b30      	cmp	r3, #48	; 0x30
 80023ca:	d86b      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x168>
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	d060      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x156>
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d867      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x168>
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d05c      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x156>
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d05a      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023dc:	e062      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f000 faf8 	bl	80029e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002400:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	609a      	str	r2, [r3, #8]
      break;
 800240a:	e04e      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6899      	ldr	r1, [r3, #8]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f000 fae1 	bl	80029e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800242e:	609a      	str	r2, [r3, #8]
      break;
 8002430:	e03b      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	f000 fa58 	bl	80028f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2150      	movs	r1, #80	; 0x50
 800244a:	4618      	mov	r0, r3
 800244c:	f000 faaf 	bl	80029ae <TIM_ITRx_SetConfig>
      break;
 8002450:	e02b      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	f000 fa76 	bl	8002950 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2160      	movs	r1, #96	; 0x60
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fa9f 	bl	80029ae <TIM_ITRx_SetConfig>
      break;
 8002470:	e01b      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	f000 fa38 	bl	80028f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fa8f 	bl	80029ae <TIM_ITRx_SetConfig>
      break;
 8002490:	e00b      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	4610      	mov	r0, r2
 800249e:	f000 fa86 	bl	80029ae <TIM_ITRx_SetConfig>
        break;
 80024a2:	e002      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024a4:	bf00      	nop
 80024a6:	e000      	b.n	80024aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
	...

08002520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <TIM_Base_SetConfig+0xb8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00b      	beq.n	8002550 <TIM_Base_SetConfig+0x30>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253e:	d007      	beq.n	8002550 <TIM_Base_SetConfig+0x30>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a26      	ldr	r2, [pc, #152]	; (80025dc <TIM_Base_SetConfig+0xbc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d003      	beq.n	8002550 <TIM_Base_SetConfig+0x30>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a25      	ldr	r2, [pc, #148]	; (80025e0 <TIM_Base_SetConfig+0xc0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d108      	bne.n	8002562 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <TIM_Base_SetConfig+0xb8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00b      	beq.n	8002582 <TIM_Base_SetConfig+0x62>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d007      	beq.n	8002582 <TIM_Base_SetConfig+0x62>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <TIM_Base_SetConfig+0xbc>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_Base_SetConfig+0x62>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <TIM_Base_SetConfig+0xc0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d108      	bne.n	8002594 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <TIM_Base_SetConfig+0xb8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d103      	bne.n	80025c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	615a      	str	r2, [r3, #20]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40000400 	.word	0x40000400
 80025e0:	40000800 	.word	0x40000800

080025e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f023 0201 	bic.w	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f023 0302 	bic.w	r3, r3, #2
 800262c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <TIM_OC1_SetConfig+0xc8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d10c      	bne.n	800265a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0308 	bic.w	r3, r3, #8
 8002646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f023 0304 	bic.w	r3, r3, #4
 8002658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a13      	ldr	r2, [pc, #76]	; (80026ac <TIM_OC1_SetConfig+0xc8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d111      	bne.n	8002686 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	621a      	str	r2, [r3, #32]
}
 80026a0:	bf00      	nop
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40012c00 	.word	0x40012c00

080026b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f023 0210 	bic.w	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f023 0320 	bic.w	r3, r3, #32
 80026fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <TIM_OC2_SetConfig+0xd0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d10d      	bne.n	800272c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a14      	ldr	r2, [pc, #80]	; (8002780 <TIM_OC2_SetConfig+0xd0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d113      	bne.n	800275c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800273a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	bf00      	nop
 8002778:	371c      	adds	r7, #28
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40012c00 	.word	0x40012c00

08002784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <TIM_OC3_SetConfig+0xd0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10d      	bne.n	80027fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <TIM_OC3_SetConfig+0xd0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d113      	bne.n	800282e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800280c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	621a      	str	r2, [r3, #32]
}
 8002848:	bf00      	nop
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40012c00 	.word	0x40012c00

08002858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	031b      	lsls	r3, r3, #12
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <TIM_OC4_SetConfig+0x98>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d109      	bne.n	80028cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	019b      	lsls	r3, r3, #6
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	621a      	str	r2, [r3, #32]
}
 80028e6:	bf00      	nop
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	40012c00 	.word	0x40012c00

080028f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f023 0201 	bic.w	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800291e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f023 030a 	bic.w	r3, r3, #10
 8002930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	621a      	str	r2, [r3, #32]
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f023 0210 	bic.w	r2, r3, #16
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800297a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	031b      	lsls	r3, r3, #12
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800298c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	621a      	str	r2, [r3, #32]
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f043 0307 	orr.w	r3, r3, #7
 80029d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	609a      	str	r2, [r3, #8]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b087      	sub	sp, #28
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	021a      	lsls	r2, r3, #8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	609a      	str	r2, [r3, #8]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2201      	movs	r2, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a1a      	ldr	r2, [r3, #32]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	401a      	ands	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	621a      	str	r2, [r3, #32]
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e046      	b.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10c      	bne.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800

08002b24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d101      	bne.n	8002b40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e03d      	b.n	8002bbc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e03f      	b.n	8002c7c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7fd fda5 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2224      	movs	r2, #36	; 0x24
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c2c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f828 	bl	8002c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c52:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c62:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cbe:	f023 030c 	bic.w	r3, r3, #12
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6812      	ldr	r2, [r2, #0]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2c      	ldr	r2, [pc, #176]	; (8002d98 <UART_SetConfig+0x114>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d103      	bne.n	8002cf4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cec:	f7fe ff92 	bl	8001c14 <HAL_RCC_GetPCLK2Freq>
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	e002      	b.n	8002cfa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cf4:	f7fe ff7a 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8002cf8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <UART_SetConfig+0x118>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	0119      	lsls	r1, r3, #4
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	009a      	lsls	r2, r3, #2
 8002d24:	441a      	add	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <UART_SetConfig+0x118>)
 8002d32:	fba3 0302 	umull	r0, r3, r3, r2
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2064      	movs	r0, #100	; 0x64
 8002d3a:	fb00 f303 	mul.w	r3, r0, r3
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	3332      	adds	r3, #50	; 0x32
 8002d44:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <UART_SetConfig+0x118>)
 8002d46:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d50:	4419      	add	r1, r3
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009a      	lsls	r2, r3, #2
 8002d5c:	441a      	add	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <UART_SetConfig+0x118>)
 8002d6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2064      	movs	r0, #100	; 0x64
 8002d72:	fb00 f303 	mul.w	r3, r0, r3
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	3332      	adds	r3, #50	; 0x32
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <UART_SetConfig+0x118>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	440a      	add	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	51eb851f 	.word	0x51eb851f

08002da0 <__libc_init_array>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	2600      	movs	r6, #0
 8002da4:	4d0c      	ldr	r5, [pc, #48]	; (8002dd8 <__libc_init_array+0x38>)
 8002da6:	4c0d      	ldr	r4, [pc, #52]	; (8002ddc <__libc_init_array+0x3c>)
 8002da8:	1b64      	subs	r4, r4, r5
 8002daa:	10a4      	asrs	r4, r4, #2
 8002dac:	42a6      	cmp	r6, r4
 8002dae:	d109      	bne.n	8002dc4 <__libc_init_array+0x24>
 8002db0:	f000 f822 	bl	8002df8 <_init>
 8002db4:	2600      	movs	r6, #0
 8002db6:	4d0a      	ldr	r5, [pc, #40]	; (8002de0 <__libc_init_array+0x40>)
 8002db8:	4c0a      	ldr	r4, [pc, #40]	; (8002de4 <__libc_init_array+0x44>)
 8002dba:	1b64      	subs	r4, r4, r5
 8002dbc:	10a4      	asrs	r4, r4, #2
 8002dbe:	42a6      	cmp	r6, r4
 8002dc0:	d105      	bne.n	8002dce <__libc_init_array+0x2e>
 8002dc2:	bd70      	pop	{r4, r5, r6, pc}
 8002dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc8:	4798      	blx	r3
 8002dca:	3601      	adds	r6, #1
 8002dcc:	e7ee      	b.n	8002dac <__libc_init_array+0xc>
 8002dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd2:	4798      	blx	r3
 8002dd4:	3601      	adds	r6, #1
 8002dd6:	e7f2      	b.n	8002dbe <__libc_init_array+0x1e>
 8002dd8:	08002e38 	.word	0x08002e38
 8002ddc:	08002e38 	.word	0x08002e38
 8002de0:	08002e38 	.word	0x08002e38
 8002de4:	08002e3c 	.word	0x08002e3c

08002de8 <memset>:
 8002de8:	4603      	mov	r3, r0
 8002dea:	4402      	add	r2, r0
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d100      	bne.n	8002df2 <memset+0xa>
 8002df0:	4770      	bx	lr
 8002df2:	f803 1b01 	strb.w	r1, [r3], #1
 8002df6:	e7f9      	b.n	8002dec <memset+0x4>

08002df8 <_init>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	bf00      	nop
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr

08002e04 <_fini>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	bf00      	nop
 8002e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0a:	bc08      	pop	{r3}
 8002e0c:	469e      	mov	lr, r3
 8002e0e:	4770      	bx	lr
