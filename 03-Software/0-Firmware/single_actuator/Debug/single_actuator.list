
single_actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af9c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800b138  0800b138  0001b138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3a8  0800b3a8  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3a8  0800b3a8  0001b3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3b0  0800b3b0  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3b0  0800b3b0  0001b3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3b4  0800b3b4  0001b3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800b3b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a4  20000194  0800b54c  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001738  0800b54c  00021738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001435e  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d4  00000000  00000000  00034522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  000375f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  000386e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191d9  00000000  00000000  00039670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144e1  00000000  00000000  00052849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fac3  00000000  00000000  00066d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f67ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb4  00000000  00000000  000f6840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000194 	.word	0x20000194
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b11c 	.word	0x0800b11c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000198 	.word	0x20000198
 80001d4:	0800b11c 	.word	0x0800b11c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b974 	b.w	8000eb4 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468e      	mov	lr, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14d      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	d969      	bls.n	8000ccc <__udivmoddi4+0xe8>
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	b152      	cbz	r2, 8000c14 <__udivmoddi4+0x30>
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	f1c2 0120 	rsb	r1, r2, #32
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c12:	4094      	lsls	r4, r2
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	0c21      	lsrs	r1, r4, #16
 8000c1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c1e:	fa1f f78c 	uxth.w	r7, ip
 8000c22:	fb08 e316 	mls	r3, r8, r6, lr
 8000c26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2a:	fb06 f107 	mul.w	r1, r6, r7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 811f 	bcs.w	8000e7c <__udivmoddi4+0x298>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 811c 	bls.w	8000e7c <__udivmoddi4+0x298>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x92>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 810a 	bcs.w	8000e80 <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8107 	bls.w	8000e80 <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	1be4      	subs	r4, r4, r7
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa4>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xc2>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80ef 	beq.w	8000e76 <__udivmoddi4+0x292>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x160>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd4>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80f9 	bhi.w	8000eaa <__udivmoddi4+0x2c6>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa4>
 8000cc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xec>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 8092 	bne.w	8000dfe <__udivmoddi4+0x21a>
 8000cda:	eba1 010c 	sub.w	r1, r1, ip
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	0c20      	lsrs	r0, r4, #16
 8000cea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cee:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf6:	fb0e f003 	mul.w	r0, lr, r3
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x12c>
 8000cfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000d02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x12a>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2c0>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	1a09      	subs	r1, r1, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d18:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x156>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x154>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2ca>
 8000d38:	4608      	mov	r0, r1
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d42:	e79c      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000d44:	f1c6 0720 	rsb	r7, r6, #32
 8000d48:	40b3      	lsls	r3, r6
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa20 f407 	lsr.w	r4, r0, r7
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	40f9      	lsrs	r1, r7
 8000d5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d62:	fa00 f306 	lsl.w	r3, r0, r6
 8000d66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6a:	0c20      	lsrs	r0, r4, #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fb09 1118 	mls	r1, r9, r8, r1
 8000d74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d78:	fb08 f00e 	mul.w	r0, r8, lr
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b8>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	1a09      	subs	r1, r1, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da4:	fb09 1110 	mls	r1, r9, r0, r1
 8000da8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db0:	458e      	cmp	lr, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1e2>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2b4>
 8000dbe:	458e      	cmp	lr, r1
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2b4>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dca:	fba0 9402 	umull	r9, r4, r0, r2
 8000dce:	eba1 010e 	sub.w	r1, r1, lr
 8000dd2:	42a1      	cmp	r1, r4
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46a6      	mov	lr, r4
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x2a4>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x2a0>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x212>
 8000dde:	ebb3 0208 	subs.w	r2, r3, r8
 8000de2:	eb61 010e 	sbc.w	r1, r1, lr
 8000de6:	fa01 f707 	lsl.w	r7, r1, r7
 8000dea:	fa22 f306 	lsr.w	r3, r2, r6
 8000dee:	40f1      	lsrs	r1, r6
 8000df0:	431f      	orrs	r7, r3
 8000df2:	e9c5 7100 	strd	r7, r1, [r5]
 8000df6:	2600      	movs	r6, #0
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1c2 0320 	rsb	r3, r2, #32
 8000e02:	40d8      	lsrs	r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e20:	0c0b      	lsrs	r3, r1, #16
 8000e22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e26:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x260>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b8>
 8000e3c:	429e      	cmp	r6, r3
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b8>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1b9b      	subs	r3, r3, r6
 8000e46:	b289      	uxth	r1, r1
 8000e48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb06 f30e 	mul.w	r3, r6, lr
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x28a>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e6a:	3e02      	subs	r6, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	1ac9      	subs	r1, r1, r3
 8000e70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0x104>
 8000e76:	462e      	mov	r6, r5
 8000e78:	4628      	mov	r0, r5
 8000e7a:	e705      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	e6e3      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e6f8      	b.n	8000c76 <__udivmoddi4+0x92>
 8000e84:	454b      	cmp	r3, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f8>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e90:	3801      	subs	r0, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f8>
 8000e94:	4646      	mov	r6, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x28a>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1e2>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x260>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b8>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x12c>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e709      	b.n	8000cc2 <__udivmoddi4+0xde>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x156>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f001 fa3c 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f82c 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 f9e8 	bl	8001298 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000ec8:	f008 f8b4 	bl	8009034 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000ecc:	f000 f890 	bl	8000ff0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ed0:	f000 f994 	bl	80011fc <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ed4:	f000 f944 	bl	8001160 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Store the frequency of PID loop
    PID_freq = HAL_RCC_GetSysClockFreq()/htim4.Init.Period;
 8000ed8:	f003 fba4 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <main+0x58>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <main+0x5c>)
 8000ee8:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim4);
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <main+0x58>)
 8000eec:	f003 fcbc 	bl	8004868 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <main+0x60>)
 8000ef2:	f003 fcb9 	bl	8004868 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4807      	ldr	r0, [pc, #28]	; (8000f18 <main+0x60>)
 8000efa:	f003 fd71 	bl	80049e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000efe:	2104      	movs	r1, #4
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <main+0x60>)
 8000f02:	f003 fd6d 	bl	80049e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f06:	2108      	movs	r1, #8
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <main+0x60>)
 8000f0a:	f003 fd69 	bl	80049e0 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x56>
 8000f10:	20000240 	.word	0x20000240
 8000f14:	20000288 	.word	0x20000288
 8000f18:	200001b0 	.word	0x200001b0

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f008 fdca 	bl	8009ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <SystemClock_Config+0xd0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <SystemClock_Config+0xd0>)
 8000f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f90:	2319      	movs	r3, #25
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f94:	23c0      	movs	r3, #192	; 0xc0
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 ffdf 	bl	8003f68 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fb0:	f000 fbd4 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 fa41 	bl	8004458 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fdc:	f000 fbbe 	bl	800175c <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3750      	adds	r7, #80	; 0x50
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	; 0x58
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2220      	movs	r2, #32
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f008 fd4b 	bl	8009ac4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800102e:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <MX_TIM1_Init+0x168>)
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <MX_TIM1_Init+0x16c>)
 8001032:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <MX_TIM1_Init+0x168>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <MX_TIM1_Init+0x168>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8001040:	4b45      	ldr	r3, [pc, #276]	; (8001158 <MX_TIM1_Init+0x168>)
 8001042:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001046:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b43      	ldr	r3, [pc, #268]	; (8001158 <MX_TIM1_Init+0x168>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800104e:	4b42      	ldr	r3, [pc, #264]	; (8001158 <MX_TIM1_Init+0x168>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <MX_TIM1_Init+0x168>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800105a:	483f      	ldr	r0, [pc, #252]	; (8001158 <MX_TIM1_Init+0x168>)
 800105c:	f003 fbb4 	bl	80047c8 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001066:	f000 fb79 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001074:	4619      	mov	r1, r3
 8001076:	4838      	ldr	r0, [pc, #224]	; (8001158 <MX_TIM1_Init+0x168>)
 8001078:	f003 ff2c 	bl	8004ed4 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001082:	f000 fb6b 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001086:	4834      	ldr	r0, [pc, #208]	; (8001158 <MX_TIM1_Init+0x168>)
 8001088:	f003 fc50 	bl	800492c <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001092:	f000 fb63 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010a2:	4619      	mov	r1, r3
 80010a4:	482c      	ldr	r0, [pc, #176]	; (8001158 <MX_TIM1_Init+0x168>)
 80010a6:	f004 fadb 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010b0:	f000 fb54 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	; 0x60
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	481f      	ldr	r0, [pc, #124]	; (8001158 <MX_TIM1_Init+0x168>)
 80010da:	f003 fe39 	bl	8004d50 <HAL_TIM_PWM_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010e4:	f000 fb3a 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	2204      	movs	r2, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4819      	ldr	r0, [pc, #100]	; (8001158 <MX_TIM1_Init+0x168>)
 80010f2:	f003 fe2d 	bl	8004d50 <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010fc:	f000 fb2e 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	2208      	movs	r2, #8
 8001106:	4619      	mov	r1, r3
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <MX_TIM1_Init+0x168>)
 800110a:	f003 fe21 	bl	8004d50 <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001114:	f000 fb22 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM1_Init+0x168>)
 800113c:	f004 fafe 	bl	800573c <HAL_TIMEx_ConfigBreakDeadTime>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001146:	f000 fb09 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM1_Init+0x168>)
 800114c:	f000 fb9c 	bl	8001888 <HAL_TIM_MspPostInit>

}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	; 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001b0 	.word	0x200001b0
 800115c:	40010000 	.word	0x40010000

08001160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM3_Init+0x94>)
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <MX_TIM3_Init+0x98>)
 8001180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM3_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001190:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001194:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM3_Init+0x94>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a4:	f003 fb10 	bl	80047c8 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 fad5 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011c0:	f003 fe88 	bl	8004ed4 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 fac7 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011dc:	f004 fa40 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011e6:	f000 fab9 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001f8 	.word	0x200001f8
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_TIM4_Init+0x94>)
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <MX_TIM4_Init+0x98>)
 800121c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_TIM4_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_TIM4_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_TIM4_Init+0x94>)
 800122c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001230:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_TIM4_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM4_Init+0x94>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_TIM4_Init+0x94>)
 8001240:	f003 fac2 	bl	80047c8 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800124a:	f000 fa87 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_TIM4_Init+0x94>)
 800125c:	f003 fe3a 	bl	8004ed4 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 fa79 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_TIM4_Init+0x94>)
 8001278:	f004 f9f2 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001282:	f000 fa6b 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000240 	.word	0x20000240
 8001294:	40000800 	.word	0x40000800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <MX_GPIO_Init+0x144>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a49      	ldr	r2, [pc, #292]	; (80013dc <MX_GPIO_Init+0x144>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <MX_GPIO_Init+0x144>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <MX_GPIO_Init+0x144>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a42      	ldr	r2, [pc, #264]	; (80013dc <MX_GPIO_Init+0x144>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b40      	ldr	r3, [pc, #256]	; (80013dc <MX_GPIO_Init+0x144>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <MX_GPIO_Init+0x144>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <MX_GPIO_Init+0x144>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b39      	ldr	r3, [pc, #228]	; (80013dc <MX_GPIO_Init+0x144>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MX_GPIO_Init+0x144>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a34      	ldr	r2, [pc, #208]	; (80013dc <MX_GPIO_Init+0x144>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b32      	ldr	r3, [pc, #200]	; (80013dc <MX_GPIO_Init+0x144>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001324:	482e      	ldr	r0, [pc, #184]	; (80013e0 <MX_GPIO_Init+0x148>)
 8001326:	f001 fb4b 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001330:	482c      	ldr	r0, [pc, #176]	; (80013e4 <MX_GPIO_Init+0x14c>)
 8001332:	f001 fb45 	bl	80029c0 <HAL_GPIO_WritePin>
                          |IN3_A_Pin|IN3_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ERROR_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8001336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <MX_GPIO_Init+0x148>)
 8001350:	f001 f99a 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_A_Pin ENC2_A_Pin ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC2_A_Pin|ENC3_A_Pin;
 8001354:	2315      	movs	r3, #21
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001358:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	481f      	ldr	r0, [pc, #124]	; (80013e8 <MX_GPIO_Init+0x150>)
 800136a:	f001 f98d 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin ENC2_B_Pin ENC3_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|ENC2_B_Pin|ENC3_B_Pin;
 800136e:	232a      	movs	r3, #42	; 0x2a
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4819      	ldr	r0, [pc, #100]	; (80013e8 <MX_GPIO_Init+0x150>)
 8001382:	f001 f981 	bl	8002688 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_B_Pin IN2_A_Pin IN2_B_Pin
                           IN3_A_Pin IN3_B_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 8001386:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800138a:	617b      	str	r3, [r7, #20]
                          |IN3_A_Pin|IN3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_GPIO_Init+0x14c>)
 80013a0:	f001 f972 	bl	8002688 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2006      	movs	r0, #6
 80013aa:	f001 f936 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ae:	2006      	movs	r0, #6
 80013b0:	f001 f94f 	bl	8002652 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2008      	movs	r0, #8
 80013ba:	f001 f92e 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013be:	2008      	movs	r0, #8
 80013c0:	f001 f947 	bl	8002652 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	200a      	movs	r0, #10
 80013ca:	f001 f926 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013ce:	200a      	movs	r0, #10
 80013d0:	f001 f93f 	bl	8002652 <HAL_NVIC_EnableIRQ>

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020000 	.word	0x40020000
 80013ec:	00000000 	.word	0x00000000

080013f0 <inverse_kinematics>:

/* USER CODE BEGIN 4 */
void inverse_kinematics(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

	// Determine the two angles and one length
	d_inner_ref = sqrt(X_ref*X_ref + 20*X_ref + 1864);        // in cm
 80013f4:	4b8e      	ldr	r3, [pc, #568]	; (8001630 <inverse_kinematics+0x240>)
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	4b8d      	ldr	r3, [pc, #564]	; (8001630 <inverse_kinematics+0x240>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001404:	4b8a      	ldr	r3, [pc, #552]	; (8001630 <inverse_kinematics+0x240>)
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800140e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001634 <inverse_kinematics+0x244>
 800141a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f847 	bl	80004b4 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	ec43 2b10 	vmov	d0, r2, r3
 800142e:	f008 fdab 	bl	8009f88 <sqrt>
 8001432:	ec53 2b10 	vmov	r2, r3, d0
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fb6b 	bl	8000b14 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	4a7d      	ldr	r2, [pc, #500]	; (8001638 <inverse_kinematics+0x248>)
 8001442:	6013      	str	r3, [r2, #0]
	theta_1_ref = 2*atan( (d_inner_ref + 42)/(X_ref + 10) );  // in radians
 8001444:	4b7c      	ldr	r3, [pc, #496]	; (8001638 <inverse_kinematics+0x248>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800163c <inverse_kinematics+0x24c>
 800144e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001452:	4b77      	ldr	r3, [pc, #476]	; (8001630 <inverse_kinematics+0x240>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800145c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001460:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001464:	ee16 0a90 	vmov	r0, s13
 8001468:	f7ff f824 	bl	80004b4 <__aeabi_f2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	ec43 2b10 	vmov	d0, r2, r3
 8001474:	f008 fb30 	bl	8009ad8 <atan>
 8001478:	ec51 0b10 	vmov	r0, r1, d0
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	f7fe feba 	bl	80001f8 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fb42 	bl	8000b14 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	4a6b      	ldr	r2, [pc, #428]	; (8001640 <inverse_kinematics+0x250>)
 8001494:	6013      	str	r3, [r2, #0]
	// theta_3_ref = M_PI + theta_1_ref;                      // in radians -- NOT REQUIRED

	// Apply the cos theorem
	d_middle_ref = inverse_cos_theorem(D_LOWER_TO_MAIN_POLE, L_LOWER_POLE, (theta_1_ref - M_PI_2));
 8001496:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <inverse_kinematics+0x250>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f80a 	bl	80004b4 <__aeabi_f2d>
 80014a0:	a35b      	add	r3, pc, #364	; (adr r3, 8001610 <inverse_kinematics+0x220>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7fe fea5 	bl	80001f4 <__aeabi_dsub>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb2f 	bl	8000b14 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	ee01 3a10 	vmov	s2, r3
 80014bc:	eddf 0a61 	vldr	s1, [pc, #388]	; 8001644 <inverse_kinematics+0x254>
 80014c0:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8001648 <inverse_kinematics+0x258>
 80014c4:	f000 f8ce 	bl	8001664 <inverse_cos_theorem>
 80014c8:	eef0 7a40 	vmov.f32	s15, s0
 80014cc:	4b5f      	ldr	r3, [pc, #380]	; (800164c <inverse_kinematics+0x25c>)
 80014ce:	edc3 7a00 	vstr	s15, [r3]
	d_outer_ref = inverse_cos_theorem(D_HIGHER_TO_MAIN_POLE, L_HIGHER_POLE, (theta_1_ref - M_PI_2));
 80014d2:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <inverse_kinematics+0x250>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ffec 	bl	80004b4 <__aeabi_f2d>
 80014dc:	a34c      	add	r3, pc, #304	; (adr r3, 8001610 <inverse_kinematics+0x220>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7fe fe87 	bl	80001f4 <__aeabi_dsub>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb11 	bl	8000b14 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	ee01 3a10 	vmov	s2, r3
 80014f8:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 80014fc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001500:	f000 f8b0 	bl	8001664 <inverse_cos_theorem>
 8001504:	eef0 7a40 	vmov.f32	s15, s0
 8001508:	4b51      	ldr	r3, [pc, #324]	; (8001650 <inverse_kinematics+0x260>)
 800150a:	edc3 7a00 	vstr	s15, [r3]

	// Determine motor position reference values (everything in cm)
	mot_inner_set_pos = d_inner_ref - D_INNER_OFFSET;
 800150e:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <inverse_kinematics+0x248>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe ffce 	bl	80004b4 <__aeabi_f2d>
 8001518:	a33f      	add	r3, pc, #252	; (adr r3, 8001618 <inverse_kinematics+0x228>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7fe fe69 	bl	80001f4 <__aeabi_dsub>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff faf3 	bl	8000b14 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	4a48      	ldr	r2, [pc, #288]	; (8001654 <inverse_kinematics+0x264>)
 8001532:	6013      	str	r3, [r2, #0]
	mot_middle_set_pos = d_middle_ref - D_MIDDLE_OFFSET;
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <inverse_kinematics+0x25c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ffbb 	bl	80004b4 <__aeabi_f2d>
 800153e:	a338      	add	r3, pc, #224	; (adr r3, 8001620 <inverse_kinematics+0x230>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7fe fe56 	bl	80001f4 <__aeabi_dsub>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fae0 	bl	8000b14 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	4a40      	ldr	r2, [pc, #256]	; (8001658 <inverse_kinematics+0x268>)
 8001558:	6013      	str	r3, [r2, #0]
	mot_outer_set_pos = d_outer_ref - D_OUTER_OFFSET;
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <inverse_kinematics+0x260>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ffa8 	bl	80004b4 <__aeabi_f2d>
 8001564:	a330      	add	r3, pc, #192	; (adr r3, 8001628 <inverse_kinematics+0x238>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe fe43 	bl	80001f4 <__aeabi_dsub>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff facd 	bl	8000b14 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4a37      	ldr	r2, [pc, #220]	; (800165c <inverse_kinematics+0x26c>)
 800157e:	6013      	str	r3, [r2, #0]

	if ((mot_inner_set_pos>INNER_SET_LIMIT_MAX) || (mot_inner_set_pos<INNER_SET_LIMIT_MIN)) error_code ='r';
 8001580:	4b34      	ldr	r3, [pc, #208]	; (8001654 <inverse_kinematics+0x264>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800158a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	dc09      	bgt.n	80015a8 <inverse_kinematics+0x1b8>
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <inverse_kinematics+0x264>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	d502      	bpl.n	80015ae <inverse_kinematics+0x1be>
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <inverse_kinematics+0x270>)
 80015aa:	2272      	movs	r2, #114	; 0x72
 80015ac:	701a      	strb	r2, [r3, #0]
	if ((mot_middle_set_pos>MIDDLE_SET_LIMIT_MAX) || (mot_middle_set_pos<MIDDLE_SET_LIMIT_MIN)) error_code ='r';
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <inverse_kinematics+0x268>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c0:	dc09      	bgt.n	80015d6 <inverse_kinematics+0x1e6>
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <inverse_kinematics+0x268>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80015cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	d502      	bpl.n	80015dc <inverse_kinematics+0x1ec>
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <inverse_kinematics+0x270>)
 80015d8:	2272      	movs	r2, #114	; 0x72
 80015da:	701a      	strb	r2, [r3, #0]
	if ((mot_outer_set_pos>OUTER_SET_LIMIT_MAX) || (mot_outer_set_pos<OUTER_SET_LIMIT_MIN)) error_code ='r';
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <inverse_kinematics+0x26c>)
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	dc0a      	bgt.n	8001606 <inverse_kinematics+0x216>
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <inverse_kinematics+0x26c>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80015fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	d400      	bmi.n	8001606 <inverse_kinematics+0x216>
}
 8001604:	e002      	b.n	800160c <inverse_kinematics+0x21c>
	if ((mot_outer_set_pos>OUTER_SET_LIMIT_MAX) || (mot_outer_set_pos<OUTER_SET_LIMIT_MIN)) error_code ='r';
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <inverse_kinematics+0x270>)
 8001608:	2272      	movs	r2, #114	; 0x72
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	54442d18 	.word	0x54442d18
 8001614:	3ff921fb 	.word	0x3ff921fb
 8001618:	bfb23217 	.word	0xbfb23217
 800161c:	40459647 	.word	0x40459647
 8001620:	80afbdc8 	.word	0x80afbdc8
 8001624:	4037abf8 	.word	0x4037abf8
 8001628:	bff54df5 	.word	0xbff54df5
 800162c:	4038c4b7 	.word	0x4038c4b7
 8001630:	200002a0 	.word	0x200002a0
 8001634:	44e90000 	.word	0x44e90000
 8001638:	20000294 	.word	0x20000294
 800163c:	42280000 	.word	0x42280000
 8001640:	20000290 	.word	0x20000290
 8001644:	41c75bf5 	.word	0x41c75bf5
 8001648:	41701d15 	.word	0x41701d15
 800164c:	20000298 	.word	0x20000298
 8001650:	2000029c 	.word	0x2000029c
 8001654:	200002dc 	.word	0x200002dc
 8001658:	200002e0 	.word	0x200002e0
 800165c:	200002e4 	.word	0x200002e4
 8001660:	200002a8 	.word	0x200002a8

08001664 <inverse_cos_theorem>:

	// Update X_curr from the values
	X_curr = d_inner_curr*sin(theta_1_curr) - 10;
}

float inverse_cos_theorem(float a, float b, float beta){
 8001664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001670:	edc7 0a02 	vstr	s1, [r7, #8]
 8001674:	ed87 1a01 	vstr	s2, [r7, #4]
	// Given a, b, and the angle beta; find the other side length of the triangle
	return sqrt( (b*b - a*a*sin(beta)*sin(beta)) ) + a*cos(beta);
 8001678:	edd7 7a02 	vldr	s15, [r7, #8]
 800167c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001680:	ee17 0a90 	vmov	r0, s15
 8001684:	f7fe ff16 	bl	80004b4 <__aeabi_f2d>
 8001688:	4604      	mov	r4, r0
 800168a:	460d      	mov	r5, r1
 800168c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001690:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001694:	ee17 0a90 	vmov	r0, s15
 8001698:	f7fe ff0c 	bl	80004b4 <__aeabi_f2d>
 800169c:	4680      	mov	r8, r0
 800169e:	4689      	mov	r9, r1
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7fe ff07 	bl	80004b4 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	ec43 2b10 	vmov	d0, r2, r3
 80016ae:	f008 fc13 	bl	8009ed8 <sin>
 80016b2:	ec53 2b10 	vmov	r2, r3, d0
 80016b6:	4640      	mov	r0, r8
 80016b8:	4649      	mov	r1, r9
 80016ba:	f7fe ff53 	bl	8000564 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4690      	mov	r8, r2
 80016c4:	4699      	mov	r9, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7fe fef4 	bl	80004b4 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	ec43 2b10 	vmov	d0, r2, r3
 80016d4:	f008 fc00 	bl	8009ed8 <sin>
 80016d8:	ec53 2b10 	vmov	r2, r3, d0
 80016dc:	4640      	mov	r0, r8
 80016de:	4649      	mov	r1, r9
 80016e0:	f7fe ff40 	bl	8000564 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe fd82 	bl	80001f4 <__aeabi_dsub>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	ec43 2b17 	vmov	d7, r2, r3
 80016f8:	eeb0 0a47 	vmov.f32	s0, s14
 80016fc:	eef0 0a67 	vmov.f32	s1, s15
 8001700:	f008 fc42 	bl	8009f88 <sqrt>
 8001704:	ec59 8b10 	vmov	r8, r9, d0
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7fe fed3 	bl	80004b4 <__aeabi_f2d>
 800170e:	4604      	mov	r4, r0
 8001710:	460d      	mov	r5, r1
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7fe fece 	bl	80004b4 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	ec43 2b10 	vmov	d0, r2, r3
 8001720:	f008 fb7a 	bl	8009e18 <cos>
 8001724:	ec53 2b10 	vmov	r2, r3, d0
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7fe ff1a 	bl	8000564 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4640      	mov	r0, r8
 8001736:	4649      	mov	r1, r9
 8001738:	f7fe fd5e 	bl	80001f8 <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff f9e6 	bl	8000b14 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	ee07 3a90 	vmov	s15, r3
}
 800174e:	eeb0 0a67 	vmov.f32	s0, s15
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  // EYVAH
	  memcpy(&usb_out, &error_message, sizeof(usb_out));
 8001764:	2220      	movs	r2, #32
 8001766:	4904      	ldr	r1, [pc, #16]	; (8001778 <Error_Handler+0x1c>)
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <Error_Handler+0x20>)
 800176a:	f008 f99d 	bl	8009aa8 <memcpy>
	  CDC_Transmit_FS(usb_out, sizeof(usb_out));
 800176e:	2120      	movs	r1, #32
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <Error_Handler+0x20>)
 8001772:	f007 fd1d 	bl	80091b0 <CDC_Transmit_FS>
	  memcpy(&usb_out, &error_message, sizeof(usb_out));
 8001776:	e7f5      	b.n	8001764 <Error_Handler+0x8>
 8001778:	20000010 	.word	0x20000010
 800177c:	20000000 	.word	0x20000000

08001780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_MspInit+0x4c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_MspInit+0x4c>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_MspInit+0x4c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_MspInit+0x4c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <HAL_TIM_Base_MspInit+0xa8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d10e      	bne.n	8001800 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_TIM_Base_MspInit+0xac>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a24      	ldr	r2, [pc, #144]	; (800187c <HAL_TIM_Base_MspInit+0xac>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_TIM_Base_MspInit+0xac>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017fe:	e036      	b.n	800186e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <HAL_TIM_Base_MspInit+0xb0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d116      	bne.n	8001838 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_TIM_Base_MspInit+0xac>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	4a1a      	ldr	r2, [pc, #104]	; (800187c <HAL_TIM_Base_MspInit+0xac>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6413      	str	r3, [r2, #64]	; 0x40
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_TIM_Base_MspInit+0xac>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	201d      	movs	r0, #29
 800182c:	f000 fef5 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001830:	201d      	movs	r0, #29
 8001832:	f000 ff0e 	bl	8002652 <HAL_NVIC_EnableIRQ>
}
 8001836:	e01a      	b.n	800186e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a11      	ldr	r2, [pc, #68]	; (8001884 <HAL_TIM_Base_MspInit+0xb4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d115      	bne.n	800186e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_TIM_Base_MspInit+0xac>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a0c      	ldr	r2, [pc, #48]	; (800187c <HAL_TIM_Base_MspInit+0xac>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_TIM_Base_MspInit+0xac>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	201e      	movs	r0, #30
 8001864:	f000 fed9 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001868:	201e      	movs	r0, #30
 800186a:	f000 fef2 	bl	8002652 <HAL_NVIC_EnableIRQ>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40010000 	.word	0x40010000
 800187c:	40023800 	.word	0x40023800
 8001880:	40000400 	.word	0x40000400
 8001884:	40000800 	.word	0x40000800

08001888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_TIM_MspPostInit+0x68>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d11e      	bne.n	80018e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_TIM_MspPostInit+0x6c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <HAL_TIM_MspPostInit+0x6c>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_TIM_MspPostInit+0x6c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80018c6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80018ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018d8:	2301      	movs	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <HAL_TIM_MspPostInit+0x70>)
 80018e4:	f000 fed0 	bl	8002688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40010000 	.word	0x40010000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020000 	.word	0x40020000

080018fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <NMI_Handler+0x4>

08001902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler+0x4>

08001908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>

0800190e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <BusFault_Handler+0x4>

08001914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <UsageFault_Handler+0x4>

0800191a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001948:	f000 fd48 	bl	80023dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	/* Check the direction of the first motor */
	if(HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 8001954:	2102      	movs	r1, #2
 8001956:	4811      	ldr	r0, [pc, #68]	; (800199c <EXTI0_IRQHandler+0x4c>)
 8001958:	f001 f81a 	bl	8002990 <HAL_GPIO_ReadPin>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <EXTI0_IRQHandler+0x1e>
		/* Update the position of the first motor */
		enc_inner_pos ++;
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <EXTI0_IRQHandler+0x50>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <EXTI0_IRQHandler+0x50>)
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e004      	b.n	8001978 <EXTI0_IRQHandler+0x28>
	}else{
		enc_inner_pos --;
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <EXTI0_IRQHandler+0x50>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3b01      	subs	r3, #1
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <EXTI0_IRQHandler+0x50>)
 8001976:	6013      	str	r3, [r2, #0]
	}
	enc_inner_pos_cm = (float)enc_inner_pos/(float)(INNER_GEAR_RATIO);
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <EXTI0_IRQHandler+0x50>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001984:	eddf 6a07 	vldr	s13, [pc, #28]	; 80019a4 <EXTI0_IRQHandler+0x54>
 8001988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <EXTI0_IRQHandler+0x58>)
 800198e:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8001992:	2001      	movs	r0, #1
 8001994:	f001 f848 	bl	8002a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40020000 	.word	0x40020000
 80019a0:	200002c4 	.word	0x200002c4
 80019a4:	42200000 	.word	0x42200000
 80019a8:	200002d0 	.word	0x200002d0

080019ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	/* Check the direction of the second motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC2_B_Pin)){
 80019b0:	2108      	movs	r1, #8
 80019b2:	4811      	ldr	r0, [pc, #68]	; (80019f8 <EXTI2_IRQHandler+0x4c>)
 80019b4:	f000 ffec 	bl	8002990 <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <EXTI2_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_middle_pos ++;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <EXTI2_IRQHandler+0x50>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <EXTI2_IRQHandler+0x50>)
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e004      	b.n	80019d4 <EXTI2_IRQHandler+0x28>
		}else{
			enc_middle_pos --;
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <EXTI2_IRQHandler+0x50>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <EXTI2_IRQHandler+0x50>)
 80019d2:	6013      	str	r3, [r2, #0]
		}
		enc_middle_pos_cm = (float)enc_middle_pos/(float)(MIDDLE_GEAR_RATIO);
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <EXTI2_IRQHandler+0x50>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001a00 <EXTI2_IRQHandler+0x54>
 80019e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <EXTI2_IRQHandler+0x58>)
 80019ea:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 80019ee:	2004      	movs	r0, #4
 80019f0:	f001 f81a 	bl	8002a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40020000 	.word	0x40020000
 80019fc:	200002c8 	.word	0x200002c8
 8001a00:	43480000 	.word	0x43480000
 8001a04:	200002d4 	.word	0x200002d4

08001a08 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	/* Check the direction of the third motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC3_B_Pin)){
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	4811      	ldr	r0, [pc, #68]	; (8001a54 <EXTI4_IRQHandler+0x4c>)
 8001a10:	f000 ffbe 	bl	8002990 <HAL_GPIO_ReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <EXTI4_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_outer_pos ++;
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <EXTI4_IRQHandler+0x50>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <EXTI4_IRQHandler+0x50>)
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e004      	b.n	8001a30 <EXTI4_IRQHandler+0x28>
		}else{
			enc_outer_pos --;
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <EXTI4_IRQHandler+0x50>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <EXTI4_IRQHandler+0x50>)
 8001a2e:	6013      	str	r3, [r2, #0]
		}
		enc_outer_pos_cm = (float)enc_outer_pos/(float)(OUTER_GEAR_RATIO);
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <EXTI4_IRQHandler+0x50>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001a5c <EXTI4_IRQHandler+0x54>
 8001a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <EXTI4_IRQHandler+0x58>)
 8001a46:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_A_Pin);
 8001a4a:	2010      	movs	r0, #16
 8001a4c:	f000 ffec 	bl	8002a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40020000 	.word	0x40020000
 8001a58:	200002cc 	.word	0x200002cc
 8001a5c:	42200000 	.word	0x42200000
 8001a60:	200002d8 	.word	0x200002d8

08001a64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <TIM3_IRQHandler+0x10>)
 8001a6a:	f003 f869 	bl	8004b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200001f8 	.word	0x200001f8

08001a78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(error_code == 0 && external_shutdown == 0){
 8001a7e:	4bb9      	ldr	r3, [pc, #740]	; (8001d64 <TIM4_IRQHandler+0x2ec>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f040 8366 	bne.w	8002154 <TIM4_IRQHandler+0x6dc>
 8001a88:	4bb7      	ldr	r3, [pc, #732]	; (8001d68 <TIM4_IRQHandler+0x2f0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f040 8361 	bne.w	8002154 <TIM4_IRQHandler+0x6dc>

	/* Determine PID errors */
	inner_pos_error = mot_inner_set_pos - enc_inner_pos_cm;
 8001a92:	4bb6      	ldr	r3, [pc, #728]	; (8001d6c <TIM4_IRQHandler+0x2f4>)
 8001a94:	ed93 7a00 	vldr	s14, [r3]
 8001a98:	4bb5      	ldr	r3, [pc, #724]	; (8001d70 <TIM4_IRQHandler+0x2f8>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa2:	4bb4      	ldr	r3, [pc, #720]	; (8001d74 <TIM4_IRQHandler+0x2fc>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
	middle_pos_error = mot_middle_set_pos - enc_middle_pos_cm;
 8001aa8:	4bb3      	ldr	r3, [pc, #716]	; (8001d78 <TIM4_IRQHandler+0x300>)
 8001aaa:	ed93 7a00 	vldr	s14, [r3]
 8001aae:	4bb3      	ldr	r3, [pc, #716]	; (8001d7c <TIM4_IRQHandler+0x304>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab8:	4bb1      	ldr	r3, [pc, #708]	; (8001d80 <TIM4_IRQHandler+0x308>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]
	outer_pos_error = mot_outer_set_pos - enc_outer_pos_cm;
 8001abe:	4bb1      	ldr	r3, [pc, #708]	; (8001d84 <TIM4_IRQHandler+0x30c>)
 8001ac0:	ed93 7a00 	vldr	s14, [r3]
 8001ac4:	4bb0      	ldr	r3, [pc, #704]	; (8001d88 <TIM4_IRQHandler+0x310>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ace:	4baf      	ldr	r3, [pc, #700]	; (8001d8c <TIM4_IRQHandler+0x314>)
 8001ad0:	edc3 7a00 	vstr	s15, [r3]

	float inner_der_error=(inner_pos_error-pre_inner_pos_error)*PID_freq;
 8001ad4:	4ba7      	ldr	r3, [pc, #668]	; (8001d74 <TIM4_IRQHandler+0x2fc>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	4bad      	ldr	r3, [pc, #692]	; (8001d90 <TIM4_IRQHandler+0x318>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ae4:	4bab      	ldr	r3, [pc, #684]	; (8001d94 <TIM4_IRQHandler+0x31c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	edc7 7a03 	vstr	s15, [r7, #12]
	float middle_der_error=(middle_pos_error-pre_middle_pos_error)*PID_freq;
 8001af8:	4ba1      	ldr	r3, [pc, #644]	; (8001d80 <TIM4_IRQHandler+0x308>)
 8001afa:	ed93 7a00 	vldr	s14, [r3]
 8001afe:	4ba6      	ldr	r3, [pc, #664]	; (8001d98 <TIM4_IRQHandler+0x320>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b08:	4ba2      	ldr	r3, [pc, #648]	; (8001d94 <TIM4_IRQHandler+0x31c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b18:	edc7 7a02 	vstr	s15, [r7, #8]
	float outer_der_error=(outer_pos_error-pre_outer_pos_error)*PID_freq;
 8001b1c:	4b9b      	ldr	r3, [pc, #620]	; (8001d8c <TIM4_IRQHandler+0x314>)
 8001b1e:	ed93 7a00 	vldr	s14, [r3]
 8001b22:	4b9e      	ldr	r3, [pc, #632]	; (8001d9c <TIM4_IRQHandler+0x324>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b2c:	4b99      	ldr	r3, [pc, #612]	; (8001d94 <TIM4_IRQHandler+0x31c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	edc7 7a01 	vstr	s15, [r7, #4]

	inner_int_error+=inner_pos_error/PID_freq;
 8001b40:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <TIM4_IRQHandler+0x2fc>)
 8001b42:	edd3 6a00 	vldr	s13, [r3]
 8001b46:	4b93      	ldr	r3, [pc, #588]	; (8001d94 <TIM4_IRQHandler+0x31c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b56:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <TIM4_IRQHandler+0x328>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <TIM4_IRQHandler+0x328>)
 8001b62:	edc3 7a00 	vstr	s15, [r3]
	middle_int_error+=middle_pos_error/PID_freq;
 8001b66:	4b86      	ldr	r3, [pc, #536]	; (8001d80 <TIM4_IRQHandler+0x308>)
 8001b68:	edd3 6a00 	vldr	s13, [r3]
 8001b6c:	4b89      	ldr	r3, [pc, #548]	; (8001d94 <TIM4_IRQHandler+0x31c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b7c:	4b89      	ldr	r3, [pc, #548]	; (8001da4 <TIM4_IRQHandler+0x32c>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	4b87      	ldr	r3, [pc, #540]	; (8001da4 <TIM4_IRQHandler+0x32c>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]
	outer_int_error+=outer_pos_error/PID_freq;
 8001b8c:	4b7f      	ldr	r3, [pc, #508]	; (8001d8c <TIM4_IRQHandler+0x314>)
 8001b8e:	edd3 6a00 	vldr	s13, [r3]
 8001b92:	4b80      	ldr	r3, [pc, #512]	; (8001d94 <TIM4_IRQHandler+0x31c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ba2:	4b81      	ldr	r3, [pc, #516]	; (8001da8 <TIM4_IRQHandler+0x330>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bac:	4b7e      	ldr	r3, [pc, #504]	; (8001da8 <TIM4_IRQHandler+0x330>)
 8001bae:	edc3 7a00 	vstr	s15, [r3]

	if (inner_int_error>=ANTI_WIND_UP) inner_int_error=ANTI_WIND_UP;
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <TIM4_IRQHandler+0x328>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001dac <TIM4_IRQHandler+0x334>
 8001bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc4:	db02      	blt.n	8001bcc <TIM4_IRQHandler+0x154>
 8001bc6:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <TIM4_IRQHandler+0x328>)
 8001bc8:	4a79      	ldr	r2, [pc, #484]	; (8001db0 <TIM4_IRQHandler+0x338>)
 8001bca:	601a      	str	r2, [r3, #0]
	if (middle_int_error>=ANTI_WIND_UP) middle_int_error=ANTI_WIND_UP;
 8001bcc:	4b75      	ldr	r3, [pc, #468]	; (8001da4 <TIM4_IRQHandler+0x32c>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001dac <TIM4_IRQHandler+0x334>
 8001bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	db02      	blt.n	8001be6 <TIM4_IRQHandler+0x16e>
 8001be0:	4b70      	ldr	r3, [pc, #448]	; (8001da4 <TIM4_IRQHandler+0x32c>)
 8001be2:	4a73      	ldr	r2, [pc, #460]	; (8001db0 <TIM4_IRQHandler+0x338>)
 8001be4:	601a      	str	r2, [r3, #0]
	if (outer_int_error>=ANTI_WIND_UP) outer_int_error=ANTI_WIND_UP;
 8001be6:	4b70      	ldr	r3, [pc, #448]	; (8001da8 <TIM4_IRQHandler+0x330>)
 8001be8:	edd3 7a00 	vldr	s15, [r3]
 8001bec:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001dac <TIM4_IRQHandler+0x334>
 8001bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	db02      	blt.n	8001c00 <TIM4_IRQHandler+0x188>
 8001bfa:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <TIM4_IRQHandler+0x330>)
 8001bfc:	4a6c      	ldr	r2, [pc, #432]	; (8001db0 <TIM4_IRQHandler+0x338>)
 8001bfe:	601a      	str	r2, [r3, #0]

	if (inner_int_error<=-ANTI_WIND_UP) inner_int_error=-ANTI_WIND_UP;
 8001c00:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <TIM4_IRQHandler+0x328>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001db4 <TIM4_IRQHandler+0x33c>
 8001c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c12:	d802      	bhi.n	8001c1a <TIM4_IRQHandler+0x1a2>
 8001c14:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <TIM4_IRQHandler+0x328>)
 8001c16:	4a68      	ldr	r2, [pc, #416]	; (8001db8 <TIM4_IRQHandler+0x340>)
 8001c18:	601a      	str	r2, [r3, #0]
	if (middle_int_error<=-ANTI_WIND_UP) middle_int_error=-ANTI_WIND_UP;
 8001c1a:	4b62      	ldr	r3, [pc, #392]	; (8001da4 <TIM4_IRQHandler+0x32c>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001db4 <TIM4_IRQHandler+0x33c>
 8001c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	d802      	bhi.n	8001c34 <TIM4_IRQHandler+0x1bc>
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <TIM4_IRQHandler+0x32c>)
 8001c30:	4a61      	ldr	r2, [pc, #388]	; (8001db8 <TIM4_IRQHandler+0x340>)
 8001c32:	601a      	str	r2, [r3, #0]
	if (outer_int_error<=-ANTI_WIND_UP) outer_int_error=-ANTI_WIND_UP;
 8001c34:	4b5c      	ldr	r3, [pc, #368]	; (8001da8 <TIM4_IRQHandler+0x330>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001db4 <TIM4_IRQHandler+0x33c>
 8001c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d802      	bhi.n	8001c4e <TIM4_IRQHandler+0x1d6>
 8001c48:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <TIM4_IRQHandler+0x330>)
 8001c4a:	4a5b      	ldr	r2, [pc, #364]	; (8001db8 <TIM4_IRQHandler+0x340>)
 8001c4c:	601a      	str	r2, [r3, #0]

	if (((inner_pos_error>0) && (inner_int_error<0))||((inner_pos_error<0) && (inner_int_error>0))) inner_int_error=0;
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <TIM4_IRQHandler+0x2fc>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	dd07      	ble.n	8001c6e <TIM4_IRQHandler+0x1f6>
 8001c5e:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <TIM4_IRQHandler+0x328>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d40f      	bmi.n	8001c8e <TIM4_IRQHandler+0x216>
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <TIM4_IRQHandler+0x2fc>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	d50b      	bpl.n	8001c96 <TIM4_IRQHandler+0x21e>
 8001c7e:	4b48      	ldr	r3, [pc, #288]	; (8001da0 <TIM4_IRQHandler+0x328>)
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	dd03      	ble.n	8001c96 <TIM4_IRQHandler+0x21e>
 8001c8e:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <TIM4_IRQHandler+0x328>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
	if (((middle_pos_error>0) && (middle_int_error<0))||((middle_pos_error<0) && (middle_int_error>0))) middle_int_error=0;
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <TIM4_IRQHandler+0x308>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	dd07      	ble.n	8001cb6 <TIM4_IRQHandler+0x23e>
 8001ca6:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <TIM4_IRQHandler+0x32c>)
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	d40f      	bmi.n	8001cd6 <TIM4_IRQHandler+0x25e>
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <TIM4_IRQHandler+0x308>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc4:	d50b      	bpl.n	8001cde <TIM4_IRQHandler+0x266>
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <TIM4_IRQHandler+0x32c>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	dd03      	ble.n	8001cde <TIM4_IRQHandler+0x266>
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <TIM4_IRQHandler+0x32c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
	if (((outer_pos_error>0) && (outer_int_error<0))||((outer_pos_error<0) && (outer_int_error>0))) outer_int_error=0;
 8001cde:	4b2b      	ldr	r3, [pc, #172]	; (8001d8c <TIM4_IRQHandler+0x314>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	dd07      	ble.n	8001cfe <TIM4_IRQHandler+0x286>
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <TIM4_IRQHandler+0x330>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	d40f      	bmi.n	8001d1e <TIM4_IRQHandler+0x2a6>
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <TIM4_IRQHandler+0x314>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0c:	d50b      	bpl.n	8001d26 <TIM4_IRQHandler+0x2ae>
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <TIM4_IRQHandler+0x330>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	dd03      	ble.n	8001d26 <TIM4_IRQHandler+0x2ae>
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <TIM4_IRQHandler+0x330>)
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]

	pre_inner_pos_error=inner_pos_error;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <TIM4_IRQHandler+0x2fc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <TIM4_IRQHandler+0x318>)
 8001d2c:	6013      	str	r3, [r2, #0]
	pre_middle_pos_error=middle_pos_error;
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <TIM4_IRQHandler+0x308>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <TIM4_IRQHandler+0x320>)
 8001d34:	6013      	str	r3, [r2, #0]
	pre_outer_pos_error=outer_pos_error;
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <TIM4_IRQHandler+0x314>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <TIM4_IRQHandler+0x324>)
 8001d3c:	6013      	str	r3, [r2, #0]

	/* Set the duty (only proportional implemented for now) */
	duty_inner = (int)((kp_inner*inner_pos_error)+(kd_inner*inner_der_error)+(ki_inner*inner_int_error));
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <TIM4_IRQHandler+0x344>)
 8001d40:	ed93 7a00 	vldr	s14, [r3]
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <TIM4_IRQHandler+0x2fc>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <TIM4_IRQHandler+0x348>)
 8001d50:	edd3 6a00 	vldr	s13, [r3]
 8001d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d60:	e030      	b.n	8001dc4 <TIM4_IRQHandler+0x34c>
 8001d62:	bf00      	nop
 8001d64:	200002a8 	.word	0x200002a8
 8001d68:	200002a9 	.word	0x200002a9
 8001d6c:	200002dc 	.word	0x200002dc
 8001d70:	200002d0 	.word	0x200002d0
 8001d74:	200002e8 	.word	0x200002e8
 8001d78:	200002e0 	.word	0x200002e0
 8001d7c:	200002d4 	.word	0x200002d4
 8001d80:	200002ec 	.word	0x200002ec
 8001d84:	200002e4 	.word	0x200002e4
 8001d88:	200002d8 	.word	0x200002d8
 8001d8c:	200002f0 	.word	0x200002f0
 8001d90:	200002f4 	.word	0x200002f4
 8001d94:	20000288 	.word	0x20000288
 8001d98:	200002f8 	.word	0x200002f8
 8001d9c:	200002fc 	.word	0x200002fc
 8001da0:	20000300 	.word	0x20000300
 8001da4:	20000304 	.word	0x20000304
 8001da8:	20000308 	.word	0x20000308
 8001dac:	42200000 	.word	0x42200000
 8001db0:	42200000 	.word	0x42200000
 8001db4:	c2200000 	.word	0xc2200000
 8001db8:	c2200000 	.word	0xc2200000
 8001dbc:	20000018 	.word	0x20000018
 8001dc0:	2000030c 	.word	0x2000030c
 8001dc4:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <TIM4_IRQHandler+0x4b0>)
 8001dc6:	edd3 6a00 	vldr	s13, [r3]
 8001dca:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <TIM4_IRQHandler+0x4b4>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ddc:	ee17 2a90 	vmov	r2, s15
 8001de0:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <TIM4_IRQHandler+0x4b8>)
 8001de2:	601a      	str	r2, [r3, #0]
	duty_middle = (int)(kp_middle*middle_pos_error+kd_middle*middle_der_error+ki_middle*middle_int_error);
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <TIM4_IRQHandler+0x4bc>)
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <TIM4_IRQHandler+0x4c0>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <TIM4_IRQHandler+0x4c4>)
 8001df6:	edd3 6a00 	vldr	s13, [r3]
 8001dfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e06:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <TIM4_IRQHandler+0x4c8>)
 8001e08:	edd3 6a00 	vldr	s13, [r3]
 8001e0c:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <TIM4_IRQHandler+0x4cc>)
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1e:	ee17 2a90 	vmov	r2, s15
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <TIM4_IRQHandler+0x4d0>)
 8001e24:	601a      	str	r2, [r3, #0]
	duty_outer = (int)(kp_outer*outer_pos_error+kd_outer*outer_der_error+ki_outer*outer_int_error);
 8001e26:	4b49      	ldr	r3, [pc, #292]	; (8001f4c <TIM4_IRQHandler+0x4d4>)
 8001e28:	ed93 7a00 	vldr	s14, [r3]
 8001e2c:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <TIM4_IRQHandler+0x4d8>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <TIM4_IRQHandler+0x4dc>)
 8001e38:	edd3 6a00 	vldr	s13, [r3]
 8001e3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e48:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <TIM4_IRQHandler+0x4e0>)
 8001e4a:	edd3 6a00 	vldr	s13, [r3]
 8001e4e:	4b43      	ldr	r3, [pc, #268]	; (8001f5c <TIM4_IRQHandler+0x4e4>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e60:	ee17 2a90 	vmov	r2, s15
 8001e64:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <TIM4_IRQHandler+0x4e8>)
 8001e66:	601a      	str	r2, [r3, #0]

	/* Set the direction */
	if(duty_inner > 0){
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <TIM4_IRQHandler+0x4b8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	dd0e      	ble.n	8001e8e <TIM4_IRQHandler+0x416>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <TIM4_IRQHandler+0x4ec>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	2108      	movs	r1, #8
 8001e78:	483b      	ldr	r0, [pc, #236]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001e7a:	f000 fda1 	bl	80029c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, HIGH);
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <TIM4_IRQHandler+0x4f4>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	2110      	movs	r1, #16
 8001e86:	4838      	ldr	r0, [pc, #224]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001e88:	f000 fd9a 	bl	80029c0 <HAL_GPIO_WritePin>
 8001e8c:	e012      	b.n	8001eb4 <TIM4_IRQHandler+0x43c>
	}
	else{
			duty_inner = -duty_inner;
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <TIM4_IRQHandler+0x4b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	425b      	negs	r3, r3
 8001e94:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <TIM4_IRQHandler+0x4b8>)
 8001e96:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 8001e98:	4b32      	ldr	r3, [pc, #200]	; (8001f64 <TIM4_IRQHandler+0x4ec>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2110      	movs	r1, #16
 8001ea0:	4831      	ldr	r0, [pc, #196]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001ea2:	f000 fd8d 	bl	80029c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, HIGH);
 8001ea6:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <TIM4_IRQHandler+0x4f4>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2108      	movs	r1, #8
 8001eae:	482e      	ldr	r0, [pc, #184]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001eb0:	f000 fd86 	bl	80029c0 <HAL_GPIO_WritePin>
	}
	if(duty_middle > 0){
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <TIM4_IRQHandler+0x4d0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dd0e      	ble.n	8001eda <TIM4_IRQHandler+0x462>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, LOW);
 8001ebc:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <TIM4_IRQHandler+0x4ec>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2120      	movs	r1, #32
 8001ec4:	4828      	ldr	r0, [pc, #160]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001ec6:	f000 fd7b 	bl	80029c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, HIGH);
 8001eca:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <TIM4_IRQHandler+0x4f4>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2140      	movs	r1, #64	; 0x40
 8001ed2:	4825      	ldr	r0, [pc, #148]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001ed4:	f000 fd74 	bl	80029c0 <HAL_GPIO_WritePin>
 8001ed8:	e012      	b.n	8001f00 <TIM4_IRQHandler+0x488>
	}
	else{
			duty_middle = -duty_middle;
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <TIM4_IRQHandler+0x4d0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	425b      	negs	r3, r3
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <TIM4_IRQHandler+0x4d0>)
 8001ee2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, LOW);
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <TIM4_IRQHandler+0x4ec>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2140      	movs	r1, #64	; 0x40
 8001eec:	481e      	ldr	r0, [pc, #120]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001eee:	f000 fd67 	bl	80029c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, HIGH);
 8001ef2:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <TIM4_IRQHandler+0x4f4>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2120      	movs	r1, #32
 8001efa:	481b      	ldr	r0, [pc, #108]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001efc:	f000 fd60 	bl	80029c0 <HAL_GPIO_WritePin>
	}
	if(duty_outer > 0){
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <TIM4_IRQHandler+0x4e8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	dd33      	ble.n	8001f70 <TIM4_IRQHandler+0x4f8>
			HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, LOW);
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <TIM4_IRQHandler+0x4ec>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	4815      	ldr	r0, [pc, #84]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001f12:	f000 fd55 	bl	80029c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, HIGH);
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <TIM4_IRQHandler+0x4f4>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f20:	4811      	ldr	r0, [pc, #68]	; (8001f68 <TIM4_IRQHandler+0x4f0>)
 8001f22:	f000 fd4d 	bl	80029c0 <HAL_GPIO_WritePin>
 8001f26:	e037      	b.n	8001f98 <TIM4_IRQHandler+0x520>
 8001f28:	2000001c 	.word	0x2000001c
 8001f2c:	20000300 	.word	0x20000300
 8001f30:	20000318 	.word	0x20000318
 8001f34:	20000020 	.word	0x20000020
 8001f38:	200002ec 	.word	0x200002ec
 8001f3c:	20000310 	.word	0x20000310
 8001f40:	20000024 	.word	0x20000024
 8001f44:	20000304 	.word	0x20000304
 8001f48:	2000031c 	.word	0x2000031c
 8001f4c:	20000028 	.word	0x20000028
 8001f50:	200002f0 	.word	0x200002f0
 8001f54:	20000314 	.word	0x20000314
 8001f58:	2000002c 	.word	0x2000002c
 8001f5c:	20000308 	.word	0x20000308
 8001f60:	20000320 	.word	0x20000320
 8001f64:	20000324 	.word	0x20000324
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	20000030 	.word	0x20000030
	}
	else{
			duty_outer = -duty_outer;
 8001f70:	4b87      	ldr	r3, [pc, #540]	; (8002190 <TIM4_IRQHandler+0x718>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	425b      	negs	r3, r3
 8001f76:	4a86      	ldr	r2, [pc, #536]	; (8002190 <TIM4_IRQHandler+0x718>)
 8001f78:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, LOW);
 8001f7a:	4b86      	ldr	r3, [pc, #536]	; (8002194 <TIM4_IRQHandler+0x71c>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f84:	4884      	ldr	r0, [pc, #528]	; (8002198 <TIM4_IRQHandler+0x720>)
 8001f86:	f000 fd1b 	bl	80029c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, HIGH);
 8001f8a:	4b84      	ldr	r3, [pc, #528]	; (800219c <TIM4_IRQHandler+0x724>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	4881      	ldr	r0, [pc, #516]	; (8002198 <TIM4_IRQHandler+0x720>)
 8001f94:	f000 fd14 	bl	80029c0 <HAL_GPIO_WritePin>
	}

	/* Limit the duty */
	if(duty_inner > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001f98:	4b81      	ldr	r3, [pc, #516]	; (80021a0 <TIM4_IRQHandler+0x728>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fa77 	bl	8000490 <__aeabi_i2d>
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	460d      	mov	r5, r1
 8001fa6:	4b7f      	ldr	r3, [pc, #508]	; (80021a4 <TIM4_IRQHandler+0x72c>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fa5f 	bl	8000470 <__aeabi_ui2d>
 8001fb2:	a375      	add	r3, pc, #468	; (adr r3, 8002188 <TIM4_IRQHandler+0x710>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	f7fe fad4 	bl	8000564 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f7fe fd5e 	bl	8000a84 <__aeabi_dcmpgt>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d013      	beq.n	8001ff6 <TIM4_IRQHandler+0x57e>
			duty_inner = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001fce:	4b75      	ldr	r3, [pc, #468]	; (80021a4 <TIM4_IRQHandler+0x72c>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fa4b 	bl	8000470 <__aeabi_ui2d>
 8001fda:	a36b      	add	r3, pc, #428	; (adr r3, 8002188 <TIM4_IRQHandler+0x710>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe fac0 	bl	8000564 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f7fe fd6a 	bl	8000ac4 <__aeabi_d2iz>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4a6b      	ldr	r2, [pc, #428]	; (80021a0 <TIM4_IRQHandler+0x728>)
 8001ff4:	6013      	str	r3, [r2, #0]
		}
	if(duty_middle > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <TIM4_IRQHandler+0x730>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa48 	bl	8000490 <__aeabi_i2d>
 8002000:	4604      	mov	r4, r0
 8002002:	460d      	mov	r5, r1
 8002004:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <TIM4_IRQHandler+0x72c>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	3301      	adds	r3, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa30 	bl	8000470 <__aeabi_ui2d>
 8002010:	a35d      	add	r3, pc, #372	; (adr r3, 8002188 <TIM4_IRQHandler+0x710>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe faa5 	bl	8000564 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe fd2f 	bl	8000a84 <__aeabi_dcmpgt>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <TIM4_IRQHandler+0x5dc>
			duty_middle = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 800202c:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <TIM4_IRQHandler+0x72c>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	3301      	adds	r3, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fa1c 	bl	8000470 <__aeabi_ui2d>
 8002038:	a353      	add	r3, pc, #332	; (adr r3, 8002188 <TIM4_IRQHandler+0x710>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe fa91 	bl	8000564 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f7fe fd3b 	bl	8000ac4 <__aeabi_d2iz>
 800204e:	4603      	mov	r3, r0
 8002050:	4a55      	ldr	r2, [pc, #340]	; (80021a8 <TIM4_IRQHandler+0x730>)
 8002052:	6013      	str	r3, [r2, #0]
		}
	if(duty_outer > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8002054:	4b4e      	ldr	r3, [pc, #312]	; (8002190 <TIM4_IRQHandler+0x718>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa19 	bl	8000490 <__aeabi_i2d>
 800205e:	4604      	mov	r4, r0
 8002060:	460d      	mov	r5, r1
 8002062:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <TIM4_IRQHandler+0x72c>)
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	3301      	adds	r3, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa01 	bl	8000470 <__aeabi_ui2d>
 800206e:	a346      	add	r3, pc, #280	; (adr r3, 8002188 <TIM4_IRQHandler+0x710>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fa76 	bl	8000564 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4620      	mov	r0, r4
 800207e:	4629      	mov	r1, r5
 8002080:	f7fe fd00 	bl	8000a84 <__aeabi_dcmpgt>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d013      	beq.n	80020b2 <TIM4_IRQHandler+0x63a>
			duty_outer = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 800208a:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <TIM4_IRQHandler+0x72c>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	3301      	adds	r3, #1
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f9ed 	bl	8000470 <__aeabi_ui2d>
 8002096:	a33c      	add	r3, pc, #240	; (adr r3, 8002188 <TIM4_IRQHandler+0x710>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fa62 	bl	8000564 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fd0c 	bl	8000ac4 <__aeabi_d2iz>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4a38      	ldr	r2, [pc, #224]	; (8002190 <TIM4_IRQHandler+0x718>)
 80020b0:	6013      	str	r3, [r2, #0]
		}
	TIM1->CCR1 = duty_inner;
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <TIM4_IRQHandler+0x728>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <TIM4_IRQHandler+0x734>)
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_middle;
 80020ba:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <TIM4_IRQHandler+0x730>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <TIM4_IRQHandler+0x734>)
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_outer;
 80020c2:	4b33      	ldr	r3, [pc, #204]	; (8002190 <TIM4_IRQHandler+0x718>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b39      	ldr	r3, [pc, #228]	; (80021ac <TIM4_IRQHandler+0x734>)
 80020c8:	63da      	str	r2, [r3, #60]	; 0x3c

	// Send acknowledge if the system reaches steady state
	if (ack_to_be_sent == 1 && fabs(inner_pos_error) <= 0.5 && fabs(middle_pos_error) <= 0.5 && fabs(outer_pos_error) <= 0.5){
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <TIM4_IRQHandler+0x738>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d13b      	bne.n	800214a <TIM4_IRQHandler+0x6d2>
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <TIM4_IRQHandler+0x73c>)
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	eef0 7ae7 	vabs.f32	s15, s15
 80020dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d82f      	bhi.n	800214a <TIM4_IRQHandler+0x6d2>
 80020ea:	4b33      	ldr	r3, [pc, #204]	; (80021b8 <TIM4_IRQHandler+0x740>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	eef0 7ae7 	vabs.f32	s15, s15
 80020f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d823      	bhi.n	800214a <TIM4_IRQHandler+0x6d2>
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <TIM4_IRQHandler+0x744>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	eef0 7ae7 	vabs.f32	s15, s15
 800210c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	d817      	bhi.n	800214a <TIM4_IRQHandler+0x6d2>
		steady_state_counter++;
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <TIM4_IRQHandler+0x748>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <TIM4_IRQHandler+0x748>)
 8002124:	701a      	strb	r2, [r3, #0]
		if (steady_state_counter == 255){
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <TIM4_IRQHandler+0x748>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2bff      	cmp	r3, #255	; 0xff
 800212c:	d111      	bne.n	8002152 <TIM4_IRQHandler+0x6da>
			memcpy(&usb_out, &acknowledge_message, sizeof(usb_out));
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <TIM4_IRQHandler+0x74c>)
 8002130:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <TIM4_IRQHandler+0x750>)
 8002132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002136:	e883 0003 	stmia.w	r3, {r0, r1}
			CDC_Transmit_FS(usb_out, sizeof(usb_out));
 800213a:	2108      	movs	r1, #8
 800213c:	4821      	ldr	r0, [pc, #132]	; (80021c4 <TIM4_IRQHandler+0x74c>)
 800213e:	f007 f837 	bl	80091b0 <CDC_Transmit_FS>
			ack_to_be_sent = 0;
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <TIM4_IRQHandler+0x738>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
		if (steady_state_counter == 255){
 8002148:	e003      	b.n	8002152 <TIM4_IRQHandler+0x6da>
		}
	}
	else {
		steady_state_counter = 0;
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <TIM4_IRQHandler+0x748>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
	if(error_code == 0 && external_shutdown == 0){
 8002150:	e013      	b.n	800217a <TIM4_IRQHandler+0x702>
 8002152:	e012      	b.n	800217a <TIM4_IRQHandler+0x702>
	}

	}
	else{
		TIM1->CCR1 = 0;
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <TIM4_IRQHandler+0x734>)
 8002156:	2200      	movs	r2, #0
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <TIM4_IRQHandler+0x734>)
 800215c:	2200      	movs	r2, #0
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <TIM4_IRQHandler+0x734>)
 8002162:	2200      	movs	r2, #0
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c
		memcpy(&usb_out, &error_message, sizeof(usb_out));
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <TIM4_IRQHandler+0x74c>)
 8002168:	4a18      	ldr	r2, [pc, #96]	; (80021cc <TIM4_IRQHandler+0x754>)
 800216a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800216e:	e883 0003 	stmia.w	r3, {r0, r1}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 8002172:	2108      	movs	r1, #8
 8002174:	4813      	ldr	r0, [pc, #76]	; (80021c4 <TIM4_IRQHandler+0x74c>)
 8002176:	f007 f81b 	bl	80091b0 <CDC_Transmit_FS>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800217a:	4815      	ldr	r0, [pc, #84]	; (80021d0 <TIM4_IRQHandler+0x758>)
 800217c:	f002 fce0 	bl	8004b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bdb0      	pop	{r4, r5, r7, pc}
 8002188:	66666666 	.word	0x66666666
 800218c:	3fee6666 	.word	0x3fee6666
 8002190:	20000320 	.word	0x20000320
 8002194:	20000324 	.word	0x20000324
 8002198:	40020400 	.word	0x40020400
 800219c:	20000030 	.word	0x20000030
 80021a0:	20000318 	.word	0x20000318
 80021a4:	200001b0 	.word	0x200001b0
 80021a8:	2000031c 	.word	0x2000031c
 80021ac:	40010000 	.word	0x40010000
 80021b0:	200002aa 	.word	0x200002aa
 80021b4:	200002e8 	.word	0x200002e8
 80021b8:	200002ec 	.word	0x200002ec
 80021bc:	200002f0 	.word	0x200002f0
 80021c0:	200002ab 	.word	0x200002ab
 80021c4:	20000000 	.word	0x20000000
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000010 	.word	0x20000010
 80021d0:	20000240 	.word	0x20000240

080021d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

	CDC_Receive_FS(usb_temp,sizeof(usb_temp));
 80021d8:	2108      	movs	r1, #8
 80021da:	482e      	ldr	r0, [pc, #184]	; (8002294 <OTG_FS_IRQHandler+0xc0>)
 80021dc:	f006 ffd4 	bl	8009188 <CDC_Receive_FS>

	if(strcmp((char *)usb_temp, (char *)empty_string) != 0){
 80021e0:	492d      	ldr	r1, [pc, #180]	; (8002298 <OTG_FS_IRQHandler+0xc4>)
 80021e2:	482c      	ldr	r0, [pc, #176]	; (8002294 <OTG_FS_IRQHandler+0xc0>)
 80021e4:	f7fd fff8 	bl	80001d8 <strcmp>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d047      	beq.n	800227e <OTG_FS_IRQHandler+0xaa>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80021ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f2:	482a      	ldr	r0, [pc, #168]	; (800229c <OTG_FS_IRQHandler+0xc8>)
 80021f4:	f000 fbfd 	bl	80029f2 <HAL_GPIO_TogglePin>

		// Store the data in usb_in array if a non-empty message received
		memcpy(&usb_in, &usb_temp, sizeof(usb_in));
 80021f8:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <OTG_FS_IRQHandler+0xcc>)
 80021fa:	4a26      	ldr	r2, [pc, #152]	; (8002294 <OTG_FS_IRQHandler+0xc0>)
 80021fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002200:	e883 0003 	stmia.w	r3, {r0, r1}

		/* Parsing USB Message*/
		if(usb_in[0] == 'm'){
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <OTG_FS_IRQHandler+0xcc>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b6d      	cmp	r3, #109	; 0x6d
 800220a:	d131      	bne.n	8002270 <OTG_FS_IRQHandler+0x9c>
			move_x = usb_in[1]*256 + usb_in[2];
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <OTG_FS_IRQHandler+0xcc>)
 800220e:	785b      	ldrb	r3, [r3, #1]
 8002210:	b29b      	uxth	r3, r3
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b29a      	uxth	r2, r3
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <OTG_FS_IRQHandler+0xcc>)
 8002218:	789b      	ldrb	r3, [r3, #2]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4413      	add	r3, r2
 800221e:	b29b      	uxth	r3, r3
 8002220:	b21a      	sxth	r2, r3
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <OTG_FS_IRQHandler+0xd0>)
 8002224:	801a      	strh	r2, [r3, #0]
			move_y = usb_in[3]*256 + usb_in[4];
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <OTG_FS_IRQHandler+0xcc>)
 8002228:	78db      	ldrb	r3, [r3, #3]
 800222a:	b29b      	uxth	r3, r3
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b29a      	uxth	r2, r3
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <OTG_FS_IRQHandler+0xcc>)
 8002232:	791b      	ldrb	r3, [r3, #4]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4413      	add	r3, r2
 8002238:	b29b      	uxth	r3, r3
 800223a:	b21a      	sxth	r2, r3
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <OTG_FS_IRQHandler+0xd4>)
 800223e:	801a      	strh	r2, [r3, #0]
			usb_in[4] = move_y%256;
			usb_in[5] = '\n';
			CDC_Transmit_FS(usb_in,sizeof(usb_in));
			*/

			X_ref = X_curr + (float)move_x/10;
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <OTG_FS_IRQHandler+0xd0>)
 8002242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800224e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002252:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <OTG_FS_IRQHandler+0xd8>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <OTG_FS_IRQHandler+0xdc>)
 8002262:	edc3 7a00 	vstr	s15, [r3]

			// Apply inverse kinematics to update set values
			inverse_kinematics();
 8002266:	f7ff f8c3 	bl	80013f0 <inverse_kinematics>
			ack_to_be_sent = 1;
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <OTG_FS_IRQHandler+0xe0>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]

		}
		if(usb_in[0] == 's'){
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <OTG_FS_IRQHandler+0xcc>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b73      	cmp	r3, #115	; 0x73
 8002276:	d102      	bne.n	800227e <OTG_FS_IRQHandler+0xaa>
			external_shutdown = 1;
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <OTG_FS_IRQHandler+0xe4>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
		}

	}

	// Clear usb_temp array
	memset(usb_temp, 0, sizeof(usb_temp));
 800227e:	2208      	movs	r2, #8
 8002280:	2100      	movs	r1, #0
 8002282:	4804      	ldr	r0, [pc, #16]	; (8002294 <OTG_FS_IRQHandler+0xc0>)
 8002284:	f007 fc1e 	bl	8009ac4 <memset>

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002288:	480c      	ldr	r0, [pc, #48]	; (80022bc <OTG_FS_IRQHandler+0xe8>)
 800228a:	f000 fd40 	bl	8002d0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200002b4 	.word	0x200002b4
 8002298:	200002bc 	.word	0x200002bc
 800229c:	40020800 	.word	0x40020800
 80022a0:	200002ac 	.word	0x200002ac
 80022a4:	2000028c 	.word	0x2000028c
 80022a8:	2000028e 	.word	0x2000028e
 80022ac:	200002a4 	.word	0x200002a4
 80022b0:	200002a0 	.word	0x200002a0
 80022b4:	200002aa 	.word	0x200002aa
 80022b8:	200002a9 	.word	0x200002a9
 80022bc:	2000100c 	.word	0x2000100c

080022c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <SystemInit+0x20>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <SystemInit+0x20>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800231c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e8:	480d      	ldr	r0, [pc, #52]	; (8002320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ea:	490e      	ldr	r1, [pc, #56]	; (8002324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002300:	4c0b      	ldr	r4, [pc, #44]	; (8002330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800230e:	f7ff ffd7 	bl	80022c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002312:	f007 fba5 	bl	8009a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002316:	f7fe fdcf 	bl	8000eb8 <main>
  bx  lr    
 800231a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800231c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002324:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002328:	0800b3b8 	.word	0x0800b3b8
  ldr r2, =_sbss
 800232c:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8002330:	20001738 	.word	0x20001738

08002334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC_IRQHandler>
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_Init+0x40>)
 8002342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_Init+0x40>)
 800234e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_Init+0x40>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002360:	2003      	movs	r0, #3
 8002362:	f000 f94f 	bl	8002604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002366:	200f      	movs	r0, #15
 8002368:	f000 f808 	bl	800237c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800236c:	f7ff fa08 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023c00 	.word	0x40023c00

0800237c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_InitTick+0x54>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002392:	fbb3 f3f1 	udiv	r3, r3, r1
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f967 	bl	800266e <HAL_SYSTICK_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00e      	b.n	80023c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b0f      	cmp	r3, #15
 80023ae:	d80a      	bhi.n	80023c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b0:	2200      	movs	r2, #0
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f000 f92f 	bl	800261a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_InitTick+0x5c>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000034 	.word	0x20000034
 80023d4:	2000003c 	.word	0x2000003c
 80023d8:	20000038 	.word	0x20000038

080023dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x20>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x24>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_IncTick+0x24>)
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	2000003c 	.word	0x2000003c
 8002400:	20000328 	.word	0x20000328

08002404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return uwTick;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_GetTick+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000328 	.word	0x20000328

0800241c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff ffee 	bl	8002404 <HAL_GetTick>
 8002428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d005      	beq.n	8002442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_Delay+0x44>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002442:	bf00      	nop
 8002444:	f7ff ffde 	bl	8002404 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	d8f7      	bhi.n	8002444 <HAL_Delay+0x28>
  {
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000003c 	.word	0x2000003c

08002464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002480:	4013      	ands	r3, r2
 8002482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800248c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002496:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	60d3      	str	r3, [r2, #12]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <__NVIC_GetPriorityGrouping+0x18>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	f003 0307 	and.w	r3, r3, #7
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db0b      	blt.n	80024f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <__NVIC_EnableIRQ+0x38>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2001      	movs	r0, #1
 80024ea:	fa00 f202 	lsl.w	r2, r0, r2
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0a      	blt.n	800252e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	490c      	ldr	r1, [pc, #48]	; (8002550 <__NVIC_SetPriority+0x4c>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	0112      	lsls	r2, r2, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	440b      	add	r3, r1
 8002528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800252c:	e00a      	b.n	8002544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <__NVIC_SetPriority+0x50>)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3b04      	subs	r3, #4
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	440b      	add	r3, r1
 8002542:	761a      	strb	r2, [r3, #24]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f1c3 0307 	rsb	r3, r3, #7
 8002572:	2b04      	cmp	r3, #4
 8002574:	bf28      	it	cs
 8002576:	2304      	movcs	r3, #4
 8002578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3304      	adds	r3, #4
 800257e:	2b06      	cmp	r3, #6
 8002580:	d902      	bls.n	8002588 <NVIC_EncodePriority+0x30>
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3b03      	subs	r3, #3
 8002586:	e000      	b.n	800258a <NVIC_EncodePriority+0x32>
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	f04f 32ff 	mov.w	r2, #4294967295
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	401a      	ands	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	4313      	orrs	r3, r2
         );
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d0:	d301      	bcc.n	80025d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <SysTick_Config+0x40>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025de:	210f      	movs	r1, #15
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	f7ff ff8e 	bl	8002504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <SysTick_Config+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <SysTick_Config+0x40>)
 80025f0:	2207      	movs	r2, #7
 80025f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000e010 	.word	0xe000e010

08002604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff29 	bl	8002464 <__NVIC_SetPriorityGrouping>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800262c:	f7ff ff3e 	bl	80024ac <__NVIC_GetPriorityGrouping>
 8002630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7ff ff8e 	bl	8002558 <NVIC_EncodePriority>
 800263c:	4602      	mov	r2, r0
 800263e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff5d 	bl	8002504 <__NVIC_SetPriority>
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff31 	bl	80024c8 <__NVIC_EnableIRQ>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ffa2 	bl	80025c0 <SysTick_Config>
 800267c:	4603      	mov	r3, r0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	e159      	b.n	8002958 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8148 	bne.w	8002952 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d005      	beq.n	80026da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d130      	bne.n	800273c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2203      	movs	r2, #3
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002710:	2201      	movs	r2, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 0201 	and.w	r2, r3, #1
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b03      	cmp	r3, #3
 8002746:	d017      	beq.n	8002778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d123      	bne.n	80027cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	08da      	lsrs	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3208      	adds	r2, #8
 800278c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	220f      	movs	r2, #15
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	08da      	lsrs	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3208      	adds	r2, #8
 80027c6:	69b9      	ldr	r1, [r7, #24]
 80027c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	2203      	movs	r2, #3
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0203 	and.w	r2, r3, #3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a2 	beq.w	8002952 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_GPIO_Init+0x2e8>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a56      	ldr	r2, [pc, #344]	; (8002970 <HAL_GPIO_Init+0x2e8>)
 8002818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b54      	ldr	r3, [pc, #336]	; (8002970 <HAL_GPIO_Init+0x2e8>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800282a:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_GPIO_Init+0x2ec>)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a49      	ldr	r2, [pc, #292]	; (8002978 <HAL_GPIO_Init+0x2f0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x202>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a48      	ldr	r2, [pc, #288]	; (800297c <HAL_GPIO_Init+0x2f4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x1fe>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a47      	ldr	r2, [pc, #284]	; (8002980 <HAL_GPIO_Init+0x2f8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x1fa>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a46      	ldr	r2, [pc, #280]	; (8002984 <HAL_GPIO_Init+0x2fc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x1f6>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a45      	ldr	r2, [pc, #276]	; (8002988 <HAL_GPIO_Init+0x300>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x1f2>
 8002876:	2304      	movs	r3, #4
 8002878:	e008      	b.n	800288c <HAL_GPIO_Init+0x204>
 800287a:	2307      	movs	r3, #7
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x204>
 800287e:	2303      	movs	r3, #3
 8002880:	e004      	b.n	800288c <HAL_GPIO_Init+0x204>
 8002882:	2302      	movs	r3, #2
 8002884:	e002      	b.n	800288c <HAL_GPIO_Init+0x204>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x204>
 800288a:	2300      	movs	r3, #0
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f002 0203 	and.w	r2, r2, #3
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	4093      	lsls	r3, r2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289c:	4935      	ldr	r1, [pc, #212]	; (8002974 <HAL_GPIO_Init+0x2ec>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028aa:	4b38      	ldr	r3, [pc, #224]	; (800298c <HAL_GPIO_Init+0x304>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ce:	4a2f      	ldr	r2, [pc, #188]	; (800298c <HAL_GPIO_Init+0x304>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d4:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_GPIO_Init+0x304>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f8:	4a24      	ldr	r2, [pc, #144]	; (800298c <HAL_GPIO_Init+0x304>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fe:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_GPIO_Init+0x304>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <HAL_GPIO_Init+0x304>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_GPIO_Init+0x304>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294c:	4a0f      	ldr	r2, [pc, #60]	; (800298c <HAL_GPIO_Init+0x304>)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	f67f aea2 	bls.w	80026a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800
 8002974:	40013800 	.word	0x40013800
 8002978:	40020000 	.word	0x40020000
 800297c:	40020400 	.word	0x40020400
 8002980:	40020800 	.word	0x40020800
 8002984:	40020c00 	.word	0x40020c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40013c00 	.word	0x40013c00

08002990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	041a      	lsls	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a04:	887a      	ldrh	r2, [r7, #2]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	041a      	lsls	r2, r3, #16
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	400b      	ands	r3, r1
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	619a      	str	r2, [r3, #24]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a3e:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f806 	bl	8002a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40013c00 	.word	0x40013c00

08002a58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a70:	b08f      	sub	sp, #60	; 0x3c
 8002a72:	af0a      	add	r7, sp, #40	; 0x28
 8002a74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e10f      	b.n	8002ca0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f006 fcd0 	bl	8009440 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 ffb7 	bl	8005a32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	687e      	ldr	r6, [r7, #4]
 8002acc:	466d      	mov	r5, sp
 8002ace:	f106 0410 	add.w	r4, r6, #16
 8002ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ada:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ade:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae2:	1d33      	adds	r3, r6, #4
 8002ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae6:	6838      	ldr	r0, [r7, #0]
 8002ae8:	f002 fe8e 	bl	8005808 <USB_CoreInit>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e0d0      	b.n	8002ca0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f002 ffa5 	bl	8005a54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	e04a      	b.n	8002ba6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	333d      	adds	r3, #61	; 0x3d
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	333c      	adds	r3, #60	; 0x3c
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	b298      	uxth	r0, r3
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3344      	adds	r3, #68	; 0x44
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3340      	adds	r3, #64	; 0x40
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3348      	adds	r3, #72	; 0x48
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	334c      	adds	r3, #76	; 0x4c
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	3354      	adds	r3, #84	; 0x54
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3af      	bcc.n	8002b10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	e044      	b.n	8002c40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d3b5      	bcc.n	8002bb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	687e      	ldr	r6, [r7, #4]
 8002c52:	466d      	mov	r5, sp
 8002c54:	f106 0410 	add.w	r4, r6, #16
 8002c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c64:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c68:	1d33      	adds	r3, r6, #4
 8002c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6c:	6838      	ldr	r0, [r7, #0]
 8002c6e:	f002 ff3d 	bl	8005aec <USB_DevInit>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e00d      	b.n	8002ca0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 f88c 	bl	8006db6 <USB_DevDisconnect>

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ca8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_PCD_Start+0x1c>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e020      	b.n	8002d06 <HAL_PCD_Start+0x5e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d109      	bne.n	8002ce8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d005      	beq.n	8002ce8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f002 fe8f 	bl	8005a10 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 f83c 	bl	8006d74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d0e:	b590      	push	{r4, r7, lr}
 8002d10:	b08d      	sub	sp, #52	; 0x34
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 f8fa 	bl	8006f1e <USB_GetMode>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 848a 	bne.w	8003646 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f004 f85e 	bl	8006df8 <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 8480 	beq.w	8003644 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f004 f84b 	bl	8006df8 <USB_ReadInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d107      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f002 0202 	and.w	r2, r2, #2
 8002d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f004 f839 	bl	8006df8 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d161      	bne.n	8002e54 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0210 	bic.w	r2, r2, #16
 8002d9e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	0c5b      	lsrs	r3, r3, #17
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d124      	bne.n	8002e16 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d035      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	6a38      	ldr	r0, [r7, #32]
 8002dec:	f003 fe70 	bl	8006ad0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dfc:	441a      	add	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0e:	441a      	add	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	621a      	str	r2, [r3, #32]
 8002e14:	e016      	b.n	8002e44 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	0c5b      	lsrs	r3, r3, #17
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d110      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e28:	2208      	movs	r2, #8
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6a38      	ldr	r0, [r7, #32]
 8002e2e:	f003 fe4f 	bl	8006ad0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	6a1a      	ldr	r2, [r3, #32]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e3e:	441a      	add	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0210 	orr.w	r2, r2, #16
 8002e52:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 ffcd 	bl	8006df8 <USB_ReadInterrupts>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e68:	f040 80a7 	bne.w	8002fba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f003 ffd2 	bl	8006e1e <USB_ReadDevAllOutEpInterrupt>
 8002e7a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e7c:	e099      	b.n	8002fb2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 808e 	beq.w	8002fa6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 fff6 	bl	8006e86 <USB_ReadDevOutEPInterrupt>
 8002e9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fec2 	bl	8003c44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2308      	movs	r3, #8
 8002eda:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 ff98 	bl	8003e14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efa:	461a      	mov	r2, r3
 8002efc:	2310      	movs	r3, #16
 8002efe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d030      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d109      	bne.n	8002f2a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f28:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	78db      	ldrb	r3, [r3, #3]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d108      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f006 fb6f 	bl	8009638 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f66:	461a      	mov	r2, r3
 8002f68:	2302      	movs	r3, #2
 8002f6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f82:	461a      	mov	r2, r3
 8002f84:	2320      	movs	r3, #32
 8002f86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fa4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	3301      	adds	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f af62 	bne.w	8002e7e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 ff1a 	bl	8006df8 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fce:	f040 80db 	bne.w	8003188 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 ff3b 	bl	8006e52 <USB_ReadDevAllInEpInterrupt>
 8002fdc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fe2:	e0cd      	b.n	8003180 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80c2 	beq.w	8003174 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 ff61 	bl	8006ec2 <USB_ReadDevInEPInterrupt>
 8003000:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d057      	beq.n	80030bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	2201      	movs	r2, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43db      	mvns	r3, r3
 8003026:	69f9      	ldr	r1, [r7, #28]
 8003028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800302c:	4013      	ands	r3, r2
 800302e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303c:	461a      	mov	r2, r3
 800303e:	2301      	movs	r3, #1
 8003040:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d132      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	334c      	adds	r3, #76	; 0x4c
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4403      	add	r3, r0
 800306a:	3348      	adds	r3, #72	; 0x48
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4419      	add	r1, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4403      	add	r3, r0
 800307e:	334c      	adds	r3, #76	; 0x4c
 8003080:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d113      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x3a2>
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	3354      	adds	r3, #84	; 0x54
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030a8:	461a      	mov	r2, r3
 80030aa:	2101      	movs	r1, #1
 80030ac:	f003 ff68 	bl	8006f80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	4619      	mov	r1, r3
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f006 fa43 	bl	8009542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d008      	beq.n	80030d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d2:	461a      	mov	r2, r3
 80030d4:	2308      	movs	r3, #8
 80030d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ee:	461a      	mov	r2, r3
 80030f0:	2310      	movs	r3, #16
 80030f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310a:	461a      	mov	r2, r3
 800310c:	2340      	movs	r3, #64	; 0x40
 800310e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d023      	beq.n	8003162 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800311a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311c:	6a38      	ldr	r0, [r7, #32]
 800311e:	f002 fe49 	bl	8005db4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	3338      	adds	r3, #56	; 0x38
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	78db      	ldrb	r3, [r3, #3]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	b2db      	uxtb	r3, r3
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f006 fa86 	bl	800965c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315c:	461a      	mov	r2, r3
 800315e:	2302      	movs	r3, #2
 8003160:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800316c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fcdb 	bl	8003b2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	3301      	adds	r3, #1
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	2b00      	cmp	r3, #0
 8003184:	f47f af2e 	bne.w	8002fe4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fe33 	bl	8006df8 <USB_ReadInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800319c:	d122      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d108      	bne.n	80031ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031c4:	2100      	movs	r1, #0
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fec2 	bl	8003f50 <HAL_PCDEx_LPM_Callback>
 80031cc:	e002      	b.n	80031d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f006 fa24 	bl	800961c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f003 fe05 	bl	8006df8 <USB_ReadInterrupts>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f8:	d112      	bne.n	8003220 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d102      	bne.n	8003210 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f006 f9e0 	bl	80095d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800321e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 fde7 	bl	8006df8 <USB_ReadInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003234:	f040 80b7 	bne.w	80033a6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2110      	movs	r1, #16
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fdae 	bl	8005db4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003258:	2300      	movs	r3, #0
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325c:	e046      	b.n	80032ec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326a:	461a      	mov	r2, r3
 800326c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003270:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003282:	0151      	lsls	r1, r2, #5
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	440a      	add	r2, r1
 8003288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800328c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003290:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329e:	461a      	mov	r2, r3
 80032a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b6:	0151      	lsls	r1, r2, #5
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	440a      	add	r2, r1
 80032bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d6:	0151      	lsls	r1, r2, #5
 80032d8:	69fa      	ldr	r2, [r7, #28]
 80032da:	440a      	add	r2, r1
 80032dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	3301      	adds	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d3b3      	bcc.n	800325e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003304:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003308:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003322:	f043 030b 	orr.w	r3, r3, #11
 8003326:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003338:	f043 030b 	orr.w	r3, r3, #11
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	e015      	b.n	800336c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800334e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003352:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003356:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003366:	f043 030b 	orr.w	r3, r3, #11
 800336a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800337a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800337e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003390:	461a      	mov	r2, r3
 8003392:	f003 fdf5 	bl	8006f80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80033a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fd24 	bl	8006df8 <USB_ReadInterrupts>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ba:	d124      	bne.n	8003406 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 fdba 	bl	8006f3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 fd6f 	bl	8005eae <USB_GetDevSpeed>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681c      	ldr	r4, [r3, #0]
 80033dc:	f001 f9e8 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 80033e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	4620      	mov	r0, r4
 80033ec:	f002 fa6e 	bl	80058cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f006 f8ce 	bl	8009592 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003404:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f003 fcf4 	bl	8006df8 <USB_ReadInterrupts>
 8003410:	4603      	mov	r3, r0
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	d10a      	bne.n	8003430 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f006 f8ab 	bl	8009576 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f002 0208 	and.w	r2, r2, #8
 800342e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f003 fcdf 	bl	8006df8 <USB_ReadInterrupts>
 800343a:	4603      	mov	r3, r0
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d122      	bne.n	800348a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003450:	2301      	movs	r3, #1
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
 8003454:	e014      	b.n	8003480 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	b2db      	uxtb	r3, r3
 8003472:	4619      	mov	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fb27 	bl	8003ac8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	3301      	adds	r3, #1
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003486:	429a      	cmp	r2, r3
 8003488:	d3e5      	bcc.n	8003456 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f003 fcb2 	bl	8006df8 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349e:	d13b      	bne.n	8003518 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034a0:	2301      	movs	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	e02b      	b.n	80034fe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3340      	adds	r3, #64	; 0x40
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d115      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da12      	bge.n	80034f8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	333f      	adds	r3, #63	; 0x3f
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fae8 	bl	8003ac8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	3301      	adds	r3, #1
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	429a      	cmp	r2, r3
 8003506:	d3ce      	bcc.n	80034a6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fc6b 	bl	8006df8 <USB_ReadInterrupts>
 8003522:	4603      	mov	r3, r0
 8003524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003528:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800352c:	d155      	bne.n	80035da <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800352e:	2301      	movs	r3, #1
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
 8003532:	e045      	b.n	80035c0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d12e      	bne.n	80035ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800355c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800355e:	2b00      	cmp	r3, #0
 8003560:	da2b      	bge.n	80035ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800356e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003572:	429a      	cmp	r2, r3
 8003574:	d121      	bne.n	80035ba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b6:	6053      	str	r3, [r2, #4]
            break;
 80035b8:	e007      	b.n	80035ca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	3301      	adds	r3, #1
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d3b4      	bcc.n	8003534 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f003 fc0a 	bl	8006df8 <USB_ReadInterrupts>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ee:	d10a      	bne.n	8003606 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f006 f845 	bl	8009680 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fbf4 	bl	8006df8 <USB_ReadInterrupts>
 8003610:	4603      	mov	r3, r0
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d115      	bne.n	8003646 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f006 f835 	bl	800969c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	e000      	b.n	8003646 <HAL_PCD_IRQHandler+0x938>
      return;
 8003644:	bf00      	nop
    }
  }
}
 8003646:	3734      	adds	r7, #52	; 0x34
 8003648:	46bd      	mov	sp, r7
 800364a:	bd90      	pop	{r4, r7, pc}

0800364c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_PCD_SetAddress+0x1a>
 8003662:	2302      	movs	r3, #2
 8003664:	e013      	b.n	800368e <HAL_PCD_SetAddress+0x42>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f003 fb52 	bl	8006d28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	4608      	mov	r0, r1
 80036a0:	4611      	mov	r1, r2
 80036a2:	461a      	mov	r2, r3
 80036a4:	4603      	mov	r3, r0
 80036a6:	70fb      	strb	r3, [r7, #3]
 80036a8:	460b      	mov	r3, r1
 80036aa:	803b      	strh	r3, [r7, #0]
 80036ac:	4613      	mov	r3, r2
 80036ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	da0f      	bge.n	80036dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	f003 020f 	and.w	r2, r3, #15
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	3338      	adds	r3, #56	; 0x38
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	4413      	add	r3, r2
 80036d0:	3304      	adds	r3, #4
 80036d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	705a      	strb	r2, [r3, #1]
 80036da:	e00f      	b.n	80036fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	f003 020f 	and.w	r2, r3, #15
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4413      	add	r3, r2
 80036f2:	3304      	adds	r3, #4
 80036f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003708:	883a      	ldrh	r2, [r7, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	78ba      	ldrb	r2, [r7, #2]
 8003712:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003726:	78bb      	ldrb	r3, [r7, #2]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d102      	bne.n	8003732 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_PCD_EP_Open+0xaa>
 800373c:	2302      	movs	r3, #2
 800373e:	e00e      	b.n	800375e <HAL_PCD_EP_Open+0xc8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68f9      	ldr	r1, [r7, #12]
 800374e:	4618      	mov	r0, r3
 8003750:	f002 fbd2 	bl	8005ef8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800375c:	7afb      	ldrb	r3, [r7, #11]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003776:	2b00      	cmp	r3, #0
 8003778:	da0f      	bge.n	800379a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	f003 020f 	and.w	r2, r3, #15
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	3338      	adds	r3, #56	; 0x38
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	705a      	strb	r2, [r3, #1]
 8003798:	e00f      	b.n	80037ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 020f 	and.w	r2, r3, #15
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	3304      	adds	r3, #4
 80037b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_PCD_EP_Close+0x6e>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e00e      	b.n	80037f2 <HAL_PCD_EP_Close+0x8c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68f9      	ldr	r1, [r7, #12]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f002 fc10 	bl	8006008 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	460b      	mov	r3, r1
 8003808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800380a:	7afb      	ldrb	r3, [r7, #11]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	3304      	adds	r3, #4
 8003822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2200      	movs	r2, #0
 8003834:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800383c:	7afb      	ldrb	r3, [r7, #11]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	b2da      	uxtb	r2, r3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d102      	bne.n	8003856 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003856:	7afb      	ldrb	r3, [r7, #11]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	6979      	ldr	r1, [r7, #20]
 800386e:	f002 feef 	bl	8006650 <USB_EP0StartXfer>
 8003872:	e008      	b.n	8003886 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	6979      	ldr	r1, [r7, #20]
 8003882:	f002 fc9d 	bl	80061c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	f003 020f 	and.w	r2, r3, #15
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	460b      	mov	r3, r1
 80038ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d0:	7afb      	ldrb	r3, [r7, #11]
 80038d2:	f003 020f 	and.w	r2, r3, #15
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	3338      	adds	r3, #56	; 0x38
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2201      	movs	r2, #1
 80038fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003900:	7afb      	ldrb	r3, [r7, #11]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	b2da      	uxtb	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d102      	bne.n	800391a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800391a:	7afb      	ldrb	r3, [r7, #11]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	6979      	ldr	r1, [r7, #20]
 8003932:	f002 fe8d 	bl	8006650 <USB_EP0StartXfer>
 8003936:	e008      	b.n	800394a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	461a      	mov	r2, r3
 8003944:	6979      	ldr	r1, [r7, #20]
 8003946:	f002 fc3b 	bl	80061c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	f003 020f 	and.w	r2, r3, #15
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d901      	bls.n	8003972 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e050      	b.n	8003a14 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003972:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003976:	2b00      	cmp	r3, #0
 8003978:	da0f      	bge.n	800399a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	4613      	mov	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	3338      	adds	r3, #56	; 0x38
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	3304      	adds	r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	705a      	strb	r2, [r3, #1]
 8003998:	e00d      	b.n	80039b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	3304      	adds	r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_PCD_EP_SetStall+0x82>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e01e      	b.n	8003a14 <HAL_PCD_EP_SetStall+0xc0>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 f8cb 	bl	8006b80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	b2d9      	uxtb	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a04:	461a      	mov	r2, r3
 8003a06:	f003 fabb 	bl	8006f80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 020f 	and.w	r2, r3, #15
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d901      	bls.n	8003a3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e042      	b.n	8003ac0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	da0f      	bge.n	8003a62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	f003 020f 	and.w	r2, r3, #15
 8003a48:	4613      	mov	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	3338      	adds	r3, #56	; 0x38
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	3304      	adds	r3, #4
 8003a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	705a      	strb	r2, [r3, #1]
 8003a60:	e00f      	b.n	8003a82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	3304      	adds	r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_PCD_EP_ClrStall+0x86>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e00e      	b.n	8003ac0 <HAL_PCD_EP_ClrStall+0xa4>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 f8d3 	bl	8006c5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	da0c      	bge.n	8003af6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	f003 020f 	and.w	r2, r3, #15
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	3338      	adds	r3, #56	; 0x38
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e00c      	b.n	8003b10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68f9      	ldr	r1, [r7, #12]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f002 fef2 	bl	8006900 <USB_EPStopXfer>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b20:	7afb      	ldrb	r3, [r7, #11]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b08a      	sub	sp, #40	; 0x28
 8003b2e:	af02      	add	r7, sp, #8
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	3338      	adds	r3, #56	; 0x38
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3304      	adds	r3, #4
 8003b50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1a      	ldr	r2, [r3, #32]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d901      	bls.n	8003b62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06c      	b.n	8003c3c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d902      	bls.n	8003b7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3303      	adds	r3, #3
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b86:	e02b      	b.n	8003be0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d902      	bls.n	8003ba4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	3303      	adds	r3, #3
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6919      	ldr	r1, [r3, #16]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	6978      	ldr	r0, [r7, #20]
 8003bc4:	f002 ff46 	bl	8006a54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	441a      	add	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1a      	ldr	r2, [r3, #32]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	441a      	add	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d809      	bhi.n	8003c0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d203      	bcs.n	8003c0a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1be      	bne.n	8003b88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d811      	bhi.n	8003c3a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	6939      	ldr	r1, [r7, #16]
 8003c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c36:	4013      	ands	r3, r2
 8003c38:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	333c      	adds	r3, #60	; 0x3c
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d17b      	bne.n	8003d72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4a61      	ldr	r2, [pc, #388]	; (8003e0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	f240 80b9 	bls.w	8003e00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80b3 	beq.w	8003e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cac:	6093      	str	r3, [r2, #8]
 8003cae:	e0a7      	b.n	8003e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2320      	movs	r3, #32
 8003cca:	6093      	str	r3, [r2, #8]
 8003ccc:	e098      	b.n	8003e00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 8093 	bne.w	8003e00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	4a4b      	ldr	r2, [pc, #300]	; (8003e0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d90f      	bls.n	8003d02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfe:	6093      	str	r3, [r2, #8]
 8003d00:	e07e      	b.n	8003e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	4413      	add	r3, r2
 8003d14:	3304      	adds	r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	0159      	lsls	r1, r3, #5
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	440b      	add	r3, r1
 8003d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2e:	1ad2      	subs	r2, r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d114      	bne.n	8003d64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2101      	movs	r1, #1
 8003d50:	f003 f916 	bl	8006f80 <USB_EP0_OutStart>
 8003d54:	e006      	b.n	8003d64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	441a      	add	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f005 fbce 	bl	800950c <HAL_PCD_DataOutStageCallback>
 8003d70:	e046      	b.n	8003e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	4a26      	ldr	r2, [pc, #152]	; (8003e10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d124      	bne.n	8003dc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d90:	461a      	mov	r2, r3
 8003d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d96:	6093      	str	r3, [r2, #8]
 8003d98:	e032      	b.n	8003e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	2320      	movs	r3, #32
 8003db4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f005 fba5 	bl	800950c <HAL_PCD_DataOutStageCallback>
 8003dc2:	e01d      	b.n	8003e00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d114      	bne.n	8003df4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dec:	461a      	mov	r2, r3
 8003dee:	2100      	movs	r1, #0
 8003df0:	f003 f8c6 	bl	8006f80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f005 fb86 	bl	800950c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	4f54300a 	.word	0x4f54300a
 8003e10:	4f54310a 	.word	0x4f54310a

08003e14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	333c      	adds	r3, #60	; 0x3c
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d90e      	bls.n	8003e68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e60:	461a      	mov	r2, r3
 8003e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f005 fb3d 	bl	80094e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <PCD_EP_OutSetupPacket_int+0x88>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d90c      	bls.n	8003e90 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d108      	bne.n	8003e90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	f003 f878 	bl	8006f80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	4f54300a 	.word	0x4f54300a

08003ea0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
 8003eac:	4613      	mov	r3, r2
 8003eae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ebe:	883b      	ldrh	r3, [r7, #0]
 8003ec0:	0419      	lsls	r1, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
 8003ecc:	e028      	b.n	8003f20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	4413      	add	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	73fb      	strb	r3, [r7, #15]
 8003ee0:	e00d      	b.n	8003efe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	3340      	adds	r3, #64	; 0x40
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	3301      	adds	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
 8003efe:	7bfa      	ldrb	r2, [r7, #15]
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d3ec      	bcc.n	8003ee2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f08:	883b      	ldrh	r3, [r7, #0]
 8003f0a:	0418      	lsls	r0, r3, #16
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	4302      	orrs	r2, r0
 8003f18:	3340      	adds	r3, #64	; 0x40
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	460b      	mov	r3, r1
 8003f38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e267      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d075      	beq.n	8004072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00c      	beq.n	8003fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f92:	4b85      	ldr	r3, [pc, #532]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d112      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4b82      	ldr	r3, [pc, #520]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b7e      	ldr	r3, [pc, #504]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d05b      	beq.n	8004070 <HAL_RCC_OscConfig+0x108>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d157      	bne.n	8004070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e242      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCC_OscConfig+0x74>
 8003fce:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a75      	ldr	r2, [pc, #468]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e01d      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x98>
 8003fe6:	4b70      	ldr	r3, [pc, #448]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a6f      	ldr	r2, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b6d      	ldr	r3, [pc, #436]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6c      	ldr	r2, [pc, #432]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8004000:	4b69      	ldr	r3, [pc, #420]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a68      	ldr	r2, [pc, #416]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a65      	ldr	r2, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fe f9f0 	bl	8002404 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe f9ec 	bl	8002404 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e207      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0xc0>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fe f9dc 	bl	8002404 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004050:	f7fe f9d8 	bl	8002404 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e1f3      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004062:	4b51      	ldr	r3, [pc, #324]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0xe8>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d063      	beq.n	8004146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407e:	4b4a      	ldr	r3, [pc, #296]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004092:	2b08      	cmp	r3, #8
 8004094:	d11c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004096:	4b44      	ldr	r3, [pc, #272]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d116      	bne.n	80040d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_RCC_OscConfig+0x152>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e1c7      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4937      	ldr	r1, [pc, #220]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ce:	e03a      	b.n	8004146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d8:	4b34      	ldr	r3, [pc, #208]	; (80041ac <HAL_RCC_OscConfig+0x244>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040de:	f7fe f991 	bl	8002404 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e6:	f7fe f98d 	bl	8002404 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e1a8      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4925      	ldr	r1, [pc, #148]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
 8004118:	e015      	b.n	8004146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x244>)
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fe f970 	bl	8002404 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004128:	f7fe f96c 	bl	8002404 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e187      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d036      	beq.n	80041c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <HAL_RCC_OscConfig+0x248>)
 800415c:	2201      	movs	r2, #1
 800415e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004160:	f7fe f950 	bl	8002404 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004168:	f7fe f94c 	bl	8002404 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e167      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_OscConfig+0x240>)
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0x200>
 8004186:	e01b      	b.n	80041c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_RCC_OscConfig+0x248>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7fe f939 	bl	8002404 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	e00e      	b.n	80041b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fe f935 	bl	8002404 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d907      	bls.n	80041b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e150      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470000 	.word	0x42470000
 80041b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	4b88      	ldr	r3, [pc, #544]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1ea      	bne.n	8004196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8097 	beq.w	80042fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d2:	4b81      	ldr	r3, [pc, #516]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	4b7d      	ldr	r3, [pc, #500]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a7c      	ldr	r2, [pc, #496]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b7a      	ldr	r3, [pc, #488]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fe:	4b77      	ldr	r3, [pc, #476]	; (80043dc <HAL_RCC_OscConfig+0x474>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d118      	bne.n	800423c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800420a:	4b74      	ldr	r3, [pc, #464]	; (80043dc <HAL_RCC_OscConfig+0x474>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a73      	ldr	r2, [pc, #460]	; (80043dc <HAL_RCC_OscConfig+0x474>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004216:	f7fe f8f5 	bl	8002404 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421e:	f7fe f8f1 	bl	8002404 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e10c      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	4b6a      	ldr	r3, [pc, #424]	; (80043dc <HAL_RCC_OscConfig+0x474>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <HAL_RCC_OscConfig+0x2ea>
 8004244:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a63      	ldr	r2, [pc, #396]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
 8004250:	e01c      	b.n	800428c <HAL_RCC_OscConfig+0x324>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b05      	cmp	r3, #5
 8004258:	d10c      	bne.n	8004274 <HAL_RCC_OscConfig+0x30c>
 800425a:	4b5f      	ldr	r3, [pc, #380]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a5e      	ldr	r2, [pc, #376]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004260:	f043 0304 	orr.w	r3, r3, #4
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
 8004266:	4b5c      	ldr	r3, [pc, #368]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a5b      	ldr	r2, [pc, #364]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	e00b      	b.n	800428c <HAL_RCC_OscConfig+0x324>
 8004274:	4b58      	ldr	r3, [pc, #352]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	4a57      	ldr	r2, [pc, #348]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	; 0x70
 8004280:	4b55      	ldr	r3, [pc, #340]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a54      	ldr	r2, [pc, #336]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004286:	f023 0304 	bic.w	r3, r3, #4
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d015      	beq.n	80042c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fe f8b6 	bl	8002404 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f7fe f8b2 	bl	8002404 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e0cb      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0ee      	beq.n	800429c <HAL_RCC_OscConfig+0x334>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c0:	f7fe f8a0 	bl	8002404 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c6:	e00a      	b.n	80042de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fe f89c 	bl	8002404 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0b5      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042de:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1ee      	bne.n	80042c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d105      	bne.n	80042fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f0:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	4a38      	ldr	r2, [pc, #224]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80a1 	beq.w	8004448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004306:	4b34      	ldr	r3, [pc, #208]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b08      	cmp	r3, #8
 8004310:	d05c      	beq.n	80043cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d141      	bne.n	800439e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_RCC_OscConfig+0x478>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fe f870 	bl	8002404 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004328:	f7fe f86c 	bl	8002404 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e087      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69da      	ldr	r2, [r3, #28]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	019b      	lsls	r3, r3, #6
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	085b      	lsrs	r3, r3, #1
 800435e:	3b01      	subs	r3, #1
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	491b      	ldr	r1, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <HAL_RCC_OscConfig+0x478>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fe f845 	bl	8002404 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437e:	f7fe f841 	bl	8002404 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e05c      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x416>
 800439c:	e054      	b.n	8004448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <HAL_RCC_OscConfig+0x478>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fe f82e 	bl	8002404 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fe f82a 	bl	8002404 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e045      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_OscConfig+0x470>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x444>
 80043ca:	e03d      	b.n	8004448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e038      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40007000 	.word	0x40007000
 80043e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <HAL_RCC_OscConfig+0x4ec>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d028      	beq.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d121      	bne.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	429a      	cmp	r2, r3
 800440c:	d11a      	bne.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800441a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800441c:	4293      	cmp	r3, r2
 800441e:	d111      	bne.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	3b01      	subs	r3, #1
 800442e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004430:	429a      	cmp	r2, r3
 8004432:	d107      	bne.n	8004444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800

08004458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0cc      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4b68      	ldr	r3, [pc, #416]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d90c      	bls.n	8004494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b65      	ldr	r3, [pc, #404]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004482:	4b63      	ldr	r3, [pc, #396]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e0b8      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ac:	4b59      	ldr	r3, [pc, #356]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4a58      	ldr	r2, [pc, #352]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c4:	4b53      	ldr	r3, [pc, #332]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a52      	ldr	r2, [pc, #328]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	494d      	ldr	r1, [pc, #308]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d044      	beq.n	8004578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	4b47      	ldr	r3, [pc, #284]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d119      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e07f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d003      	beq.n	8004516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004512:	2b03      	cmp	r3, #3
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004516:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e06f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	4b3b      	ldr	r3, [pc, #236]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e067      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004536:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 0203 	bic.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4934      	ldr	r1, [pc, #208]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004548:	f7fd ff5c 	bl	8002404 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	e00a      	b.n	8004566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fd ff58 	bl	8002404 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e04f      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 020c 	and.w	r2, r3, #12
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	429a      	cmp	r2, r3
 8004576:	d1eb      	bne.n	8004550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d20c      	bcs.n	80045a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e032      	b.n	8004606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4916      	ldr	r1, [pc, #88]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	490e      	ldr	r1, [pc, #56]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045de:	f000 f821 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 80045e2:	4602      	mov	r2, r0
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	490a      	ldr	r1, [pc, #40]	; (8004618 <HAL_RCC_ClockConfig+0x1c0>)
 80045f0:	5ccb      	ldrb	r3, [r1, r3]
 80045f2:	fa22 f303 	lsr.w	r3, r2, r3
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd febc 	bl	800237c <HAL_InitTick>

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40023c00 	.word	0x40023c00
 8004614:	40023800 	.word	0x40023800
 8004618:	0800b180 	.word	0x0800b180
 800461c:	20000034 	.word	0x20000034
 8004620:	20000038 	.word	0x20000038

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b090      	sub	sp, #64	; 0x40
 800462a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
 8004630:	2300      	movs	r3, #0
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004634:	2300      	movs	r3, #0
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800463c:	4b59      	ldr	r3, [pc, #356]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d00d      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x40>
 8004648:	2b08      	cmp	r3, #8
 800464a:	f200 80a1 	bhi.w	8004790 <HAL_RCC_GetSysClockFreq+0x16c>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0x34>
 8004652:	2b04      	cmp	r3, #4
 8004654:	d003      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0x3a>
 8004656:	e09b      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b53      	ldr	r3, [pc, #332]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800465a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800465c:	e09b      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465e:	4b53      	ldr	r3, [pc, #332]	; (80047ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004662:	e098      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004664:	4b4f      	ldr	r3, [pc, #316]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466e:	4b4d      	ldr	r3, [pc, #308]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d028      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467a:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	2200      	movs	r2, #0
 8004682:	623b      	str	r3, [r7, #32]
 8004684:	627a      	str	r2, [r7, #36]	; 0x24
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800468c:	2100      	movs	r1, #0
 800468e:	4b47      	ldr	r3, [pc, #284]	; (80047ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004690:	fb03 f201 	mul.w	r2, r3, r1
 8004694:	2300      	movs	r3, #0
 8004696:	fb00 f303 	mul.w	r3, r0, r3
 800469a:	4413      	add	r3, r2
 800469c:	4a43      	ldr	r2, [pc, #268]	; (80047ac <HAL_RCC_GetSysClockFreq+0x188>)
 800469e:	fba0 1202 	umull	r1, r2, r0, r2
 80046a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a4:	460a      	mov	r2, r1
 80046a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80046a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046aa:	4413      	add	r3, r2
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b0:	2200      	movs	r2, #0
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	61fa      	str	r2, [r7, #28]
 80046b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046be:	f7fc fa79 	bl	8000bb4 <__aeabi_uldivmod>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4613      	mov	r3, r2
 80046c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ca:	e053      	b.n	8004774 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046cc:	4b35      	ldr	r3, [pc, #212]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	099b      	lsrs	r3, r3, #6
 80046d2:	2200      	movs	r2, #0
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	617a      	str	r2, [r7, #20]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046de:	f04f 0b00 	mov.w	fp, #0
 80046e2:	4652      	mov	r2, sl
 80046e4:	465b      	mov	r3, fp
 80046e6:	f04f 0000 	mov.w	r0, #0
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	0159      	lsls	r1, r3, #5
 80046f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f4:	0150      	lsls	r0, r2, #5
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	ebb2 080a 	subs.w	r8, r2, sl
 80046fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800470e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004712:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004716:	ebb2 0408 	subs.w	r4, r2, r8
 800471a:	eb63 0509 	sbc.w	r5, r3, r9
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	00eb      	lsls	r3, r5, #3
 8004728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800472c:	00e2      	lsls	r2, r4, #3
 800472e:	4614      	mov	r4, r2
 8004730:	461d      	mov	r5, r3
 8004732:	eb14 030a 	adds.w	r3, r4, sl
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	eb45 030b 	adc.w	r3, r5, fp
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800474a:	4629      	mov	r1, r5
 800474c:	028b      	lsls	r3, r1, #10
 800474e:	4621      	mov	r1, r4
 8004750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004754:	4621      	mov	r1, r4
 8004756:	028a      	lsls	r2, r1, #10
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475e:	2200      	movs	r2, #0
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	60fa      	str	r2, [r7, #12]
 8004764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004768:	f7fc fa24 	bl	8000bb4 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4613      	mov	r3, r2
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	3301      	adds	r3, #1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800478e:	e002      	b.n	8004796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004792:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004798:	4618      	mov	r0, r3
 800479a:	3740      	adds	r7, #64	; 0x40
 800479c:	46bd      	mov	sp, r7
 800479e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	00f42400 	.word	0x00f42400
 80047ac:	017d7840 	.word	0x017d7840

080047b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b6:	681b      	ldr	r3, [r3, #0]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000034 	.word	0x20000034

080047c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e041      	b.n	800485e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc ffee 	bl	80017d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f000 fc5e 	bl	80050c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	d001      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e044      	b.n	800490a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <HAL_TIM_Base_Start_IT+0xb0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d018      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x6c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048aa:	d013      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x6c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1a      	ldr	r2, [pc, #104]	; (800491c <HAL_TIM_Base_Start_IT+0xb4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x6c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a19      	ldr	r2, [pc, #100]	; (8004920 <HAL_TIM_Base_Start_IT+0xb8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x6c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a17      	ldr	r2, [pc, #92]	; (8004924 <HAL_TIM_Base_Start_IT+0xbc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x6c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a16      	ldr	r2, [pc, #88]	; (8004928 <HAL_TIM_Base_Start_IT+0xc0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d111      	bne.n	80048f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d010      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f6:	e007      	b.n	8004908 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
 8004928:	40014000 	.word	0x40014000

0800492c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e041      	b.n	80049c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f839 	bl	80049ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f000 fbac 	bl	80050c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_TIM_PWM_Start+0x24>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e022      	b.n	8004a4a <HAL_TIM_PWM_Start+0x6a>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d109      	bne.n	8004a1e <HAL_TIM_PWM_Start+0x3e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	bf14      	ite	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	2300      	moveq	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	e015      	b.n	8004a4a <HAL_TIM_PWM_Start+0x6a>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d109      	bne.n	8004a38 <HAL_TIM_PWM_Start+0x58>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	e008      	b.n	8004a4a <HAL_TIM_PWM_Start+0x6a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e068      	b.n	8004b24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0x82>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a60:	e013      	b.n	8004a8a <HAL_TIM_PWM_Start+0xaa>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0x92>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a70:	e00b      	b.n	8004a8a <HAL_TIM_PWM_Start+0xaa>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0xa2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a80:	e003      	b.n	8004a8a <HAL_TIM_PWM_Start+0xaa>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	6839      	ldr	r1, [r7, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fdbe 	bl	8005614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <HAL_TIM_PWM_Start+0x14c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d107      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1d      	ldr	r2, [pc, #116]	; (8004b2c <HAL_TIM_PWM_Start+0x14c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d018      	beq.n	8004aee <HAL_TIM_PWM_Start+0x10e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac4:	d013      	beq.n	8004aee <HAL_TIM_PWM_Start+0x10e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a19      	ldr	r2, [pc, #100]	; (8004b30 <HAL_TIM_PWM_Start+0x150>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00e      	beq.n	8004aee <HAL_TIM_PWM_Start+0x10e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a17      	ldr	r2, [pc, #92]	; (8004b34 <HAL_TIM_PWM_Start+0x154>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d009      	beq.n	8004aee <HAL_TIM_PWM_Start+0x10e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <HAL_TIM_PWM_Start+0x158>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_TIM_PWM_Start+0x10e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <HAL_TIM_PWM_Start+0x15c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d111      	bne.n	8004b12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b06      	cmp	r3, #6
 8004afe:	d010      	beq.n	8004b22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b10:	e007      	b.n	8004b22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800
 8004b38:	40000c00 	.word	0x40000c00
 8004b3c:	40014000 	.word	0x40014000

08004b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0202 	mvn.w	r2, #2
 8004b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa81 	bl	800508a <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa73 	bl	8005076 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fa84 	bl	800509e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d122      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0204 	mvn.w	r2, #4
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa57 	bl	800508a <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa49 	bl	8005076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fa5a 	bl	800509e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d122      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d11b      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0208 	mvn.w	r2, #8
 8004c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2204      	movs	r2, #4
 8004c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa2d 	bl	800508a <HAL_TIM_IC_CaptureCallback>
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fa1f 	bl	8005076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fa30 	bl	800509e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d122      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0210 	mvn.w	r2, #16
 8004c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa03 	bl	800508a <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f9f5 	bl	8005076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fa06 	bl	800509e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0201 	mvn.w	r2, #1
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9cf 	bl	8005062 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cdc:	2b80      	cmp	r3, #128	; 0x80
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fd82 	bl	80057f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d10e      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b40      	cmp	r3, #64	; 0x40
 8004d0a:	d107      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f9cb 	bl	80050b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d10e      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d107      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0220 	mvn.w	r2, #32
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fd4c 	bl	80057e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e0ae      	b.n	8004ecc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	f200 809f 	bhi.w	8004ebc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004db9 	.word	0x08004db9
 8004d88:	08004ebd 	.word	0x08004ebd
 8004d8c:	08004ebd 	.word	0x08004ebd
 8004d90:	08004ebd 	.word	0x08004ebd
 8004d94:	08004df9 	.word	0x08004df9
 8004d98:	08004ebd 	.word	0x08004ebd
 8004d9c:	08004ebd 	.word	0x08004ebd
 8004da0:	08004ebd 	.word	0x08004ebd
 8004da4:	08004e3b 	.word	0x08004e3b
 8004da8:	08004ebd 	.word	0x08004ebd
 8004dac:	08004ebd 	.word	0x08004ebd
 8004db0:	08004ebd 	.word	0x08004ebd
 8004db4:	08004e7b 	.word	0x08004e7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fa02 	bl	80051c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0208 	orr.w	r2, r2, #8
 8004dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0204 	bic.w	r2, r2, #4
 8004de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6999      	ldr	r1, [r3, #24]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	619a      	str	r2, [r3, #24]
      break;
 8004df6:	e064      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fa48 	bl	8005294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6999      	ldr	r1, [r3, #24]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	021a      	lsls	r2, r3, #8
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	619a      	str	r2, [r3, #24]
      break;
 8004e38:	e043      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fa93 	bl	800536c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0208 	orr.w	r2, r2, #8
 8004e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0204 	bic.w	r2, r2, #4
 8004e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69d9      	ldr	r1, [r3, #28]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	61da      	str	r2, [r3, #28]
      break;
 8004e78:	e023      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fadd 	bl	8005440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69d9      	ldr	r1, [r3, #28]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	021a      	lsls	r2, r3, #8
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	61da      	str	r2, [r3, #28]
      break;
 8004eba:	e002      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e0b4      	b.n	800505a <HAL_TIM_ConfigClockSource+0x186>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d03e      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2e:	f200 8087 	bhi.w	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	f000 8086 	beq.w	8005046 <HAL_TIM_ConfigClockSource+0x172>
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d87f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b70      	cmp	r3, #112	; 0x70
 8004f42:	d01a      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xa6>
 8004f44:	2b70      	cmp	r3, #112	; 0x70
 8004f46:	d87b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b60      	cmp	r3, #96	; 0x60
 8004f4a:	d050      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x11a>
 8004f4c:	2b60      	cmp	r3, #96	; 0x60
 8004f4e:	d877      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b50      	cmp	r3, #80	; 0x50
 8004f52:	d03c      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0xfa>
 8004f54:	2b50      	cmp	r3, #80	; 0x50
 8004f56:	d873      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d058      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x13a>
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d86f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b30      	cmp	r3, #48	; 0x30
 8004f62:	d064      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d86b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d060      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d867      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05c      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d05a      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f78:	e062      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f000 fb23 	bl	80055d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	609a      	str	r2, [r3, #8]
      break;
 8004fa6:	e04f      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6899      	ldr	r1, [r3, #8]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f000 fb0c 	bl	80055d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fca:	609a      	str	r2, [r3, #8]
      break;
 8004fcc:	e03c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 fa80 	bl	80054e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2150      	movs	r1, #80	; 0x50
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fad9 	bl	800559e <TIM_ITRx_SetConfig>
      break;
 8004fec:	e02c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fa9f 	bl	800553e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2160      	movs	r1, #96	; 0x60
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fac9 	bl	800559e <TIM_ITRx_SetConfig>
      break;
 800500c:	e01c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 fa60 	bl	80054e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fab9 	bl	800559e <TIM_ITRx_SetConfig>
      break;
 800502c:	e00c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f000 fab0 	bl	800559e <TIM_ITRx_SetConfig>
      break;
 800503e:	e003      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	e000      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a34      	ldr	r2, [pc, #208]	; (80051ac <TIM_Base_SetConfig+0xe4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00f      	beq.n	8005100 <TIM_Base_SetConfig+0x38>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d00b      	beq.n	8005100 <TIM_Base_SetConfig+0x38>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a31      	ldr	r2, [pc, #196]	; (80051b0 <TIM_Base_SetConfig+0xe8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_Base_SetConfig+0x38>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a30      	ldr	r2, [pc, #192]	; (80051b4 <TIM_Base_SetConfig+0xec>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_Base_SetConfig+0x38>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a2f      	ldr	r2, [pc, #188]	; (80051b8 <TIM_Base_SetConfig+0xf0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d108      	bne.n	8005112 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a25      	ldr	r2, [pc, #148]	; (80051ac <TIM_Base_SetConfig+0xe4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01b      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005120:	d017      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a22      	ldr	r2, [pc, #136]	; (80051b0 <TIM_Base_SetConfig+0xe8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a21      	ldr	r2, [pc, #132]	; (80051b4 <TIM_Base_SetConfig+0xec>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00f      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <TIM_Base_SetConfig+0xf0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00b      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1f      	ldr	r2, [pc, #124]	; (80051bc <TIM_Base_SetConfig+0xf4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <TIM_Base_SetConfig+0xf8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_Base_SetConfig+0x8a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <TIM_Base_SetConfig+0xfc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d108      	bne.n	8005164 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a08      	ldr	r2, [pc, #32]	; (80051ac <TIM_Base_SetConfig+0xe4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d103      	bne.n	8005198 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	615a      	str	r2, [r3, #20]
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40014400 	.word	0x40014400
 80051c4:	40014800 	.word	0x40014800

080051c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0201 	bic.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 0302 	bic.w	r3, r3, #2
 8005210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a1c      	ldr	r2, [pc, #112]	; (8005290 <TIM_OC1_SetConfig+0xc8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d10c      	bne.n	800523e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0308 	bic.w	r3, r3, #8
 800522a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 0304 	bic.w	r3, r3, #4
 800523c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <TIM_OC1_SetConfig+0xc8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d111      	bne.n	800526a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800524c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	621a      	str	r2, [r3, #32]
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	40010000 	.word	0x40010000

08005294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0210 	bic.w	r2, r3, #16
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0320 	bic.w	r3, r3, #32
 80052de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <TIM_OC2_SetConfig+0xd4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d10d      	bne.n	8005310 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800530e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a15      	ldr	r2, [pc, #84]	; (8005368 <TIM_OC2_SetConfig+0xd4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d113      	bne.n	8005340 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800531e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40010000 	.word	0x40010000

0800536c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a1d      	ldr	r2, [pc, #116]	; (800543c <TIM_OC3_SetConfig+0xd0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d10d      	bne.n	80053e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a14      	ldr	r2, [pc, #80]	; (800543c <TIM_OC3_SetConfig+0xd0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d113      	bne.n	8005416 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40010000 	.word	0x40010000

08005440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b480      	push	{r7}
 8005442:	b087      	sub	sp, #28
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800548a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	031b      	lsls	r3, r3, #12
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a10      	ldr	r2, [pc, #64]	; (80054dc <TIM_OC4_SetConfig+0x9c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d109      	bne.n	80054b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	019b      	lsls	r3, r3, #6
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	621a      	str	r2, [r3, #32]
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000

080054e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0201 	bic.w	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 030a 	bic.w	r3, r3, #10
 800551c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800553e:	b480      	push	{r7}
 8005540:	b087      	sub	sp, #28
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0210 	bic.w	r2, r3, #16
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005568:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	031b      	lsls	r3, r3, #12
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800557a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4313      	orrs	r3, r2
 8005584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	621a      	str	r2, [r3, #32]
}
 8005592:	bf00      	nop
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f043 0307 	orr.w	r3, r3, #7
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	609a      	str	r2, [r3, #8]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	021a      	lsls	r2, r3, #8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2201      	movs	r2, #1
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1a      	ldr	r2, [r3, #32]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	43db      	mvns	r3, r3
 8005636:	401a      	ands	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1a      	ldr	r2, [r3, #32]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	fa01 f303 	lsl.w	r3, r1, r3
 800564c:	431a      	orrs	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005674:	2302      	movs	r3, #2
 8005676:	e050      	b.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d018      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d013      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a18      	ldr	r2, [pc, #96]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a16      	ldr	r2, [pc, #88]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a15      	ldr	r2, [pc, #84]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a13      	ldr	r2, [pc, #76]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d10c      	bne.n	8005708 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40010000 	.word	0x40010000
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40014000 	.word	0x40014000

0800573c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005754:	2302      	movs	r3, #2
 8005756:	e03d      	b.n	80057d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005808:	b084      	sub	sp, #16
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	f107 001c 	add.w	r0, r7, #28
 8005816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	2b01      	cmp	r3, #1
 800581e:	d122      	bne.n	8005866 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d105      	bne.n	800585a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fbee 	bl	800703c <USB_CoreReset>
 8005860:	4603      	mov	r3, r0
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	e01a      	b.n	800589c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f001 fbe2 	bl	800703c <USB_CoreReset>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800587c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	639a      	str	r2, [r3, #56]	; 0x38
 800588e:	e005      	b.n	800589c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d10b      	bne.n	80058ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f043 0206 	orr.w	r2, r3, #6
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f043 0220 	orr.w	r2, r3, #32
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c6:	b004      	add	sp, #16
 80058c8:	4770      	bx	lr
	...

080058cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4613      	mov	r3, r2
 80058d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d165      	bne.n	80059ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4a41      	ldr	r2, [pc, #260]	; (80059e8 <USB_SetTurnaroundTime+0x11c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d906      	bls.n	80058f6 <USB_SetTurnaroundTime+0x2a>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4a40      	ldr	r2, [pc, #256]	; (80059ec <USB_SetTurnaroundTime+0x120>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d202      	bcs.n	80058f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058f0:	230f      	movs	r3, #15
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	e062      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	4a3c      	ldr	r2, [pc, #240]	; (80059ec <USB_SetTurnaroundTime+0x120>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d306      	bcc.n	800590c <USB_SetTurnaroundTime+0x40>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4a3b      	ldr	r2, [pc, #236]	; (80059f0 <USB_SetTurnaroundTime+0x124>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d202      	bcs.n	800590c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005906:	230e      	movs	r3, #14
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e057      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4a38      	ldr	r2, [pc, #224]	; (80059f0 <USB_SetTurnaroundTime+0x124>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d306      	bcc.n	8005922 <USB_SetTurnaroundTime+0x56>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a37      	ldr	r2, [pc, #220]	; (80059f4 <USB_SetTurnaroundTime+0x128>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d202      	bcs.n	8005922 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800591c:	230d      	movs	r3, #13
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e04c      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	4a33      	ldr	r2, [pc, #204]	; (80059f4 <USB_SetTurnaroundTime+0x128>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d306      	bcc.n	8005938 <USB_SetTurnaroundTime+0x6c>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4a32      	ldr	r2, [pc, #200]	; (80059f8 <USB_SetTurnaroundTime+0x12c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d802      	bhi.n	8005938 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005932:	230c      	movs	r3, #12
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e041      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4a2f      	ldr	r2, [pc, #188]	; (80059f8 <USB_SetTurnaroundTime+0x12c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d906      	bls.n	800594e <USB_SetTurnaroundTime+0x82>
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4a2e      	ldr	r2, [pc, #184]	; (80059fc <USB_SetTurnaroundTime+0x130>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d802      	bhi.n	800594e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005948:	230b      	movs	r3, #11
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	e036      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4a2a      	ldr	r2, [pc, #168]	; (80059fc <USB_SetTurnaroundTime+0x130>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d906      	bls.n	8005964 <USB_SetTurnaroundTime+0x98>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4a29      	ldr	r2, [pc, #164]	; (8005a00 <USB_SetTurnaroundTime+0x134>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d802      	bhi.n	8005964 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800595e:	230a      	movs	r3, #10
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	e02b      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <USB_SetTurnaroundTime+0x134>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d906      	bls.n	800597a <USB_SetTurnaroundTime+0xae>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4a25      	ldr	r2, [pc, #148]	; (8005a04 <USB_SetTurnaroundTime+0x138>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d202      	bcs.n	800597a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005974:	2309      	movs	r3, #9
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e020      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <USB_SetTurnaroundTime+0x138>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d306      	bcc.n	8005990 <USB_SetTurnaroundTime+0xc4>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4a20      	ldr	r2, [pc, #128]	; (8005a08 <USB_SetTurnaroundTime+0x13c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d802      	bhi.n	8005990 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800598a:	2308      	movs	r3, #8
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e015      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4a1d      	ldr	r2, [pc, #116]	; (8005a08 <USB_SetTurnaroundTime+0x13c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d906      	bls.n	80059a6 <USB_SetTurnaroundTime+0xda>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4a1c      	ldr	r2, [pc, #112]	; (8005a0c <USB_SetTurnaroundTime+0x140>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d202      	bcs.n	80059a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059a0:	2307      	movs	r3, #7
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	e00a      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059a6:	2306      	movs	r3, #6
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	e007      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d102      	bne.n	80059b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059b2:	2309      	movs	r3, #9
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e001      	b.n	80059bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059b8:	2309      	movs	r3, #9
 80059ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	029b      	lsls	r3, r3, #10
 80059d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	00d8acbf 	.word	0x00d8acbf
 80059ec:	00e4e1c0 	.word	0x00e4e1c0
 80059f0:	00f42400 	.word	0x00f42400
 80059f4:	01067380 	.word	0x01067380
 80059f8:	011a499f 	.word	0x011a499f
 80059fc:	01312cff 	.word	0x01312cff
 8005a00:	014ca43f 	.word	0x014ca43f
 8005a04:	016e3600 	.word	0x016e3600
 8005a08:	01a6ab1f 	.word	0x01a6ab1f
 8005a0c:	01e84800 	.word	0x01e84800

08005a10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f043 0201 	orr.w	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f023 0201 	bic.w	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d115      	bne.n	8005aa2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a82:	2001      	movs	r0, #1
 8005a84:	f7fc fcca 	bl	800241c <HAL_Delay>
      ms++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 fa45 	bl	8006f1e <USB_GetMode>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d01e      	beq.n	8005ad8 <USB_SetCurrentMode+0x84>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b31      	cmp	r3, #49	; 0x31
 8005a9e:	d9f0      	bls.n	8005a82 <USB_SetCurrentMode+0x2e>
 8005aa0:	e01a      	b.n	8005ad8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005aa2:	78fb      	ldrb	r3, [r7, #3]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d115      	bne.n	8005ad4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	f7fc fcb1 	bl	800241c <HAL_Delay>
      ms++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fa2c 	bl	8006f1e <USB_GetMode>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <USB_SetCurrentMode+0x84>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b31      	cmp	r3, #49	; 0x31
 8005ad0:	d9f0      	bls.n	8005ab4 <USB_SetCurrentMode+0x60>
 8005ad2:	e001      	b.n	8005ad8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e005      	b.n	8005ae4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b32      	cmp	r3, #50	; 0x32
 8005adc:	d101      	bne.n	8005ae2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aec:	b084      	sub	sp, #16
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b06:	2300      	movs	r3, #0
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	e009      	b.n	8005b20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	3340      	adds	r3, #64	; 0x40
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	2200      	movs	r2, #0
 8005b18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b0e      	cmp	r3, #14
 8005b24:	d9f2      	bls.n	8005b0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d11c      	bne.n	8005b66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b3a:	f043 0302 	orr.w	r3, r3, #2
 8005b3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
 8005b64:	e00b      	b.n	8005b7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b84:	461a      	mov	r2, r3
 8005b86:	2300      	movs	r3, #0
 8005b88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b90:	4619      	mov	r1, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b98:	461a      	mov	r2, r3
 8005b9a:	680b      	ldr	r3, [r1, #0]
 8005b9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d10c      	bne.n	8005bbe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005baa:	2100      	movs	r1, #0
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f965 	bl	8005e7c <USB_SetDevSpeed>
 8005bb2:	e008      	b.n	8005bc6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f960 	bl	8005e7c <USB_SetDevSpeed>
 8005bbc:	e003      	b.n	8005bc6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bbe:	2103      	movs	r1, #3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f95b 	bl	8005e7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bc6:	2110      	movs	r1, #16
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f8f3 	bl	8005db4 <USB_FlushTxFifo>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f91f 	bl	8005e1c <USB_FlushRxFifo>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c06:	461a      	mov	r2, r3
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	e043      	b.n	8005c9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c28:	d118      	bne.n	8005c5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c42:	6013      	str	r3, [r2, #0]
 8005c44:	e013      	b.n	8005c6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c52:	461a      	mov	r2, r3
 8005c54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	e008      	b.n	8005c6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	3301      	adds	r3, #1
 8005c98:	613b      	str	r3, [r7, #16]
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3b7      	bcc.n	8005c12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	e043      	b.n	8005d30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cbe:	d118      	bne.n	8005cf2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	e013      	b.n	8005d04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	461a      	mov	r2, r3
 8005cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	e008      	b.n	8005d04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	461a      	mov	r2, r3
 8005d00:	2300      	movs	r3, #0
 8005d02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	461a      	mov	r2, r3
 8005d12:	2300      	movs	r3, #0
 8005d14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d22:	461a      	mov	r2, r3
 8005d24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d3b7      	bcc.n	8005ca8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f043 0210 	orr.w	r2, r3, #16
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699a      	ldr	r2, [r3, #24]
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <USB_DevInit+0x2c4>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f043 0208 	orr.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d107      	bne.n	8005da0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d98:	f043 0304 	orr.w	r3, r3, #4
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dac:	b004      	add	sp, #16
 8005dae:	4770      	bx	lr
 8005db0:	803c3800 	.word	0x803c3800

08005db4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a13      	ldr	r2, [pc, #76]	; (8005e18 <USB_FlushTxFifo+0x64>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d901      	bls.n	8005dd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e01b      	b.n	8005e0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	daf2      	bge.n	8005dc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	019b      	lsls	r3, r3, #6
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <USB_FlushTxFifo+0x64>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d901      	bls.n	8005dfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e006      	b.n	8005e0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d0f0      	beq.n	8005dec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	00030d40 	.word	0x00030d40

08005e1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a11      	ldr	r2, [pc, #68]	; (8005e78 <USB_FlushRxFifo+0x5c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e018      	b.n	8005e6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	daf2      	bge.n	8005e28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2210      	movs	r2, #16
 8005e4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a08      	ldr	r2, [pc, #32]	; (8005e78 <USB_FlushRxFifo+0x5c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e006      	b.n	8005e6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d0f0      	beq.n	8005e4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	00030d40 	.word	0x00030d40

08005e7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	460b      	mov	r3, r1
 8005e86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	68f9      	ldr	r1, [r7, #12]
 8005e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b087      	sub	sp, #28
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 0306 	and.w	r3, r3, #6
 8005ec6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
 8005ed2:	e00a      	b.n	8005eea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d002      	beq.n	8005ee0 <USB_GetDevSpeed+0x32>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b06      	cmp	r3, #6
 8005ede:	d102      	bne.n	8005ee6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	75fb      	strb	r3, [r7, #23]
 8005ee4:	e001      	b.n	8005eea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ee6:	230f      	movs	r3, #15
 8005ee8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d13a      	bne.n	8005f8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	2101      	movs	r1, #1
 8005f26:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	68f9      	ldr	r1, [r7, #12]
 8005f2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d155      	bne.n	8005ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	791b      	ldrb	r3, [r3, #4]
 8005f66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	059b      	lsls	r3, r3, #22
 8005f6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f70:	4313      	orrs	r3, r2
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e036      	b.n	8005ff8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f90:	69da      	ldr	r2, [r3, #28]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d11a      	bne.n	8005ff8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	791b      	ldrb	r3, [r3, #4]
 8005fdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fde:	430b      	orrs	r3, r1
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d161      	bne.n	80060e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800603a:	d11f      	bne.n	800607c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	440a      	add	r2, r1
 8006052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006056:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800605a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006076:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800607a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	2101      	movs	r1, #1
 800608e:	fa01 f303 	lsl.w	r3, r1, r3
 8006092:	b29b      	uxth	r3, r3
 8006094:	43db      	mvns	r3, r3
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800609c:	4013      	ands	r3, r2
 800609e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	2101      	movs	r1, #1
 80060b2:	fa01 f303 	lsl.w	r3, r1, r3
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	43db      	mvns	r3, r3
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060c0:	4013      	ands	r3, r2
 80060c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	0159      	lsls	r1, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	440b      	add	r3, r1
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	4619      	mov	r1, r3
 80060e0:	4b35      	ldr	r3, [pc, #212]	; (80061b8 <USB_DeactivateEndpoint+0x1b0>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	600b      	str	r3, [r1, #0]
 80060e6:	e060      	b.n	80061aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060fe:	d11f      	bne.n	8006140 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800611e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800613e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	2101      	movs	r1, #1
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	041b      	lsls	r3, r3, #16
 8006158:	43db      	mvns	r3, r3
 800615a:	68f9      	ldr	r1, [r7, #12]
 800615c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006160:	4013      	ands	r3, r2
 8006162:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	2101      	movs	r1, #1
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	43db      	mvns	r3, r3
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006184:	4013      	ands	r3, r2
 8006186:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	0159      	lsls	r1, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	440b      	add	r3, r1
 800619e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a2:	4619      	mov	r1, r3
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <USB_DeactivateEndpoint+0x1b4>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	ec337800 	.word	0xec337800
 80061bc:	eff37800 	.word	0xeff37800

080061c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	4613      	mov	r3, r2
 80061cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	f040 815c 	bne.w	800649a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d132      	bne.n	8006250 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006204:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006208:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800620c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	0151      	lsls	r1, r2, #5
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	440a      	add	r2, r1
 8006224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800622c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006248:	0cdb      	lsrs	r3, r3, #19
 800624a:	04db      	lsls	r3, r3, #19
 800624c:	6113      	str	r3, [r2, #16]
 800624e:	e074      	b.n	800633a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	0151      	lsls	r1, r2, #5
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	440a      	add	r2, r1
 8006266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626a:	0cdb      	lsrs	r3, r3, #19
 800626c:	04db      	lsls	r3, r3, #19
 800626e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800628e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6999      	ldr	r1, [r3, #24]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	440b      	add	r3, r1
 80062ac:	1e59      	subs	r1, r3, #1
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80062b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062b8:	4b9d      	ldr	r3, [pc, #628]	; (8006530 <USB_EPStartXfer+0x370>)
 80062ba:	400b      	ands	r3, r1
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	0148      	lsls	r0, r1, #5
 80062c0:	69f9      	ldr	r1, [r7, #28]
 80062c2:	4401      	add	r1, r0
 80062c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062c8:	4313      	orrs	r3, r2
 80062ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062e2:	69b9      	ldr	r1, [r7, #24]
 80062e4:	0148      	lsls	r0, r1, #5
 80062e6:	69f9      	ldr	r1, [r7, #28]
 80062e8:	4401      	add	r1, r0
 80062ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062ee:	4313      	orrs	r3, r2
 80062f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	791b      	ldrb	r3, [r3, #4]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d11f      	bne.n	800633a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	69fa      	ldr	r2, [r7, #28]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006314:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006318:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006338:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d14b      	bne.n	80063d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006354:	461a      	mov	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	791b      	ldrb	r3, [r3, #4]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d128      	bne.n	80063b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006370:	2b00      	cmp	r3, #0
 8006372:	d110      	bne.n	8006396 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	e00f      	b.n	80063b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	e133      	b.n	8006640 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	791b      	ldrb	r3, [r3, #4]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d015      	beq.n	800642c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 811b 	beq.w	8006640 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	2101      	movs	r1, #1
 800641c:	fa01 f303 	lsl.w	r3, r1, r3
 8006420:	69f9      	ldr	r1, [r7, #28]
 8006422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006426:	4313      	orrs	r3, r2
 8006428:	634b      	str	r3, [r1, #52]	; 0x34
 800642a:	e109      	b.n	8006640 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d110      	bne.n	800645e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006456:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	e00f      	b.n	800647e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	440a      	add	r2, r1
 8006474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6919      	ldr	r1, [r3, #16]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781a      	ldrb	r2, [r3, #0]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	b298      	uxth	r0, r3
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4603      	mov	r3, r0
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fade 	bl	8006a54 <USB_WritePacket>
 8006498:	e0d2      	b.n	8006640 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b4:	0cdb      	lsrs	r3, r3, #19
 80064b6:	04db      	lsls	r3, r3, #19
 80064b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d126      	bne.n	8006534 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fc:	69b9      	ldr	r1, [r7, #24]
 80064fe:	0148      	lsls	r0, r1, #5
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	4401      	add	r1, r0
 8006504:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006508:	4313      	orrs	r3, r2
 800650a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800652a:	6113      	str	r3, [r2, #16]
 800652c:	e03a      	b.n	80065a4 <USB_EPStartXfer+0x3e4>
 800652e:	bf00      	nop
 8006530:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	699a      	ldr	r2, [r3, #24]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4413      	add	r3, r2
 800653e:	1e5a      	subs	r2, r3, #1
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	8afa      	ldrh	r2, [r7, #22]
 8006550:	fb03 f202 	mul.w	r2, r3, r2
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	8afb      	ldrh	r3, [r7, #22]
 8006568:	04d9      	lsls	r1, r3, #19
 800656a:	4b38      	ldr	r3, [pc, #224]	; (800664c <USB_EPStartXfer+0x48c>)
 800656c:	400b      	ands	r3, r1
 800656e:	69b9      	ldr	r1, [r7, #24]
 8006570:	0148      	lsls	r0, r1, #5
 8006572:	69f9      	ldr	r1, [r7, #28]
 8006574:	4401      	add	r1, r0
 8006576:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800657a:	4313      	orrs	r3, r2
 800657c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006594:	69b9      	ldr	r1, [r7, #24]
 8006596:	0148      	lsls	r0, r1, #5
 8006598:	69f9      	ldr	r1, [r7, #28]
 800659a:	4401      	add	r1, r0
 800659c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065a0:	4313      	orrs	r3, r2
 80065a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d10d      	bne.n	80065c6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d009      	beq.n	80065c6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6919      	ldr	r1, [r3, #16]
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	460a      	mov	r2, r1
 80065c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	791b      	ldrb	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d128      	bne.n	8006620 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d110      	bne.n	8006600 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065fc:	6013      	str	r3, [r2, #0]
 80065fe:	e00f      	b.n	8006620 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800661e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800663e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	1ff80000 	.word	0x1ff80000

08006650 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	2b01      	cmp	r3, #1
 800666e:	f040 80ce 	bne.w	800680e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d132      	bne.n	80066e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	440a      	add	r2, r1
 8006690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006694:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006698:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800669c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	0cdb      	lsrs	r3, r3, #19
 80066da:	04db      	lsls	r3, r3, #19
 80066dc:	6113      	str	r3, [r2, #16]
 80066de:	e04e      	b.n	800677e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	0cdb      	lsrs	r3, r3, #19
 80066fc:	04db      	lsls	r3, r3, #19
 80066fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800671e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006722:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	429a      	cmp	r2, r3
 800672e:	d903      	bls.n	8006738 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006752:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800676e:	6939      	ldr	r1, [r7, #16]
 8006770:	0148      	lsls	r0, r1, #5
 8006772:	6979      	ldr	r1, [r7, #20]
 8006774:	4401      	add	r1, r0
 8006776:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800677a:	4313      	orrs	r3, r2
 800677c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d11e      	bne.n	80067c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d009      	beq.n	80067a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	461a      	mov	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	0151      	lsls	r1, r2, #5
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	440a      	add	r2, r1
 80067b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	e097      	b.n	80068f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 8083 	beq.w	80068f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	2101      	movs	r1, #1
 80067fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006802:	6979      	ldr	r1, [r7, #20]
 8006804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006808:	4313      	orrs	r3, r2
 800680a:	634b      	str	r3, [r1, #52]	; 0x34
 800680c:	e071      	b.n	80068f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006828:	0cdb      	lsrs	r3, r3, #19
 800682a:	04db      	lsls	r3, r3, #19
 800682c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006848:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800684c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006850:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	0151      	lsls	r1, r2, #5
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	440a      	add	r2, r1
 8006880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a0:	6939      	ldr	r1, [r7, #16]
 80068a2:	0148      	lsls	r0, r1, #5
 80068a4:	6979      	ldr	r1, [r7, #20]
 80068a6:	4401      	add	r1, r0
 80068a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068ac:	4313      	orrs	r3, r2
 80068ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d10d      	bne.n	80068d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d009      	beq.n	80068d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6919      	ldr	r1, [r3, #16]
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ce:	460a      	mov	r2, r1
 80068d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d14a      	bne.n	80069b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006936:	f040 8086 	bne.w	8006a46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	7812      	ldrb	r2, [r2, #0]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	440a      	add	r2, r1
 8006954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006958:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800695c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	440a      	add	r2, r1
 8006978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006980:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f242 7210 	movw	r2, #10000	; 0x2710
 800698e:	4293      	cmp	r3, r2
 8006990:	d902      	bls.n	8006998 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	75fb      	strb	r3, [r7, #23]
          break;
 8006996:	e056      	b.n	8006a46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b0:	d0e7      	beq.n	8006982 <USB_EPStopXfer+0x82>
 80069b2:	e048      	b.n	8006a46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069cc:	d13b      	bne.n	8006a46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	7812      	ldrb	r2, [r2, #0]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	7812      	ldrb	r2, [r2, #0]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d902      	bls.n	8006a2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
          break;
 8006a2a:	e00c      	b.n	8006a46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a44:	d0e7      	beq.n	8006a16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b089      	sub	sp, #36	; 0x24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	4611      	mov	r1, r2
 8006a60:	461a      	mov	r2, r3
 8006a62:	460b      	mov	r3, r1
 8006a64:	71fb      	strb	r3, [r7, #7]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d123      	bne.n	8006ac2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a7a:	88bb      	ldrh	r3, [r7, #4]
 8006a7c:	3303      	adds	r3, #3
 8006a7e:	089b      	lsrs	r3, r3, #2
 8006a80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a82:	2300      	movs	r3, #0
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	e018      	b.n	8006aba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	031a      	lsls	r2, r3, #12
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a94:	461a      	mov	r2, r3
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d3e2      	bcc.n	8006a88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3724      	adds	r7, #36	; 0x24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b08b      	sub	sp, #44	; 0x2c
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	089b      	lsrs	r3, r3, #2
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	623b      	str	r3, [r7, #32]
 8006afa:	e014      	b.n	8006b26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	3301      	adds	r3, #1
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	3301      	adds	r3, #1
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	3301      	adds	r3, #1
 8006b24:	623b      	str	r3, [r7, #32]
 8006b26:	6a3a      	ldr	r2, [r7, #32]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d3e6      	bcc.n	8006afc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b2e:	8bfb      	ldrh	r3, [r7, #30]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d01e      	beq.n	8006b72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f107 0310 	add.w	r3, r7, #16
 8006b44:	6812      	ldr	r2, [r2, #0]
 8006b46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	fa22 f303 	lsr.w	r3, r2, r3
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	701a      	strb	r2, [r3, #0]
      i++;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	3301      	adds	r3, #1
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b66:	8bfb      	ldrh	r3, [r7, #30]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b6c:	8bfb      	ldrh	r3, [r7, #30]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1ea      	bne.n	8006b48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	372c      	adds	r7, #44	; 0x2c
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d12c      	bne.n	8006bf6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	db12      	blt.n	8006bd4 <USB_EPSetStall+0x54>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00f      	beq.n	8006bd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	e02b      	b.n	8006c4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	db12      	blt.n	8006c2e <USB_EPSetStall+0xae>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00f      	beq.n	8006c2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d128      	bne.n	8006cca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d003      	beq.n	8006ca8 <USB_EPClearStall+0x4c>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	791b      	ldrb	r3, [r3, #4]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d138      	bne.n	8006d1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	e027      	b.n	8006d1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ce8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	791b      	ldrb	r3, [r3, #4]
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d003      	beq.n	8006cfa <USB_EPClearStall+0x9e>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	791b      	ldrb	r3, [r3, #4]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d10f      	bne.n	8006d1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	011b      	lsls	r3, r3, #4
 8006d58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d5c:	68f9      	ldr	r1, [r7, #12]
 8006d5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d62:	4313      	orrs	r3, r2
 8006d64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d8e:	f023 0303 	bic.w	r3, r3, #3
 8006d92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006da2:	f023 0302 	bic.w	r3, r3, #2
 8006da6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006dd0:	f023 0303 	bic.w	r3, r3, #3
 8006dd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e10:	68fb      	ldr	r3, [r7, #12]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b085      	sub	sp, #20
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	0c1b      	lsrs	r3, r3, #16
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	4013      	ands	r3, r2
 8006e74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	b29b      	uxth	r3, r3
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b087      	sub	sp, #28
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef2:	01db      	lsls	r3, r3, #7
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f10:	68bb      	ldr	r3, [r7, #8]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f58:	f023 0307 	bic.w	r3, r3, #7
 8006f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	333c      	adds	r3, #60	; 0x3c
 8006f96:	3304      	adds	r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4a26      	ldr	r2, [pc, #152]	; (8007038 <USB_EP0_OutStart+0xb8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d90a      	bls.n	8006fba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fb4:	d101      	bne.n	8006fba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e037      	b.n	800702a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe8:	f043 0318 	orr.w	r3, r3, #24
 8006fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ffc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007000:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d10f      	bne.n	8007028 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007022:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	4f54300a 	.word	0x4f54300a

0800703c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a13      	ldr	r2, [pc, #76]	; (80070a0 <USB_CoreReset+0x64>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e01b      	b.n	8007092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	daf2      	bge.n	8007048 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f043 0201 	orr.w	r2, r3, #1
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3301      	adds	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4a09      	ldr	r2, [pc, #36]	; (80070a0 <USB_CoreReset+0x64>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d901      	bls.n	8007084 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e006      	b.n	8007092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b01      	cmp	r3, #1
 800708e:	d0f0      	beq.n	8007072 <USB_CoreReset+0x36>

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	00030d40 	.word	0x00030d40

080070a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070b4:	f002 fc8a 	bl	80099cc <USBD_static_malloc>
 80070b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	32b0      	adds	r2, #176	; 0xb0
 80070ca:	2100      	movs	r1, #0
 80070cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80070d0:	2302      	movs	r3, #2
 80070d2:	e0d4      	b.n	800727e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80070d4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80070d8:	2100      	movs	r1, #0
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f002 fcf2 	bl	8009ac4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	32b0      	adds	r2, #176	; 0xb0
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	32b0      	adds	r2, #176	; 0xb0
 80070fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7c1b      	ldrb	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d138      	bne.n	800717e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800710c:	4b5e      	ldr	r3, [pc, #376]	; (8007288 <USBD_CDC_Init+0x1e4>)
 800710e:	7819      	ldrb	r1, [r3, #0]
 8007110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007114:	2202      	movs	r2, #2
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f002 fb35 	bl	8009786 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800711c:	4b5a      	ldr	r3, [pc, #360]	; (8007288 <USBD_CDC_Init+0x1e4>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	f003 020f 	and.w	r2, r3, #15
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	4613      	mov	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	440b      	add	r3, r1
 8007130:	3324      	adds	r3, #36	; 0x24
 8007132:	2201      	movs	r2, #1
 8007134:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007136:	4b55      	ldr	r3, [pc, #340]	; (800728c <USBD_CDC_Init+0x1e8>)
 8007138:	7819      	ldrb	r1, [r3, #0]
 800713a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800713e:	2202      	movs	r2, #2
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f002 fb20 	bl	8009786 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007146:	4b51      	ldr	r3, [pc, #324]	; (800728c <USBD_CDC_Init+0x1e8>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	f003 020f 	and.w	r2, r3, #15
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	4613      	mov	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800715e:	2201      	movs	r2, #1
 8007160:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007162:	4b4b      	ldr	r3, [pc, #300]	; (8007290 <USBD_CDC_Init+0x1ec>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	f003 020f 	and.w	r2, r3, #15
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	3326      	adds	r3, #38	; 0x26
 8007178:	2210      	movs	r2, #16
 800717a:	801a      	strh	r2, [r3, #0]
 800717c:	e035      	b.n	80071ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800717e:	4b42      	ldr	r3, [pc, #264]	; (8007288 <USBD_CDC_Init+0x1e4>)
 8007180:	7819      	ldrb	r1, [r3, #0]
 8007182:	2340      	movs	r3, #64	; 0x40
 8007184:	2202      	movs	r2, #2
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f002 fafd 	bl	8009786 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800718c:	4b3e      	ldr	r3, [pc, #248]	; (8007288 <USBD_CDC_Init+0x1e4>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	f003 020f 	and.w	r2, r3, #15
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	3324      	adds	r3, #36	; 0x24
 80071a2:	2201      	movs	r2, #1
 80071a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071a6:	4b39      	ldr	r3, [pc, #228]	; (800728c <USBD_CDC_Init+0x1e8>)
 80071a8:	7819      	ldrb	r1, [r3, #0]
 80071aa:	2340      	movs	r3, #64	; 0x40
 80071ac:	2202      	movs	r2, #2
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f002 fae9 	bl	8009786 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071b4:	4b35      	ldr	r3, [pc, #212]	; (800728c <USBD_CDC_Init+0x1e8>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	f003 020f 	and.w	r2, r3, #15
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071cc:	2201      	movs	r2, #1
 80071ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071d0:	4b2f      	ldr	r3, [pc, #188]	; (8007290 <USBD_CDC_Init+0x1ec>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f003 020f 	and.w	r2, r3, #15
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	440b      	add	r3, r1
 80071e4:	3326      	adds	r3, #38	; 0x26
 80071e6:	2210      	movs	r2, #16
 80071e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071ea:	4b29      	ldr	r3, [pc, #164]	; (8007290 <USBD_CDC_Init+0x1ec>)
 80071ec:	7819      	ldrb	r1, [r3, #0]
 80071ee:	2308      	movs	r3, #8
 80071f0:	2203      	movs	r2, #3
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f002 fac7 	bl	8009786 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80071f8:	4b25      	ldr	r3, [pc, #148]	; (8007290 <USBD_CDC_Init+0x1ec>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f003 020f 	and.w	r2, r3, #15
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	3324      	adds	r3, #36	; 0x24
 800720e:	2201      	movs	r2, #1
 8007210:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	33b0      	adds	r3, #176	; 0xb0
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007248:	2302      	movs	r3, #2
 800724a:	e018      	b.n	800727e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	7c1b      	ldrb	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007254:	4b0d      	ldr	r3, [pc, #52]	; (800728c <USBD_CDC_Init+0x1e8>)
 8007256:	7819      	ldrb	r1, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800725e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f002 fb7e 	bl	8009964 <USBD_LL_PrepareReceive>
 8007268:	e008      	b.n	800727c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800726a:	4b08      	ldr	r3, [pc, #32]	; (800728c <USBD_CDC_Init+0x1e8>)
 800726c:	7819      	ldrb	r1, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007274:	2340      	movs	r3, #64	; 0x40
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f002 fb74 	bl	8009964 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	200000c7 	.word	0x200000c7
 800728c:	200000c8 	.word	0x200000c8
 8007290:	200000c9 	.word	0x200000c9

08007294 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80072a0:	4b3a      	ldr	r3, [pc, #232]	; (800738c <USBD_CDC_DeInit+0xf8>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f002 fa93 	bl	80097d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80072ac:	4b37      	ldr	r3, [pc, #220]	; (800738c <USBD_CDC_DeInit+0xf8>)
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	f003 020f 	and.w	r2, r3, #15
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	440b      	add	r3, r1
 80072c0:	3324      	adds	r3, #36	; 0x24
 80072c2:	2200      	movs	r2, #0
 80072c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80072c6:	4b32      	ldr	r3, [pc, #200]	; (8007390 <USBD_CDC_DeInit+0xfc>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f002 fa80 	bl	80097d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80072d2:	4b2f      	ldr	r3, [pc, #188]	; (8007390 <USBD_CDC_DeInit+0xfc>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	f003 020f 	and.w	r2, r3, #15
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072ea:	2200      	movs	r2, #0
 80072ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80072ee:	4b29      	ldr	r3, [pc, #164]	; (8007394 <USBD_CDC_DeInit+0x100>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f002 fa6c 	bl	80097d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80072fa:	4b26      	ldr	r3, [pc, #152]	; (8007394 <USBD_CDC_DeInit+0x100>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	f003 020f 	and.w	r2, r3, #15
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	3324      	adds	r3, #36	; 0x24
 8007310:	2200      	movs	r2, #0
 8007312:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007314:	4b1f      	ldr	r3, [pc, #124]	; (8007394 <USBD_CDC_DeInit+0x100>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 020f 	and.w	r2, r3, #15
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	3326      	adds	r3, #38	; 0x26
 800732a:	2200      	movs	r2, #0
 800732c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	32b0      	adds	r2, #176	; 0xb0
 8007338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01f      	beq.n	8007380 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	33b0      	adds	r3, #176	; 0xb0
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	32b0      	adds	r2, #176	; 0xb0
 800735e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007362:	4618      	mov	r0, r3
 8007364:	f002 fb40 	bl	80099e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	32b0      	adds	r2, #176	; 0xb0
 8007372:	2100      	movs	r1, #0
 8007374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	200000c7 	.word	0x200000c7
 8007390:	200000c8 	.word	0x200000c8
 8007394:	200000c9 	.word	0x200000c9

08007398 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	32b0      	adds	r2, #176	; 0xb0
 80073ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80073b6:	2300      	movs	r3, #0
 80073b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e0bf      	b.n	8007548 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d050      	beq.n	8007476 <USBD_CDC_Setup+0xde>
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	f040 80af 	bne.w	8007538 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	88db      	ldrh	r3, [r3, #6]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d03a      	beq.n	8007458 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b25b      	sxtb	r3, r3
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	da1b      	bge.n	8007424 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	33b0      	adds	r3, #176	; 0xb0
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007402:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	88d2      	ldrh	r2, [r2, #6]
 8007408:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	88db      	ldrh	r3, [r3, #6]
 800740e:	2b07      	cmp	r3, #7
 8007410:	bf28      	it	cs
 8007412:	2307      	movcs	r3, #7
 8007414:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	89fa      	ldrh	r2, [r7, #14]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 fd89 	bl	8008f34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007422:	e090      	b.n	8007546 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	785a      	ldrb	r2, [r3, #1]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	88db      	ldrh	r3, [r3, #6]
 8007432:	2b3f      	cmp	r3, #63	; 0x3f
 8007434:	d803      	bhi.n	800743e <USBD_CDC_Setup+0xa6>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	88db      	ldrh	r3, [r3, #6]
 800743a:	b2da      	uxtb	r2, r3
 800743c:	e000      	b.n	8007440 <USBD_CDC_Setup+0xa8>
 800743e:	2240      	movs	r2, #64	; 0x40
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007446:	6939      	ldr	r1, [r7, #16]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800744e:	461a      	mov	r2, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 fd9b 	bl	8008f8c <USBD_CtlPrepareRx>
      break;
 8007456:	e076      	b.n	8007546 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	33b0      	adds	r3, #176	; 0xb0
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	7850      	ldrb	r0, [r2, #1]
 800746e:	2200      	movs	r2, #0
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	4798      	blx	r3
      break;
 8007474:	e067      	b.n	8007546 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	785b      	ldrb	r3, [r3, #1]
 800747a:	2b0b      	cmp	r3, #11
 800747c:	d851      	bhi.n	8007522 <USBD_CDC_Setup+0x18a>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <USBD_CDC_Setup+0xec>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	080074b5 	.word	0x080074b5
 8007488:	08007531 	.word	0x08007531
 800748c:	08007523 	.word	0x08007523
 8007490:	08007523 	.word	0x08007523
 8007494:	08007523 	.word	0x08007523
 8007498:	08007523 	.word	0x08007523
 800749c:	08007523 	.word	0x08007523
 80074a0:	08007523 	.word	0x08007523
 80074a4:	08007523 	.word	0x08007523
 80074a8:	08007523 	.word	0x08007523
 80074ac:	080074df 	.word	0x080074df
 80074b0:	08007509 	.word	0x08007509
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d107      	bne.n	80074d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074c0:	f107 030a 	add.w	r3, r7, #10
 80074c4:	2202      	movs	r2, #2
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fd33 	bl	8008f34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074ce:	e032      	b.n	8007536 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fcbd 	bl	8008e52 <USBD_CtlError>
            ret = USBD_FAIL;
 80074d8:	2303      	movs	r3, #3
 80074da:	75fb      	strb	r3, [r7, #23]
          break;
 80074dc:	e02b      	b.n	8007536 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d107      	bne.n	80074fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80074ea:	f107 030d 	add.w	r3, r7, #13
 80074ee:	2201      	movs	r2, #1
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fd1e 	bl	8008f34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074f8:	e01d      	b.n	8007536 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 fca8 	bl	8008e52 <USBD_CtlError>
            ret = USBD_FAIL;
 8007502:	2303      	movs	r3, #3
 8007504:	75fb      	strb	r3, [r7, #23]
          break;
 8007506:	e016      	b.n	8007536 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b03      	cmp	r3, #3
 8007512:	d00f      	beq.n	8007534 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 fc9b 	bl	8008e52 <USBD_CtlError>
            ret = USBD_FAIL;
 800751c:	2303      	movs	r3, #3
 800751e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007520:	e008      	b.n	8007534 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 fc94 	bl	8008e52 <USBD_CtlError>
          ret = USBD_FAIL;
 800752a:	2303      	movs	r3, #3
 800752c:	75fb      	strb	r3, [r7, #23]
          break;
 800752e:	e002      	b.n	8007536 <USBD_CDC_Setup+0x19e>
          break;
 8007530:	bf00      	nop
 8007532:	e008      	b.n	8007546 <USBD_CDC_Setup+0x1ae>
          break;
 8007534:	bf00      	nop
      }
      break;
 8007536:	e006      	b.n	8007546 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fc89 	bl	8008e52 <USBD_CtlError>
      ret = USBD_FAIL;
 8007540:	2303      	movs	r3, #3
 8007542:	75fb      	strb	r3, [r7, #23]
      break;
 8007544:	bf00      	nop
  }

  return (uint8_t)ret;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007562:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	32b0      	adds	r2, #176	; 0xb0
 800756e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007576:	2303      	movs	r3, #3
 8007578:	e065      	b.n	8007646 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	32b0      	adds	r2, #176	; 0xb0
 8007584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007588:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	f003 020f 	and.w	r2, r3, #15
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	3318      	adds	r3, #24
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d02f      	beq.n	8007604 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	f003 020f 	and.w	r2, r3, #15
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	3318      	adds	r3, #24
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	78fb      	ldrb	r3, [r7, #3]
 80075bc:	f003 010f 	and.w	r1, r3, #15
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	460b      	mov	r3, r1
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	440b      	add	r3, r1
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4403      	add	r3, r0
 80075cc:	3348      	adds	r3, #72	; 0x48
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d112      	bne.n	8007604 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	f003 020f 	and.w	r2, r3, #15
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3318      	adds	r3, #24
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075f6:	78f9      	ldrb	r1, [r7, #3]
 80075f8:	2300      	movs	r3, #0
 80075fa:	2200      	movs	r2, #0
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f002 f990 	bl	8009922 <USBD_LL_Transmit>
 8007602:	e01f      	b.n	8007644 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	33b0      	adds	r3, #176	; 0xb0
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d010      	beq.n	8007644 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	33b0      	adds	r3, #176	; 0xb0
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	32b0      	adds	r2, #176	; 0xb0
 8007664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007668:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	32b0      	adds	r2, #176	; 0xb0
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800767c:	2303      	movs	r3, #3
 800767e:	e01a      	b.n	80076b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f002 f98e 	bl	80099a6 <USBD_LL_GetRxDataSize>
 800768a:	4602      	mov	r2, r0
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	33b0      	adds	r3, #176	; 0xb0
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076b0:	4611      	mov	r1, r2
 80076b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	32b0      	adds	r2, #176	; 0xb0
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	e025      	b.n	800772c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	33b0      	adds	r3, #176	; 0xb0
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d01a      	beq.n	800772a <USBD_CDC_EP0_RxReady+0x6c>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076fa:	2bff      	cmp	r3, #255	; 0xff
 80076fc:	d015      	beq.n	800772a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	33b0      	adds	r3, #176	; 0xb0
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007716:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800771e:	b292      	uxth	r2, r2
 8007720:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800773c:	2182      	movs	r1, #130	; 0x82
 800773e:	4818      	ldr	r0, [pc, #96]	; (80077a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007740:	f000 fd4f 	bl	80081e2 <USBD_GetEpDesc>
 8007744:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007746:	2101      	movs	r1, #1
 8007748:	4815      	ldr	r0, [pc, #84]	; (80077a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800774a:	f000 fd4a 	bl	80081e2 <USBD_GetEpDesc>
 800774e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007750:	2181      	movs	r1, #129	; 0x81
 8007752:	4813      	ldr	r0, [pc, #76]	; (80077a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007754:	f000 fd45 	bl	80081e2 <USBD_GetEpDesc>
 8007758:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2210      	movs	r2, #16
 8007764:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d006      	beq.n	800777a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	2200      	movs	r2, #0
 8007770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007774:	711a      	strb	r2, [r3, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007788:	711a      	strb	r2, [r3, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2243      	movs	r2, #67	; 0x43
 8007792:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007794:	4b02      	ldr	r3, [pc, #8]	; (80077a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000084 	.word	0x20000084

080077a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077ac:	2182      	movs	r1, #130	; 0x82
 80077ae:	4818      	ldr	r0, [pc, #96]	; (8007810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077b0:	f000 fd17 	bl	80081e2 <USBD_GetEpDesc>
 80077b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077b6:	2101      	movs	r1, #1
 80077b8:	4815      	ldr	r0, [pc, #84]	; (8007810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077ba:	f000 fd12 	bl	80081e2 <USBD_GetEpDesc>
 80077be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077c0:	2181      	movs	r1, #129	; 0x81
 80077c2:	4813      	ldr	r0, [pc, #76]	; (8007810 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077c4:	f000 fd0d 	bl	80081e2 <USBD_GetEpDesc>
 80077c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2210      	movs	r2, #16
 80077d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d006      	beq.n	80077ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	2200      	movs	r2, #0
 80077e0:	711a      	strb	r2, [r3, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f042 0202 	orr.w	r2, r2, #2
 80077e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	711a      	strb	r2, [r3, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f042 0202 	orr.w	r2, r2, #2
 80077fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2243      	movs	r2, #67	; 0x43
 8007802:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007804:	4b02      	ldr	r3, [pc, #8]	; (8007810 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000084 	.word	0x20000084

08007814 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800781c:	2182      	movs	r1, #130	; 0x82
 800781e:	4818      	ldr	r0, [pc, #96]	; (8007880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007820:	f000 fcdf 	bl	80081e2 <USBD_GetEpDesc>
 8007824:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007826:	2101      	movs	r1, #1
 8007828:	4815      	ldr	r0, [pc, #84]	; (8007880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800782a:	f000 fcda 	bl	80081e2 <USBD_GetEpDesc>
 800782e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007830:	2181      	movs	r1, #129	; 0x81
 8007832:	4813      	ldr	r0, [pc, #76]	; (8007880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007834:	f000 fcd5 	bl	80081e2 <USBD_GetEpDesc>
 8007838:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2210      	movs	r2, #16
 8007844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d006      	beq.n	800785a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2200      	movs	r2, #0
 8007850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007854:	711a      	strb	r2, [r3, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d006      	beq.n	800786e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007868:	711a      	strb	r2, [r3, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2243      	movs	r2, #67	; 0x43
 8007872:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007874:	4b02      	ldr	r3, [pc, #8]	; (8007880 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20000084 	.word	0x20000084

08007884 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	220a      	movs	r2, #10
 8007890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007892:	4b03      	ldr	r3, [pc, #12]	; (80078a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20000040 	.word	0x20000040

080078a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e009      	b.n	80078cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	33b0      	adds	r3, #176	; 0xb0
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	32b0      	adds	r2, #176	; 0xb0
 80078ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e008      	b.n	8007910 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	32b0      	adds	r2, #176	; 0xb0
 8007930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007934:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e004      	b.n	800794a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	32b0      	adds	r2, #176	; 0xb0
 800796a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007970:	2301      	movs	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	32b0      	adds	r2, #176	; 0xb0
 800797e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007986:	2303      	movs	r3, #3
 8007988:	e025      	b.n	80079d6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007990:	2b00      	cmp	r3, #0
 8007992:	d11f      	bne.n	80079d4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2201      	movs	r2, #1
 8007998:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800799c:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <USBD_CDC_TransmitPacket+0x88>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	f003 020f 	and.w	r2, r3, #15
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4403      	add	r3, r0
 80079b6:	3318      	adds	r3, #24
 80079b8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <USBD_CDC_TransmitPacket+0x88>)
 80079bc:	7819      	ldrb	r1, [r3, #0]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 ffa9 	bl	8009922 <USBD_LL_Transmit>

    ret = USBD_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	200000c7 	.word	0x200000c7

080079e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32b0      	adds	r2, #176	; 0xb0
 80079f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	32b0      	adds	r2, #176	; 0xb0
 8007a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e018      	b.n	8007a44 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7c1b      	ldrb	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <USBD_CDC_ReceivePacket+0x68>)
 8007a1c:	7819      	ldrb	r1, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 ff9b 	bl	8009964 <USBD_LL_PrepareReceive>
 8007a2e:	e008      	b.n	8007a42 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a30:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <USBD_CDC_ReceivePacket+0x68>)
 8007a32:	7819      	ldrb	r1, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a3a:	2340      	movs	r3, #64	; 0x40
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 ff91 	bl	8009964 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	200000c8 	.word	0x200000c8

08007a50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e01f      	b.n	8007aa8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	79fa      	ldrb	r2, [r7, #7]
 8007a9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f001 fe0b 	bl	80096b8 <USBD_LL_Init>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e025      	b.n	8007b14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32ae      	adds	r2, #174	; 0xae
 8007ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00f      	beq.n	8007b04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	32ae      	adds	r2, #174	; 0xae
 8007aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	f107 020e 	add.w	r2, r7, #14
 8007af8:	4610      	mov	r0, r2
 8007afa:	4798      	blx	r3
 8007afc:	4602      	mov	r2, r0
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f001 fe13 	bl	8009750 <USBD_LL_Start>
 8007b2a:	4603      	mov	r3, r0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	78fa      	ldrb	r2, [r7, #3]
 8007b6e:	4611      	mov	r1, r2
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	4798      	blx	r3
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	78fa      	ldrb	r2, [r7, #3]
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b084      	sub	sp, #16
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 f908 	bl	8008dde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007bdc:	461a      	mov	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bea:	f003 031f 	and.w	r3, r3, #31
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d01a      	beq.n	8007c28 <USBD_LL_SetupStage+0x72>
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d822      	bhi.n	8007c3c <USBD_LL_SetupStage+0x86>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <USBD_LL_SetupStage+0x4a>
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d00a      	beq.n	8007c14 <USBD_LL_SetupStage+0x5e>
 8007bfe:	e01d      	b.n	8007c3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fb5f 	bl	80082cc <USBD_StdDevReq>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73fb      	strb	r3, [r7, #15]
      break;
 8007c12:	e020      	b.n	8007c56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fbc7 	bl	80083b0 <USBD_StdItfReq>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
      break;
 8007c26:	e016      	b.n	8007c56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fc29 	bl	8008488 <USBD_StdEPReq>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
      break;
 8007c3a:	e00c      	b.n	8007c56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fde0 	bl	8009810 <USBD_LL_StallEP>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
      break;
 8007c54:	bf00      	nop
  }

  return ret;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c72:	7afb      	ldrb	r3, [r7, #11]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d16e      	bne.n	8007d56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	f040 8098 	bne.w	8007dbc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d913      	bls.n	8007cc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	1ad2      	subs	r2, r2, r3
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	bf28      	it	cs
 8007cb2:	4613      	movcs	r3, r2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f001 f984 	bl	8008fc6 <USBD_CtlContinueRx>
 8007cbe:	e07d      	b.n	8007dbc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cc6:	f003 031f 	and.w	r3, r3, #31
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d014      	beq.n	8007cf8 <USBD_LL_DataOutStage+0x98>
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d81d      	bhi.n	8007d0e <USBD_LL_DataOutStage+0xae>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <USBD_LL_DataOutStage+0x7c>
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d003      	beq.n	8007ce2 <USBD_LL_DataOutStage+0x82>
 8007cda:	e018      	b.n	8007d0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	75bb      	strb	r3, [r7, #22]
            break;
 8007ce0:	e018      	b.n	8007d14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	4619      	mov	r1, r3
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fa5e 	bl	80081ae <USBD_CoreFindIF>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	75bb      	strb	r3, [r7, #22]
            break;
 8007cf6:	e00d      	b.n	8007d14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	4619      	mov	r1, r3
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 fa60 	bl	80081c8 <USBD_CoreFindEP>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d0c:	e002      	b.n	8007d14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	75bb      	strb	r3, [r7, #22]
            break;
 8007d12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d14:	7dbb      	ldrb	r3, [r7, #22]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d119      	bne.n	8007d4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d113      	bne.n	8007d4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d26:	7dba      	ldrb	r2, [r7, #22]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	32ae      	adds	r2, #174	; 0xae
 8007d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d36:	7dba      	ldrb	r2, [r7, #22]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d3e:	7dba      	ldrb	r2, [r7, #22]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	32ae      	adds	r2, #174	; 0xae
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f001 f94a 	bl	8008fe8 <USBD_CtlSendStatus>
 8007d54:	e032      	b.n	8007dbc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d56:	7afb      	ldrb	r3, [r7, #11]
 8007d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	4619      	mov	r1, r3
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 fa31 	bl	80081c8 <USBD_CoreFindEP>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d6a:	7dbb      	ldrb	r3, [r7, #22]
 8007d6c:	2bff      	cmp	r3, #255	; 0xff
 8007d6e:	d025      	beq.n	8007dbc <USBD_LL_DataOutStage+0x15c>
 8007d70:	7dbb      	ldrb	r3, [r7, #22]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d122      	bne.n	8007dbc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d117      	bne.n	8007db2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d82:	7dba      	ldrb	r2, [r7, #22]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	32ae      	adds	r2, #174	; 0xae
 8007d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00f      	beq.n	8007db2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d92:	7dba      	ldrb	r2, [r7, #22]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d9a:	7dba      	ldrb	r2, [r7, #22]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	32ae      	adds	r2, #174	; 0xae
 8007da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	7afa      	ldrb	r2, [r7, #11]
 8007da8:	4611      	mov	r1, r2
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	4798      	blx	r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
 8007dba:	e000      	b.n	8007dbe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d16f      	bne.n	8007eba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3314      	adds	r3, #20
 8007dde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d15a      	bne.n	8007ea0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d914      	bls.n	8007e20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f001 f8ac 	bl	8008f6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e12:	2300      	movs	r3, #0
 8007e14:	2200      	movs	r2, #0
 8007e16:	2100      	movs	r1, #0
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f001 fda3 	bl	8009964 <USBD_LL_PrepareReceive>
 8007e1e:	e03f      	b.n	8007ea0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d11c      	bne.n	8007e66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d316      	bcc.n	8007e66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d20f      	bcs.n	8007e66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f001 f88d 	bl	8008f6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f001 fd80 	bl	8009964 <USBD_LL_PrepareReceive>
 8007e64:	e01c      	b.n	8007ea0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d10f      	bne.n	8007e92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e92:	2180      	movs	r1, #128	; 0x80
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f001 fcbb 	bl	8009810 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f001 f8b7 	bl	800900e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d03a      	beq.n	8007f20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff fe42 	bl	8007b34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007eb8:	e032      	b.n	8007f20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007eba:	7afb      	ldrb	r3, [r7, #11]
 8007ebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f97f 	bl	80081c8 <USBD_CoreFindEP>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	2bff      	cmp	r3, #255	; 0xff
 8007ed2:	d025      	beq.n	8007f20 <USBD_LL_DataInStage+0x15a>
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d122      	bne.n	8007f20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d11c      	bne.n	8007f20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ee6:	7dfa      	ldrb	r2, [r7, #23]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	32ae      	adds	r2, #174	; 0xae
 8007eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d014      	beq.n	8007f20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007ef6:	7dfa      	ldrb	r2, [r7, #23]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007efe:	7dfa      	ldrb	r2, [r7, #23]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	32ae      	adds	r2, #174	; 0xae
 8007f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	7afa      	ldrb	r2, [r7, #11]
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	4798      	blx	r3
 8007f12:	4603      	mov	r3, r0
 8007f14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f16:	7dbb      	ldrb	r3, [r7, #22]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f1c:	7dbb      	ldrb	r3, [r7, #22]
 8007f1e:	e000      	b.n	8007f22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d014      	beq.n	8007f90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00e      	beq.n	8007f90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6852      	ldr	r2, [r2, #4]
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	4611      	mov	r1, r2
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f90:	2340      	movs	r3, #64	; 0x40
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 fbf5 	bl	8009786 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2240      	movs	r2, #64	; 0x40
 8007fa8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fac:	2340      	movs	r3, #64	; 0x40
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2180      	movs	r1, #128	; 0x80
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fbe7 	bl	8009786 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2240      	movs	r2, #64	; 0x40
 8007fc2:	621a      	str	r2, [r3, #32]

  return ret;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2204      	movs	r2, #4
 8008008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b04      	cmp	r3, #4
 800802c:	d106      	bne.n	800803c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008034:	b2da      	uxtb	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b082      	sub	sp, #8
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b03      	cmp	r3, #3
 800805c:	d110      	bne.n	8008080 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d005      	beq.n	8008080 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	460b      	mov	r3, r1
 8008094:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	32ae      	adds	r2, #174	; 0xae
 80080a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e01c      	b.n	80080e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d115      	bne.n	80080e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	32ae      	adds	r2, #174	; 0xae
 80080c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	32ae      	adds	r2, #174	; 0xae
 80080d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	78fa      	ldrb	r2, [r7, #3]
 80080de:	4611      	mov	r1, r2
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	32ae      	adds	r2, #174	; 0xae
 8008104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800810c:	2303      	movs	r3, #3
 800810e:	e01c      	b.n	800814a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b03      	cmp	r3, #3
 800811a:	d115      	bne.n	8008148 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	32ae      	adds	r2, #174	; 0xae
 8008126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	32ae      	adds	r2, #174	; 0xae
 800813a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	78fa      	ldrb	r2, [r7, #3]
 8008142:	4611      	mov	r1, r2
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00e      	beq.n	80081a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	6852      	ldr	r2, [r2, #4]
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	4611      	mov	r1, r2
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80081a0:	2303      	movs	r3, #3
 80081a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b086      	sub	sp, #24
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	460b      	mov	r3, r1
 80081ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	885b      	ldrh	r3, [r3, #2]
 80081fe:	b29a      	uxth	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	429a      	cmp	r2, r3
 8008208:	d920      	bls.n	800824c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008212:	e013      	b.n	800823c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008214:	f107 030a 	add.w	r3, r7, #10
 8008218:	4619      	mov	r1, r3
 800821a:	6978      	ldr	r0, [r7, #20]
 800821c:	f000 f81b 	bl	8008256 <USBD_GetNextDesc>
 8008220:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	785b      	ldrb	r3, [r3, #1]
 8008226:	2b05      	cmp	r3, #5
 8008228:	d108      	bne.n	800823c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	789b      	ldrb	r3, [r3, #2]
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	429a      	cmp	r2, r3
 8008236:	d008      	beq.n	800824a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008238:	2300      	movs	r3, #0
 800823a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	885b      	ldrh	r3, [r3, #2]
 8008240:	b29a      	uxth	r2, r3
 8008242:	897b      	ldrh	r3, [r7, #10]
 8008244:	429a      	cmp	r2, r3
 8008246:	d8e5      	bhi.n	8008214 <USBD_GetEpDesc+0x32>
 8008248:	e000      	b.n	800824c <USBD_GetEpDesc+0x6a>
          break;
 800824a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800824c:	693b      	ldr	r3, [r7, #16]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	881a      	ldrh	r2, [r3, #0]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	4413      	add	r3, r2
 8008270:	b29a      	uxth	r2, r3
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4413      	add	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008282:	68fb      	ldr	r3, [r7, #12]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	3301      	adds	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082ae:	8a3b      	ldrh	r3, [r7, #16]
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	b21a      	sxth	r2, r3
 80082b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	b21b      	sxth	r3, r3
 80082bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082be:	89fb      	ldrh	r3, [r7, #14]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082e2:	2b40      	cmp	r3, #64	; 0x40
 80082e4:	d005      	beq.n	80082f2 <USBD_StdDevReq+0x26>
 80082e6:	2b40      	cmp	r3, #64	; 0x40
 80082e8:	d857      	bhi.n	800839a <USBD_StdDevReq+0xce>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00f      	beq.n	800830e <USBD_StdDevReq+0x42>
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d153      	bne.n	800839a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	32ae      	adds	r2, #174	; 0xae
 80082fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	4798      	blx	r3
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]
      break;
 800830c:	e04a      	b.n	80083a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	785b      	ldrb	r3, [r3, #1]
 8008312:	2b09      	cmp	r3, #9
 8008314:	d83b      	bhi.n	800838e <USBD_StdDevReq+0xc2>
 8008316:	a201      	add	r2, pc, #4	; (adr r2, 800831c <USBD_StdDevReq+0x50>)
 8008318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831c:	08008371 	.word	0x08008371
 8008320:	08008385 	.word	0x08008385
 8008324:	0800838f 	.word	0x0800838f
 8008328:	0800837b 	.word	0x0800837b
 800832c:	0800838f 	.word	0x0800838f
 8008330:	0800834f 	.word	0x0800834f
 8008334:	08008345 	.word	0x08008345
 8008338:	0800838f 	.word	0x0800838f
 800833c:	08008367 	.word	0x08008367
 8008340:	08008359 	.word	0x08008359
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa3c 	bl	80087c4 <USBD_GetDescriptor>
          break;
 800834c:	e024      	b.n	8008398 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fba1 	bl	8008a98 <USBD_SetAddress>
          break;
 8008356:	e01f      	b.n	8008398 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fbe0 	bl	8008b20 <USBD_SetConfig>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]
          break;
 8008364:	e018      	b.n	8008398 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fc83 	bl	8008c74 <USBD_GetConfig>
          break;
 800836e:	e013      	b.n	8008398 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fcb4 	bl	8008ce0 <USBD_GetStatus>
          break;
 8008378:	e00e      	b.n	8008398 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fce3 	bl	8008d48 <USBD_SetFeature>
          break;
 8008382:	e009      	b.n	8008398 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fd07 	bl	8008d9a <USBD_ClrFeature>
          break;
 800838c:	e004      	b.n	8008398 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fd5e 	bl	8008e52 <USBD_CtlError>
          break;
 8008396:	bf00      	nop
      }
      break;
 8008398:	e004      	b.n	80083a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fd58 	bl	8008e52 <USBD_CtlError>
      break;
 80083a2:	bf00      	nop
  }

  return ret;
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop

080083b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083c6:	2b40      	cmp	r3, #64	; 0x40
 80083c8:	d005      	beq.n	80083d6 <USBD_StdItfReq+0x26>
 80083ca:	2b40      	cmp	r3, #64	; 0x40
 80083cc:	d852      	bhi.n	8008474 <USBD_StdItfReq+0xc4>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <USBD_StdItfReq+0x26>
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	d14e      	bne.n	8008474 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	3b01      	subs	r3, #1
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d840      	bhi.n	8008466 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	889b      	ldrh	r3, [r3, #4]
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d836      	bhi.n	800845c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	889b      	ldrh	r3, [r3, #4]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff fed9 	bl	80081ae <USBD_CoreFindIF>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2bff      	cmp	r3, #255	; 0xff
 8008404:	d01d      	beq.n	8008442 <USBD_StdItfReq+0x92>
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d11a      	bne.n	8008442 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800840c:	7bba      	ldrb	r2, [r7, #14]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	32ae      	adds	r2, #174	; 0xae
 8008412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00f      	beq.n	800843c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800841c:	7bba      	ldrb	r2, [r7, #14]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008424:	7bba      	ldrb	r2, [r7, #14]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	32ae      	adds	r2, #174	; 0xae
 800842a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
 8008436:	4603      	mov	r3, r0
 8008438:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800843a:	e004      	b.n	8008446 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008440:	e001      	b.n	8008446 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008442:	2303      	movs	r3, #3
 8008444:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	88db      	ldrh	r3, [r3, #6]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d110      	bne.n	8008470 <USBD_StdItfReq+0xc0>
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10d      	bne.n	8008470 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fdc7 	bl	8008fe8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800845a:	e009      	b.n	8008470 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fcf7 	bl	8008e52 <USBD_CtlError>
          break;
 8008464:	e004      	b.n	8008470 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fcf2 	bl	8008e52 <USBD_CtlError>
          break;
 800846e:	e000      	b.n	8008472 <USBD_StdItfReq+0xc2>
          break;
 8008470:	bf00      	nop
      }
      break;
 8008472:	e004      	b.n	800847e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fceb 	bl	8008e52 <USBD_CtlError>
      break;
 800847c:	bf00      	nop
  }

  return ret;
 800847e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	889b      	ldrh	r3, [r3, #4]
 800849a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084a4:	2b40      	cmp	r3, #64	; 0x40
 80084a6:	d007      	beq.n	80084b8 <USBD_StdEPReq+0x30>
 80084a8:	2b40      	cmp	r3, #64	; 0x40
 80084aa:	f200 817f 	bhi.w	80087ac <USBD_StdEPReq+0x324>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d02a      	beq.n	8008508 <USBD_StdEPReq+0x80>
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	f040 817a 	bne.w	80087ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff fe83 	bl	80081c8 <USBD_CoreFindEP>
 80084c2:	4603      	mov	r3, r0
 80084c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084c6:	7b7b      	ldrb	r3, [r7, #13]
 80084c8:	2bff      	cmp	r3, #255	; 0xff
 80084ca:	f000 8174 	beq.w	80087b6 <USBD_StdEPReq+0x32e>
 80084ce:	7b7b      	ldrb	r3, [r7, #13]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f040 8170 	bne.w	80087b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80084d6:	7b7a      	ldrb	r2, [r7, #13]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084de:	7b7a      	ldrb	r2, [r7, #13]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	32ae      	adds	r2, #174	; 0xae
 80084e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 8163 	beq.w	80087b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084f0:	7b7a      	ldrb	r2, [r7, #13]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	32ae      	adds	r2, #174	; 0xae
 80084f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
 8008502:	4603      	mov	r3, r0
 8008504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008506:	e156      	b.n	80087b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b03      	cmp	r3, #3
 800850e:	d008      	beq.n	8008522 <USBD_StdEPReq+0x9a>
 8008510:	2b03      	cmp	r3, #3
 8008512:	f300 8145 	bgt.w	80087a0 <USBD_StdEPReq+0x318>
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 809b 	beq.w	8008652 <USBD_StdEPReq+0x1ca>
 800851c:	2b01      	cmp	r3, #1
 800851e:	d03c      	beq.n	800859a <USBD_StdEPReq+0x112>
 8008520:	e13e      	b.n	80087a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d002      	beq.n	8008534 <USBD_StdEPReq+0xac>
 800852e:	2b03      	cmp	r3, #3
 8008530:	d016      	beq.n	8008560 <USBD_StdEPReq+0xd8>
 8008532:	e02c      	b.n	800858e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00d      	beq.n	8008556 <USBD_StdEPReq+0xce>
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b80      	cmp	r3, #128	; 0x80
 800853e:	d00a      	beq.n	8008556 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f963 	bl	8009810 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800854a:	2180      	movs	r1, #128	; 0x80
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 f95f 	bl	8009810 <USBD_LL_StallEP>
 8008552:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008554:	e020      	b.n	8008598 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008556:	6839      	ldr	r1, [r7, #0]
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fc7a 	bl	8008e52 <USBD_CtlError>
              break;
 800855e:	e01b      	b.n	8008598 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	885b      	ldrh	r3, [r3, #2]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10e      	bne.n	8008586 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00b      	beq.n	8008586 <USBD_StdEPReq+0xfe>
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b80      	cmp	r3, #128	; 0x80
 8008572:	d008      	beq.n	8008586 <USBD_StdEPReq+0xfe>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	88db      	ldrh	r3, [r3, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800857c:	7bbb      	ldrb	r3, [r7, #14]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 f945 	bl	8009810 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fd2e 	bl	8008fe8 <USBD_CtlSendStatus>

              break;
 800858c:	e004      	b.n	8008598 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fc5e 	bl	8008e52 <USBD_CtlError>
              break;
 8008596:	bf00      	nop
          }
          break;
 8008598:	e107      	b.n	80087aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d002      	beq.n	80085ac <USBD_StdEPReq+0x124>
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d016      	beq.n	80085d8 <USBD_StdEPReq+0x150>
 80085aa:	e04b      	b.n	8008644 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00d      	beq.n	80085ce <USBD_StdEPReq+0x146>
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b80      	cmp	r3, #128	; 0x80
 80085b6:	d00a      	beq.n	80085ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f927 	bl	8009810 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085c2:	2180      	movs	r1, #128	; 0x80
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 f923 	bl	8009810 <USBD_LL_StallEP>
 80085ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085cc:	e040      	b.n	8008650 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fc3e 	bl	8008e52 <USBD_CtlError>
              break;
 80085d6:	e03b      	b.n	8008650 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	885b      	ldrh	r3, [r3, #2]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d136      	bne.n	800864e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 f92d 	bl	800984e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fcf7 	bl	8008fe8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7ff fde2 	bl	80081c8 <USBD_CoreFindEP>
 8008604:	4603      	mov	r3, r0
 8008606:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008608:	7b7b      	ldrb	r3, [r7, #13]
 800860a:	2bff      	cmp	r3, #255	; 0xff
 800860c:	d01f      	beq.n	800864e <USBD_StdEPReq+0x1c6>
 800860e:	7b7b      	ldrb	r3, [r7, #13]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d11c      	bne.n	800864e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008614:	7b7a      	ldrb	r2, [r7, #13]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800861c:	7b7a      	ldrb	r2, [r7, #13]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	32ae      	adds	r2, #174	; 0xae
 8008622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d010      	beq.n	800864e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800862c:	7b7a      	ldrb	r2, [r7, #13]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	32ae      	adds	r2, #174	; 0xae
 8008632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	4798      	blx	r3
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008642:	e004      	b.n	800864e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fc03 	bl	8008e52 <USBD_CtlError>
              break;
 800864c:	e000      	b.n	8008650 <USBD_StdEPReq+0x1c8>
              break;
 800864e:	bf00      	nop
          }
          break;
 8008650:	e0ab      	b.n	80087aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b02      	cmp	r3, #2
 800865c:	d002      	beq.n	8008664 <USBD_StdEPReq+0x1dc>
 800865e:	2b03      	cmp	r3, #3
 8008660:	d032      	beq.n	80086c8 <USBD_StdEPReq+0x240>
 8008662:	e097      	b.n	8008794 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <USBD_StdEPReq+0x1f2>
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	2b80      	cmp	r3, #128	; 0x80
 800866e:	d004      	beq.n	800867a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fbed 	bl	8008e52 <USBD_CtlError>
                break;
 8008678:	e091      	b.n	800879e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800867a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800867e:	2b00      	cmp	r3, #0
 8008680:	da0b      	bge.n	800869a <USBD_StdEPReq+0x212>
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008688:	4613      	mov	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	3310      	adds	r3, #16
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	4413      	add	r3, r2
 8008696:	3304      	adds	r3, #4
 8008698:	e00b      	b.n	80086b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	4413      	add	r3, r2
 80086b0:	3304      	adds	r3, #4
 80086b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2200      	movs	r2, #0
 80086b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	2202      	movs	r2, #2
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fc37 	bl	8008f34 <USBD_CtlSendData>
              break;
 80086c6:	e06a      	b.n	800879e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da11      	bge.n	80086f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	f003 020f 	and.w	r2, r3, #15
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	3324      	adds	r3, #36	; 0x24
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d117      	bne.n	800871a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fbb0 	bl	8008e52 <USBD_CtlError>
                  break;
 80086f2:	e054      	b.n	800879e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	f003 020f 	and.w	r2, r3, #15
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	4613      	mov	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d104      	bne.n	800871a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fb9d 	bl	8008e52 <USBD_CtlError>
                  break;
 8008718:	e041      	b.n	800879e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800871a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800871e:	2b00      	cmp	r3, #0
 8008720:	da0b      	bge.n	800873a <USBD_StdEPReq+0x2b2>
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008728:	4613      	mov	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	3310      	adds	r3, #16
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	4413      	add	r3, r2
 8008736:	3304      	adds	r3, #4
 8008738:	e00b      	b.n	8008752 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	4413      	add	r3, r2
 8008750:	3304      	adds	r3, #4
 8008752:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <USBD_StdEPReq+0x2d8>
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	2b80      	cmp	r3, #128	; 0x80
 800875e:	d103      	bne.n	8008768 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	e00e      	b.n	8008786 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f001 f88d 	bl	800988c <USBD_LL_IsStallEP>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d003      	beq.n	8008780 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2201      	movs	r2, #1
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	e002      	b.n	8008786 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2202      	movs	r2, #2
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fbd1 	bl	8008f34 <USBD_CtlSendData>
              break;
 8008792:	e004      	b.n	800879e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fb5b 	bl	8008e52 <USBD_CtlError>
              break;
 800879c:	bf00      	nop
          }
          break;
 800879e:	e004      	b.n	80087aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fb55 	bl	8008e52 <USBD_CtlError>
          break;
 80087a8:	bf00      	nop
      }
      break;
 80087aa:	e005      	b.n	80087b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fb4f 	bl	8008e52 <USBD_CtlError>
      break;
 80087b4:	e000      	b.n	80087b8 <USBD_StdEPReq+0x330>
      break;
 80087b6:	bf00      	nop
  }

  return ret;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	885b      	ldrh	r3, [r3, #2]
 80087de:	0a1b      	lsrs	r3, r3, #8
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	3b01      	subs	r3, #1
 80087e4:	2b06      	cmp	r3, #6
 80087e6:	f200 8128 	bhi.w	8008a3a <USBD_GetDescriptor+0x276>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <USBD_GetDescriptor+0x2c>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	0800880d 	.word	0x0800880d
 80087f4:	08008825 	.word	0x08008825
 80087f8:	08008865 	.word	0x08008865
 80087fc:	08008a3b 	.word	0x08008a3b
 8008800:	08008a3b 	.word	0x08008a3b
 8008804:	080089db 	.word	0x080089db
 8008808:	08008a07 	.word	0x08008a07
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	7c12      	ldrb	r2, [r2, #16]
 8008818:	f107 0108 	add.w	r1, r7, #8
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
 8008820:	60f8      	str	r0, [r7, #12]
      break;
 8008822:	e112      	b.n	8008a4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7c1b      	ldrb	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10d      	bne.n	8008848 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	f107 0208 	add.w	r2, r7, #8
 8008838:	4610      	mov	r0, r2
 800883a:	4798      	blx	r3
 800883c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	3301      	adds	r3, #1
 8008842:	2202      	movs	r2, #2
 8008844:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008846:	e100      	b.n	8008a4a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	f107 0208 	add.w	r2, r7, #8
 8008854:	4610      	mov	r0, r2
 8008856:	4798      	blx	r3
 8008858:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	2202      	movs	r2, #2
 8008860:	701a      	strb	r2, [r3, #0]
      break;
 8008862:	e0f2      	b.n	8008a4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	885b      	ldrh	r3, [r3, #2]
 8008868:	b2db      	uxtb	r3, r3
 800886a:	2b05      	cmp	r3, #5
 800886c:	f200 80ac 	bhi.w	80089c8 <USBD_GetDescriptor+0x204>
 8008870:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <USBD_GetDescriptor+0xb4>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	08008891 	.word	0x08008891
 800887c:	080088c5 	.word	0x080088c5
 8008880:	080088f9 	.word	0x080088f9
 8008884:	0800892d 	.word	0x0800892d
 8008888:	08008961 	.word	0x08008961
 800888c:	08008995 	.word	0x08008995
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	7c12      	ldrb	r2, [r2, #16]
 80088a8:	f107 0108 	add.w	r1, r7, #8
 80088ac:	4610      	mov	r0, r2
 80088ae:	4798      	blx	r3
 80088b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088b2:	e091      	b.n	80089d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 facb 	bl	8008e52 <USBD_CtlError>
            err++;
 80088bc:	7afb      	ldrb	r3, [r7, #11]
 80088be:	3301      	adds	r3, #1
 80088c0:	72fb      	strb	r3, [r7, #11]
          break;
 80088c2:	e089      	b.n	80089d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00b      	beq.n	80088e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	7c12      	ldrb	r2, [r2, #16]
 80088dc:	f107 0108 	add.w	r1, r7, #8
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
 80088e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088e6:	e077      	b.n	80089d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fab1 	bl	8008e52 <USBD_CtlError>
            err++;
 80088f0:	7afb      	ldrb	r3, [r7, #11]
 80088f2:	3301      	adds	r3, #1
 80088f4:	72fb      	strb	r3, [r7, #11]
          break;
 80088f6:	e06f      	b.n	80089d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00b      	beq.n	800891c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	7c12      	ldrb	r2, [r2, #16]
 8008910:	f107 0108 	add.w	r1, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800891a:	e05d      	b.n	80089d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa97 	bl	8008e52 <USBD_CtlError>
            err++;
 8008924:	7afb      	ldrb	r3, [r7, #11]
 8008926:	3301      	adds	r3, #1
 8008928:	72fb      	strb	r3, [r7, #11]
          break;
 800892a:	e055      	b.n	80089d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00b      	beq.n	8008950 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	7c12      	ldrb	r2, [r2, #16]
 8008944:	f107 0108 	add.w	r1, r7, #8
 8008948:	4610      	mov	r0, r2
 800894a:	4798      	blx	r3
 800894c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894e:	e043      	b.n	80089d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fa7d 	bl	8008e52 <USBD_CtlError>
            err++;
 8008958:	7afb      	ldrb	r3, [r7, #11]
 800895a:	3301      	adds	r3, #1
 800895c:	72fb      	strb	r3, [r7, #11]
          break;
 800895e:	e03b      	b.n	80089d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	7c12      	ldrb	r2, [r2, #16]
 8008978:	f107 0108 	add.w	r1, r7, #8
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
 8008980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008982:	e029      	b.n	80089d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fa63 	bl	8008e52 <USBD_CtlError>
            err++;
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	3301      	adds	r3, #1
 8008990:	72fb      	strb	r3, [r7, #11]
          break;
 8008992:	e021      	b.n	80089d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	7c12      	ldrb	r2, [r2, #16]
 80089ac:	f107 0108 	add.w	r1, r7, #8
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
 80089b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089b6:	e00f      	b.n	80089d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fa49 	bl	8008e52 <USBD_CtlError>
            err++;
 80089c0:	7afb      	ldrb	r3, [r7, #11]
 80089c2:	3301      	adds	r3, #1
 80089c4:	72fb      	strb	r3, [r7, #11]
          break;
 80089c6:	e007      	b.n	80089d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fa41 	bl	8008e52 <USBD_CtlError>
          err++;
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	3301      	adds	r3, #1
 80089d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089d6:	bf00      	nop
      }
      break;
 80089d8:	e037      	b.n	8008a4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	7c1b      	ldrb	r3, [r3, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ea:	f107 0208 	add.w	r2, r7, #8
 80089ee:	4610      	mov	r0, r2
 80089f0:	4798      	blx	r3
 80089f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089f4:	e029      	b.n	8008a4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fa2a 	bl	8008e52 <USBD_CtlError>
        err++;
 80089fe:	7afb      	ldrb	r3, [r7, #11]
 8008a00:	3301      	adds	r3, #1
 8008a02:	72fb      	strb	r3, [r7, #11]
      break;
 8008a04:	e021      	b.n	8008a4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	7c1b      	ldrb	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10d      	bne.n	8008a2a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a16:	f107 0208 	add.w	r2, r7, #8
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	4798      	blx	r3
 8008a1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3301      	adds	r3, #1
 8008a24:	2207      	movs	r2, #7
 8008a26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a28:	e00f      	b.n	8008a4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fa10 	bl	8008e52 <USBD_CtlError>
        err++;
 8008a32:	7afb      	ldrb	r3, [r7, #11]
 8008a34:	3301      	adds	r3, #1
 8008a36:	72fb      	strb	r3, [r7, #11]
      break;
 8008a38:	e007      	b.n	8008a4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fa08 	bl	8008e52 <USBD_CtlError>
      err++;
 8008a42:	7afb      	ldrb	r3, [r7, #11]
 8008a44:	3301      	adds	r3, #1
 8008a46:	72fb      	strb	r3, [r7, #11]
      break;
 8008a48:	bf00      	nop
  }

  if (err != 0U)
 8008a4a:	7afb      	ldrb	r3, [r7, #11]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d11e      	bne.n	8008a8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	88db      	ldrh	r3, [r3, #6]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d016      	beq.n	8008a86 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a58:	893b      	ldrh	r3, [r7, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00e      	beq.n	8008a7c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	88da      	ldrh	r2, [r3, #6]
 8008a62:	893b      	ldrh	r3, [r7, #8]
 8008a64:	4293      	cmp	r3, r2
 8008a66:	bf28      	it	cs
 8008a68:	4613      	movcs	r3, r2
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a6e:	893b      	ldrh	r3, [r7, #8]
 8008a70:	461a      	mov	r2, r3
 8008a72:	68f9      	ldr	r1, [r7, #12]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fa5d 	bl	8008f34 <USBD_CtlSendData>
 8008a7a:	e009      	b.n	8008a90 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f9e7 	bl	8008e52 <USBD_CtlError>
 8008a84:	e004      	b.n	8008a90 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 faae 	bl	8008fe8 <USBD_CtlSendStatus>
 8008a8c:	e000      	b.n	8008a90 <USBD_GetDescriptor+0x2cc>
    return;
 8008a8e:	bf00      	nop
  }
}
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop

08008a98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	889b      	ldrh	r3, [r3, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d131      	bne.n	8008b0e <USBD_SetAddress+0x76>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	88db      	ldrh	r3, [r3, #6]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d12d      	bne.n	8008b0e <USBD_SetAddress+0x76>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	885b      	ldrh	r3, [r3, #2]
 8008ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ab8:	d829      	bhi.n	8008b0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	885b      	ldrh	r3, [r3, #2]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d104      	bne.n	8008adc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f9bc 	bl	8008e52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ada:	e01d      	b.n	8008b18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7bfa      	ldrb	r2, [r7, #15]
 8008ae0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fefb 	bl	80098e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa7a 	bl	8008fe8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d004      	beq.n	8008b04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b02:	e009      	b.n	8008b18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0c:	e004      	b.n	8008b18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f99e 	bl	8008e52 <USBD_CtlError>
  }
}
 8008b16:	bf00      	nop
 8008b18:	bf00      	nop
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	885b      	ldrh	r3, [r3, #2]
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	4b4e      	ldr	r3, [pc, #312]	; (8008c70 <USBD_SetConfig+0x150>)
 8008b36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b38:	4b4d      	ldr	r3, [pc, #308]	; (8008c70 <USBD_SetConfig+0x150>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d905      	bls.n	8008b4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b40:	6839      	ldr	r1, [r7, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f985 	bl	8008e52 <USBD_CtlError>
    return USBD_FAIL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e08c      	b.n	8008c66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d002      	beq.n	8008b5e <USBD_SetConfig+0x3e>
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d029      	beq.n	8008bb0 <USBD_SetConfig+0x90>
 8008b5c:	e075      	b.n	8008c4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b5e:	4b44      	ldr	r3, [pc, #272]	; (8008c70 <USBD_SetConfig+0x150>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d020      	beq.n	8008ba8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b66:	4b42      	ldr	r3, [pc, #264]	; (8008c70 <USBD_SetConfig+0x150>)
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b70:	4b3f      	ldr	r3, [pc, #252]	; (8008c70 <USBD_SetConfig+0x150>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7fe ffe7 	bl	8007b4a <USBD_SetClassConfig>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d008      	beq.n	8008b98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f962 	bl	8008e52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b96:	e065      	b.n	8008c64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fa25 	bl	8008fe8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2203      	movs	r2, #3
 8008ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ba6:	e05d      	b.n	8008c64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fa1d 	bl	8008fe8 <USBD_CtlSendStatus>
      break;
 8008bae:	e059      	b.n	8008c64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bb0:	4b2f      	ldr	r3, [pc, #188]	; (8008c70 <USBD_SetConfig+0x150>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d112      	bne.n	8008bde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008bc0:	4b2b      	ldr	r3, [pc, #172]	; (8008c70 <USBD_SetConfig+0x150>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bca:	4b29      	ldr	r3, [pc, #164]	; (8008c70 <USBD_SetConfig+0x150>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7fe ffd6 	bl	8007b82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa06 	bl	8008fe8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bdc:	e042      	b.n	8008c64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bde:	4b24      	ldr	r3, [pc, #144]	; (8008c70 <USBD_SetConfig+0x150>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d02a      	beq.n	8008c42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7fe ffc4 	bl	8007b82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bfa:	4b1d      	ldr	r3, [pc, #116]	; (8008c70 <USBD_SetConfig+0x150>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c04:	4b1a      	ldr	r3, [pc, #104]	; (8008c70 <USBD_SetConfig+0x150>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7fe ff9d 	bl	8007b4a <USBD_SetClassConfig>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00f      	beq.n	8008c3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f918 	bl	8008e52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7fe ffa9 	bl	8007b82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c38:	e014      	b.n	8008c64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f9d4 	bl	8008fe8 <USBD_CtlSendStatus>
      break;
 8008c40:	e010      	b.n	8008c64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f9d0 	bl	8008fe8 <USBD_CtlSendStatus>
      break;
 8008c48:	e00c      	b.n	8008c64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f900 	bl	8008e52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c52:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <USBD_SetConfig+0x150>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7fe ff92 	bl	8007b82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	73fb      	strb	r3, [r7, #15]
      break;
 8008c62:	bf00      	nop
  }

  return ret;
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	2000032c 	.word	0x2000032c

08008c74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	88db      	ldrh	r3, [r3, #6]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d004      	beq.n	8008c90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f8e2 	bl	8008e52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c8e:	e023      	b.n	8008cd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	dc02      	bgt.n	8008ca2 <USBD_GetConfig+0x2e>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dc03      	bgt.n	8008ca8 <USBD_GetConfig+0x34>
 8008ca0:	e015      	b.n	8008cce <USBD_GetConfig+0x5a>
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d00b      	beq.n	8008cbe <USBD_GetConfig+0x4a>
 8008ca6:	e012      	b.n	8008cce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f93c 	bl	8008f34 <USBD_CtlSendData>
        break;
 8008cbc:	e00c      	b.n	8008cd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f934 	bl	8008f34 <USBD_CtlSendData>
        break;
 8008ccc:	e004      	b.n	8008cd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f8be 	bl	8008e52 <USBD_CtlError>
        break;
 8008cd6:	bf00      	nop
}
 8008cd8:	bf00      	nop
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d81e      	bhi.n	8008d36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	88db      	ldrh	r3, [r3, #6]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d004      	beq.n	8008d0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f8a5 	bl	8008e52 <USBD_CtlError>
        break;
 8008d08:	e01a      	b.n	8008d40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d005      	beq.n	8008d26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	f043 0202 	orr.w	r2, r3, #2
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	330c      	adds	r3, #12
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f900 	bl	8008f34 <USBD_CtlSendData>
      break;
 8008d34:	e004      	b.n	8008d40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f88a 	bl	8008e52 <USBD_CtlError>
      break;
 8008d3e:	bf00      	nop
  }
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	885b      	ldrh	r3, [r3, #2]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d107      	bne.n	8008d6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 f940 	bl	8008fe8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d68:	e013      	b.n	8008d92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d10b      	bne.n	8008d8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	889b      	ldrh	r3, [r3, #4]
 8008d76:	0a1b      	lsrs	r3, r3, #8
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f930 	bl	8008fe8 <USBD_CtlSendStatus>
}
 8008d88:	e003      	b.n	8008d92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f860 	bl	8008e52 <USBD_CtlError>
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b082      	sub	sp, #8
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	3b01      	subs	r3, #1
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d80b      	bhi.n	8008dca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	885b      	ldrh	r3, [r3, #2]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d10c      	bne.n	8008dd4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f910 	bl	8008fe8 <USBD_CtlSendStatus>
      }
      break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f840 	bl	8008e52 <USBD_CtlError>
      break;
 8008dd2:	e000      	b.n	8008dd6 <USBD_ClrFeature+0x3c>
      break;
 8008dd4:	bf00      	nop
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3301      	adds	r3, #1
 8008df8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3301      	adds	r3, #1
 8008e06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f7ff fa41 	bl	8008290 <SWAPBYTE>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	461a      	mov	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f7ff fa34 	bl	8008290 <SWAPBYTE>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3301      	adds	r3, #1
 8008e34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7ff fa27 	bl	8008290 <SWAPBYTE>
 8008e42:	4603      	mov	r3, r0
 8008e44:	461a      	mov	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	80da      	strh	r2, [r3, #6]
}
 8008e4a:	bf00      	nop
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b082      	sub	sp, #8
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e5c:	2180      	movs	r1, #128	; 0x80
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fcd6 	bl	8009810 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e64:	2100      	movs	r1, #0
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fcd2 	bl	8009810 <USBD_LL_StallEP>
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d036      	beq.n	8008ef8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e8e:	6938      	ldr	r0, [r7, #16]
 8008e90:	f000 f836 	bl	8008f00 <USBD_GetLen>
 8008e94:	4603      	mov	r3, r0
 8008e96:	3301      	adds	r3, #1
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	7812      	ldrb	r2, [r2, #0]
 8008eac:	701a      	strb	r2, [r3, #0]
  idx++;
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	4413      	add	r3, r2
 8008eba:	2203      	movs	r2, #3
 8008ebc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ec4:	e013      	b.n	8008eee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	4413      	add	r3, r2
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	7812      	ldrb	r2, [r2, #0]
 8008ed0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	613b      	str	r3, [r7, #16]
    idx++;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
 8008eda:	3301      	adds	r3, #1
 8008edc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	3301      	adds	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e7      	bne.n	8008ec6 <USBD_GetString+0x52>
 8008ef6:	e000      	b.n	8008efa <USBD_GetString+0x86>
    return;
 8008ef8:	bf00      	nop
  }
}
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f10:	e005      	b.n	8008f1e <USBD_GetLen+0x1e>
  {
    len++;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	3301      	adds	r3, #1
 8008f16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1f5      	bne.n	8008f12 <USBD_GetLen+0x12>
  }

  return len;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2202      	movs	r2, #2
 8008f44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	2100      	movs	r1, #0
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f000 fce1 	bl	8009922 <USBD_LL_Transmit>

  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b084      	sub	sp, #16
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	60f8      	str	r0, [r7, #12]
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fcd0 	bl	8009922 <USBD_LL_Transmit>

  return USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2203      	movs	r2, #3
 8008f9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 fcd4 	bl	8009964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	60f8      	str	r0, [r7, #12]
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 fcc3 	bl	8009964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2204      	movs	r2, #4
 8008ff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fc8f 	bl	8009922 <USBD_LL_Transmit>

  return USBD_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2205      	movs	r2, #5
 800901a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800901e:	2300      	movs	r3, #0
 8009020:	2200      	movs	r2, #0
 8009022:	2100      	movs	r1, #0
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fc9d 	bl	8009964 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009038:	2200      	movs	r2, #0
 800903a:	4912      	ldr	r1, [pc, #72]	; (8009084 <MX_USB_DEVICE_Init+0x50>)
 800903c:	4812      	ldr	r0, [pc, #72]	; (8009088 <MX_USB_DEVICE_Init+0x54>)
 800903e:	f7fe fd07 	bl	8007a50 <USBD_Init>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009048:	f7f8 fb88 	bl	800175c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800904c:	490f      	ldr	r1, [pc, #60]	; (800908c <MX_USB_DEVICE_Init+0x58>)
 800904e:	480e      	ldr	r0, [pc, #56]	; (8009088 <MX_USB_DEVICE_Init+0x54>)
 8009050:	f7fe fd2e 	bl	8007ab0 <USBD_RegisterClass>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800905a:	f7f8 fb7f 	bl	800175c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800905e:	490c      	ldr	r1, [pc, #48]	; (8009090 <MX_USB_DEVICE_Init+0x5c>)
 8009060:	4809      	ldr	r0, [pc, #36]	; (8009088 <MX_USB_DEVICE_Init+0x54>)
 8009062:	f7fe fc1f 	bl	80078a4 <USBD_CDC_RegisterInterface>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800906c:	f7f8 fb76 	bl	800175c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009070:	4805      	ldr	r0, [pc, #20]	; (8009088 <MX_USB_DEVICE_Init+0x54>)
 8009072:	f7fe fd53 	bl	8007b1c <USBD_Start>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800907c:	f7f8 fb6e 	bl	800175c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009080:	bf00      	nop
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200000e0 	.word	0x200000e0
 8009088:	20000330 	.word	0x20000330
 800908c:	2000004c 	.word	0x2000004c
 8009090:	200000cc 	.word	0x200000cc

08009094 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009098:	2200      	movs	r2, #0
 800909a:	4905      	ldr	r1, [pc, #20]	; (80090b0 <CDC_Init_FS+0x1c>)
 800909c:	4805      	ldr	r0, [pc, #20]	; (80090b4 <CDC_Init_FS+0x20>)
 800909e:	f7fe fc1b 	bl	80078d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090a2:	4905      	ldr	r1, [pc, #20]	; (80090b8 <CDC_Init_FS+0x24>)
 80090a4:	4803      	ldr	r0, [pc, #12]	; (80090b4 <CDC_Init_FS+0x20>)
 80090a6:	f7fe fc39 	bl	800791c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20000a0c 	.word	0x20000a0c
 80090b4:	20000330 	.word	0x20000330
 80090b8:	2000060c 	.word	0x2000060c

080090bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	6039      	str	r1, [r7, #0]
 80090d6:	71fb      	strb	r3, [r7, #7]
 80090d8:	4613      	mov	r3, r2
 80090da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	2b23      	cmp	r3, #35	; 0x23
 80090e0:	d84a      	bhi.n	8009178 <CDC_Control_FS+0xac>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <CDC_Control_FS+0x1c>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	08009179 	.word	0x08009179
 80090ec:	08009179 	.word	0x08009179
 80090f0:	08009179 	.word	0x08009179
 80090f4:	08009179 	.word	0x08009179
 80090f8:	08009179 	.word	0x08009179
 80090fc:	08009179 	.word	0x08009179
 8009100:	08009179 	.word	0x08009179
 8009104:	08009179 	.word	0x08009179
 8009108:	08009179 	.word	0x08009179
 800910c:	08009179 	.word	0x08009179
 8009110:	08009179 	.word	0x08009179
 8009114:	08009179 	.word	0x08009179
 8009118:	08009179 	.word	0x08009179
 800911c:	08009179 	.word	0x08009179
 8009120:	08009179 	.word	0x08009179
 8009124:	08009179 	.word	0x08009179
 8009128:	08009179 	.word	0x08009179
 800912c:	08009179 	.word	0x08009179
 8009130:	08009179 	.word	0x08009179
 8009134:	08009179 	.word	0x08009179
 8009138:	08009179 	.word	0x08009179
 800913c:	08009179 	.word	0x08009179
 8009140:	08009179 	.word	0x08009179
 8009144:	08009179 	.word	0x08009179
 8009148:	08009179 	.word	0x08009179
 800914c:	08009179 	.word	0x08009179
 8009150:	08009179 	.word	0x08009179
 8009154:	08009179 	.word	0x08009179
 8009158:	08009179 	.word	0x08009179
 800915c:	08009179 	.word	0x08009179
 8009160:	08009179 	.word	0x08009179
 8009164:	08009179 	.word	0x08009179
 8009168:	08009179 	.word	0x08009179
 800916c:	08009179 	.word	0x08009179
 8009170:	08009179 	.word	0x08009179
 8009174:	08009179 	.word	0x08009179
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009178:	bf00      	nop
  }

  return (USBD_OK);
 800917a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009192:	6879      	ldr	r1, [r7, #4]
 8009194:	4805      	ldr	r0, [pc, #20]	; (80091ac <CDC_Receive_FS+0x24>)
 8009196:	f7fe fbc1 	bl	800791c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800919a:	4804      	ldr	r0, [pc, #16]	; (80091ac <CDC_Receive_FS+0x24>)
 800919c:	f7fe fc22 	bl	80079e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80091a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20000330 	.word	0x20000330

080091b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	460b      	mov	r3, r1
 80091ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80091c0:	4b0d      	ldr	r3, [pc, #52]	; (80091f8 <CDC_Transmit_FS+0x48>)
 80091c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e00b      	b.n	80091ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80091d6:	887b      	ldrh	r3, [r7, #2]
 80091d8:	461a      	mov	r2, r3
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4806      	ldr	r0, [pc, #24]	; (80091f8 <CDC_Transmit_FS+0x48>)
 80091de:	f7fe fb7b 	bl	80078d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80091e2:	4805      	ldr	r0, [pc, #20]	; (80091f8 <CDC_Transmit_FS+0x48>)
 80091e4:	f7fe fbb8 	bl	8007958 <USBD_CDC_TransmitPacket>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000330 	.word	0x20000330

080091fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b087      	sub	sp, #28
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	4613      	mov	r3, r2
 8009208:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800920e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009212:	4618      	mov	r0, r3
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
	...

08009220 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	6039      	str	r1, [r7, #0]
 800922a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2212      	movs	r2, #18
 8009230:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009232:	4b03      	ldr	r3, [pc, #12]	; (8009240 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	200000fc 	.word	0x200000fc

08009244 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	6039      	str	r1, [r7, #0]
 800924e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	2204      	movs	r2, #4
 8009254:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009256:	4b03      	ldr	r3, [pc, #12]	; (8009264 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	20000110 	.word	0x20000110

08009268 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d105      	bne.n	8009286 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	4907      	ldr	r1, [pc, #28]	; (800929c <USBD_FS_ProductStrDescriptor+0x34>)
 800927e:	4808      	ldr	r0, [pc, #32]	; (80092a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009280:	f7ff fdf8 	bl	8008e74 <USBD_GetString>
 8009284:	e004      	b.n	8009290 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	4904      	ldr	r1, [pc, #16]	; (800929c <USBD_FS_ProductStrDescriptor+0x34>)
 800928a:	4805      	ldr	r0, [pc, #20]	; (80092a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800928c:	f7ff fdf2 	bl	8008e74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20000e0c 	.word	0x20000e0c
 80092a0:	0800b138 	.word	0x0800b138

080092a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	4904      	ldr	r1, [pc, #16]	; (80092c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092b4:	4804      	ldr	r0, [pc, #16]	; (80092c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092b6:	f7ff fddd 	bl	8008e74 <USBD_GetString>
  return USBD_StrDesc;
 80092ba:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	20000e0c 	.word	0x20000e0c
 80092c8:	0800b150 	.word	0x0800b150

080092cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	4603      	mov	r3, r0
 80092d4:	6039      	str	r1, [r7, #0]
 80092d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	221a      	movs	r2, #26
 80092dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092de:	f000 f843 	bl	8009368 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092e2:	4b02      	ldr	r3, [pc, #8]	; (80092ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20000114 	.word	0x20000114

080092f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d105      	bne.n	800930e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	4907      	ldr	r1, [pc, #28]	; (8009324 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009306:	4808      	ldr	r0, [pc, #32]	; (8009328 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009308:	f7ff fdb4 	bl	8008e74 <USBD_GetString>
 800930c:	e004      	b.n	8009318 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	4904      	ldr	r1, [pc, #16]	; (8009324 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009312:	4805      	ldr	r0, [pc, #20]	; (8009328 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009314:	f7ff fdae 	bl	8008e74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009318:	4b02      	ldr	r3, [pc, #8]	; (8009324 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	20000e0c 	.word	0x20000e0c
 8009328:	0800b164 	.word	0x0800b164

0800932c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	6039      	str	r1, [r7, #0]
 8009336:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009338:	79fb      	ldrb	r3, [r7, #7]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d105      	bne.n	800934a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	4907      	ldr	r1, [pc, #28]	; (8009360 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009342:	4808      	ldr	r0, [pc, #32]	; (8009364 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009344:	f7ff fd96 	bl	8008e74 <USBD_GetString>
 8009348:	e004      	b.n	8009354 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	4904      	ldr	r1, [pc, #16]	; (8009360 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800934e:	4805      	ldr	r0, [pc, #20]	; (8009364 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009350:	f7ff fd90 	bl	8008e74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009354:	4b02      	ldr	r3, [pc, #8]	; (8009360 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009356:	4618      	mov	r0, r3
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20000e0c 	.word	0x20000e0c
 8009364:	0800b170 	.word	0x0800b170

08009368 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800936e:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <Get_SerialNum+0x44>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009374:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <Get_SerialNum+0x48>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800937a:	4b0e      	ldr	r3, [pc, #56]	; (80093b4 <Get_SerialNum+0x4c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d009      	beq.n	80093a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800938e:	2208      	movs	r2, #8
 8009390:	4909      	ldr	r1, [pc, #36]	; (80093b8 <Get_SerialNum+0x50>)
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 f814 	bl	80093c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009398:	2204      	movs	r2, #4
 800939a:	4908      	ldr	r1, [pc, #32]	; (80093bc <Get_SerialNum+0x54>)
 800939c:	68b8      	ldr	r0, [r7, #8]
 800939e:	f000 f80f 	bl	80093c0 <IntToUnicode>
  }
}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	1fff7a10 	.word	0x1fff7a10
 80093b0:	1fff7a14 	.word	0x1fff7a14
 80093b4:	1fff7a18 	.word	0x1fff7a18
 80093b8:	20000116 	.word	0x20000116
 80093bc:	20000126 	.word	0x20000126

080093c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4613      	mov	r3, r2
 80093cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]
 80093d6:	e027      	b.n	8009428 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	0f1b      	lsrs	r3, r3, #28
 80093dc:	2b09      	cmp	r3, #9
 80093de:	d80b      	bhi.n	80093f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	0f1b      	lsrs	r3, r3, #28
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	4619      	mov	r1, r3
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	440b      	add	r3, r1
 80093f0:	3230      	adds	r2, #48	; 0x30
 80093f2:	b2d2      	uxtb	r2, r2
 80093f4:	701a      	strb	r2, [r3, #0]
 80093f6:	e00a      	b.n	800940e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	0f1b      	lsrs	r3, r3, #28
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	005b      	lsls	r3, r3, #1
 8009402:	4619      	mov	r1, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	440b      	add	r3, r1
 8009408:	3237      	adds	r2, #55	; 0x37
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	3301      	adds	r3, #1
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	4413      	add	r3, r2
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	3301      	adds	r3, #1
 8009426:	75fb      	strb	r3, [r7, #23]
 8009428:	7dfa      	ldrb	r2, [r7, #23]
 800942a:	79fb      	ldrb	r3, [r7, #7]
 800942c:	429a      	cmp	r2, r3
 800942e:	d3d3      	bcc.n	80093d8 <IntToUnicode+0x18>
  }
}
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
	...

08009440 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08a      	sub	sp, #40	; 0x28
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009448:	f107 0314 	add.w	r3, r7, #20
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009460:	d13a      	bne.n	80094d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009462:	2300      	movs	r3, #0
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	4b1e      	ldr	r3, [pc, #120]	; (80094e0 <HAL_PCD_MspInit+0xa0>)
 8009468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946a:	4a1d      	ldr	r2, [pc, #116]	; (80094e0 <HAL_PCD_MspInit+0xa0>)
 800946c:	f043 0301 	orr.w	r3, r3, #1
 8009470:	6313      	str	r3, [r2, #48]	; 0x30
 8009472:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <HAL_PCD_MspInit+0xa0>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	613b      	str	r3, [r7, #16]
 800947c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800947e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009484:	2302      	movs	r3, #2
 8009486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009488:	2300      	movs	r3, #0
 800948a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800948c:	2303      	movs	r3, #3
 800948e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009490:	230a      	movs	r3, #10
 8009492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009494:	f107 0314 	add.w	r3, r7, #20
 8009498:	4619      	mov	r1, r3
 800949a:	4812      	ldr	r0, [pc, #72]	; (80094e4 <HAL_PCD_MspInit+0xa4>)
 800949c:	f7f9 f8f4 	bl	8002688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094a0:	4b0f      	ldr	r3, [pc, #60]	; (80094e0 <HAL_PCD_MspInit+0xa0>)
 80094a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a4:	4a0e      	ldr	r2, [pc, #56]	; (80094e0 <HAL_PCD_MspInit+0xa0>)
 80094a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094aa:	6353      	str	r3, [r2, #52]	; 0x34
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]
 80094b0:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <HAL_PCD_MspInit+0xa0>)
 80094b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b4:	4a0a      	ldr	r2, [pc, #40]	; (80094e0 <HAL_PCD_MspInit+0xa0>)
 80094b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094ba:	6453      	str	r3, [r2, #68]	; 0x44
 80094bc:	4b08      	ldr	r3, [pc, #32]	; (80094e0 <HAL_PCD_MspInit+0xa0>)
 80094be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094c4:	60fb      	str	r3, [r7, #12]
 80094c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094c8:	2200      	movs	r2, #0
 80094ca:	2100      	movs	r1, #0
 80094cc:	2043      	movs	r0, #67	; 0x43
 80094ce:	f7f9 f8a4 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094d2:	2043      	movs	r0, #67	; 0x43
 80094d4:	f7f9 f8bd 	bl	8002652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094d8:	bf00      	nop
 80094da:	3728      	adds	r7, #40	; 0x28
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	40023800 	.word	0x40023800
 80094e4:	40020000 	.word	0x40020000

080094e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7fe fb59 	bl	8007bb6 <USBD_LL_SetupStage>
}
 8009504:	bf00      	nop
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800951e:	78fa      	ldrb	r2, [r7, #3]
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	4613      	mov	r3, r2
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	4413      	add	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	440b      	add	r3, r1
 800952c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	78fb      	ldrb	r3, [r7, #3]
 8009534:	4619      	mov	r1, r3
 8009536:	f7fe fb93 	bl	8007c60 <USBD_LL_DataOutStage>
}
 800953a:	bf00      	nop
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	460b      	mov	r3, r1
 800954c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009554:	78fa      	ldrb	r2, [r7, #3]
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	4613      	mov	r3, r2
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	440b      	add	r3, r1
 8009562:	334c      	adds	r3, #76	; 0x4c
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	4619      	mov	r1, r3
 800956a:	f7fe fc2c 	bl	8007dc6 <USBD_LL_DataInStage>
}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009584:	4618      	mov	r0, r3
 8009586:	f7fe fd60 	bl	800804a <USBD_LL_SOF>
}
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800959a:	2301      	movs	r3, #1
 800959c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d001      	beq.n	80095aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095a6:	f7f8 f8d9 	bl	800175c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095b0:	7bfa      	ldrb	r2, [r7, #15]
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe fd0a 	bl	8007fce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe fcb2 	bl	8007f2a <USBD_LL_Reset>
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe fd05 	bl	8007fee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6812      	ldr	r2, [r2, #0]
 80095f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095f6:	f043 0301 	orr.w	r3, r3, #1
 80095fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d005      	beq.n	8009610 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009604:	4b04      	ldr	r3, [pc, #16]	; (8009618 <HAL_PCD_SuspendCallback+0x48>)
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	4a03      	ldr	r2, [pc, #12]	; (8009618 <HAL_PCD_SuspendCallback+0x48>)
 800960a:	f043 0306 	orr.w	r3, r3, #6
 800960e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	e000ed00 	.word	0xe000ed00

0800961c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fcf5 	bl	800801a <USBD_LL_Resume>
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800964a:	78fa      	ldrb	r2, [r7, #3]
 800964c:	4611      	mov	r1, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fd4d 	bl	80080ee <USBD_LL_IsoOUTIncomplete>
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800966e:	78fa      	ldrb	r2, [r7, #3]
 8009670:	4611      	mov	r1, r2
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fd09 	bl	800808a <USBD_LL_IsoINIncomplete>
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fd5f 	bl	8008152 <USBD_LL_DevConnected>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe fd5c 	bl	8008168 <USBD_LL_DevDisconnected>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d13c      	bne.n	8009742 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096c8:	4a20      	ldr	r2, [pc, #128]	; (800974c <USBD_LL_Init+0x94>)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a1e      	ldr	r2, [pc, #120]	; (800974c <USBD_LL_Init+0x94>)
 80096d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096d8:	4b1c      	ldr	r3, [pc, #112]	; (800974c <USBD_LL_Init+0x94>)
 80096da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80096e0:	4b1a      	ldr	r3, [pc, #104]	; (800974c <USBD_LL_Init+0x94>)
 80096e2:	2204      	movs	r2, #4
 80096e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80096e6:	4b19      	ldr	r3, [pc, #100]	; (800974c <USBD_LL_Init+0x94>)
 80096e8:	2202      	movs	r2, #2
 80096ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096ec:	4b17      	ldr	r3, [pc, #92]	; (800974c <USBD_LL_Init+0x94>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096f2:	4b16      	ldr	r3, [pc, #88]	; (800974c <USBD_LL_Init+0x94>)
 80096f4:	2202      	movs	r2, #2
 80096f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096f8:	4b14      	ldr	r3, [pc, #80]	; (800974c <USBD_LL_Init+0x94>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80096fe:	4b13      	ldr	r3, [pc, #76]	; (800974c <USBD_LL_Init+0x94>)
 8009700:	2200      	movs	r2, #0
 8009702:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009704:	4b11      	ldr	r3, [pc, #68]	; (800974c <USBD_LL_Init+0x94>)
 8009706:	2200      	movs	r2, #0
 8009708:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800970a:	4b10      	ldr	r3, [pc, #64]	; (800974c <USBD_LL_Init+0x94>)
 800970c:	2200      	movs	r2, #0
 800970e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009710:	4b0e      	ldr	r3, [pc, #56]	; (800974c <USBD_LL_Init+0x94>)
 8009712:	2200      	movs	r2, #0
 8009714:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009716:	480d      	ldr	r0, [pc, #52]	; (800974c <USBD_LL_Init+0x94>)
 8009718:	f7f9 f9a9 	bl	8002a6e <HAL_PCD_Init>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009722:	f7f8 f81b 	bl	800175c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009726:	2180      	movs	r1, #128	; 0x80
 8009728:	4808      	ldr	r0, [pc, #32]	; (800974c <USBD_LL_Init+0x94>)
 800972a:	f7fa fc00 	bl	8003f2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800972e:	2240      	movs	r2, #64	; 0x40
 8009730:	2100      	movs	r1, #0
 8009732:	4806      	ldr	r0, [pc, #24]	; (800974c <USBD_LL_Init+0x94>)
 8009734:	f7fa fbb4 	bl	8003ea0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009738:	2280      	movs	r2, #128	; 0x80
 800973a:	2101      	movs	r1, #1
 800973c:	4803      	ldr	r0, [pc, #12]	; (800974c <USBD_LL_Init+0x94>)
 800973e:	f7fa fbaf 	bl	8003ea0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	2000100c 	.word	0x2000100c

08009750 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009766:	4618      	mov	r0, r3
 8009768:	f7f9 fa9e 	bl	8002ca8 <HAL_PCD_Start>
 800976c:	4603      	mov	r3, r0
 800976e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	4618      	mov	r0, r3
 8009774:	f000 f942 	bl	80099fc <USBD_Get_USB_Status>
 8009778:	4603      	mov	r3, r0
 800977a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800977c:	7bbb      	ldrb	r3, [r7, #14]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	4608      	mov	r0, r1
 8009790:	4611      	mov	r1, r2
 8009792:	461a      	mov	r2, r3
 8009794:	4603      	mov	r3, r0
 8009796:	70fb      	strb	r3, [r7, #3]
 8009798:	460b      	mov	r3, r1
 800979a:	70bb      	strb	r3, [r7, #2]
 800979c:	4613      	mov	r3, r2
 800979e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097ae:	78bb      	ldrb	r3, [r7, #2]
 80097b0:	883a      	ldrh	r2, [r7, #0]
 80097b2:	78f9      	ldrb	r1, [r7, #3]
 80097b4:	f7f9 ff6f 	bl	8003696 <HAL_PCD_EP_Open>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f91c 	bl	80099fc <USBD_Get_USB_Status>
 80097c4:	4603      	mov	r3, r0
 80097c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097ec:	78fa      	ldrb	r2, [r7, #3]
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7f9 ffb8 	bl	8003766 <HAL_PCD_EP_Close>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 f8fd 	bl	80099fc <USBD_Get_USB_Status>
 8009802:	4603      	mov	r3, r0
 8009804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009806:	7bbb      	ldrb	r3, [r7, #14]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800982a:	78fa      	ldrb	r2, [r7, #3]
 800982c:	4611      	mov	r1, r2
 800982e:	4618      	mov	r0, r3
 8009830:	f7fa f890 	bl	8003954 <HAL_PCD_EP_SetStall>
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	4618      	mov	r0, r3
 800983c:	f000 f8de 	bl	80099fc <USBD_Get_USB_Status>
 8009840:	4603      	mov	r3, r0
 8009842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009844:	7bbb      	ldrb	r3, [r7, #14]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b084      	sub	sp, #16
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009868:	78fa      	ldrb	r2, [r7, #3]
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f7fa f8d5 	bl	8003a1c <HAL_PCD_EP_ClrStall>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f8bf 	bl	80099fc <USBD_Get_USB_Status>
 800987e:	4603      	mov	r3, r0
 8009880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009882:	7bbb      	ldrb	r3, [r7, #14]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800989e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	da0b      	bge.n	80098c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	4613      	mov	r3, r2
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	440b      	add	r3, r1
 80098ba:	333e      	adds	r3, #62	; 0x3e
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	e00b      	b.n	80098d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	4613      	mov	r3, r2
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80098d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	4611      	mov	r1, r2
 8009902:	4618      	mov	r0, r3
 8009904:	f7f9 fea2 	bl	800364c <HAL_PCD_SetAddress>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f874 	bl	80099fc <USBD_Get_USB_Status>
 8009914:	4603      	mov	r3, r0
 8009916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009918:	7bbb      	ldrb	r3, [r7, #14]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b086      	sub	sp, #24
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	607a      	str	r2, [r7, #4]
 800992c:	603b      	str	r3, [r7, #0]
 800992e:	460b      	mov	r3, r1
 8009930:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009940:	7af9      	ldrb	r1, [r7, #11]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	f7f9 ffbb 	bl	80038c0 <HAL_PCD_EP_Transmit>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800994e:	7dfb      	ldrb	r3, [r7, #23]
 8009950:	4618      	mov	r0, r3
 8009952:	f000 f853 	bl	80099fc <USBD_Get_USB_Status>
 8009956:	4603      	mov	r3, r0
 8009958:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800995a:	7dbb      	ldrb	r3, [r7, #22]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	460b      	mov	r3, r1
 8009972:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009982:	7af9      	ldrb	r1, [r7, #11]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	f7f9 ff37 	bl	80037fa <HAL_PCD_EP_Receive>
 800998c:	4603      	mov	r3, r0
 800998e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 f832 	bl	80099fc <USBD_Get_USB_Status>
 8009998:	4603      	mov	r3, r0
 800999a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800999c:	7dbb      	ldrb	r3, [r7, #22]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b082      	sub	sp, #8
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	460b      	mov	r3, r1
 80099b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099b8:	78fa      	ldrb	r2, [r7, #3]
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f7f9 ff67 	bl	8003890 <HAL_PCD_EP_GetRxCount>
 80099c2:	4603      	mov	r3, r0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099d4:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <USBD_static_malloc+0x18>)
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20001518 	.word	0x20001518

080099e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]

}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	4603      	mov	r3, r0
 8009a04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a0a:	79fb      	ldrb	r3, [r7, #7]
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d817      	bhi.n	8009a40 <USBD_Get_USB_Status+0x44>
 8009a10:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <USBD_Get_USB_Status+0x1c>)
 8009a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a16:	bf00      	nop
 8009a18:	08009a29 	.word	0x08009a29
 8009a1c:	08009a2f 	.word	0x08009a2f
 8009a20:	08009a35 	.word	0x08009a35
 8009a24:	08009a3b 	.word	0x08009a3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a2c:	e00b      	b.n	8009a46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	73fb      	strb	r3, [r7, #15]
    break;
 8009a32:	e008      	b.n	8009a46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a34:	2301      	movs	r3, #1
 8009a36:	73fb      	strb	r3, [r7, #15]
    break;
 8009a38:	e005      	b.n	8009a46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a3e:	e002      	b.n	8009a46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a40:	2303      	movs	r3, #3
 8009a42:	73fb      	strb	r3, [r7, #15]
    break;
 8009a44:	bf00      	nop
  }
  return usb_status;
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <__errno>:
 8009a54:	4b01      	ldr	r3, [pc, #4]	; (8009a5c <__errno+0x8>)
 8009a56:	6818      	ldr	r0, [r3, #0]
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	20000130 	.word	0x20000130

08009a60 <__libc_init_array>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4d0d      	ldr	r5, [pc, #52]	; (8009a98 <__libc_init_array+0x38>)
 8009a64:	4c0d      	ldr	r4, [pc, #52]	; (8009a9c <__libc_init_array+0x3c>)
 8009a66:	1b64      	subs	r4, r4, r5
 8009a68:	10a4      	asrs	r4, r4, #2
 8009a6a:	2600      	movs	r6, #0
 8009a6c:	42a6      	cmp	r6, r4
 8009a6e:	d109      	bne.n	8009a84 <__libc_init_array+0x24>
 8009a70:	4d0b      	ldr	r5, [pc, #44]	; (8009aa0 <__libc_init_array+0x40>)
 8009a72:	4c0c      	ldr	r4, [pc, #48]	; (8009aa4 <__libc_init_array+0x44>)
 8009a74:	f001 fb52 	bl	800b11c <_init>
 8009a78:	1b64      	subs	r4, r4, r5
 8009a7a:	10a4      	asrs	r4, r4, #2
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	42a6      	cmp	r6, r4
 8009a80:	d105      	bne.n	8009a8e <__libc_init_array+0x2e>
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a88:	4798      	blx	r3
 8009a8a:	3601      	adds	r6, #1
 8009a8c:	e7ee      	b.n	8009a6c <__libc_init_array+0xc>
 8009a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a92:	4798      	blx	r3
 8009a94:	3601      	adds	r6, #1
 8009a96:	e7f2      	b.n	8009a7e <__libc_init_array+0x1e>
 8009a98:	0800b3b0 	.word	0x0800b3b0
 8009a9c:	0800b3b0 	.word	0x0800b3b0
 8009aa0:	0800b3b0 	.word	0x0800b3b0
 8009aa4:	0800b3b4 	.word	0x0800b3b4

08009aa8 <memcpy>:
 8009aa8:	440a      	add	r2, r1
 8009aaa:	4291      	cmp	r1, r2
 8009aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ab0:	d100      	bne.n	8009ab4 <memcpy+0xc>
 8009ab2:	4770      	bx	lr
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009abe:	4291      	cmp	r1, r2
 8009ac0:	d1f9      	bne.n	8009ab6 <memcpy+0xe>
 8009ac2:	bd10      	pop	{r4, pc}

08009ac4 <memset>:
 8009ac4:	4402      	add	r2, r0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d100      	bne.n	8009ace <memset+0xa>
 8009acc:	4770      	bx	lr
 8009ace:	f803 1b01 	strb.w	r1, [r3], #1
 8009ad2:	e7f9      	b.n	8009ac8 <memset+0x4>
 8009ad4:	0000      	movs	r0, r0
	...

08009ad8 <atan>:
 8009ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	ec55 4b10 	vmov	r4, r5, d0
 8009ae0:	4bc3      	ldr	r3, [pc, #780]	; (8009df0 <atan+0x318>)
 8009ae2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ae6:	429e      	cmp	r6, r3
 8009ae8:	46ab      	mov	fp, r5
 8009aea:	dd18      	ble.n	8009b1e <atan+0x46>
 8009aec:	4bc1      	ldr	r3, [pc, #772]	; (8009df4 <atan+0x31c>)
 8009aee:	429e      	cmp	r6, r3
 8009af0:	dc01      	bgt.n	8009af6 <atan+0x1e>
 8009af2:	d109      	bne.n	8009b08 <atan+0x30>
 8009af4:	b144      	cbz	r4, 8009b08 <atan+0x30>
 8009af6:	4622      	mov	r2, r4
 8009af8:	462b      	mov	r3, r5
 8009afa:	4620      	mov	r0, r4
 8009afc:	4629      	mov	r1, r5
 8009afe:	f7f6 fb7b 	bl	80001f8 <__adddf3>
 8009b02:	4604      	mov	r4, r0
 8009b04:	460d      	mov	r5, r1
 8009b06:	e006      	b.n	8009b16 <atan+0x3e>
 8009b08:	f1bb 0f00 	cmp.w	fp, #0
 8009b0c:	f300 8131 	bgt.w	8009d72 <atan+0x29a>
 8009b10:	a59b      	add	r5, pc, #620	; (adr r5, 8009d80 <atan+0x2a8>)
 8009b12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b16:	ec45 4b10 	vmov	d0, r4, r5
 8009b1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1e:	4bb6      	ldr	r3, [pc, #728]	; (8009df8 <atan+0x320>)
 8009b20:	429e      	cmp	r6, r3
 8009b22:	dc14      	bgt.n	8009b4e <atan+0x76>
 8009b24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009b28:	429e      	cmp	r6, r3
 8009b2a:	dc0d      	bgt.n	8009b48 <atan+0x70>
 8009b2c:	a396      	add	r3, pc, #600	; (adr r3, 8009d88 <atan+0x2b0>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	ee10 0a10 	vmov	r0, s0
 8009b36:	4629      	mov	r1, r5
 8009b38:	f7f6 fb5e 	bl	80001f8 <__adddf3>
 8009b3c:	4baf      	ldr	r3, [pc, #700]	; (8009dfc <atan+0x324>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f7f6 ffa0 	bl	8000a84 <__aeabi_dcmpgt>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d1e6      	bne.n	8009b16 <atan+0x3e>
 8009b48:	f04f 3aff 	mov.w	sl, #4294967295
 8009b4c:	e02b      	b.n	8009ba6 <atan+0xce>
 8009b4e:	f000 f9b7 	bl	8009ec0 <fabs>
 8009b52:	4bab      	ldr	r3, [pc, #684]	; (8009e00 <atan+0x328>)
 8009b54:	429e      	cmp	r6, r3
 8009b56:	ec55 4b10 	vmov	r4, r5, d0
 8009b5a:	f300 80bf 	bgt.w	8009cdc <atan+0x204>
 8009b5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009b62:	429e      	cmp	r6, r3
 8009b64:	f300 80a0 	bgt.w	8009ca8 <atan+0x1d0>
 8009b68:	ee10 2a10 	vmov	r2, s0
 8009b6c:	ee10 0a10 	vmov	r0, s0
 8009b70:	462b      	mov	r3, r5
 8009b72:	4629      	mov	r1, r5
 8009b74:	f7f6 fb40 	bl	80001f8 <__adddf3>
 8009b78:	4ba0      	ldr	r3, [pc, #640]	; (8009dfc <atan+0x324>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f7f6 fb3a 	bl	80001f4 <__aeabi_dsub>
 8009b80:	2200      	movs	r2, #0
 8009b82:	4606      	mov	r6, r0
 8009b84:	460f      	mov	r7, r1
 8009b86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7f6 fb33 	bl	80001f8 <__adddf3>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4630      	mov	r0, r6
 8009b98:	4639      	mov	r1, r7
 8009b9a:	f7f6 fe0d 	bl	80007b8 <__aeabi_ddiv>
 8009b9e:	f04f 0a00 	mov.w	sl, #0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	460d      	mov	r5, r1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	462b      	mov	r3, r5
 8009baa:	4620      	mov	r0, r4
 8009bac:	4629      	mov	r1, r5
 8009bae:	f7f6 fcd9 	bl	8000564 <__aeabi_dmul>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	4689      	mov	r9, r1
 8009bba:	f7f6 fcd3 	bl	8000564 <__aeabi_dmul>
 8009bbe:	a374      	add	r3, pc, #464	; (adr r3, 8009d90 <atan+0x2b8>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	4606      	mov	r6, r0
 8009bc6:	460f      	mov	r7, r1
 8009bc8:	f7f6 fccc 	bl	8000564 <__aeabi_dmul>
 8009bcc:	a372      	add	r3, pc, #456	; (adr r3, 8009d98 <atan+0x2c0>)
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	f7f6 fb11 	bl	80001f8 <__adddf3>
 8009bd6:	4632      	mov	r2, r6
 8009bd8:	463b      	mov	r3, r7
 8009bda:	f7f6 fcc3 	bl	8000564 <__aeabi_dmul>
 8009bde:	a370      	add	r3, pc, #448	; (adr r3, 8009da0 <atan+0x2c8>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f7f6 fb08 	bl	80001f8 <__adddf3>
 8009be8:	4632      	mov	r2, r6
 8009bea:	463b      	mov	r3, r7
 8009bec:	f7f6 fcba 	bl	8000564 <__aeabi_dmul>
 8009bf0:	a36d      	add	r3, pc, #436	; (adr r3, 8009da8 <atan+0x2d0>)
 8009bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf6:	f7f6 faff 	bl	80001f8 <__adddf3>
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	463b      	mov	r3, r7
 8009bfe:	f7f6 fcb1 	bl	8000564 <__aeabi_dmul>
 8009c02:	a36b      	add	r3, pc, #428	; (adr r3, 8009db0 <atan+0x2d8>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	f7f6 faf6 	bl	80001f8 <__adddf3>
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	463b      	mov	r3, r7
 8009c10:	f7f6 fca8 	bl	8000564 <__aeabi_dmul>
 8009c14:	a368      	add	r3, pc, #416	; (adr r3, 8009db8 <atan+0x2e0>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	f7f6 faed 	bl	80001f8 <__adddf3>
 8009c1e:	4642      	mov	r2, r8
 8009c20:	464b      	mov	r3, r9
 8009c22:	f7f6 fc9f 	bl	8000564 <__aeabi_dmul>
 8009c26:	a366      	add	r3, pc, #408	; (adr r3, 8009dc0 <atan+0x2e8>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	4680      	mov	r8, r0
 8009c2e:	4689      	mov	r9, r1
 8009c30:	4630      	mov	r0, r6
 8009c32:	4639      	mov	r1, r7
 8009c34:	f7f6 fc96 	bl	8000564 <__aeabi_dmul>
 8009c38:	a363      	add	r3, pc, #396	; (adr r3, 8009dc8 <atan+0x2f0>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fad9 	bl	80001f4 <__aeabi_dsub>
 8009c42:	4632      	mov	r2, r6
 8009c44:	463b      	mov	r3, r7
 8009c46:	f7f6 fc8d 	bl	8000564 <__aeabi_dmul>
 8009c4a:	a361      	add	r3, pc, #388	; (adr r3, 8009dd0 <atan+0x2f8>)
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f7f6 fad0 	bl	80001f4 <__aeabi_dsub>
 8009c54:	4632      	mov	r2, r6
 8009c56:	463b      	mov	r3, r7
 8009c58:	f7f6 fc84 	bl	8000564 <__aeabi_dmul>
 8009c5c:	a35e      	add	r3, pc, #376	; (adr r3, 8009dd8 <atan+0x300>)
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f7f6 fac7 	bl	80001f4 <__aeabi_dsub>
 8009c66:	4632      	mov	r2, r6
 8009c68:	463b      	mov	r3, r7
 8009c6a:	f7f6 fc7b 	bl	8000564 <__aeabi_dmul>
 8009c6e:	a35c      	add	r3, pc, #368	; (adr r3, 8009de0 <atan+0x308>)
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f7f6 fabe 	bl	80001f4 <__aeabi_dsub>
 8009c78:	4632      	mov	r2, r6
 8009c7a:	463b      	mov	r3, r7
 8009c7c:	f7f6 fc72 	bl	8000564 <__aeabi_dmul>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	4640      	mov	r0, r8
 8009c86:	4649      	mov	r1, r9
 8009c88:	f7f6 fab6 	bl	80001f8 <__adddf3>
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	462b      	mov	r3, r5
 8009c90:	f7f6 fc68 	bl	8000564 <__aeabi_dmul>
 8009c94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	d14b      	bne.n	8009d36 <atan+0x25e>
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	f7f6 faa7 	bl	80001f4 <__aeabi_dsub>
 8009ca6:	e72c      	b.n	8009b02 <atan+0x2a>
 8009ca8:	ee10 0a10 	vmov	r0, s0
 8009cac:	4b53      	ldr	r3, [pc, #332]	; (8009dfc <atan+0x324>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7f6 fa9f 	bl	80001f4 <__aeabi_dsub>
 8009cb6:	4b51      	ldr	r3, [pc, #324]	; (8009dfc <atan+0x324>)
 8009cb8:	4606      	mov	r6, r0
 8009cba:	460f      	mov	r7, r1
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	f7f6 fa99 	bl	80001f8 <__adddf3>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4630      	mov	r0, r6
 8009ccc:	4639      	mov	r1, r7
 8009cce:	f7f6 fd73 	bl	80007b8 <__aeabi_ddiv>
 8009cd2:	f04f 0a01 	mov.w	sl, #1
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	460d      	mov	r5, r1
 8009cda:	e764      	b.n	8009ba6 <atan+0xce>
 8009cdc:	4b49      	ldr	r3, [pc, #292]	; (8009e04 <atan+0x32c>)
 8009cde:	429e      	cmp	r6, r3
 8009ce0:	da1d      	bge.n	8009d1e <atan+0x246>
 8009ce2:	ee10 0a10 	vmov	r0, s0
 8009ce6:	4b48      	ldr	r3, [pc, #288]	; (8009e08 <atan+0x330>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4629      	mov	r1, r5
 8009cec:	f7f6 fa82 	bl	80001f4 <__aeabi_dsub>
 8009cf0:	4b45      	ldr	r3, [pc, #276]	; (8009e08 <atan+0x330>)
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	460f      	mov	r7, r1
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	f7f6 fc32 	bl	8000564 <__aeabi_dmul>
 8009d00:	4b3e      	ldr	r3, [pc, #248]	; (8009dfc <atan+0x324>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	f7f6 fa78 	bl	80001f8 <__adddf3>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	4639      	mov	r1, r7
 8009d10:	f7f6 fd52 	bl	80007b8 <__aeabi_ddiv>
 8009d14:	f04f 0a02 	mov.w	sl, #2
 8009d18:	4604      	mov	r4, r0
 8009d1a:	460d      	mov	r5, r1
 8009d1c:	e743      	b.n	8009ba6 <atan+0xce>
 8009d1e:	462b      	mov	r3, r5
 8009d20:	ee10 2a10 	vmov	r2, s0
 8009d24:	4939      	ldr	r1, [pc, #228]	; (8009e0c <atan+0x334>)
 8009d26:	2000      	movs	r0, #0
 8009d28:	f7f6 fd46 	bl	80007b8 <__aeabi_ddiv>
 8009d2c:	f04f 0a03 	mov.w	sl, #3
 8009d30:	4604      	mov	r4, r0
 8009d32:	460d      	mov	r5, r1
 8009d34:	e737      	b.n	8009ba6 <atan+0xce>
 8009d36:	4b36      	ldr	r3, [pc, #216]	; (8009e10 <atan+0x338>)
 8009d38:	4e36      	ldr	r6, [pc, #216]	; (8009e14 <atan+0x33c>)
 8009d3a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009d3e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009d42:	e9da 2300 	ldrd	r2, r3, [sl]
 8009d46:	f7f6 fa55 	bl	80001f4 <__aeabi_dsub>
 8009d4a:	4622      	mov	r2, r4
 8009d4c:	462b      	mov	r3, r5
 8009d4e:	f7f6 fa51 	bl	80001f4 <__aeabi_dsub>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009d5a:	f7f6 fa4b 	bl	80001f4 <__aeabi_dsub>
 8009d5e:	f1bb 0f00 	cmp.w	fp, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	460d      	mov	r5, r1
 8009d66:	f6bf aed6 	bge.w	8009b16 <atan+0x3e>
 8009d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d6e:	461d      	mov	r5, r3
 8009d70:	e6d1      	b.n	8009b16 <atan+0x3e>
 8009d72:	a51d      	add	r5, pc, #116	; (adr r5, 8009de8 <atan+0x310>)
 8009d74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d78:	e6cd      	b.n	8009b16 <atan+0x3e>
 8009d7a:	bf00      	nop
 8009d7c:	f3af 8000 	nop.w
 8009d80:	54442d18 	.word	0x54442d18
 8009d84:	bff921fb 	.word	0xbff921fb
 8009d88:	8800759c 	.word	0x8800759c
 8009d8c:	7e37e43c 	.word	0x7e37e43c
 8009d90:	e322da11 	.word	0xe322da11
 8009d94:	3f90ad3a 	.word	0x3f90ad3a
 8009d98:	24760deb 	.word	0x24760deb
 8009d9c:	3fa97b4b 	.word	0x3fa97b4b
 8009da0:	a0d03d51 	.word	0xa0d03d51
 8009da4:	3fb10d66 	.word	0x3fb10d66
 8009da8:	c54c206e 	.word	0xc54c206e
 8009dac:	3fb745cd 	.word	0x3fb745cd
 8009db0:	920083ff 	.word	0x920083ff
 8009db4:	3fc24924 	.word	0x3fc24924
 8009db8:	5555550d 	.word	0x5555550d
 8009dbc:	3fd55555 	.word	0x3fd55555
 8009dc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8009dc4:	bfa2b444 	.word	0xbfa2b444
 8009dc8:	52defd9a 	.word	0x52defd9a
 8009dcc:	3fadde2d 	.word	0x3fadde2d
 8009dd0:	af749a6d 	.word	0xaf749a6d
 8009dd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8009dd8:	fe231671 	.word	0xfe231671
 8009ddc:	3fbc71c6 	.word	0x3fbc71c6
 8009de0:	9998ebc4 	.word	0x9998ebc4
 8009de4:	3fc99999 	.word	0x3fc99999
 8009de8:	54442d18 	.word	0x54442d18
 8009dec:	3ff921fb 	.word	0x3ff921fb
 8009df0:	440fffff 	.word	0x440fffff
 8009df4:	7ff00000 	.word	0x7ff00000
 8009df8:	3fdbffff 	.word	0x3fdbffff
 8009dfc:	3ff00000 	.word	0x3ff00000
 8009e00:	3ff2ffff 	.word	0x3ff2ffff
 8009e04:	40038000 	.word	0x40038000
 8009e08:	3ff80000 	.word	0x3ff80000
 8009e0c:	bff00000 	.word	0xbff00000
 8009e10:	0800b1b0 	.word	0x0800b1b0
 8009e14:	0800b190 	.word	0x0800b190

08009e18 <cos>:
 8009e18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e1a:	ec53 2b10 	vmov	r2, r3, d0
 8009e1e:	4826      	ldr	r0, [pc, #152]	; (8009eb8 <cos+0xa0>)
 8009e20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e24:	4281      	cmp	r1, r0
 8009e26:	dc06      	bgt.n	8009e36 <cos+0x1e>
 8009e28:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009eb0 <cos+0x98>
 8009e2c:	b005      	add	sp, #20
 8009e2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e32:	f000 bb95 	b.w	800a560 <__kernel_cos>
 8009e36:	4821      	ldr	r0, [pc, #132]	; (8009ebc <cos+0xa4>)
 8009e38:	4281      	cmp	r1, r0
 8009e3a:	dd09      	ble.n	8009e50 <cos+0x38>
 8009e3c:	ee10 0a10 	vmov	r0, s0
 8009e40:	4619      	mov	r1, r3
 8009e42:	f7f6 f9d7 	bl	80001f4 <__aeabi_dsub>
 8009e46:	ec41 0b10 	vmov	d0, r0, r1
 8009e4a:	b005      	add	sp, #20
 8009e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e50:	4668      	mov	r0, sp
 8009e52:	f000 f8c5 	bl	8009fe0 <__ieee754_rem_pio2>
 8009e56:	f000 0003 	and.w	r0, r0, #3
 8009e5a:	2801      	cmp	r0, #1
 8009e5c:	d00b      	beq.n	8009e76 <cos+0x5e>
 8009e5e:	2802      	cmp	r0, #2
 8009e60:	d016      	beq.n	8009e90 <cos+0x78>
 8009e62:	b9e0      	cbnz	r0, 8009e9e <cos+0x86>
 8009e64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e68:	ed9d 0b00 	vldr	d0, [sp]
 8009e6c:	f000 fb78 	bl	800a560 <__kernel_cos>
 8009e70:	ec51 0b10 	vmov	r0, r1, d0
 8009e74:	e7e7      	b.n	8009e46 <cos+0x2e>
 8009e76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e7a:	ed9d 0b00 	vldr	d0, [sp]
 8009e7e:	f000 ff87 	bl	800ad90 <__kernel_sin>
 8009e82:	ec53 2b10 	vmov	r2, r3, d0
 8009e86:	ee10 0a10 	vmov	r0, s0
 8009e8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009e8e:	e7da      	b.n	8009e46 <cos+0x2e>
 8009e90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e94:	ed9d 0b00 	vldr	d0, [sp]
 8009e98:	f000 fb62 	bl	800a560 <__kernel_cos>
 8009e9c:	e7f1      	b.n	8009e82 <cos+0x6a>
 8009e9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ea2:	ed9d 0b00 	vldr	d0, [sp]
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	f000 ff72 	bl	800ad90 <__kernel_sin>
 8009eac:	e7e0      	b.n	8009e70 <cos+0x58>
 8009eae:	bf00      	nop
	...
 8009eb8:	3fe921fb 	.word	0x3fe921fb
 8009ebc:	7fefffff 	.word	0x7fefffff

08009ec0 <fabs>:
 8009ec0:	ec51 0b10 	vmov	r0, r1, d0
 8009ec4:	ee10 2a10 	vmov	r2, s0
 8009ec8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ecc:	ec43 2b10 	vmov	d0, r2, r3
 8009ed0:	4770      	bx	lr
 8009ed2:	0000      	movs	r0, r0
 8009ed4:	0000      	movs	r0, r0
	...

08009ed8 <sin>:
 8009ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eda:	ec53 2b10 	vmov	r2, r3, d0
 8009ede:	4828      	ldr	r0, [pc, #160]	; (8009f80 <sin+0xa8>)
 8009ee0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009ee4:	4281      	cmp	r1, r0
 8009ee6:	dc07      	bgt.n	8009ef8 <sin+0x20>
 8009ee8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009f78 <sin+0xa0>
 8009eec:	2000      	movs	r0, #0
 8009eee:	b005      	add	sp, #20
 8009ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ef4:	f000 bf4c 	b.w	800ad90 <__kernel_sin>
 8009ef8:	4822      	ldr	r0, [pc, #136]	; (8009f84 <sin+0xac>)
 8009efa:	4281      	cmp	r1, r0
 8009efc:	dd09      	ble.n	8009f12 <sin+0x3a>
 8009efe:	ee10 0a10 	vmov	r0, s0
 8009f02:	4619      	mov	r1, r3
 8009f04:	f7f6 f976 	bl	80001f4 <__aeabi_dsub>
 8009f08:	ec41 0b10 	vmov	d0, r0, r1
 8009f0c:	b005      	add	sp, #20
 8009f0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f12:	4668      	mov	r0, sp
 8009f14:	f000 f864 	bl	8009fe0 <__ieee754_rem_pio2>
 8009f18:	f000 0003 	and.w	r0, r0, #3
 8009f1c:	2801      	cmp	r0, #1
 8009f1e:	d00c      	beq.n	8009f3a <sin+0x62>
 8009f20:	2802      	cmp	r0, #2
 8009f22:	d011      	beq.n	8009f48 <sin+0x70>
 8009f24:	b9f0      	cbnz	r0, 8009f64 <sin+0x8c>
 8009f26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f2a:	ed9d 0b00 	vldr	d0, [sp]
 8009f2e:	2001      	movs	r0, #1
 8009f30:	f000 ff2e 	bl	800ad90 <__kernel_sin>
 8009f34:	ec51 0b10 	vmov	r0, r1, d0
 8009f38:	e7e6      	b.n	8009f08 <sin+0x30>
 8009f3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f3e:	ed9d 0b00 	vldr	d0, [sp]
 8009f42:	f000 fb0d 	bl	800a560 <__kernel_cos>
 8009f46:	e7f5      	b.n	8009f34 <sin+0x5c>
 8009f48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f4c:	ed9d 0b00 	vldr	d0, [sp]
 8009f50:	2001      	movs	r0, #1
 8009f52:	f000 ff1d 	bl	800ad90 <__kernel_sin>
 8009f56:	ec53 2b10 	vmov	r2, r3, d0
 8009f5a:	ee10 0a10 	vmov	r0, s0
 8009f5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f62:	e7d1      	b.n	8009f08 <sin+0x30>
 8009f64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009f68:	ed9d 0b00 	vldr	d0, [sp]
 8009f6c:	f000 faf8 	bl	800a560 <__kernel_cos>
 8009f70:	e7f1      	b.n	8009f56 <sin+0x7e>
 8009f72:	bf00      	nop
 8009f74:	f3af 8000 	nop.w
	...
 8009f80:	3fe921fb 	.word	0x3fe921fb
 8009f84:	7fefffff 	.word	0x7fefffff

08009f88 <sqrt>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	ed2d 8b02 	vpush	{d8}
 8009f8e:	ec55 4b10 	vmov	r4, r5, d0
 8009f92:	f000 fa31 	bl	800a3f8 <__ieee754_sqrt>
 8009f96:	4622      	mov	r2, r4
 8009f98:	462b      	mov	r3, r5
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	eeb0 8a40 	vmov.f32	s16, s0
 8009fa2:	eef0 8a60 	vmov.f32	s17, s1
 8009fa6:	f7f6 fd77 	bl	8000a98 <__aeabi_dcmpun>
 8009faa:	b990      	cbnz	r0, 8009fd2 <sqrt+0x4a>
 8009fac:	2200      	movs	r2, #0
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	f7f6 fd48 	bl	8000a48 <__aeabi_dcmplt>
 8009fb8:	b158      	cbz	r0, 8009fd2 <sqrt+0x4a>
 8009fba:	f7ff fd4b 	bl	8009a54 <__errno>
 8009fbe:	2321      	movs	r3, #33	; 0x21
 8009fc0:	6003      	str	r3, [r0, #0]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	f7f6 fbf5 	bl	80007b8 <__aeabi_ddiv>
 8009fce:	ec41 0b18 	vmov	d8, r0, r1
 8009fd2:	eeb0 0a48 	vmov.f32	s0, s16
 8009fd6:	eef0 0a68 	vmov.f32	s1, s17
 8009fda:	ecbd 8b02 	vpop	{d8}
 8009fde:	bd38      	pop	{r3, r4, r5, pc}

08009fe0 <__ieee754_rem_pio2>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	ed2d 8b02 	vpush	{d8}
 8009fe8:	ec55 4b10 	vmov	r4, r5, d0
 8009fec:	4bca      	ldr	r3, [pc, #808]	; (800a318 <__ieee754_rem_pio2+0x338>)
 8009fee:	b08b      	sub	sp, #44	; 0x2c
 8009ff0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009ff4:	4598      	cmp	r8, r3
 8009ff6:	4682      	mov	sl, r0
 8009ff8:	9502      	str	r5, [sp, #8]
 8009ffa:	dc08      	bgt.n	800a00e <__ieee754_rem_pio2+0x2e>
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	ed80 0b00 	vstr	d0, [r0]
 800a004:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a008:	f04f 0b00 	mov.w	fp, #0
 800a00c:	e028      	b.n	800a060 <__ieee754_rem_pio2+0x80>
 800a00e:	4bc3      	ldr	r3, [pc, #780]	; (800a31c <__ieee754_rem_pio2+0x33c>)
 800a010:	4598      	cmp	r8, r3
 800a012:	dc78      	bgt.n	800a106 <__ieee754_rem_pio2+0x126>
 800a014:	9b02      	ldr	r3, [sp, #8]
 800a016:	4ec2      	ldr	r6, [pc, #776]	; (800a320 <__ieee754_rem_pio2+0x340>)
 800a018:	2b00      	cmp	r3, #0
 800a01a:	ee10 0a10 	vmov	r0, s0
 800a01e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a2e0 <__ieee754_rem_pio2+0x300>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	4629      	mov	r1, r5
 800a026:	dd39      	ble.n	800a09c <__ieee754_rem_pio2+0xbc>
 800a028:	f7f6 f8e4 	bl	80001f4 <__aeabi_dsub>
 800a02c:	45b0      	cmp	r8, r6
 800a02e:	4604      	mov	r4, r0
 800a030:	460d      	mov	r5, r1
 800a032:	d01b      	beq.n	800a06c <__ieee754_rem_pio2+0x8c>
 800a034:	a3ac      	add	r3, pc, #688	; (adr r3, 800a2e8 <__ieee754_rem_pio2+0x308>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f7f6 f8db 	bl	80001f4 <__aeabi_dsub>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	e9ca 2300 	strd	r2, r3, [sl]
 800a046:	4620      	mov	r0, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	f7f6 f8d3 	bl	80001f4 <__aeabi_dsub>
 800a04e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a2e8 <__ieee754_rem_pio2+0x308>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 f8ce 	bl	80001f4 <__aeabi_dsub>
 800a058:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a05c:	f04f 0b01 	mov.w	fp, #1
 800a060:	4658      	mov	r0, fp
 800a062:	b00b      	add	sp, #44	; 0x2c
 800a064:	ecbd 8b02 	vpop	{d8}
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a2f0 <__ieee754_rem_pio2+0x310>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 f8bf 	bl	80001f4 <__aeabi_dsub>
 800a076:	a3a0      	add	r3, pc, #640	; (adr r3, 800a2f8 <__ieee754_rem_pio2+0x318>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	4604      	mov	r4, r0
 800a07e:	460d      	mov	r5, r1
 800a080:	f7f6 f8b8 	bl	80001f4 <__aeabi_dsub>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	e9ca 2300 	strd	r2, r3, [sl]
 800a08c:	4620      	mov	r0, r4
 800a08e:	4629      	mov	r1, r5
 800a090:	f7f6 f8b0 	bl	80001f4 <__aeabi_dsub>
 800a094:	a398      	add	r3, pc, #608	; (adr r3, 800a2f8 <__ieee754_rem_pio2+0x318>)
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	e7db      	b.n	800a054 <__ieee754_rem_pio2+0x74>
 800a09c:	f7f6 f8ac 	bl	80001f8 <__adddf3>
 800a0a0:	45b0      	cmp	r8, r6
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	d016      	beq.n	800a0d6 <__ieee754_rem_pio2+0xf6>
 800a0a8:	a38f      	add	r3, pc, #572	; (adr r3, 800a2e8 <__ieee754_rem_pio2+0x308>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 f8a3 	bl	80001f8 <__adddf3>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	e9ca 2300 	strd	r2, r3, [sl]
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	4629      	mov	r1, r5
 800a0be:	f7f6 f899 	bl	80001f4 <__aeabi_dsub>
 800a0c2:	a389      	add	r3, pc, #548	; (adr r3, 800a2e8 <__ieee754_rem_pio2+0x308>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	f7f6 f896 	bl	80001f8 <__adddf3>
 800a0cc:	f04f 3bff 	mov.w	fp, #4294967295
 800a0d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a0d4:	e7c4      	b.n	800a060 <__ieee754_rem_pio2+0x80>
 800a0d6:	a386      	add	r3, pc, #536	; (adr r3, 800a2f0 <__ieee754_rem_pio2+0x310>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f7f6 f88c 	bl	80001f8 <__adddf3>
 800a0e0:	a385      	add	r3, pc, #532	; (adr r3, 800a2f8 <__ieee754_rem_pio2+0x318>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	f7f6 f885 	bl	80001f8 <__adddf3>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	e9ca 2300 	strd	r2, r3, [sl]
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	f7f6 f87b 	bl	80001f4 <__aeabi_dsub>
 800a0fe:	a37e      	add	r3, pc, #504	; (adr r3, 800a2f8 <__ieee754_rem_pio2+0x318>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	e7e0      	b.n	800a0c8 <__ieee754_rem_pio2+0xe8>
 800a106:	4b87      	ldr	r3, [pc, #540]	; (800a324 <__ieee754_rem_pio2+0x344>)
 800a108:	4598      	cmp	r8, r3
 800a10a:	f300 80d9 	bgt.w	800a2c0 <__ieee754_rem_pio2+0x2e0>
 800a10e:	f7ff fed7 	bl	8009ec0 <fabs>
 800a112:	ec55 4b10 	vmov	r4, r5, d0
 800a116:	ee10 0a10 	vmov	r0, s0
 800a11a:	a379      	add	r3, pc, #484	; (adr r3, 800a300 <__ieee754_rem_pio2+0x320>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	4629      	mov	r1, r5
 800a122:	f7f6 fa1f 	bl	8000564 <__aeabi_dmul>
 800a126:	4b80      	ldr	r3, [pc, #512]	; (800a328 <__ieee754_rem_pio2+0x348>)
 800a128:	2200      	movs	r2, #0
 800a12a:	f7f6 f865 	bl	80001f8 <__adddf3>
 800a12e:	f7f6 fcc9 	bl	8000ac4 <__aeabi_d2iz>
 800a132:	4683      	mov	fp, r0
 800a134:	f7f6 f9ac 	bl	8000490 <__aeabi_i2d>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	ec43 2b18 	vmov	d8, r2, r3
 800a140:	a367      	add	r3, pc, #412	; (adr r3, 800a2e0 <__ieee754_rem_pio2+0x300>)
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	f7f6 fa0d 	bl	8000564 <__aeabi_dmul>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	4620      	mov	r0, r4
 800a150:	4629      	mov	r1, r5
 800a152:	f7f6 f84f 	bl	80001f4 <__aeabi_dsub>
 800a156:	a364      	add	r3, pc, #400	; (adr r3, 800a2e8 <__ieee754_rem_pio2+0x308>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	4606      	mov	r6, r0
 800a15e:	460f      	mov	r7, r1
 800a160:	ec51 0b18 	vmov	r0, r1, d8
 800a164:	f7f6 f9fe 	bl	8000564 <__aeabi_dmul>
 800a168:	f1bb 0f1f 	cmp.w	fp, #31
 800a16c:	4604      	mov	r4, r0
 800a16e:	460d      	mov	r5, r1
 800a170:	dc0d      	bgt.n	800a18e <__ieee754_rem_pio2+0x1ae>
 800a172:	4b6e      	ldr	r3, [pc, #440]	; (800a32c <__ieee754_rem_pio2+0x34c>)
 800a174:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17c:	4543      	cmp	r3, r8
 800a17e:	d006      	beq.n	800a18e <__ieee754_rem_pio2+0x1ae>
 800a180:	4622      	mov	r2, r4
 800a182:	462b      	mov	r3, r5
 800a184:	4630      	mov	r0, r6
 800a186:	4639      	mov	r1, r7
 800a188:	f7f6 f834 	bl	80001f4 <__aeabi_dsub>
 800a18c:	e00f      	b.n	800a1ae <__ieee754_rem_pio2+0x1ce>
 800a18e:	462b      	mov	r3, r5
 800a190:	4622      	mov	r2, r4
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	f7f6 f82d 	bl	80001f4 <__aeabi_dsub>
 800a19a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a19e:	9303      	str	r3, [sp, #12]
 800a1a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a1a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a1a8:	f1b8 0f10 	cmp.w	r8, #16
 800a1ac:	dc02      	bgt.n	800a1b4 <__ieee754_rem_pio2+0x1d4>
 800a1ae:	e9ca 0100 	strd	r0, r1, [sl]
 800a1b2:	e039      	b.n	800a228 <__ieee754_rem_pio2+0x248>
 800a1b4:	a34e      	add	r3, pc, #312	; (adr r3, 800a2f0 <__ieee754_rem_pio2+0x310>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	ec51 0b18 	vmov	r0, r1, d8
 800a1be:	f7f6 f9d1 	bl	8000564 <__aeabi_dmul>
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	460d      	mov	r5, r1
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 f811 	bl	80001f4 <__aeabi_dsub>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4680      	mov	r8, r0
 800a1d8:	4689      	mov	r9, r1
 800a1da:	4630      	mov	r0, r6
 800a1dc:	4639      	mov	r1, r7
 800a1de:	f7f6 f809 	bl	80001f4 <__aeabi_dsub>
 800a1e2:	4622      	mov	r2, r4
 800a1e4:	462b      	mov	r3, r5
 800a1e6:	f7f6 f805 	bl	80001f4 <__aeabi_dsub>
 800a1ea:	a343      	add	r3, pc, #268	; (adr r3, 800a2f8 <__ieee754_rem_pio2+0x318>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	ec51 0b18 	vmov	r0, r1, d8
 800a1f8:	f7f6 f9b4 	bl	8000564 <__aeabi_dmul>
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	462b      	mov	r3, r5
 800a200:	f7f5 fff8 	bl	80001f4 <__aeabi_dsub>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4604      	mov	r4, r0
 800a20a:	460d      	mov	r5, r1
 800a20c:	4640      	mov	r0, r8
 800a20e:	4649      	mov	r1, r9
 800a210:	f7f5 fff0 	bl	80001f4 <__aeabi_dsub>
 800a214:	9a03      	ldr	r2, [sp, #12]
 800a216:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	2b31      	cmp	r3, #49	; 0x31
 800a21e:	dc24      	bgt.n	800a26a <__ieee754_rem_pio2+0x28a>
 800a220:	e9ca 0100 	strd	r0, r1, [sl]
 800a224:	4646      	mov	r6, r8
 800a226:	464f      	mov	r7, r9
 800a228:	e9da 8900 	ldrd	r8, r9, [sl]
 800a22c:	4630      	mov	r0, r6
 800a22e:	4642      	mov	r2, r8
 800a230:	464b      	mov	r3, r9
 800a232:	4639      	mov	r1, r7
 800a234:	f7f5 ffde 	bl	80001f4 <__aeabi_dsub>
 800a238:	462b      	mov	r3, r5
 800a23a:	4622      	mov	r2, r4
 800a23c:	f7f5 ffda 	bl	80001f4 <__aeabi_dsub>
 800a240:	9b02      	ldr	r3, [sp, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a248:	f6bf af0a 	bge.w	800a060 <__ieee754_rem_pio2+0x80>
 800a24c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a250:	f8ca 3004 	str.w	r3, [sl, #4]
 800a254:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a258:	f8ca 8000 	str.w	r8, [sl]
 800a25c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a260:	f8ca 300c 	str.w	r3, [sl, #12]
 800a264:	f1cb 0b00 	rsb	fp, fp, #0
 800a268:	e6fa      	b.n	800a060 <__ieee754_rem_pio2+0x80>
 800a26a:	a327      	add	r3, pc, #156	; (adr r3, 800a308 <__ieee754_rem_pio2+0x328>)
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	ec51 0b18 	vmov	r0, r1, d8
 800a274:	f7f6 f976 	bl	8000564 <__aeabi_dmul>
 800a278:	4604      	mov	r4, r0
 800a27a:	460d      	mov	r5, r1
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4640      	mov	r0, r8
 800a282:	4649      	mov	r1, r9
 800a284:	f7f5 ffb6 	bl	80001f4 <__aeabi_dsub>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4606      	mov	r6, r0
 800a28e:	460f      	mov	r7, r1
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f5 ffae 	bl	80001f4 <__aeabi_dsub>
 800a298:	4622      	mov	r2, r4
 800a29a:	462b      	mov	r3, r5
 800a29c:	f7f5 ffaa 	bl	80001f4 <__aeabi_dsub>
 800a2a0:	a31b      	add	r3, pc, #108	; (adr r3, 800a310 <__ieee754_rem_pio2+0x330>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	460d      	mov	r5, r1
 800a2aa:	ec51 0b18 	vmov	r0, r1, d8
 800a2ae:	f7f6 f959 	bl	8000564 <__aeabi_dmul>
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	f7f5 ff9d 	bl	80001f4 <__aeabi_dsub>
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	460d      	mov	r5, r1
 800a2be:	e75f      	b.n	800a180 <__ieee754_rem_pio2+0x1a0>
 800a2c0:	4b1b      	ldr	r3, [pc, #108]	; (800a330 <__ieee754_rem_pio2+0x350>)
 800a2c2:	4598      	cmp	r8, r3
 800a2c4:	dd36      	ble.n	800a334 <__ieee754_rem_pio2+0x354>
 800a2c6:	ee10 2a10 	vmov	r2, s0
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	f7f5 ff90 	bl	80001f4 <__aeabi_dsub>
 800a2d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a2d8:	e9ca 0100 	strd	r0, r1, [sl]
 800a2dc:	e694      	b.n	800a008 <__ieee754_rem_pio2+0x28>
 800a2de:	bf00      	nop
 800a2e0:	54400000 	.word	0x54400000
 800a2e4:	3ff921fb 	.word	0x3ff921fb
 800a2e8:	1a626331 	.word	0x1a626331
 800a2ec:	3dd0b461 	.word	0x3dd0b461
 800a2f0:	1a600000 	.word	0x1a600000
 800a2f4:	3dd0b461 	.word	0x3dd0b461
 800a2f8:	2e037073 	.word	0x2e037073
 800a2fc:	3ba3198a 	.word	0x3ba3198a
 800a300:	6dc9c883 	.word	0x6dc9c883
 800a304:	3fe45f30 	.word	0x3fe45f30
 800a308:	2e000000 	.word	0x2e000000
 800a30c:	3ba3198a 	.word	0x3ba3198a
 800a310:	252049c1 	.word	0x252049c1
 800a314:	397b839a 	.word	0x397b839a
 800a318:	3fe921fb 	.word	0x3fe921fb
 800a31c:	4002d97b 	.word	0x4002d97b
 800a320:	3ff921fb 	.word	0x3ff921fb
 800a324:	413921fb 	.word	0x413921fb
 800a328:	3fe00000 	.word	0x3fe00000
 800a32c:	0800b1d0 	.word	0x0800b1d0
 800a330:	7fefffff 	.word	0x7fefffff
 800a334:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a338:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a33c:	ee10 0a10 	vmov	r0, s0
 800a340:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a344:	ee10 6a10 	vmov	r6, s0
 800a348:	460f      	mov	r7, r1
 800a34a:	f7f6 fbbb 	bl	8000ac4 <__aeabi_d2iz>
 800a34e:	f7f6 f89f 	bl	8000490 <__aeabi_i2d>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a35e:	f7f5 ff49 	bl	80001f4 <__aeabi_dsub>
 800a362:	4b23      	ldr	r3, [pc, #140]	; (800a3f0 <__ieee754_rem_pio2+0x410>)
 800a364:	2200      	movs	r2, #0
 800a366:	f7f6 f8fd 	bl	8000564 <__aeabi_dmul>
 800a36a:	460f      	mov	r7, r1
 800a36c:	4606      	mov	r6, r0
 800a36e:	f7f6 fba9 	bl	8000ac4 <__aeabi_d2iz>
 800a372:	f7f6 f88d 	bl	8000490 <__aeabi_i2d>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	4630      	mov	r0, r6
 800a37c:	4639      	mov	r1, r7
 800a37e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a382:	f7f5 ff37 	bl	80001f4 <__aeabi_dsub>
 800a386:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <__ieee754_rem_pio2+0x410>)
 800a388:	2200      	movs	r2, #0
 800a38a:	f7f6 f8eb 	bl	8000564 <__aeabi_dmul>
 800a38e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a392:	ad04      	add	r5, sp, #16
 800a394:	f04f 0803 	mov.w	r8, #3
 800a398:	46a9      	mov	r9, r5
 800a39a:	2600      	movs	r6, #0
 800a39c:	2700      	movs	r7, #0
 800a39e:	4632      	mov	r2, r6
 800a3a0:	463b      	mov	r3, r7
 800a3a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a3a6:	46c3      	mov	fp, r8
 800a3a8:	3d08      	subs	r5, #8
 800a3aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3ae:	f7f6 fb41 	bl	8000a34 <__aeabi_dcmpeq>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d1f3      	bne.n	800a39e <__ieee754_rem_pio2+0x3be>
 800a3b6:	4b0f      	ldr	r3, [pc, #60]	; (800a3f4 <__ieee754_rem_pio2+0x414>)
 800a3b8:	9301      	str	r3, [sp, #4]
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	4622      	mov	r2, r4
 800a3c0:	465b      	mov	r3, fp
 800a3c2:	4651      	mov	r1, sl
 800a3c4:	4648      	mov	r0, r9
 800a3c6:	f000 f993 	bl	800a6f0 <__kernel_rem_pio2>
 800a3ca:	9b02      	ldr	r3, [sp, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	4683      	mov	fp, r0
 800a3d0:	f6bf ae46 	bge.w	800a060 <__ieee754_rem_pio2+0x80>
 800a3d4:	e9da 2100 	ldrd	r2, r1, [sl]
 800a3d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3dc:	e9ca 2300 	strd	r2, r3, [sl]
 800a3e0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a3e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3e8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a3ec:	e73a      	b.n	800a264 <__ieee754_rem_pio2+0x284>
 800a3ee:	bf00      	nop
 800a3f0:	41700000 	.word	0x41700000
 800a3f4:	0800b250 	.word	0x0800b250

0800a3f8 <__ieee754_sqrt>:
 800a3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fc:	ec55 4b10 	vmov	r4, r5, d0
 800a400:	4e55      	ldr	r6, [pc, #340]	; (800a558 <__ieee754_sqrt+0x160>)
 800a402:	43ae      	bics	r6, r5
 800a404:	ee10 0a10 	vmov	r0, s0
 800a408:	ee10 3a10 	vmov	r3, s0
 800a40c:	462a      	mov	r2, r5
 800a40e:	4629      	mov	r1, r5
 800a410:	d110      	bne.n	800a434 <__ieee754_sqrt+0x3c>
 800a412:	ee10 2a10 	vmov	r2, s0
 800a416:	462b      	mov	r3, r5
 800a418:	f7f6 f8a4 	bl	8000564 <__aeabi_dmul>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4620      	mov	r0, r4
 800a422:	4629      	mov	r1, r5
 800a424:	f7f5 fee8 	bl	80001f8 <__adddf3>
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	ec45 4b10 	vmov	d0, r4, r5
 800a430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a434:	2d00      	cmp	r5, #0
 800a436:	dc10      	bgt.n	800a45a <__ieee754_sqrt+0x62>
 800a438:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a43c:	4330      	orrs	r0, r6
 800a43e:	d0f5      	beq.n	800a42c <__ieee754_sqrt+0x34>
 800a440:	b15d      	cbz	r5, 800a45a <__ieee754_sqrt+0x62>
 800a442:	ee10 2a10 	vmov	r2, s0
 800a446:	462b      	mov	r3, r5
 800a448:	ee10 0a10 	vmov	r0, s0
 800a44c:	f7f5 fed2 	bl	80001f4 <__aeabi_dsub>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	f7f6 f9b0 	bl	80007b8 <__aeabi_ddiv>
 800a458:	e7e6      	b.n	800a428 <__ieee754_sqrt+0x30>
 800a45a:	1512      	asrs	r2, r2, #20
 800a45c:	d074      	beq.n	800a548 <__ieee754_sqrt+0x150>
 800a45e:	07d4      	lsls	r4, r2, #31
 800a460:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a464:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a46c:	bf5e      	ittt	pl
 800a46e:	0fda      	lsrpl	r2, r3, #31
 800a470:	005b      	lslpl	r3, r3, #1
 800a472:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a476:	2400      	movs	r4, #0
 800a478:	0fda      	lsrs	r2, r3, #31
 800a47a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a47e:	107f      	asrs	r7, r7, #1
 800a480:	005b      	lsls	r3, r3, #1
 800a482:	2516      	movs	r5, #22
 800a484:	4620      	mov	r0, r4
 800a486:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a48a:	1886      	adds	r6, r0, r2
 800a48c:	428e      	cmp	r6, r1
 800a48e:	bfde      	ittt	le
 800a490:	1b89      	suble	r1, r1, r6
 800a492:	18b0      	addle	r0, r6, r2
 800a494:	18a4      	addle	r4, r4, r2
 800a496:	0049      	lsls	r1, r1, #1
 800a498:	3d01      	subs	r5, #1
 800a49a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a49e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a4a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4a6:	d1f0      	bne.n	800a48a <__ieee754_sqrt+0x92>
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	f04f 0e20 	mov.w	lr, #32
 800a4ae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a4b2:	4281      	cmp	r1, r0
 800a4b4:	eb06 0c05 	add.w	ip, r6, r5
 800a4b8:	dc02      	bgt.n	800a4c0 <__ieee754_sqrt+0xc8>
 800a4ba:	d113      	bne.n	800a4e4 <__ieee754_sqrt+0xec>
 800a4bc:	459c      	cmp	ip, r3
 800a4be:	d811      	bhi.n	800a4e4 <__ieee754_sqrt+0xec>
 800a4c0:	f1bc 0f00 	cmp.w	ip, #0
 800a4c4:	eb0c 0506 	add.w	r5, ip, r6
 800a4c8:	da43      	bge.n	800a552 <__ieee754_sqrt+0x15a>
 800a4ca:	2d00      	cmp	r5, #0
 800a4cc:	db41      	blt.n	800a552 <__ieee754_sqrt+0x15a>
 800a4ce:	f100 0801 	add.w	r8, r0, #1
 800a4d2:	1a09      	subs	r1, r1, r0
 800a4d4:	459c      	cmp	ip, r3
 800a4d6:	bf88      	it	hi
 800a4d8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a4dc:	eba3 030c 	sub.w	r3, r3, ip
 800a4e0:	4432      	add	r2, r6
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a4e8:	f1be 0e01 	subs.w	lr, lr, #1
 800a4ec:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a4f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a4f8:	d1db      	bne.n	800a4b2 <__ieee754_sqrt+0xba>
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	d006      	beq.n	800a50c <__ieee754_sqrt+0x114>
 800a4fe:	1c50      	adds	r0, r2, #1
 800a500:	bf13      	iteet	ne
 800a502:	3201      	addne	r2, #1
 800a504:	3401      	addeq	r4, #1
 800a506:	4672      	moveq	r2, lr
 800a508:	f022 0201 	bicne.w	r2, r2, #1
 800a50c:	1063      	asrs	r3, r4, #1
 800a50e:	0852      	lsrs	r2, r2, #1
 800a510:	07e1      	lsls	r1, r4, #31
 800a512:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a516:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a51a:	bf48      	it	mi
 800a51c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a520:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a524:	4614      	mov	r4, r2
 800a526:	e781      	b.n	800a42c <__ieee754_sqrt+0x34>
 800a528:	0ad9      	lsrs	r1, r3, #11
 800a52a:	3815      	subs	r0, #21
 800a52c:	055b      	lsls	r3, r3, #21
 800a52e:	2900      	cmp	r1, #0
 800a530:	d0fa      	beq.n	800a528 <__ieee754_sqrt+0x130>
 800a532:	02cd      	lsls	r5, r1, #11
 800a534:	d50a      	bpl.n	800a54c <__ieee754_sqrt+0x154>
 800a536:	f1c2 0420 	rsb	r4, r2, #32
 800a53a:	fa23 f404 	lsr.w	r4, r3, r4
 800a53e:	1e55      	subs	r5, r2, #1
 800a540:	4093      	lsls	r3, r2
 800a542:	4321      	orrs	r1, r4
 800a544:	1b42      	subs	r2, r0, r5
 800a546:	e78a      	b.n	800a45e <__ieee754_sqrt+0x66>
 800a548:	4610      	mov	r0, r2
 800a54a:	e7f0      	b.n	800a52e <__ieee754_sqrt+0x136>
 800a54c:	0049      	lsls	r1, r1, #1
 800a54e:	3201      	adds	r2, #1
 800a550:	e7ef      	b.n	800a532 <__ieee754_sqrt+0x13a>
 800a552:	4680      	mov	r8, r0
 800a554:	e7bd      	b.n	800a4d2 <__ieee754_sqrt+0xda>
 800a556:	bf00      	nop
 800a558:	7ff00000 	.word	0x7ff00000
 800a55c:	00000000 	.word	0x00000000

0800a560 <__kernel_cos>:
 800a560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	ec57 6b10 	vmov	r6, r7, d0
 800a568:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a56c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a570:	ed8d 1b00 	vstr	d1, [sp]
 800a574:	da07      	bge.n	800a586 <__kernel_cos+0x26>
 800a576:	ee10 0a10 	vmov	r0, s0
 800a57a:	4639      	mov	r1, r7
 800a57c:	f7f6 faa2 	bl	8000ac4 <__aeabi_d2iz>
 800a580:	2800      	cmp	r0, #0
 800a582:	f000 8088 	beq.w	800a696 <__kernel_cos+0x136>
 800a586:	4632      	mov	r2, r6
 800a588:	463b      	mov	r3, r7
 800a58a:	4630      	mov	r0, r6
 800a58c:	4639      	mov	r1, r7
 800a58e:	f7f5 ffe9 	bl	8000564 <__aeabi_dmul>
 800a592:	4b51      	ldr	r3, [pc, #324]	; (800a6d8 <__kernel_cos+0x178>)
 800a594:	2200      	movs	r2, #0
 800a596:	4604      	mov	r4, r0
 800a598:	460d      	mov	r5, r1
 800a59a:	f7f5 ffe3 	bl	8000564 <__aeabi_dmul>
 800a59e:	a340      	add	r3, pc, #256	; (adr r3, 800a6a0 <__kernel_cos+0x140>)
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	4682      	mov	sl, r0
 800a5a6:	468b      	mov	fp, r1
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	f7f5 ffda 	bl	8000564 <__aeabi_dmul>
 800a5b0:	a33d      	add	r3, pc, #244	; (adr r3, 800a6a8 <__kernel_cos+0x148>)
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f7f5 fe1f 	bl	80001f8 <__adddf3>
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	462b      	mov	r3, r5
 800a5be:	f7f5 ffd1 	bl	8000564 <__aeabi_dmul>
 800a5c2:	a33b      	add	r3, pc, #236	; (adr r3, 800a6b0 <__kernel_cos+0x150>)
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f7f5 fe14 	bl	80001f4 <__aeabi_dsub>
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	462b      	mov	r3, r5
 800a5d0:	f7f5 ffc8 	bl	8000564 <__aeabi_dmul>
 800a5d4:	a338      	add	r3, pc, #224	; (adr r3, 800a6b8 <__kernel_cos+0x158>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f7f5 fe0d 	bl	80001f8 <__adddf3>
 800a5de:	4622      	mov	r2, r4
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	f7f5 ffbf 	bl	8000564 <__aeabi_dmul>
 800a5e6:	a336      	add	r3, pc, #216	; (adr r3, 800a6c0 <__kernel_cos+0x160>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f7f5 fe02 	bl	80001f4 <__aeabi_dsub>
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	462b      	mov	r3, r5
 800a5f4:	f7f5 ffb6 	bl	8000564 <__aeabi_dmul>
 800a5f8:	a333      	add	r3, pc, #204	; (adr r3, 800a6c8 <__kernel_cos+0x168>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f7f5 fdfb 	bl	80001f8 <__adddf3>
 800a602:	4622      	mov	r2, r4
 800a604:	462b      	mov	r3, r5
 800a606:	f7f5 ffad 	bl	8000564 <__aeabi_dmul>
 800a60a:	4622      	mov	r2, r4
 800a60c:	462b      	mov	r3, r5
 800a60e:	f7f5 ffa9 	bl	8000564 <__aeabi_dmul>
 800a612:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a616:	4604      	mov	r4, r0
 800a618:	460d      	mov	r5, r1
 800a61a:	4630      	mov	r0, r6
 800a61c:	4639      	mov	r1, r7
 800a61e:	f7f5 ffa1 	bl	8000564 <__aeabi_dmul>
 800a622:	460b      	mov	r3, r1
 800a624:	4602      	mov	r2, r0
 800a626:	4629      	mov	r1, r5
 800a628:	4620      	mov	r0, r4
 800a62a:	f7f5 fde3 	bl	80001f4 <__aeabi_dsub>
 800a62e:	4b2b      	ldr	r3, [pc, #172]	; (800a6dc <__kernel_cos+0x17c>)
 800a630:	4598      	cmp	r8, r3
 800a632:	4606      	mov	r6, r0
 800a634:	460f      	mov	r7, r1
 800a636:	dc10      	bgt.n	800a65a <__kernel_cos+0xfa>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4650      	mov	r0, sl
 800a63e:	4659      	mov	r1, fp
 800a640:	f7f5 fdd8 	bl	80001f4 <__aeabi_dsub>
 800a644:	460b      	mov	r3, r1
 800a646:	4926      	ldr	r1, [pc, #152]	; (800a6e0 <__kernel_cos+0x180>)
 800a648:	4602      	mov	r2, r0
 800a64a:	2000      	movs	r0, #0
 800a64c:	f7f5 fdd2 	bl	80001f4 <__aeabi_dsub>
 800a650:	ec41 0b10 	vmov	d0, r0, r1
 800a654:	b003      	add	sp, #12
 800a656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65a:	4b22      	ldr	r3, [pc, #136]	; (800a6e4 <__kernel_cos+0x184>)
 800a65c:	4920      	ldr	r1, [pc, #128]	; (800a6e0 <__kernel_cos+0x180>)
 800a65e:	4598      	cmp	r8, r3
 800a660:	bfcc      	ite	gt
 800a662:	4d21      	ldrgt	r5, [pc, #132]	; (800a6e8 <__kernel_cos+0x188>)
 800a664:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a668:	2400      	movs	r4, #0
 800a66a:	4622      	mov	r2, r4
 800a66c:	462b      	mov	r3, r5
 800a66e:	2000      	movs	r0, #0
 800a670:	f7f5 fdc0 	bl	80001f4 <__aeabi_dsub>
 800a674:	4622      	mov	r2, r4
 800a676:	4680      	mov	r8, r0
 800a678:	4689      	mov	r9, r1
 800a67a:	462b      	mov	r3, r5
 800a67c:	4650      	mov	r0, sl
 800a67e:	4659      	mov	r1, fp
 800a680:	f7f5 fdb8 	bl	80001f4 <__aeabi_dsub>
 800a684:	4632      	mov	r2, r6
 800a686:	463b      	mov	r3, r7
 800a688:	f7f5 fdb4 	bl	80001f4 <__aeabi_dsub>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4640      	mov	r0, r8
 800a692:	4649      	mov	r1, r9
 800a694:	e7da      	b.n	800a64c <__kernel_cos+0xec>
 800a696:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a6d0 <__kernel_cos+0x170>
 800a69a:	e7db      	b.n	800a654 <__kernel_cos+0xf4>
 800a69c:	f3af 8000 	nop.w
 800a6a0:	be8838d4 	.word	0xbe8838d4
 800a6a4:	bda8fae9 	.word	0xbda8fae9
 800a6a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a6ac:	3e21ee9e 	.word	0x3e21ee9e
 800a6b0:	809c52ad 	.word	0x809c52ad
 800a6b4:	3e927e4f 	.word	0x3e927e4f
 800a6b8:	19cb1590 	.word	0x19cb1590
 800a6bc:	3efa01a0 	.word	0x3efa01a0
 800a6c0:	16c15177 	.word	0x16c15177
 800a6c4:	3f56c16c 	.word	0x3f56c16c
 800a6c8:	5555554c 	.word	0x5555554c
 800a6cc:	3fa55555 	.word	0x3fa55555
 800a6d0:	00000000 	.word	0x00000000
 800a6d4:	3ff00000 	.word	0x3ff00000
 800a6d8:	3fe00000 	.word	0x3fe00000
 800a6dc:	3fd33332 	.word	0x3fd33332
 800a6e0:	3ff00000 	.word	0x3ff00000
 800a6e4:	3fe90000 	.word	0x3fe90000
 800a6e8:	3fd20000 	.word	0x3fd20000
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <__kernel_rem_pio2>:
 800a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	ed2d 8b02 	vpush	{d8}
 800a6f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a6fc:	f112 0f14 	cmn.w	r2, #20
 800a700:	9308      	str	r3, [sp, #32]
 800a702:	9101      	str	r1, [sp, #4]
 800a704:	4bc4      	ldr	r3, [pc, #784]	; (800aa18 <__kernel_rem_pio2+0x328>)
 800a706:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a708:	900b      	str	r0, [sp, #44]	; 0x2c
 800a70a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a70e:	9302      	str	r3, [sp, #8]
 800a710:	9b08      	ldr	r3, [sp, #32]
 800a712:	f103 33ff 	add.w	r3, r3, #4294967295
 800a716:	bfa8      	it	ge
 800a718:	1ed4      	subge	r4, r2, #3
 800a71a:	9306      	str	r3, [sp, #24]
 800a71c:	bfb2      	itee	lt
 800a71e:	2400      	movlt	r4, #0
 800a720:	2318      	movge	r3, #24
 800a722:	fb94 f4f3 	sdivge	r4, r4, r3
 800a726:	f06f 0317 	mvn.w	r3, #23
 800a72a:	fb04 3303 	mla	r3, r4, r3, r3
 800a72e:	eb03 0a02 	add.w	sl, r3, r2
 800a732:	9b02      	ldr	r3, [sp, #8]
 800a734:	9a06      	ldr	r2, [sp, #24]
 800a736:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800aa08 <__kernel_rem_pio2+0x318>
 800a73a:	eb03 0802 	add.w	r8, r3, r2
 800a73e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a740:	1aa7      	subs	r7, r4, r2
 800a742:	ae22      	add	r6, sp, #136	; 0x88
 800a744:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a748:	2500      	movs	r5, #0
 800a74a:	4545      	cmp	r5, r8
 800a74c:	dd13      	ble.n	800a776 <__kernel_rem_pio2+0x86>
 800a74e:	9b08      	ldr	r3, [sp, #32]
 800a750:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800aa08 <__kernel_rem_pio2+0x318>
 800a754:	aa22      	add	r2, sp, #136	; 0x88
 800a756:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a75a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a75e:	f04f 0800 	mov.w	r8, #0
 800a762:	9b02      	ldr	r3, [sp, #8]
 800a764:	4598      	cmp	r8, r3
 800a766:	dc2f      	bgt.n	800a7c8 <__kernel_rem_pio2+0xd8>
 800a768:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a76c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a770:	462f      	mov	r7, r5
 800a772:	2600      	movs	r6, #0
 800a774:	e01b      	b.n	800a7ae <__kernel_rem_pio2+0xbe>
 800a776:	42ef      	cmn	r7, r5
 800a778:	d407      	bmi.n	800a78a <__kernel_rem_pio2+0x9a>
 800a77a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a77e:	f7f5 fe87 	bl	8000490 <__aeabi_i2d>
 800a782:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a786:	3501      	adds	r5, #1
 800a788:	e7df      	b.n	800a74a <__kernel_rem_pio2+0x5a>
 800a78a:	ec51 0b18 	vmov	r0, r1, d8
 800a78e:	e7f8      	b.n	800a782 <__kernel_rem_pio2+0x92>
 800a790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a794:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a798:	f7f5 fee4 	bl	8000564 <__aeabi_dmul>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7a4:	f7f5 fd28 	bl	80001f8 <__adddf3>
 800a7a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7ac:	3601      	adds	r6, #1
 800a7ae:	9b06      	ldr	r3, [sp, #24]
 800a7b0:	429e      	cmp	r6, r3
 800a7b2:	f1a7 0708 	sub.w	r7, r7, #8
 800a7b6:	ddeb      	ble.n	800a790 <__kernel_rem_pio2+0xa0>
 800a7b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a7bc:	f108 0801 	add.w	r8, r8, #1
 800a7c0:	ecab 7b02 	vstmia	fp!, {d7}
 800a7c4:	3508      	adds	r5, #8
 800a7c6:	e7cc      	b.n	800a762 <__kernel_rem_pio2+0x72>
 800a7c8:	9b02      	ldr	r3, [sp, #8]
 800a7ca:	aa0e      	add	r2, sp, #56	; 0x38
 800a7cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7d0:	930d      	str	r3, [sp, #52]	; 0x34
 800a7d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a7d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a7d8:	9c02      	ldr	r4, [sp, #8]
 800a7da:	930c      	str	r3, [sp, #48]	; 0x30
 800a7dc:	00e3      	lsls	r3, r4, #3
 800a7de:	930a      	str	r3, [sp, #40]	; 0x28
 800a7e0:	ab9a      	add	r3, sp, #616	; 0x268
 800a7e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a7ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a7ee:	ab72      	add	r3, sp, #456	; 0x1c8
 800a7f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a7f4:	46c3      	mov	fp, r8
 800a7f6:	46a1      	mov	r9, r4
 800a7f8:	f1b9 0f00 	cmp.w	r9, #0
 800a7fc:	f1a5 0508 	sub.w	r5, r5, #8
 800a800:	dc77      	bgt.n	800a8f2 <__kernel_rem_pio2+0x202>
 800a802:	ec47 6b10 	vmov	d0, r6, r7
 800a806:	4650      	mov	r0, sl
 800a808:	f000 fc02 	bl	800b010 <scalbn>
 800a80c:	ec57 6b10 	vmov	r6, r7, d0
 800a810:	2200      	movs	r2, #0
 800a812:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a816:	ee10 0a10 	vmov	r0, s0
 800a81a:	4639      	mov	r1, r7
 800a81c:	f7f5 fea2 	bl	8000564 <__aeabi_dmul>
 800a820:	ec41 0b10 	vmov	d0, r0, r1
 800a824:	f000 fb74 	bl	800af10 <floor>
 800a828:	4b7c      	ldr	r3, [pc, #496]	; (800aa1c <__kernel_rem_pio2+0x32c>)
 800a82a:	ec51 0b10 	vmov	r0, r1, d0
 800a82e:	2200      	movs	r2, #0
 800a830:	f7f5 fe98 	bl	8000564 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f5 fcda 	bl	80001f4 <__aeabi_dsub>
 800a840:	460f      	mov	r7, r1
 800a842:	4606      	mov	r6, r0
 800a844:	f7f6 f93e 	bl	8000ac4 <__aeabi_d2iz>
 800a848:	9004      	str	r0, [sp, #16]
 800a84a:	f7f5 fe21 	bl	8000490 <__aeabi_i2d>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4630      	mov	r0, r6
 800a854:	4639      	mov	r1, r7
 800a856:	f7f5 fccd 	bl	80001f4 <__aeabi_dsub>
 800a85a:	f1ba 0f00 	cmp.w	sl, #0
 800a85e:	4606      	mov	r6, r0
 800a860:	460f      	mov	r7, r1
 800a862:	dd6d      	ble.n	800a940 <__kernel_rem_pio2+0x250>
 800a864:	1e62      	subs	r2, r4, #1
 800a866:	ab0e      	add	r3, sp, #56	; 0x38
 800a868:	9d04      	ldr	r5, [sp, #16]
 800a86a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a86e:	f1ca 0118 	rsb	r1, sl, #24
 800a872:	fa40 f301 	asr.w	r3, r0, r1
 800a876:	441d      	add	r5, r3
 800a878:	408b      	lsls	r3, r1
 800a87a:	1ac0      	subs	r0, r0, r3
 800a87c:	ab0e      	add	r3, sp, #56	; 0x38
 800a87e:	9504      	str	r5, [sp, #16]
 800a880:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a884:	f1ca 0317 	rsb	r3, sl, #23
 800a888:	fa40 fb03 	asr.w	fp, r0, r3
 800a88c:	f1bb 0f00 	cmp.w	fp, #0
 800a890:	dd65      	ble.n	800a95e <__kernel_rem_pio2+0x26e>
 800a892:	9b04      	ldr	r3, [sp, #16]
 800a894:	2200      	movs	r2, #0
 800a896:	3301      	adds	r3, #1
 800a898:	9304      	str	r3, [sp, #16]
 800a89a:	4615      	mov	r5, r2
 800a89c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a8a0:	4294      	cmp	r4, r2
 800a8a2:	f300 809c 	bgt.w	800a9de <__kernel_rem_pio2+0x2ee>
 800a8a6:	f1ba 0f00 	cmp.w	sl, #0
 800a8aa:	dd07      	ble.n	800a8bc <__kernel_rem_pio2+0x1cc>
 800a8ac:	f1ba 0f01 	cmp.w	sl, #1
 800a8b0:	f000 80c0 	beq.w	800aa34 <__kernel_rem_pio2+0x344>
 800a8b4:	f1ba 0f02 	cmp.w	sl, #2
 800a8b8:	f000 80c6 	beq.w	800aa48 <__kernel_rem_pio2+0x358>
 800a8bc:	f1bb 0f02 	cmp.w	fp, #2
 800a8c0:	d14d      	bne.n	800a95e <__kernel_rem_pio2+0x26e>
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	463b      	mov	r3, r7
 800a8c6:	4956      	ldr	r1, [pc, #344]	; (800aa20 <__kernel_rem_pio2+0x330>)
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	f7f5 fc93 	bl	80001f4 <__aeabi_dsub>
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	460f      	mov	r7, r1
 800a8d2:	2d00      	cmp	r5, #0
 800a8d4:	d043      	beq.n	800a95e <__kernel_rem_pio2+0x26e>
 800a8d6:	4650      	mov	r0, sl
 800a8d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800aa10 <__kernel_rem_pio2+0x320>
 800a8dc:	f000 fb98 	bl	800b010 <scalbn>
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	ec53 2b10 	vmov	r2, r3, d0
 800a8e8:	f7f5 fc84 	bl	80001f4 <__aeabi_dsub>
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	460f      	mov	r7, r1
 800a8f0:	e035      	b.n	800a95e <__kernel_rem_pio2+0x26e>
 800a8f2:	4b4c      	ldr	r3, [pc, #304]	; (800aa24 <__kernel_rem_pio2+0x334>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	f7f5 fe33 	bl	8000564 <__aeabi_dmul>
 800a8fe:	f7f6 f8e1 	bl	8000ac4 <__aeabi_d2iz>
 800a902:	f7f5 fdc5 	bl	8000490 <__aeabi_i2d>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	ec43 2b18 	vmov	d8, r2, r3
 800a90e:	4b46      	ldr	r3, [pc, #280]	; (800aa28 <__kernel_rem_pio2+0x338>)
 800a910:	2200      	movs	r2, #0
 800a912:	f7f5 fe27 	bl	8000564 <__aeabi_dmul>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4630      	mov	r0, r6
 800a91c:	4639      	mov	r1, r7
 800a91e:	f7f5 fc69 	bl	80001f4 <__aeabi_dsub>
 800a922:	f7f6 f8cf 	bl	8000ac4 <__aeabi_d2iz>
 800a926:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a92a:	f84b 0b04 	str.w	r0, [fp], #4
 800a92e:	ec51 0b18 	vmov	r0, r1, d8
 800a932:	f7f5 fc61 	bl	80001f8 <__adddf3>
 800a936:	f109 39ff 	add.w	r9, r9, #4294967295
 800a93a:	4606      	mov	r6, r0
 800a93c:	460f      	mov	r7, r1
 800a93e:	e75b      	b.n	800a7f8 <__kernel_rem_pio2+0x108>
 800a940:	d106      	bne.n	800a950 <__kernel_rem_pio2+0x260>
 800a942:	1e63      	subs	r3, r4, #1
 800a944:	aa0e      	add	r2, sp, #56	; 0x38
 800a946:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a94a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a94e:	e79d      	b.n	800a88c <__kernel_rem_pio2+0x19c>
 800a950:	4b36      	ldr	r3, [pc, #216]	; (800aa2c <__kernel_rem_pio2+0x33c>)
 800a952:	2200      	movs	r2, #0
 800a954:	f7f6 f88c 	bl	8000a70 <__aeabi_dcmpge>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d13d      	bne.n	800a9d8 <__kernel_rem_pio2+0x2e8>
 800a95c:	4683      	mov	fp, r0
 800a95e:	2200      	movs	r2, #0
 800a960:	2300      	movs	r3, #0
 800a962:	4630      	mov	r0, r6
 800a964:	4639      	mov	r1, r7
 800a966:	f7f6 f865 	bl	8000a34 <__aeabi_dcmpeq>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	f000 80c0 	beq.w	800aaf0 <__kernel_rem_pio2+0x400>
 800a970:	1e65      	subs	r5, r4, #1
 800a972:	462b      	mov	r3, r5
 800a974:	2200      	movs	r2, #0
 800a976:	9902      	ldr	r1, [sp, #8]
 800a978:	428b      	cmp	r3, r1
 800a97a:	da6c      	bge.n	800aa56 <__kernel_rem_pio2+0x366>
 800a97c:	2a00      	cmp	r2, #0
 800a97e:	f000 8089 	beq.w	800aa94 <__kernel_rem_pio2+0x3a4>
 800a982:	ab0e      	add	r3, sp, #56	; 0x38
 800a984:	f1aa 0a18 	sub.w	sl, sl, #24
 800a988:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 80ad 	beq.w	800aaec <__kernel_rem_pio2+0x3fc>
 800a992:	4650      	mov	r0, sl
 800a994:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800aa10 <__kernel_rem_pio2+0x320>
 800a998:	f000 fb3a 	bl	800b010 <scalbn>
 800a99c:	ab9a      	add	r3, sp, #616	; 0x268
 800a99e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a9a2:	ec57 6b10 	vmov	r6, r7, d0
 800a9a6:	00ec      	lsls	r4, r5, #3
 800a9a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a9ac:	46aa      	mov	sl, r5
 800a9ae:	f1ba 0f00 	cmp.w	sl, #0
 800a9b2:	f280 80d6 	bge.w	800ab62 <__kernel_rem_pio2+0x472>
 800a9b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800aa08 <__kernel_rem_pio2+0x318>
 800a9ba:	462e      	mov	r6, r5
 800a9bc:	2e00      	cmp	r6, #0
 800a9be:	f2c0 8104 	blt.w	800abca <__kernel_rem_pio2+0x4da>
 800a9c2:	ab72      	add	r3, sp, #456	; 0x1c8
 800a9c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a9c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800aa30 <__kernel_rem_pio2+0x340>
 800a9cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a9d0:	f04f 0800 	mov.w	r8, #0
 800a9d4:	1baf      	subs	r7, r5, r6
 800a9d6:	e0ea      	b.n	800abae <__kernel_rem_pio2+0x4be>
 800a9d8:	f04f 0b02 	mov.w	fp, #2
 800a9dc:	e759      	b.n	800a892 <__kernel_rem_pio2+0x1a2>
 800a9de:	f8d8 3000 	ldr.w	r3, [r8]
 800a9e2:	b955      	cbnz	r5, 800a9fa <__kernel_rem_pio2+0x30a>
 800a9e4:	b123      	cbz	r3, 800a9f0 <__kernel_rem_pio2+0x300>
 800a9e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a9ea:	f8c8 3000 	str.w	r3, [r8]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	3201      	adds	r2, #1
 800a9f2:	f108 0804 	add.w	r8, r8, #4
 800a9f6:	461d      	mov	r5, r3
 800a9f8:	e752      	b.n	800a8a0 <__kernel_rem_pio2+0x1b0>
 800a9fa:	1acb      	subs	r3, r1, r3
 800a9fc:	f8c8 3000 	str.w	r3, [r8]
 800aa00:	462b      	mov	r3, r5
 800aa02:	e7f5      	b.n	800a9f0 <__kernel_rem_pio2+0x300>
 800aa04:	f3af 8000 	nop.w
	...
 800aa14:	3ff00000 	.word	0x3ff00000
 800aa18:	0800b398 	.word	0x0800b398
 800aa1c:	40200000 	.word	0x40200000
 800aa20:	3ff00000 	.word	0x3ff00000
 800aa24:	3e700000 	.word	0x3e700000
 800aa28:	41700000 	.word	0x41700000
 800aa2c:	3fe00000 	.word	0x3fe00000
 800aa30:	0800b358 	.word	0x0800b358
 800aa34:	1e62      	subs	r2, r4, #1
 800aa36:	ab0e      	add	r3, sp, #56	; 0x38
 800aa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aa40:	a90e      	add	r1, sp, #56	; 0x38
 800aa42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aa46:	e739      	b.n	800a8bc <__kernel_rem_pio2+0x1cc>
 800aa48:	1e62      	subs	r2, r4, #1
 800aa4a:	ab0e      	add	r3, sp, #56	; 0x38
 800aa4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aa54:	e7f4      	b.n	800aa40 <__kernel_rem_pio2+0x350>
 800aa56:	a90e      	add	r1, sp, #56	; 0x38
 800aa58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	430a      	orrs	r2, r1
 800aa60:	e789      	b.n	800a976 <__kernel_rem_pio2+0x286>
 800aa62:	3301      	adds	r3, #1
 800aa64:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aa68:	2900      	cmp	r1, #0
 800aa6a:	d0fa      	beq.n	800aa62 <__kernel_rem_pio2+0x372>
 800aa6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa6e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800aa72:	446a      	add	r2, sp
 800aa74:	3a98      	subs	r2, #152	; 0x98
 800aa76:	920a      	str	r2, [sp, #40]	; 0x28
 800aa78:	9a08      	ldr	r2, [sp, #32]
 800aa7a:	18e3      	adds	r3, r4, r3
 800aa7c:	18a5      	adds	r5, r4, r2
 800aa7e:	aa22      	add	r2, sp, #136	; 0x88
 800aa80:	f104 0801 	add.w	r8, r4, #1
 800aa84:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800aa88:	9304      	str	r3, [sp, #16]
 800aa8a:	9b04      	ldr	r3, [sp, #16]
 800aa8c:	4543      	cmp	r3, r8
 800aa8e:	da04      	bge.n	800aa9a <__kernel_rem_pio2+0x3aa>
 800aa90:	461c      	mov	r4, r3
 800aa92:	e6a3      	b.n	800a7dc <__kernel_rem_pio2+0xec>
 800aa94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa96:	2301      	movs	r3, #1
 800aa98:	e7e4      	b.n	800aa64 <__kernel_rem_pio2+0x374>
 800aa9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aaa0:	f7f5 fcf6 	bl	8000490 <__aeabi_i2d>
 800aaa4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800aaa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaaa:	46ab      	mov	fp, r5
 800aaac:	461c      	mov	r4, r3
 800aaae:	f04f 0900 	mov.w	r9, #0
 800aab2:	2600      	movs	r6, #0
 800aab4:	2700      	movs	r7, #0
 800aab6:	9b06      	ldr	r3, [sp, #24]
 800aab8:	4599      	cmp	r9, r3
 800aaba:	dd06      	ble.n	800aaca <__kernel_rem_pio2+0x3da>
 800aabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aabe:	e8e3 6702 	strd	r6, r7, [r3], #8
 800aac2:	f108 0801 	add.w	r8, r8, #1
 800aac6:	930a      	str	r3, [sp, #40]	; 0x28
 800aac8:	e7df      	b.n	800aa8a <__kernel_rem_pio2+0x39a>
 800aaca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800aace:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aad2:	f7f5 fd47 	bl	8000564 <__aeabi_dmul>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4630      	mov	r0, r6
 800aadc:	4639      	mov	r1, r7
 800aade:	f7f5 fb8b 	bl	80001f8 <__adddf3>
 800aae2:	f109 0901 	add.w	r9, r9, #1
 800aae6:	4606      	mov	r6, r0
 800aae8:	460f      	mov	r7, r1
 800aaea:	e7e4      	b.n	800aab6 <__kernel_rem_pio2+0x3c6>
 800aaec:	3d01      	subs	r5, #1
 800aaee:	e748      	b.n	800a982 <__kernel_rem_pio2+0x292>
 800aaf0:	ec47 6b10 	vmov	d0, r6, r7
 800aaf4:	f1ca 0000 	rsb	r0, sl, #0
 800aaf8:	f000 fa8a 	bl	800b010 <scalbn>
 800aafc:	ec57 6b10 	vmov	r6, r7, d0
 800ab00:	4ba0      	ldr	r3, [pc, #640]	; (800ad84 <__kernel_rem_pio2+0x694>)
 800ab02:	ee10 0a10 	vmov	r0, s0
 800ab06:	2200      	movs	r2, #0
 800ab08:	4639      	mov	r1, r7
 800ab0a:	f7f5 ffb1 	bl	8000a70 <__aeabi_dcmpge>
 800ab0e:	b1f8      	cbz	r0, 800ab50 <__kernel_rem_pio2+0x460>
 800ab10:	4b9d      	ldr	r3, [pc, #628]	; (800ad88 <__kernel_rem_pio2+0x698>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	4630      	mov	r0, r6
 800ab16:	4639      	mov	r1, r7
 800ab18:	f7f5 fd24 	bl	8000564 <__aeabi_dmul>
 800ab1c:	f7f5 ffd2 	bl	8000ac4 <__aeabi_d2iz>
 800ab20:	4680      	mov	r8, r0
 800ab22:	f7f5 fcb5 	bl	8000490 <__aeabi_i2d>
 800ab26:	4b97      	ldr	r3, [pc, #604]	; (800ad84 <__kernel_rem_pio2+0x694>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f7f5 fd1b 	bl	8000564 <__aeabi_dmul>
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4602      	mov	r2, r0
 800ab32:	4639      	mov	r1, r7
 800ab34:	4630      	mov	r0, r6
 800ab36:	f7f5 fb5d 	bl	80001f4 <__aeabi_dsub>
 800ab3a:	f7f5 ffc3 	bl	8000ac4 <__aeabi_d2iz>
 800ab3e:	1c65      	adds	r5, r4, #1
 800ab40:	ab0e      	add	r3, sp, #56	; 0x38
 800ab42:	f10a 0a18 	add.w	sl, sl, #24
 800ab46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ab4a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ab4e:	e720      	b.n	800a992 <__kernel_rem_pio2+0x2a2>
 800ab50:	4630      	mov	r0, r6
 800ab52:	4639      	mov	r1, r7
 800ab54:	f7f5 ffb6 	bl	8000ac4 <__aeabi_d2iz>
 800ab58:	ab0e      	add	r3, sp, #56	; 0x38
 800ab5a:	4625      	mov	r5, r4
 800ab5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ab60:	e717      	b.n	800a992 <__kernel_rem_pio2+0x2a2>
 800ab62:	ab0e      	add	r3, sp, #56	; 0x38
 800ab64:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ab68:	f7f5 fc92 	bl	8000490 <__aeabi_i2d>
 800ab6c:	4632      	mov	r2, r6
 800ab6e:	463b      	mov	r3, r7
 800ab70:	f7f5 fcf8 	bl	8000564 <__aeabi_dmul>
 800ab74:	4b84      	ldr	r3, [pc, #528]	; (800ad88 <__kernel_rem_pio2+0x698>)
 800ab76:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	4639      	mov	r1, r7
 800ab80:	f7f5 fcf0 	bl	8000564 <__aeabi_dmul>
 800ab84:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab88:	4606      	mov	r6, r0
 800ab8a:	460f      	mov	r7, r1
 800ab8c:	e70f      	b.n	800a9ae <__kernel_rem_pio2+0x2be>
 800ab8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ab92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ab96:	f7f5 fce5 	bl	8000564 <__aeabi_dmul>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aba2:	f7f5 fb29 	bl	80001f8 <__adddf3>
 800aba6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abaa:	f108 0801 	add.w	r8, r8, #1
 800abae:	9b02      	ldr	r3, [sp, #8]
 800abb0:	4598      	cmp	r8, r3
 800abb2:	dc01      	bgt.n	800abb8 <__kernel_rem_pio2+0x4c8>
 800abb4:	45b8      	cmp	r8, r7
 800abb6:	ddea      	ble.n	800ab8e <__kernel_rem_pio2+0x49e>
 800abb8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800abbc:	ab4a      	add	r3, sp, #296	; 0x128
 800abbe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800abc2:	ed87 7b00 	vstr	d7, [r7]
 800abc6:	3e01      	subs	r6, #1
 800abc8:	e6f8      	b.n	800a9bc <__kernel_rem_pio2+0x2cc>
 800abca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800abcc:	2b02      	cmp	r3, #2
 800abce:	dc0b      	bgt.n	800abe8 <__kernel_rem_pio2+0x4f8>
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	dc35      	bgt.n	800ac40 <__kernel_rem_pio2+0x550>
 800abd4:	d059      	beq.n	800ac8a <__kernel_rem_pio2+0x59a>
 800abd6:	9b04      	ldr	r3, [sp, #16]
 800abd8:	f003 0007 	and.w	r0, r3, #7
 800abdc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800abe0:	ecbd 8b02 	vpop	{d8}
 800abe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800abea:	2b03      	cmp	r3, #3
 800abec:	d1f3      	bne.n	800abd6 <__kernel_rem_pio2+0x4e6>
 800abee:	ab4a      	add	r3, sp, #296	; 0x128
 800abf0:	4423      	add	r3, r4
 800abf2:	9306      	str	r3, [sp, #24]
 800abf4:	461c      	mov	r4, r3
 800abf6:	469a      	mov	sl, r3
 800abf8:	9502      	str	r5, [sp, #8]
 800abfa:	9b02      	ldr	r3, [sp, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f1aa 0a08 	sub.w	sl, sl, #8
 800ac02:	dc6b      	bgt.n	800acdc <__kernel_rem_pio2+0x5ec>
 800ac04:	46aa      	mov	sl, r5
 800ac06:	f1ba 0f01 	cmp.w	sl, #1
 800ac0a:	f1a4 0408 	sub.w	r4, r4, #8
 800ac0e:	f300 8085 	bgt.w	800ad1c <__kernel_rem_pio2+0x62c>
 800ac12:	9c06      	ldr	r4, [sp, #24]
 800ac14:	2000      	movs	r0, #0
 800ac16:	3408      	adds	r4, #8
 800ac18:	2100      	movs	r1, #0
 800ac1a:	2d01      	cmp	r5, #1
 800ac1c:	f300 809d 	bgt.w	800ad5a <__kernel_rem_pio2+0x66a>
 800ac20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ac24:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ac28:	f1bb 0f00 	cmp.w	fp, #0
 800ac2c:	f040 809b 	bne.w	800ad66 <__kernel_rem_pio2+0x676>
 800ac30:	9b01      	ldr	r3, [sp, #4]
 800ac32:	e9c3 5600 	strd	r5, r6, [r3]
 800ac36:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ac3a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ac3e:	e7ca      	b.n	800abd6 <__kernel_rem_pio2+0x4e6>
 800ac40:	3408      	adds	r4, #8
 800ac42:	ab4a      	add	r3, sp, #296	; 0x128
 800ac44:	441c      	add	r4, r3
 800ac46:	462e      	mov	r6, r5
 800ac48:	2000      	movs	r0, #0
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	2e00      	cmp	r6, #0
 800ac4e:	da36      	bge.n	800acbe <__kernel_rem_pio2+0x5ce>
 800ac50:	f1bb 0f00 	cmp.w	fp, #0
 800ac54:	d039      	beq.n	800acca <__kernel_rem_pio2+0x5da>
 800ac56:	4602      	mov	r2, r0
 800ac58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac5c:	9c01      	ldr	r4, [sp, #4]
 800ac5e:	e9c4 2300 	strd	r2, r3, [r4]
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ac6a:	f7f5 fac3 	bl	80001f4 <__aeabi_dsub>
 800ac6e:	ae4c      	add	r6, sp, #304	; 0x130
 800ac70:	2401      	movs	r4, #1
 800ac72:	42a5      	cmp	r5, r4
 800ac74:	da2c      	bge.n	800acd0 <__kernel_rem_pio2+0x5e0>
 800ac76:	f1bb 0f00 	cmp.w	fp, #0
 800ac7a:	d002      	beq.n	800ac82 <__kernel_rem_pio2+0x592>
 800ac7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac80:	4619      	mov	r1, r3
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ac88:	e7a5      	b.n	800abd6 <__kernel_rem_pio2+0x4e6>
 800ac8a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ac8e:	eb0d 0403 	add.w	r4, sp, r3
 800ac92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ac96:	2000      	movs	r0, #0
 800ac98:	2100      	movs	r1, #0
 800ac9a:	2d00      	cmp	r5, #0
 800ac9c:	da09      	bge.n	800acb2 <__kernel_rem_pio2+0x5c2>
 800ac9e:	f1bb 0f00 	cmp.w	fp, #0
 800aca2:	d002      	beq.n	800acaa <__kernel_rem_pio2+0x5ba>
 800aca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aca8:	4619      	mov	r1, r3
 800acaa:	9b01      	ldr	r3, [sp, #4]
 800acac:	e9c3 0100 	strd	r0, r1, [r3]
 800acb0:	e791      	b.n	800abd6 <__kernel_rem_pio2+0x4e6>
 800acb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800acb6:	f7f5 fa9f 	bl	80001f8 <__adddf3>
 800acba:	3d01      	subs	r5, #1
 800acbc:	e7ed      	b.n	800ac9a <__kernel_rem_pio2+0x5aa>
 800acbe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800acc2:	f7f5 fa99 	bl	80001f8 <__adddf3>
 800acc6:	3e01      	subs	r6, #1
 800acc8:	e7c0      	b.n	800ac4c <__kernel_rem_pio2+0x55c>
 800acca:	4602      	mov	r2, r0
 800accc:	460b      	mov	r3, r1
 800acce:	e7c5      	b.n	800ac5c <__kernel_rem_pio2+0x56c>
 800acd0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800acd4:	f7f5 fa90 	bl	80001f8 <__adddf3>
 800acd8:	3401      	adds	r4, #1
 800acda:	e7ca      	b.n	800ac72 <__kernel_rem_pio2+0x582>
 800acdc:	e9da 8900 	ldrd	r8, r9, [sl]
 800ace0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	9302      	str	r3, [sp, #8]
 800acea:	4632      	mov	r2, r6
 800acec:	463b      	mov	r3, r7
 800acee:	4640      	mov	r0, r8
 800acf0:	4649      	mov	r1, r9
 800acf2:	f7f5 fa81 	bl	80001f8 <__adddf3>
 800acf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	4640      	mov	r0, r8
 800ad00:	4649      	mov	r1, r9
 800ad02:	f7f5 fa77 	bl	80001f4 <__aeabi_dsub>
 800ad06:	4632      	mov	r2, r6
 800ad08:	463b      	mov	r3, r7
 800ad0a:	f7f5 fa75 	bl	80001f8 <__adddf3>
 800ad0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ad12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad16:	ed8a 7b00 	vstr	d7, [sl]
 800ad1a:	e76e      	b.n	800abfa <__kernel_rem_pio2+0x50a>
 800ad1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ad20:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ad24:	4640      	mov	r0, r8
 800ad26:	4632      	mov	r2, r6
 800ad28:	463b      	mov	r3, r7
 800ad2a:	4649      	mov	r1, r9
 800ad2c:	f7f5 fa64 	bl	80001f8 <__adddf3>
 800ad30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	4640      	mov	r0, r8
 800ad3a:	4649      	mov	r1, r9
 800ad3c:	f7f5 fa5a 	bl	80001f4 <__aeabi_dsub>
 800ad40:	4632      	mov	r2, r6
 800ad42:	463b      	mov	r3, r7
 800ad44:	f7f5 fa58 	bl	80001f8 <__adddf3>
 800ad48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad50:	ed84 7b00 	vstr	d7, [r4]
 800ad54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad58:	e755      	b.n	800ac06 <__kernel_rem_pio2+0x516>
 800ad5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad5e:	f7f5 fa4b 	bl	80001f8 <__adddf3>
 800ad62:	3d01      	subs	r5, #1
 800ad64:	e759      	b.n	800ac1a <__kernel_rem_pio2+0x52a>
 800ad66:	9b01      	ldr	r3, [sp, #4]
 800ad68:	9a01      	ldr	r2, [sp, #4]
 800ad6a:	601d      	str	r5, [r3, #0]
 800ad6c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ad70:	605c      	str	r4, [r3, #4]
 800ad72:	609f      	str	r7, [r3, #8]
 800ad74:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ad78:	60d3      	str	r3, [r2, #12]
 800ad7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad7e:	6110      	str	r0, [r2, #16]
 800ad80:	6153      	str	r3, [r2, #20]
 800ad82:	e728      	b.n	800abd6 <__kernel_rem_pio2+0x4e6>
 800ad84:	41700000 	.word	0x41700000
 800ad88:	3e700000 	.word	0x3e700000
 800ad8c:	00000000 	.word	0x00000000

0800ad90 <__kernel_sin>:
 800ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad94:	ed2d 8b04 	vpush	{d8-d9}
 800ad98:	eeb0 8a41 	vmov.f32	s16, s2
 800ad9c:	eef0 8a61 	vmov.f32	s17, s3
 800ada0:	ec55 4b10 	vmov	r4, r5, d0
 800ada4:	b083      	sub	sp, #12
 800ada6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800adaa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800adae:	9001      	str	r0, [sp, #4]
 800adb0:	da06      	bge.n	800adc0 <__kernel_sin+0x30>
 800adb2:	ee10 0a10 	vmov	r0, s0
 800adb6:	4629      	mov	r1, r5
 800adb8:	f7f5 fe84 	bl	8000ac4 <__aeabi_d2iz>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d051      	beq.n	800ae64 <__kernel_sin+0xd4>
 800adc0:	4622      	mov	r2, r4
 800adc2:	462b      	mov	r3, r5
 800adc4:	4620      	mov	r0, r4
 800adc6:	4629      	mov	r1, r5
 800adc8:	f7f5 fbcc 	bl	8000564 <__aeabi_dmul>
 800adcc:	4682      	mov	sl, r0
 800adce:	468b      	mov	fp, r1
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4620      	mov	r0, r4
 800add6:	4629      	mov	r1, r5
 800add8:	f7f5 fbc4 	bl	8000564 <__aeabi_dmul>
 800addc:	a341      	add	r3, pc, #260	; (adr r3, 800aee4 <__kernel_sin+0x154>)
 800adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade2:	4680      	mov	r8, r0
 800ade4:	4689      	mov	r9, r1
 800ade6:	4650      	mov	r0, sl
 800ade8:	4659      	mov	r1, fp
 800adea:	f7f5 fbbb 	bl	8000564 <__aeabi_dmul>
 800adee:	a33f      	add	r3, pc, #252	; (adr r3, 800aeec <__kernel_sin+0x15c>)
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	f7f5 f9fe 	bl	80001f4 <__aeabi_dsub>
 800adf8:	4652      	mov	r2, sl
 800adfa:	465b      	mov	r3, fp
 800adfc:	f7f5 fbb2 	bl	8000564 <__aeabi_dmul>
 800ae00:	a33c      	add	r3, pc, #240	; (adr r3, 800aef4 <__kernel_sin+0x164>)
 800ae02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae06:	f7f5 f9f7 	bl	80001f8 <__adddf3>
 800ae0a:	4652      	mov	r2, sl
 800ae0c:	465b      	mov	r3, fp
 800ae0e:	f7f5 fba9 	bl	8000564 <__aeabi_dmul>
 800ae12:	a33a      	add	r3, pc, #232	; (adr r3, 800aefc <__kernel_sin+0x16c>)
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	f7f5 f9ec 	bl	80001f4 <__aeabi_dsub>
 800ae1c:	4652      	mov	r2, sl
 800ae1e:	465b      	mov	r3, fp
 800ae20:	f7f5 fba0 	bl	8000564 <__aeabi_dmul>
 800ae24:	a337      	add	r3, pc, #220	; (adr r3, 800af04 <__kernel_sin+0x174>)
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	f7f5 f9e5 	bl	80001f8 <__adddf3>
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	4606      	mov	r6, r0
 800ae32:	460f      	mov	r7, r1
 800ae34:	b9eb      	cbnz	r3, 800ae72 <__kernel_sin+0xe2>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	f7f5 fb91 	bl	8000564 <__aeabi_dmul>
 800ae42:	a325      	add	r3, pc, #148	; (adr r3, 800aed8 <__kernel_sin+0x148>)
 800ae44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae48:	f7f5 f9d4 	bl	80001f4 <__aeabi_dsub>
 800ae4c:	4642      	mov	r2, r8
 800ae4e:	464b      	mov	r3, r9
 800ae50:	f7f5 fb88 	bl	8000564 <__aeabi_dmul>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4620      	mov	r0, r4
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	f7f5 f9cc 	bl	80001f8 <__adddf3>
 800ae60:	4604      	mov	r4, r0
 800ae62:	460d      	mov	r5, r1
 800ae64:	ec45 4b10 	vmov	d0, r4, r5
 800ae68:	b003      	add	sp, #12
 800ae6a:	ecbd 8b04 	vpop	{d8-d9}
 800ae6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae72:	4b1b      	ldr	r3, [pc, #108]	; (800aee0 <__kernel_sin+0x150>)
 800ae74:	ec51 0b18 	vmov	r0, r1, d8
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f7f5 fb73 	bl	8000564 <__aeabi_dmul>
 800ae7e:	4632      	mov	r2, r6
 800ae80:	ec41 0b19 	vmov	d9, r0, r1
 800ae84:	463b      	mov	r3, r7
 800ae86:	4640      	mov	r0, r8
 800ae88:	4649      	mov	r1, r9
 800ae8a:	f7f5 fb6b 	bl	8000564 <__aeabi_dmul>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	ec51 0b19 	vmov	r0, r1, d9
 800ae96:	f7f5 f9ad 	bl	80001f4 <__aeabi_dsub>
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	465b      	mov	r3, fp
 800ae9e:	f7f5 fb61 	bl	8000564 <__aeabi_dmul>
 800aea2:	ec53 2b18 	vmov	r2, r3, d8
 800aea6:	f7f5 f9a5 	bl	80001f4 <__aeabi_dsub>
 800aeaa:	a30b      	add	r3, pc, #44	; (adr r3, 800aed8 <__kernel_sin+0x148>)
 800aeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	460f      	mov	r7, r1
 800aeb4:	4640      	mov	r0, r8
 800aeb6:	4649      	mov	r1, r9
 800aeb8:	f7f5 fb54 	bl	8000564 <__aeabi_dmul>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	4630      	mov	r0, r6
 800aec2:	4639      	mov	r1, r7
 800aec4:	f7f5 f998 	bl	80001f8 <__adddf3>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 f990 	bl	80001f4 <__aeabi_dsub>
 800aed4:	e7c4      	b.n	800ae60 <__kernel_sin+0xd0>
 800aed6:	bf00      	nop
 800aed8:	55555549 	.word	0x55555549
 800aedc:	3fc55555 	.word	0x3fc55555
 800aee0:	3fe00000 	.word	0x3fe00000
 800aee4:	5acfd57c 	.word	0x5acfd57c
 800aee8:	3de5d93a 	.word	0x3de5d93a
 800aeec:	8a2b9ceb 	.word	0x8a2b9ceb
 800aef0:	3e5ae5e6 	.word	0x3e5ae5e6
 800aef4:	57b1fe7d 	.word	0x57b1fe7d
 800aef8:	3ec71de3 	.word	0x3ec71de3
 800aefc:	19c161d5 	.word	0x19c161d5
 800af00:	3f2a01a0 	.word	0x3f2a01a0
 800af04:	1110f8a6 	.word	0x1110f8a6
 800af08:	3f811111 	.word	0x3f811111
 800af0c:	00000000 	.word	0x00000000

0800af10 <floor>:
 800af10:	ec51 0b10 	vmov	r0, r1, d0
 800af14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800af1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800af20:	2e13      	cmp	r6, #19
 800af22:	ee10 5a10 	vmov	r5, s0
 800af26:	ee10 8a10 	vmov	r8, s0
 800af2a:	460c      	mov	r4, r1
 800af2c:	dc32      	bgt.n	800af94 <floor+0x84>
 800af2e:	2e00      	cmp	r6, #0
 800af30:	da14      	bge.n	800af5c <floor+0x4c>
 800af32:	a333      	add	r3, pc, #204	; (adr r3, 800b000 <floor+0xf0>)
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	f7f5 f95e 	bl	80001f8 <__adddf3>
 800af3c:	2200      	movs	r2, #0
 800af3e:	2300      	movs	r3, #0
 800af40:	f7f5 fda0 	bl	8000a84 <__aeabi_dcmpgt>
 800af44:	b138      	cbz	r0, 800af56 <floor+0x46>
 800af46:	2c00      	cmp	r4, #0
 800af48:	da57      	bge.n	800affa <floor+0xea>
 800af4a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800af4e:	431d      	orrs	r5, r3
 800af50:	d001      	beq.n	800af56 <floor+0x46>
 800af52:	4c2d      	ldr	r4, [pc, #180]	; (800b008 <floor+0xf8>)
 800af54:	2500      	movs	r5, #0
 800af56:	4621      	mov	r1, r4
 800af58:	4628      	mov	r0, r5
 800af5a:	e025      	b.n	800afa8 <floor+0x98>
 800af5c:	4f2b      	ldr	r7, [pc, #172]	; (800b00c <floor+0xfc>)
 800af5e:	4137      	asrs	r7, r6
 800af60:	ea01 0307 	and.w	r3, r1, r7
 800af64:	4303      	orrs	r3, r0
 800af66:	d01f      	beq.n	800afa8 <floor+0x98>
 800af68:	a325      	add	r3, pc, #148	; (adr r3, 800b000 <floor+0xf0>)
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	f7f5 f943 	bl	80001f8 <__adddf3>
 800af72:	2200      	movs	r2, #0
 800af74:	2300      	movs	r3, #0
 800af76:	f7f5 fd85 	bl	8000a84 <__aeabi_dcmpgt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d0eb      	beq.n	800af56 <floor+0x46>
 800af7e:	2c00      	cmp	r4, #0
 800af80:	bfbe      	ittt	lt
 800af82:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800af86:	fa43 f606 	asrlt.w	r6, r3, r6
 800af8a:	19a4      	addlt	r4, r4, r6
 800af8c:	ea24 0407 	bic.w	r4, r4, r7
 800af90:	2500      	movs	r5, #0
 800af92:	e7e0      	b.n	800af56 <floor+0x46>
 800af94:	2e33      	cmp	r6, #51	; 0x33
 800af96:	dd0b      	ble.n	800afb0 <floor+0xa0>
 800af98:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af9c:	d104      	bne.n	800afa8 <floor+0x98>
 800af9e:	ee10 2a10 	vmov	r2, s0
 800afa2:	460b      	mov	r3, r1
 800afa4:	f7f5 f928 	bl	80001f8 <__adddf3>
 800afa8:	ec41 0b10 	vmov	d0, r0, r1
 800afac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800afb4:	f04f 33ff 	mov.w	r3, #4294967295
 800afb8:	fa23 f707 	lsr.w	r7, r3, r7
 800afbc:	4207      	tst	r7, r0
 800afbe:	d0f3      	beq.n	800afa8 <floor+0x98>
 800afc0:	a30f      	add	r3, pc, #60	; (adr r3, 800b000 <floor+0xf0>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 f917 	bl	80001f8 <__adddf3>
 800afca:	2200      	movs	r2, #0
 800afcc:	2300      	movs	r3, #0
 800afce:	f7f5 fd59 	bl	8000a84 <__aeabi_dcmpgt>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d0bf      	beq.n	800af56 <floor+0x46>
 800afd6:	2c00      	cmp	r4, #0
 800afd8:	da02      	bge.n	800afe0 <floor+0xd0>
 800afda:	2e14      	cmp	r6, #20
 800afdc:	d103      	bne.n	800afe6 <floor+0xd6>
 800afde:	3401      	adds	r4, #1
 800afe0:	ea25 0507 	bic.w	r5, r5, r7
 800afe4:	e7b7      	b.n	800af56 <floor+0x46>
 800afe6:	2301      	movs	r3, #1
 800afe8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800afec:	fa03 f606 	lsl.w	r6, r3, r6
 800aff0:	4435      	add	r5, r6
 800aff2:	4545      	cmp	r5, r8
 800aff4:	bf38      	it	cc
 800aff6:	18e4      	addcc	r4, r4, r3
 800aff8:	e7f2      	b.n	800afe0 <floor+0xd0>
 800affa:	2500      	movs	r5, #0
 800affc:	462c      	mov	r4, r5
 800affe:	e7aa      	b.n	800af56 <floor+0x46>
 800b000:	8800759c 	.word	0x8800759c
 800b004:	7e37e43c 	.word	0x7e37e43c
 800b008:	bff00000 	.word	0xbff00000
 800b00c:	000fffff 	.word	0x000fffff

0800b010 <scalbn>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	ec55 4b10 	vmov	r4, r5, d0
 800b016:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b01a:	4606      	mov	r6, r0
 800b01c:	462b      	mov	r3, r5
 800b01e:	b99a      	cbnz	r2, 800b048 <scalbn+0x38>
 800b020:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b024:	4323      	orrs	r3, r4
 800b026:	d036      	beq.n	800b096 <scalbn+0x86>
 800b028:	4b39      	ldr	r3, [pc, #228]	; (800b110 <scalbn+0x100>)
 800b02a:	4629      	mov	r1, r5
 800b02c:	ee10 0a10 	vmov	r0, s0
 800b030:	2200      	movs	r2, #0
 800b032:	f7f5 fa97 	bl	8000564 <__aeabi_dmul>
 800b036:	4b37      	ldr	r3, [pc, #220]	; (800b114 <scalbn+0x104>)
 800b038:	429e      	cmp	r6, r3
 800b03a:	4604      	mov	r4, r0
 800b03c:	460d      	mov	r5, r1
 800b03e:	da10      	bge.n	800b062 <scalbn+0x52>
 800b040:	a32b      	add	r3, pc, #172	; (adr r3, 800b0f0 <scalbn+0xe0>)
 800b042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b046:	e03a      	b.n	800b0be <scalbn+0xae>
 800b048:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b04c:	428a      	cmp	r2, r1
 800b04e:	d10c      	bne.n	800b06a <scalbn+0x5a>
 800b050:	ee10 2a10 	vmov	r2, s0
 800b054:	4620      	mov	r0, r4
 800b056:	4629      	mov	r1, r5
 800b058:	f7f5 f8ce 	bl	80001f8 <__adddf3>
 800b05c:	4604      	mov	r4, r0
 800b05e:	460d      	mov	r5, r1
 800b060:	e019      	b.n	800b096 <scalbn+0x86>
 800b062:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b066:	460b      	mov	r3, r1
 800b068:	3a36      	subs	r2, #54	; 0x36
 800b06a:	4432      	add	r2, r6
 800b06c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b070:	428a      	cmp	r2, r1
 800b072:	dd08      	ble.n	800b086 <scalbn+0x76>
 800b074:	2d00      	cmp	r5, #0
 800b076:	a120      	add	r1, pc, #128	; (adr r1, 800b0f8 <scalbn+0xe8>)
 800b078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b07c:	da1c      	bge.n	800b0b8 <scalbn+0xa8>
 800b07e:	a120      	add	r1, pc, #128	; (adr r1, 800b100 <scalbn+0xf0>)
 800b080:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b084:	e018      	b.n	800b0b8 <scalbn+0xa8>
 800b086:	2a00      	cmp	r2, #0
 800b088:	dd08      	ble.n	800b09c <scalbn+0x8c>
 800b08a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b08e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b092:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b096:	ec45 4b10 	vmov	d0, r4, r5
 800b09a:	bd70      	pop	{r4, r5, r6, pc}
 800b09c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b0a0:	da19      	bge.n	800b0d6 <scalbn+0xc6>
 800b0a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b0a6:	429e      	cmp	r6, r3
 800b0a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b0ac:	dd0a      	ble.n	800b0c4 <scalbn+0xb4>
 800b0ae:	a112      	add	r1, pc, #72	; (adr r1, 800b0f8 <scalbn+0xe8>)
 800b0b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1e2      	bne.n	800b07e <scalbn+0x6e>
 800b0b8:	a30f      	add	r3, pc, #60	; (adr r3, 800b0f8 <scalbn+0xe8>)
 800b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0be:	f7f5 fa51 	bl	8000564 <__aeabi_dmul>
 800b0c2:	e7cb      	b.n	800b05c <scalbn+0x4c>
 800b0c4:	a10a      	add	r1, pc, #40	; (adr r1, 800b0f0 <scalbn+0xe0>)
 800b0c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0b8      	beq.n	800b040 <scalbn+0x30>
 800b0ce:	a10e      	add	r1, pc, #56	; (adr r1, 800b108 <scalbn+0xf8>)
 800b0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d4:	e7b4      	b.n	800b040 <scalbn+0x30>
 800b0d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b0da:	3236      	adds	r2, #54	; 0x36
 800b0dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b0e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	4b0c      	ldr	r3, [pc, #48]	; (800b118 <scalbn+0x108>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	e7e8      	b.n	800b0be <scalbn+0xae>
 800b0ec:	f3af 8000 	nop.w
 800b0f0:	c2f8f359 	.word	0xc2f8f359
 800b0f4:	01a56e1f 	.word	0x01a56e1f
 800b0f8:	8800759c 	.word	0x8800759c
 800b0fc:	7e37e43c 	.word	0x7e37e43c
 800b100:	8800759c 	.word	0x8800759c
 800b104:	fe37e43c 	.word	0xfe37e43c
 800b108:	c2f8f359 	.word	0xc2f8f359
 800b10c:	81a56e1f 	.word	0x81a56e1f
 800b110:	43500000 	.word	0x43500000
 800b114:	ffff3cb0 	.word	0xffff3cb0
 800b118:	3c900000 	.word	0x3c900000

0800b11c <_init>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	bf00      	nop
 800b120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b122:	bc08      	pop	{r3}
 800b124:	469e      	mov	lr, r3
 800b126:	4770      	bx	lr

0800b128 <_fini>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	bf00      	nop
 800b12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12e:	bc08      	pop	{r3}
 800b130:	469e      	mov	lr, r3
 800b132:	4770      	bx	lr
