
single_actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acec  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800ae88  0800ae88  0001ae88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0f8  0800b0f8  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0f8  0800b0f8  0001b0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b100  0800b100  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b100  0800b100  0001b100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  0800b108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a4  20000188  0800b290  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000172c  0800b290  0002172c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142a5  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b5  00000000  00000000  0003445d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00037518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00038600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191d3  00000000  00000000  00039590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143af  00000000  00000000  00052763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa93  00000000  00000000  00066b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f65a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b88  00000000  00000000  000f65f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000188 	.word	0x20000188
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ae6c 	.word	0x0800ae6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000018c 	.word	0x2000018c
 80001d4:	0800ae6c 	.word	0x0800ae6c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b974 	b.w	8000eb4 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468e      	mov	lr, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14d      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	d969      	bls.n	8000ccc <__udivmoddi4+0xe8>
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	b152      	cbz	r2, 8000c14 <__udivmoddi4+0x30>
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	f1c2 0120 	rsb	r1, r2, #32
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c12:	4094      	lsls	r4, r2
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	0c21      	lsrs	r1, r4, #16
 8000c1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c1e:	fa1f f78c 	uxth.w	r7, ip
 8000c22:	fb08 e316 	mls	r3, r8, r6, lr
 8000c26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2a:	fb06 f107 	mul.w	r1, r6, r7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 811f 	bcs.w	8000e7c <__udivmoddi4+0x298>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 811c 	bls.w	8000e7c <__udivmoddi4+0x298>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x92>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 810a 	bcs.w	8000e80 <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8107 	bls.w	8000e80 <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	1be4      	subs	r4, r4, r7
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa4>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xc2>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80ef 	beq.w	8000e76 <__udivmoddi4+0x292>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x160>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd4>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80f9 	bhi.w	8000eaa <__udivmoddi4+0x2c6>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa4>
 8000cc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xec>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 8092 	bne.w	8000dfe <__udivmoddi4+0x21a>
 8000cda:	eba1 010c 	sub.w	r1, r1, ip
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	0c20      	lsrs	r0, r4, #16
 8000cea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cee:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf6:	fb0e f003 	mul.w	r0, lr, r3
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x12c>
 8000cfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000d02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x12a>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2c0>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	1a09      	subs	r1, r1, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d18:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x156>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x154>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2ca>
 8000d38:	4608      	mov	r0, r1
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d42:	e79c      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000d44:	f1c6 0720 	rsb	r7, r6, #32
 8000d48:	40b3      	lsls	r3, r6
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa20 f407 	lsr.w	r4, r0, r7
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	40f9      	lsrs	r1, r7
 8000d5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d62:	fa00 f306 	lsl.w	r3, r0, r6
 8000d66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6a:	0c20      	lsrs	r0, r4, #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fb09 1118 	mls	r1, r9, r8, r1
 8000d74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d78:	fb08 f00e 	mul.w	r0, r8, lr
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b8>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	1a09      	subs	r1, r1, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da4:	fb09 1110 	mls	r1, r9, r0, r1
 8000da8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db0:	458e      	cmp	lr, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1e2>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2b4>
 8000dbe:	458e      	cmp	lr, r1
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2b4>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dca:	fba0 9402 	umull	r9, r4, r0, r2
 8000dce:	eba1 010e 	sub.w	r1, r1, lr
 8000dd2:	42a1      	cmp	r1, r4
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46a6      	mov	lr, r4
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x2a4>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x2a0>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x212>
 8000dde:	ebb3 0208 	subs.w	r2, r3, r8
 8000de2:	eb61 010e 	sbc.w	r1, r1, lr
 8000de6:	fa01 f707 	lsl.w	r7, r1, r7
 8000dea:	fa22 f306 	lsr.w	r3, r2, r6
 8000dee:	40f1      	lsrs	r1, r6
 8000df0:	431f      	orrs	r7, r3
 8000df2:	e9c5 7100 	strd	r7, r1, [r5]
 8000df6:	2600      	movs	r6, #0
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1c2 0320 	rsb	r3, r2, #32
 8000e02:	40d8      	lsrs	r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e20:	0c0b      	lsrs	r3, r1, #16
 8000e22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e26:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x260>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b8>
 8000e3c:	429e      	cmp	r6, r3
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b8>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1b9b      	subs	r3, r3, r6
 8000e46:	b289      	uxth	r1, r1
 8000e48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb06 f30e 	mul.w	r3, r6, lr
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x28a>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e6a:	3e02      	subs	r6, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	1ac9      	subs	r1, r1, r3
 8000e70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0x104>
 8000e76:	462e      	mov	r6, r5
 8000e78:	4628      	mov	r0, r5
 8000e7a:	e705      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	e6e3      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e6f8      	b.n	8000c76 <__udivmoddi4+0x92>
 8000e84:	454b      	cmp	r3, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f8>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e90:	3801      	subs	r0, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f8>
 8000e94:	4646      	mov	r6, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x28a>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1e2>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x260>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b8>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x12c>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e709      	b.n	8000cc2 <__udivmoddi4+0xde>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x156>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f001 f8f2 	bl	80020a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f82c 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 f9e8 	bl	8001298 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000ec8:	f007 ff6a 	bl	8008da0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000ecc:	f000 f890 	bl	8000ff0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ed0:	f000 f994 	bl	80011fc <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ed4:	f000 f944 	bl	8001160 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <main+0x58>)
 8000eda:	f003 fb7b 	bl	80045d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <main+0x5c>)
 8000ee0:	f003 fb78 	bl	80045d4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <main+0x5c>)
 8000ee8:	f003 fc30 	bl	800474c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000eec:	2104      	movs	r1, #4
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <main+0x5c>)
 8000ef0:	f003 fc2c 	bl	800474c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ef4:	2108      	movs	r1, #8
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <main+0x5c>)
 8000ef8:	f003 fc28 	bl	800474c <HAL_TIM_PWM_Start>

  // Store the frequency of PID loop
  PID_freq = HAL_RCC_GetSysClockFreq()/htim4.Init.Period;
 8000efc:	f003 fa48 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8000f00:	4602      	mov	r2, r0
 8000f02:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <main+0x58>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <main+0x60>)
 8000f0c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x56>
 8000f10:	20000234 	.word	0x20000234
 8000f14:	200001a4 	.word	0x200001a4
 8000f18:	2000027c 	.word	0x2000027c

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f008 fc72 	bl	8009814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <SystemClock_Config+0xd0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f68:	4a20      	ldr	r2, [pc, #128]	; (8000fec <SystemClock_Config+0xd0>)
 8000f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f90:	2319      	movs	r3, #25
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f94:	23c0      	movs	r3, #192	; 0xc0
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fe95 	bl	8003cd4 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fb0:	f000 fb99 	bl	80016e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 f8f7 	bl	80041c4 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fdc:	f000 fb83 	bl	80016e6 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3750      	adds	r7, #80	; 0x50
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	; 0x58
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	615a      	str	r2, [r3, #20]
 8001020:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2220      	movs	r2, #32
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f008 fbf3 	bl	8009814 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800102e:	4b4a      	ldr	r3, [pc, #296]	; (8001158 <MX_TIM1_Init+0x168>)
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <MX_TIM1_Init+0x16c>)
 8001032:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <MX_TIM1_Init+0x168>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b47      	ldr	r3, [pc, #284]	; (8001158 <MX_TIM1_Init+0x168>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8001040:	4b45      	ldr	r3, [pc, #276]	; (8001158 <MX_TIM1_Init+0x168>)
 8001042:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001046:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b43      	ldr	r3, [pc, #268]	; (8001158 <MX_TIM1_Init+0x168>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800104e:	4b42      	ldr	r3, [pc, #264]	; (8001158 <MX_TIM1_Init+0x168>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <MX_TIM1_Init+0x168>)
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800105a:	483f      	ldr	r0, [pc, #252]	; (8001158 <MX_TIM1_Init+0x168>)
 800105c:	f003 fa6a 	bl	8004534 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001066:	f000 fb3e 	bl	80016e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001074:	4619      	mov	r1, r3
 8001076:	4838      	ldr	r0, [pc, #224]	; (8001158 <MX_TIM1_Init+0x168>)
 8001078:	f003 fde2 	bl	8004c40 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001082:	f000 fb30 	bl	80016e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001086:	4834      	ldr	r0, [pc, #208]	; (8001158 <MX_TIM1_Init+0x168>)
 8001088:	f003 fb06 	bl	8004698 <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001092:	f000 fb28 	bl	80016e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010a2:	4619      	mov	r1, r3
 80010a4:	482c      	ldr	r0, [pc, #176]	; (8001158 <MX_TIM1_Init+0x168>)
 80010a6:	f004 f991 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010b0:	f000 fb19 	bl	80016e6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	; 0x60
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	481f      	ldr	r0, [pc, #124]	; (8001158 <MX_TIM1_Init+0x168>)
 80010da:	f003 fcef 	bl	8004abc <HAL_TIM_PWM_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010e4:	f000 faff 	bl	80016e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	2204      	movs	r2, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4819      	ldr	r0, [pc, #100]	; (8001158 <MX_TIM1_Init+0x168>)
 80010f2:	f003 fce3 	bl	8004abc <HAL_TIM_PWM_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80010fc:	f000 faf3 	bl	80016e6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	2208      	movs	r2, #8
 8001106:	4619      	mov	r1, r3
 8001108:	4813      	ldr	r0, [pc, #76]	; (8001158 <MX_TIM1_Init+0x168>)
 800110a:	f003 fcd7 	bl	8004abc <HAL_TIM_PWM_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001114:	f000 fae7 	bl	80016e6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM1_Init+0x168>)
 800113c:	f004 f9b4 	bl	80054a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001146:	f000 face 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800114a:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM1_Init+0x168>)
 800114c:	f000 fb54 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	; 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001a4 	.word	0x200001a4
 800115c:	40010000 	.word	0x40010000

08001160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM3_Init+0x94>)
 800117e:	4a1e      	ldr	r2, [pc, #120]	; (80011f8 <MX_TIM3_Init+0x98>)
 8001180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM3_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 48000;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001190:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001194:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TIM3_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM3_Init+0x94>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011a4:	f003 f9c6 	bl	8004534 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 fa9a 	bl	80016e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011c0:	f003 fd3e 	bl	8004c40 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 fa8c 	bl	80016e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM3_Init+0x94>)
 80011dc:	f004 f8f6 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011e6:	f000 fa7e 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001ec 	.word	0x200001ec
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_TIM4_Init+0x94>)
 800121a:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <MX_TIM4_Init+0x98>)
 800121c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_TIM4_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_TIM4_Init+0x94>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 48000;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_TIM4_Init+0x94>)
 800122c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001230:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_TIM4_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM4_Init+0x94>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_TIM4_Init+0x94>)
 8001240:	f003 f978 	bl	8004534 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800124a:	f000 fa4c 	bl	80016e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_TIM4_Init+0x94>)
 800125c:	f003 fcf0 	bl	8004c40 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 fa3e 	bl	80016e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_TIM4_Init+0x94>)
 8001278:	f004 f8a8 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001282:	f000 fa30 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000234 	.word	0x20000234
 8001294:	40000800 	.word	0x40000800

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <MX_GPIO_Init+0x144>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a49      	ldr	r2, [pc, #292]	; (80013dc <MX_GPIO_Init+0x144>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <MX_GPIO_Init+0x144>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <MX_GPIO_Init+0x144>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a42      	ldr	r2, [pc, #264]	; (80013dc <MX_GPIO_Init+0x144>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b40      	ldr	r3, [pc, #256]	; (80013dc <MX_GPIO_Init+0x144>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <MX_GPIO_Init+0x144>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <MX_GPIO_Init+0x144>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b39      	ldr	r3, [pc, #228]	; (80013dc <MX_GPIO_Init+0x144>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MX_GPIO_Init+0x144>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a34      	ldr	r2, [pc, #208]	; (80013dc <MX_GPIO_Init+0x144>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b32      	ldr	r3, [pc, #200]	; (80013dc <MX_GPIO_Init+0x144>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_LED_GPIO_Port, ERROR_LED_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001324:	482e      	ldr	r0, [pc, #184]	; (80013e0 <MX_GPIO_Init+0x148>)
 8001326:	f001 fa01 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001330:	482c      	ldr	r0, [pc, #176]	; (80013e4 <MX_GPIO_Init+0x14c>)
 8001332:	f001 f9fb 	bl	800272c <HAL_GPIO_WritePin>
                          |IN3_A_Pin|IN3_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ERROR_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin;
 8001336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_LED_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <MX_GPIO_Init+0x148>)
 8001350:	f001 f850 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_A_Pin ENC2_A_Pin ENC3_A_Pin */
  GPIO_InitStruct.Pin = ENC1_A_Pin|ENC2_A_Pin|ENC3_A_Pin;
 8001354:	2315      	movs	r3, #21
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001358:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	481f      	ldr	r0, [pc, #124]	; (80013e8 <MX_GPIO_Init+0x150>)
 800136a:	f001 f843 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_Pin ENC2_B_Pin ENC3_B_Pin */
  GPIO_InitStruct.Pin = ENC1_B_Pin|ENC2_B_Pin|ENC3_B_Pin;
 800136e:	232a      	movs	r3, #42	; 0x2a
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4819      	ldr	r0, [pc, #100]	; (80013e8 <MX_GPIO_Init+0x150>)
 8001382:	f001 f837 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_A_Pin IN1_B_Pin IN2_A_Pin IN2_B_Pin
                           IN3_A_Pin IN3_B_Pin */
  GPIO_InitStruct.Pin = IN1_A_Pin|IN1_B_Pin|IN2_A_Pin|IN2_B_Pin
 8001386:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800138a:	617b      	str	r3, [r7, #20]
                          |IN3_A_Pin|IN3_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	; (80013e4 <MX_GPIO_Init+0x14c>)
 80013a0:	f001 f828 	bl	80023f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	2006      	movs	r0, #6
 80013aa:	f000 ffec 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013ae:	2006      	movs	r0, #6
 80013b0:	f001 f805 	bl	80023be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	2008      	movs	r0, #8
 80013ba:	f000 ffe4 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013be:	2008      	movs	r0, #8
 80013c0:	f000 fffd 	bl	80023be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	200a      	movs	r0, #10
 80013ca:	f000 ffdc 	bl	8002386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013ce:	200a      	movs	r0, #10
 80013d0:	f000 fff5 	bl	80023be <HAL_NVIC_EnableIRQ>

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020000 	.word	0x40020000
 80013ec:	00000000 	.word	0x00000000

080013f0 <inverse_kinematics>:

/* USER CODE BEGIN 4 */
void inverse_kinematics(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

	// Determine the two angles and one length
	d_inner_ref = sqrt(X_ref*X_ref + 20*X_ref + 1864);        // in cm
 80013f4:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <inverse_kinematics+0x1c8>)
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	4b6f      	ldr	r3, [pc, #444]	; (80015b8 <inverse_kinematics+0x1c8>)
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001404:	4b6c      	ldr	r3, [pc, #432]	; (80015b8 <inverse_kinematics+0x1c8>)
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800140e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80015bc <inverse_kinematics+0x1cc>
 800141a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f847 	bl	80004b4 <__aeabi_f2d>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	ec43 2b10 	vmov	d0, r2, r3
 800142e:	f008 fc53 	bl	8009cd8 <sqrt>
 8001432:	ec53 2b10 	vmov	r2, r3, d0
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fb6b 	bl	8000b14 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	4a5f      	ldr	r2, [pc, #380]	; (80015c0 <inverse_kinematics+0x1d0>)
 8001442:	6013      	str	r3, [r2, #0]
	theta_1_ref = 2*atan( (d_inner_ref + 42)/(X_ref + 10) );  // in radians
 8001444:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <inverse_kinematics+0x1d0>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80015c4 <inverse_kinematics+0x1d4>
 800144e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001452:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <inverse_kinematics+0x1c8>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800145c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001460:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001464:	ee16 0a90 	vmov	r0, s13
 8001468:	f7ff f824 	bl	80004b4 <__aeabi_f2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	ec43 2b10 	vmov	d0, r2, r3
 8001474:	f008 f9d8 	bl	8009828 <atan>
 8001478:	ec51 0b10 	vmov	r0, r1, d0
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	f7fe feba 	bl	80001f8 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fb42 	bl	8000b14 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	4a4d      	ldr	r2, [pc, #308]	; (80015c8 <inverse_kinematics+0x1d8>)
 8001494:	6013      	str	r3, [r2, #0]
	// theta_3_ref = M_PI + theta_1_ref;                      // in radians -- NOT REQUIRED

	// Apply the cos theorem
	d_middle_ref = inverse_cos_theorem(D_LOWER_TO_MAIN_POLE, L_LOWER_POLE, (theta_1_ref - M_PI_2));
 8001496:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <inverse_kinematics+0x1d8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f80a 	bl	80004b4 <__aeabi_f2d>
 80014a0:	a343      	add	r3, pc, #268	; (adr r3, 80015b0 <inverse_kinematics+0x1c0>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7fe fea5 	bl	80001f4 <__aeabi_dsub>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fb2f 	bl	8000b14 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	ee01 3a10 	vmov	s2, r3
 80014bc:	eddf 0a43 	vldr	s1, [pc, #268]	; 80015cc <inverse_kinematics+0x1dc>
 80014c0:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80015d0 <inverse_kinematics+0x1e0>
 80014c4:	f000 f894 	bl	80015f0 <inverse_cos_theorem>
 80014c8:	eef0 7a40 	vmov.f32	s15, s0
 80014cc:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <inverse_kinematics+0x1e4>)
 80014ce:	edc3 7a00 	vstr	s15, [r3]
	d_outer_ref = inverse_cos_theorem(D_HIGHER_TO_MAIN_POLE, L_HIGHER_POLE, (theta_1_ref - M_PI_2));
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <inverse_kinematics+0x1d8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ffec 	bl	80004b4 <__aeabi_f2d>
 80014dc:	a334      	add	r3, pc, #208	; (adr r3, 80015b0 <inverse_kinematics+0x1c0>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7fe fe87 	bl	80001f4 <__aeabi_dsub>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb11 	bl	8000b14 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	ee01 3a10 	vmov	s2, r3
 80014f8:	eef3 0a0c 	vmov.f32	s1, #60	; 0x41e00000  28.0
 80014fc:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001500:	f000 f876 	bl	80015f0 <inverse_cos_theorem>
 8001504:	eef0 7a40 	vmov.f32	s15, s0
 8001508:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <inverse_kinematics+0x1e8>)
 800150a:	edc3 7a00 	vstr	s15, [r3]

	// Determine motor position reference values (everything in cm)
	mot_inner_set_pos = d_inner_ref - D_INNER_OFFSET;
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <inverse_kinematics+0x1d0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a32      	ldr	r2, [pc, #200]	; (80015dc <inverse_kinematics+0x1ec>)
 8001514:	6013      	str	r3, [r2, #0]
	mot_middle_set_pos = d_middle_ref - D_MIDDLE_OFFSET;
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <inverse_kinematics+0x1e4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a31      	ldr	r2, [pc, #196]	; (80015e0 <inverse_kinematics+0x1f0>)
 800151c:	6013      	str	r3, [r2, #0]
	mot_outer_set_pos = d_outer_ref - D_OUTER_OFFSET;
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <inverse_kinematics+0x1e8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a30      	ldr	r2, [pc, #192]	; (80015e4 <inverse_kinematics+0x1f4>)
 8001524:	6013      	str	r3, [r2, #0]

	if ((mot_inner_set_pos>INNER_SET_LIMIT_MAX) || (mot_inner_set_pos<INNER_SET_LIMIT_MIN)) error_code ='r';
 8001526:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <inverse_kinematics+0x1ec>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80015e8 <inverse_kinematics+0x1f8>
 8001530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001538:	dc07      	bgt.n	800154a <inverse_kinematics+0x15a>
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <inverse_kinematics+0x1ec>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d502      	bpl.n	8001550 <inverse_kinematics+0x160>
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <inverse_kinematics+0x1fc>)
 800154c:	2272      	movs	r2, #114	; 0x72
 800154e:	701a      	strb	r2, [r3, #0]
	if ((mot_middle_set_pos>MIDDLE_SET_LIMIT_MAX) || (mot_middle_set_pos<MIDDLE_SET_LIMIT_MIN)) error_code ='r';
 8001550:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <inverse_kinematics+0x1f0>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80015e8 <inverse_kinematics+0x1f8>
 800155a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	dc07      	bgt.n	8001574 <inverse_kinematics+0x184>
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <inverse_kinematics+0x1f0>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	d502      	bpl.n	800157a <inverse_kinematics+0x18a>
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <inverse_kinematics+0x1fc>)
 8001576:	2272      	movs	r2, #114	; 0x72
 8001578:	701a      	strb	r2, [r3, #0]
	if ((mot_outer_set_pos>OUTER_SET_LIMIT_MAX) || (mot_outer_set_pos<OUTER_SET_LIMIT_MIN)) error_code ='r';
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <inverse_kinematics+0x1f4>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80015e8 <inverse_kinematics+0x1f8>
 8001584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	dc08      	bgt.n	80015a0 <inverse_kinematics+0x1b0>
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <inverse_kinematics+0x1f4>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	d400      	bmi.n	80015a0 <inverse_kinematics+0x1b0>
}
 800159e:	e002      	b.n	80015a6 <inverse_kinematics+0x1b6>
	if ((mot_outer_set_pos>OUTER_SET_LIMIT_MAX) || (mot_outer_set_pos<OUTER_SET_LIMIT_MIN)) error_code ='r';
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <inverse_kinematics+0x1fc>)
 80015a2:	2272      	movs	r2, #114	; 0x72
 80015a4:	701a      	strb	r2, [r3, #0]
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	54442d18 	.word	0x54442d18
 80015b4:	3ff921fb 	.word	0x3ff921fb
 80015b8:	20000294 	.word	0x20000294
 80015bc:	44e90000 	.word	0x44e90000
 80015c0:	20000288 	.word	0x20000288
 80015c4:	42280000 	.word	0x42280000
 80015c8:	20000284 	.word	0x20000284
 80015cc:	41c75bf5 	.word	0x41c75bf5
 80015d0:	41701d15 	.word	0x41701d15
 80015d4:	2000028c 	.word	0x2000028c
 80015d8:	20000290 	.word	0x20000290
 80015dc:	200002d0 	.word	0x200002d0
 80015e0:	200002d4 	.word	0x200002d4
 80015e4:	200002d8 	.word	0x200002d8
 80015e8:	447a0000 	.word	0x447a0000
 80015ec:	2000029c 	.word	0x2000029c

080015f0 <inverse_cos_theorem>:

	// Update X_curr from the values
	X_curr = d_inner_curr*sin(theta_1_curr) - 10;
}

float inverse_cos_theorem(float a, float b, float beta){
 80015f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	ed87 0a03 	vstr	s0, [r7, #12]
 80015fc:	edc7 0a02 	vstr	s1, [r7, #8]
 8001600:	ed87 1a01 	vstr	s2, [r7, #4]
	// Given a, b, and the angle beta; find the other side length of the triangle
	return sqrt( (b*b - a*a*sin(beta)*sin(beta)) ) + a*cos(beta);
 8001604:	edd7 7a02 	vldr	s15, [r7, #8]
 8001608:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800160c:	ee17 0a90 	vmov	r0, s15
 8001610:	f7fe ff50 	bl	80004b4 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	edd7 7a03 	vldr	s15, [r7, #12]
 800161c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001620:	ee17 0a90 	vmov	r0, s15
 8001624:	f7fe ff46 	bl	80004b4 <__aeabi_f2d>
 8001628:	4680      	mov	r8, r0
 800162a:	4689      	mov	r9, r1
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7fe ff41 	bl	80004b4 <__aeabi_f2d>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	ec43 2b10 	vmov	d0, r2, r3
 800163a:	f008 faf5 	bl	8009c28 <sin>
 800163e:	ec53 2b10 	vmov	r2, r3, d0
 8001642:	4640      	mov	r0, r8
 8001644:	4649      	mov	r1, r9
 8001646:	f7fe ff8d 	bl	8000564 <__aeabi_dmul>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4690      	mov	r8, r2
 8001650:	4699      	mov	r9, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7fe ff2e 	bl	80004b4 <__aeabi_f2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	ec43 2b10 	vmov	d0, r2, r3
 8001660:	f008 fae2 	bl	8009c28 <sin>
 8001664:	ec53 2b10 	vmov	r2, r3, d0
 8001668:	4640      	mov	r0, r8
 800166a:	4649      	mov	r1, r9
 800166c:	f7fe ff7a 	bl	8000564 <__aeabi_dmul>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4620      	mov	r0, r4
 8001676:	4629      	mov	r1, r5
 8001678:	f7fe fdbc 	bl	80001f4 <__aeabi_dsub>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	ec43 2b17 	vmov	d7, r2, r3
 8001684:	eeb0 0a47 	vmov.f32	s0, s14
 8001688:	eef0 0a67 	vmov.f32	s1, s15
 800168c:	f008 fb24 	bl	8009cd8 <sqrt>
 8001690:	ec59 8b10 	vmov	r8, r9, d0
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f7fe ff0d 	bl	80004b4 <__aeabi_f2d>
 800169a:	4604      	mov	r4, r0
 800169c:	460d      	mov	r5, r1
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7fe ff08 	bl	80004b4 <__aeabi_f2d>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	ec43 2b10 	vmov	d0, r2, r3
 80016ac:	f008 fa5c 	bl	8009b68 <cos>
 80016b0:	ec53 2b10 	vmov	r2, r3, d0
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7fe ff54 	bl	8000564 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4640      	mov	r0, r8
 80016c2:	4649      	mov	r1, r9
 80016c4:	f7fe fd98 	bl	80001f8 <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa20 	bl	8000b14 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	ee07 3a90 	vmov	s15, r3
}
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080016e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ea:	b672      	cpsid	i
}
 80016ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ee:	e7fe      	b.n	80016ee <Error_Handler+0x8>

080016f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_MspInit+0x4c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a0f      	ldr	r2, [pc, #60]	; (800173c <HAL_MspInit+0x4c>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_MspInit+0x4c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_MspInit+0x4c>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_MspInit+0x4c>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <HAL_TIM_Base_MspInit+0xa8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d10e      	bne.n	8001770 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <HAL_TIM_Base_MspInit+0xac>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_TIM_Base_MspInit+0xac>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HAL_TIM_Base_MspInit+0xac>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800176e:	e036      	b.n	80017de <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_TIM_Base_MspInit+0xb0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d116      	bne.n	80017a8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_TIM_Base_MspInit+0xac>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <HAL_TIM_Base_MspInit+0xac>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_TIM_Base_MspInit+0xac>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	201d      	movs	r0, #29
 800179c:	f000 fdf3 	bl	8002386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017a0:	201d      	movs	r0, #29
 80017a2:	f000 fe0c 	bl	80023be <HAL_NVIC_EnableIRQ>
}
 80017a6:	e01a      	b.n	80017de <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_TIM_Base_MspInit+0xb4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d115      	bne.n	80017de <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_TIM_Base_MspInit+0xac>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_TIM_Base_MspInit+0xac>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_TIM_Base_MspInit+0xac>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	201e      	movs	r0, #30
 80017d4:	f000 fdd7 	bl	8002386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017d8:	201e      	movs	r0, #30
 80017da:	f000 fdf0 	bl	80023be <HAL_NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40010000 	.word	0x40010000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40000400 	.word	0x40000400
 80017f4:	40000800 	.word	0x40000800

080017f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_TIM_MspPostInit+0x68>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d11e      	bne.n	8001858 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_TIM_MspPostInit+0x6c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_TIM_MspPostInit+0x6c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_TIM_MspPostInit+0x6c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001836:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800183a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001848:	2301      	movs	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_TIM_MspPostInit+0x70>)
 8001854:	f000 fdce 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40010000 	.word	0x40010000
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 fc46 	bl	8002148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	/* Check the direction of the first motor */
	if(HAL_GPIO_ReadPin(GPIOA, ENC1_B_Pin)){
 80018c4:	2102      	movs	r1, #2
 80018c6:	4811      	ldr	r0, [pc, #68]	; (800190c <EXTI0_IRQHandler+0x4c>)
 80018c8:	f000 ff18 	bl	80026fc <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <EXTI0_IRQHandler+0x1e>
		/* Update the position of the first motor */
		enc_inner_pos ++;
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <EXTI0_IRQHandler+0x50>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <EXTI0_IRQHandler+0x50>)
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e004      	b.n	80018e8 <EXTI0_IRQHandler+0x28>
	}else{
		enc_inner_pos --;
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <EXTI0_IRQHandler+0x50>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <EXTI0_IRQHandler+0x50>)
 80018e6:	6013      	str	r3, [r2, #0]
	}
	enc_inner_pos_cm = (float)enc_inner_pos/(float)(INNER_GEAR_RATIO);
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <EXTI0_IRQHandler+0x50>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001914 <EXTI0_IRQHandler+0x54>
 80018f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <EXTI0_IRQHandler+0x58>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_A_Pin);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 ff46 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40020000 	.word	0x40020000
 8001910:	200002b8 	.word	0x200002b8
 8001914:	42200000 	.word	0x42200000
 8001918:	200002c4 	.word	0x200002c4

0800191c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	/* Check the direction of the second motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC2_B_Pin)){
 8001920:	2108      	movs	r1, #8
 8001922:	4811      	ldr	r0, [pc, #68]	; (8001968 <EXTI2_IRQHandler+0x4c>)
 8001924:	f000 feea 	bl	80026fc <HAL_GPIO_ReadPin>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <EXTI2_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_middle_pos ++;
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <EXTI2_IRQHandler+0x50>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <EXTI2_IRQHandler+0x50>)
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	e004      	b.n	8001944 <EXTI2_IRQHandler+0x28>
		}else{
			enc_middle_pos --;
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <EXTI2_IRQHandler+0x50>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3b01      	subs	r3, #1
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <EXTI2_IRQHandler+0x50>)
 8001942:	6013      	str	r3, [r2, #0]
		}
		enc_middle_pos_cm = (float)enc_middle_pos/(float)(MIDDLE_GEAR_RATIO);
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <EXTI2_IRQHandler+0x50>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001950:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001970 <EXTI2_IRQHandler+0x54>
 8001954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <EXTI2_IRQHandler+0x58>)
 800195a:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_A_Pin);
 800195e:	2004      	movs	r0, #4
 8001960:	f000 ff18 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40020000 	.word	0x40020000
 800196c:	200002bc 	.word	0x200002bc
 8001970:	43480000 	.word	0x43480000
 8001974:	200002c8 	.word	0x200002c8

08001978 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	/* Check the direction of the third motor */
		if(HAL_GPIO_ReadPin(GPIOA, ENC3_B_Pin)){
 800197c:	2120      	movs	r1, #32
 800197e:	4811      	ldr	r0, [pc, #68]	; (80019c4 <EXTI4_IRQHandler+0x4c>)
 8001980:	f000 febc 	bl	80026fc <HAL_GPIO_ReadPin>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <EXTI4_IRQHandler+0x1e>
			/* Update the position of the first motor */
			enc_outer_pos ++;
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <EXTI4_IRQHandler+0x50>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <EXTI4_IRQHandler+0x50>)
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e004      	b.n	80019a0 <EXTI4_IRQHandler+0x28>
		}else{
			enc_outer_pos --;
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <EXTI4_IRQHandler+0x50>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3b01      	subs	r3, #1
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <EXTI4_IRQHandler+0x50>)
 800199e:	6013      	str	r3, [r2, #0]
		}
		enc_outer_pos_cm = (float)enc_outer_pos/(float)(OUTER_GEAR_RATIO);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <EXTI4_IRQHandler+0x50>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ac:	eddf 6a07 	vldr	s13, [pc, #28]	; 80019cc <EXTI4_IRQHandler+0x54>
 80019b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <EXTI4_IRQHandler+0x58>)
 80019b6:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_A_Pin);
 80019ba:	2010      	movs	r0, #16
 80019bc:	f000 feea 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40020000 	.word	0x40020000
 80019c8:	200002c0 	.word	0x200002c0
 80019cc:	42200000 	.word	0x42200000
 80019d0:	200002cc 	.word	0x200002cc

080019d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <TIM3_IRQHandler+0x10>)
 80019da:	f002 ff67 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001ec 	.word	0x200001ec

080019e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

	if(error_code == 0 && external_shutdown == 0){
 80019ee:	4bad      	ldr	r3, [pc, #692]	; (8001ca4 <TIM4_IRQHandler+0x2bc>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8267 	bne.w	8001ec6 <TIM4_IRQHandler+0x4de>
 80019f8:	4bab      	ldr	r3, [pc, #684]	; (8001ca8 <TIM4_IRQHandler+0x2c0>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f040 8262 	bne.w	8001ec6 <TIM4_IRQHandler+0x4de>

	/* Determine PID errors */
	float inner_pos_error = mot_inner_set_pos - enc_inner_pos_cm;
 8001a02:	4baa      	ldr	r3, [pc, #680]	; (8001cac <TIM4_IRQHandler+0x2c4>)
 8001a04:	ed93 7a00 	vldr	s14, [r3]
 8001a08:	4ba9      	ldr	r3, [pc, #676]	; (8001cb0 <TIM4_IRQHandler+0x2c8>)
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a12:	edc7 7a05 	vstr	s15, [r7, #20]
	float middle_pos_error = mot_middle_set_pos - enc_middle_pos_cm;
 8001a16:	4ba7      	ldr	r3, [pc, #668]	; (8001cb4 <TIM4_IRQHandler+0x2cc>)
 8001a18:	ed93 7a00 	vldr	s14, [r3]
 8001a1c:	4ba6      	ldr	r3, [pc, #664]	; (8001cb8 <TIM4_IRQHandler+0x2d0>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a26:	edc7 7a04 	vstr	s15, [r7, #16]
	float outer_pos_error = mot_outer_set_pos - enc_outer_pos_cm;
 8001a2a:	4ba4      	ldr	r3, [pc, #656]	; (8001cbc <TIM4_IRQHandler+0x2d4>)
 8001a2c:	ed93 7a00 	vldr	s14, [r3]
 8001a30:	4ba3      	ldr	r3, [pc, #652]	; (8001cc0 <TIM4_IRQHandler+0x2d8>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a3a:	edc7 7a03 	vstr	s15, [r7, #12]

	float inner_der_error=(inner_pos_error-pre_inner_pos_error)*PID_freq;
 8001a3e:	4ba1      	ldr	r3, [pc, #644]	; (8001cc4 <TIM4_IRQHandler+0x2dc>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a4c:	4b9e      	ldr	r3, [pc, #632]	; (8001cc8 <TIM4_IRQHandler+0x2e0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5c:	edc7 7a02 	vstr	s15, [r7, #8]
	float middle_der_error=(middle_pos_error-pre_middle_pos_error)*PID_freq;
 8001a60:	4b9a      	ldr	r3, [pc, #616]	; (8001ccc <TIM4_IRQHandler+0x2e4>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a6e:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <TIM4_IRQHandler+0x2e0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7e:	edc7 7a01 	vstr	s15, [r7, #4]
	float outer_der_error=(outer_pos_error-pre_outer_pos_error)*PID_freq;
 8001a82:	4b93      	ldr	r3, [pc, #588]	; (8001cd0 <TIM4_IRQHandler+0x2e8>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a90:	4b8d      	ldr	r3, [pc, #564]	; (8001cc8 <TIM4_IRQHandler+0x2e0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	edc7 7a00 	vstr	s15, [r7]

	inner_int_error+=inner_pos_error/PID_freq;
 8001aa4:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <TIM4_IRQHandler+0x2e0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab0:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ab8:	4b86      	ldr	r3, [pc, #536]	; (8001cd4 <TIM4_IRQHandler+0x2ec>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <TIM4_IRQHandler+0x2ec>)
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
	middle_int_error+=middle_pos_error/PID_freq;
 8001ac8:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <TIM4_IRQHandler+0x2e0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad4:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001adc:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <TIM4_IRQHandler+0x2f0>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <TIM4_IRQHandler+0x2f0>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
	outer_int_error+=outer_pos_error/PID_freq;
 8001aec:	4b76      	ldr	r3, [pc, #472]	; (8001cc8 <TIM4_IRQHandler+0x2e0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af8:	edd7 6a03 	vldr	s13, [r7, #12]
 8001afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b00:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <TIM4_IRQHandler+0x2f4>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <TIM4_IRQHandler+0x2f4>)
 8001b0c:	edc3 7a00 	vstr	s15, [r3]

	pre_inner_pos_error=inner_pos_error;
 8001b10:	4a6c      	ldr	r2, [pc, #432]	; (8001cc4 <TIM4_IRQHandler+0x2dc>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	6013      	str	r3, [r2, #0]
	pre_middle_pos_error=middle_pos_error;
 8001b16:	4a6d      	ldr	r2, [pc, #436]	; (8001ccc <TIM4_IRQHandler+0x2e4>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	6013      	str	r3, [r2, #0]
	pre_outer_pos_error=outer_pos_error;
 8001b1c:	4a6c      	ldr	r2, [pc, #432]	; (8001cd0 <TIM4_IRQHandler+0x2e8>)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6013      	str	r3, [r2, #0]

	/* Set the duty (only proportional implemented for now) */
	duty_inner = (int)(kp_inner*inner_pos_error+kd_inner*inner_der_error+ki_inner*inner_int_error);
 8001b22:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <TIM4_IRQHandler+0x2f8>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b30:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <TIM4_IRQHandler+0x2fc>)
 8001b32:	edd3 6a00 	vldr	s13, [r3]
 8001b36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b42:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <TIM4_IRQHandler+0x300>)
 8001b44:	edd3 6a00 	vldr	s13, [r3]
 8001b48:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <TIM4_IRQHandler+0x2ec>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5a:	ee17 2a90 	vmov	r2, s15
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <TIM4_IRQHandler+0x304>)
 8001b60:	601a      	str	r2, [r3, #0]
	duty_middle = (int)(kp_middle*middle_pos_error+kd_middle*middle_der_error+ki_middle*middle_int_error);
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <TIM4_IRQHandler+0x308>)
 8001b64:	ed93 7a00 	vldr	s14, [r3]
 8001b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b70:	4b60      	ldr	r3, [pc, #384]	; (8001cf4 <TIM4_IRQHandler+0x30c>)
 8001b72:	edd3 6a00 	vldr	s13, [r3]
 8001b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b82:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <TIM4_IRQHandler+0x310>)
 8001b84:	edd3 6a00 	vldr	s13, [r3]
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <TIM4_IRQHandler+0x2f0>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b9a:	ee17 2a90 	vmov	r2, s15
 8001b9e:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <TIM4_IRQHandler+0x314>)
 8001ba0:	601a      	str	r2, [r3, #0]
	duty_outer = (int)(kp_outer*outer_pos_error+kd_outer*outer_der_error+ki_outer*outer_int_error);
 8001ba2:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <TIM4_IRQHandler+0x318>)
 8001ba4:	ed93 7a00 	vldr	s14, [r3]
 8001ba8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb0:	4b54      	ldr	r3, [pc, #336]	; (8001d04 <TIM4_IRQHandler+0x31c>)
 8001bb2:	edd3 6a00 	vldr	s13, [r3]
 8001bb6:	edd7 7a00 	vldr	s15, [r7]
 8001bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc2:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <TIM4_IRQHandler+0x320>)
 8001bc4:	edd3 6a00 	vldr	s13, [r3]
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <TIM4_IRQHandler+0x2f4>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bda:	ee17 2a90 	vmov	r2, s15
 8001bde:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <TIM4_IRQHandler+0x324>)
 8001be0:	601a      	str	r2, [r3, #0]

	/* Set the direction */
	if(duty_inner > 0){
 8001be2:	4b42      	ldr	r3, [pc, #264]	; (8001cec <TIM4_IRQHandler+0x304>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	dd0e      	ble.n	8001c08 <TIM4_IRQHandler+0x220>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, HIGH);
 8001bea:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <TIM4_IRQHandler+0x328>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	4848      	ldr	r0, [pc, #288]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001bf4:	f000 fd9a 	bl	800272c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, LOW);
 8001bf8:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <TIM4_IRQHandler+0x330>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2110      	movs	r1, #16
 8001c00:	4844      	ldr	r0, [pc, #272]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001c02:	f000 fd93 	bl	800272c <HAL_GPIO_WritePin>
 8001c06:	e012      	b.n	8001c2e <TIM4_IRQHandler+0x246>
	}
	else{
			duty_inner = -duty_inner;
 8001c08:	4b38      	ldr	r3, [pc, #224]	; (8001cec <TIM4_IRQHandler+0x304>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	425b      	negs	r3, r3
 8001c0e:	4a37      	ldr	r2, [pc, #220]	; (8001cec <TIM4_IRQHandler+0x304>)
 8001c10:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN1_B_Pin, HIGH);
 8001c12:	4b3f      	ldr	r3, [pc, #252]	; (8001d10 <TIM4_IRQHandler+0x328>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	2110      	movs	r1, #16
 8001c1a:	483e      	ldr	r0, [pc, #248]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001c1c:	f000 fd86 	bl	800272c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_A_Pin, LOW);
 8001c20:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <TIM4_IRQHandler+0x330>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	2108      	movs	r1, #8
 8001c28:	483a      	ldr	r0, [pc, #232]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001c2a:	f000 fd7f 	bl	800272c <HAL_GPIO_WritePin>
	}
	if(duty_middle > 0){
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <TIM4_IRQHandler+0x314>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	dd0e      	ble.n	8001c54 <TIM4_IRQHandler+0x26c>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, HIGH);
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <TIM4_IRQHandler+0x328>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2120      	movs	r1, #32
 8001c3e:	4835      	ldr	r0, [pc, #212]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001c40:	f000 fd74 	bl	800272c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, LOW);
 8001c44:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <TIM4_IRQHandler+0x330>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2140      	movs	r1, #64	; 0x40
 8001c4c:	4831      	ldr	r0, [pc, #196]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001c4e:	f000 fd6d 	bl	800272c <HAL_GPIO_WritePin>
 8001c52:	e012      	b.n	8001c7a <TIM4_IRQHandler+0x292>
	}
	else{
			duty_middle = -duty_middle;
 8001c54:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <TIM4_IRQHandler+0x314>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	425b      	negs	r3, r3
 8001c5a:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <TIM4_IRQHandler+0x314>)
 8001c5c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN2_B_Pin, HIGH);
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <TIM4_IRQHandler+0x328>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	482b      	ldr	r0, [pc, #172]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001c68:	f000 fd60 	bl	800272c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_A_Pin, LOW);
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <TIM4_IRQHandler+0x330>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	2120      	movs	r1, #32
 8001c74:	4827      	ldr	r0, [pc, #156]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001c76:	f000 fd59 	bl	800272c <HAL_GPIO_WritePin>
	}
	if(duty_outer > 0){
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <TIM4_IRQHandler+0x324>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	dd4c      	ble.n	8001d1c <TIM4_IRQHandler+0x334>
			HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, HIGH);
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <TIM4_IRQHandler+0x328>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	4822      	ldr	r0, [pc, #136]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001c8c:	f000 fd4e 	bl	800272c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, LOW);
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <TIM4_IRQHandler+0x330>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c9a:	481e      	ldr	r0, [pc, #120]	; (8001d14 <TIM4_IRQHandler+0x32c>)
 8001c9c:	f000 fd46 	bl	800272c <HAL_GPIO_WritePin>
 8001ca0:	e050      	b.n	8001d44 <TIM4_IRQHandler+0x35c>
 8001ca2:	bf00      	nop
 8001ca4:	2000029c 	.word	0x2000029c
 8001ca8:	2000029d 	.word	0x2000029d
 8001cac:	200002d0 	.word	0x200002d0
 8001cb0:	200002c4 	.word	0x200002c4
 8001cb4:	200002d4 	.word	0x200002d4
 8001cb8:	200002c8 	.word	0x200002c8
 8001cbc:	200002d8 	.word	0x200002d8
 8001cc0:	200002cc 	.word	0x200002cc
 8001cc4:	200002dc 	.word	0x200002dc
 8001cc8:	2000027c 	.word	0x2000027c
 8001ccc:	200002e0 	.word	0x200002e0
 8001cd0:	200002e4 	.word	0x200002e4
 8001cd4:	200002e8 	.word	0x200002e8
 8001cd8:	200002ec 	.word	0x200002ec
 8001cdc:	200002f0 	.word	0x200002f0
 8001ce0:	20000018 	.word	0x20000018
 8001ce4:	200002f8 	.word	0x200002f8
 8001ce8:	200002f4 	.word	0x200002f4
 8001cec:	2000030c 	.word	0x2000030c
 8001cf0:	2000001c 	.word	0x2000001c
 8001cf4:	20000300 	.word	0x20000300
 8001cf8:	200002fc 	.word	0x200002fc
 8001cfc:	20000310 	.word	0x20000310
 8001d00:	20000020 	.word	0x20000020
 8001d04:	20000308 	.word	0x20000308
 8001d08:	20000304 	.word	0x20000304
 8001d0c:	20000314 	.word	0x20000314
 8001d10:	20000024 	.word	0x20000024
 8001d14:	40020400 	.word	0x40020400
 8001d18:	20000318 	.word	0x20000318
	}
	else{
			duty_outer = -duty_outer;
 8001d1c:	4b7a      	ldr	r3, [pc, #488]	; (8001f08 <TIM4_IRQHandler+0x520>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	425b      	negs	r3, r3
 8001d22:	4a79      	ldr	r2, [pc, #484]	; (8001f08 <TIM4_IRQHandler+0x520>)
 8001d24:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, IN3_B_Pin, HIGH);
 8001d26:	4b79      	ldr	r3, [pc, #484]	; (8001f0c <TIM4_IRQHandler+0x524>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d30:	4877      	ldr	r0, [pc, #476]	; (8001f10 <TIM4_IRQHandler+0x528>)
 8001d32:	f000 fcfb 	bl	800272c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_A_Pin, LOW);
 8001d36:	4b77      	ldr	r3, [pc, #476]	; (8001f14 <TIM4_IRQHandler+0x52c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	4874      	ldr	r0, [pc, #464]	; (8001f10 <TIM4_IRQHandler+0x528>)
 8001d40:	f000 fcf4 	bl	800272c <HAL_GPIO_WritePin>
	}

	/* Limit the duty */
	if(duty_inner > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001d44:	4b74      	ldr	r3, [pc, #464]	; (8001f18 <TIM4_IRQHandler+0x530>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fba1 	bl	8000490 <__aeabi_i2d>
 8001d4e:	4604      	mov	r4, r0
 8001d50:	460d      	mov	r5, r1
 8001d52:	4b72      	ldr	r3, [pc, #456]	; (8001f1c <TIM4_IRQHandler+0x534>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	3301      	adds	r3, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fb89 	bl	8000470 <__aeabi_ui2d>
 8001d5e:	a368      	add	r3, pc, #416	; (adr r3, 8001f00 <TIM4_IRQHandler+0x518>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fbfe 	bl	8000564 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fe88 	bl	8000a84 <__aeabi_dcmpgt>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d013      	beq.n	8001da2 <TIM4_IRQHandler+0x3ba>
			duty_inner = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001d7a:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <TIM4_IRQHandler+0x534>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fb75 	bl	8000470 <__aeabi_ui2d>
 8001d86:	a35e      	add	r3, pc, #376	; (adr r3, 8001f00 <TIM4_IRQHandler+0x518>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fbea 	bl	8000564 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7fe fe94 	bl	8000ac4 <__aeabi_d2iz>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a5e      	ldr	r2, [pc, #376]	; (8001f18 <TIM4_IRQHandler+0x530>)
 8001da0:	6013      	str	r3, [r2, #0]
		}
	if(duty_middle > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001da2:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <TIM4_IRQHandler+0x538>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fb72 	bl	8000490 <__aeabi_i2d>
 8001dac:	4604      	mov	r4, r0
 8001dae:	460d      	mov	r5, r1
 8001db0:	4b5a      	ldr	r3, [pc, #360]	; (8001f1c <TIM4_IRQHandler+0x534>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	3301      	adds	r3, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fb5a 	bl	8000470 <__aeabi_ui2d>
 8001dbc:	a350      	add	r3, pc, #320	; (adr r3, 8001f00 <TIM4_IRQHandler+0x518>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fbcf 	bl	8000564 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4620      	mov	r0, r4
 8001dcc:	4629      	mov	r1, r5
 8001dce:	f7fe fe59 	bl	8000a84 <__aeabi_dcmpgt>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <TIM4_IRQHandler+0x418>
			duty_middle = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <TIM4_IRQHandler+0x534>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fb46 	bl	8000470 <__aeabi_ui2d>
 8001de4:	a346      	add	r3, pc, #280	; (adr r3, 8001f00 <TIM4_IRQHandler+0x518>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	f7fe fbbb 	bl	8000564 <__aeabi_dmul>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fe65 	bl	8000ac4 <__aeabi_d2iz>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <TIM4_IRQHandler+0x538>)
 8001dfe:	6013      	str	r3, [r2, #0]
		}
	if(duty_outer > ((htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT)){
 8001e00:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <TIM4_IRQHandler+0x520>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb43 	bl	8000490 <__aeabi_i2d>
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	460d      	mov	r5, r1
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <TIM4_IRQHandler+0x534>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fb2b 	bl	8000470 <__aeabi_ui2d>
 8001e1a:	a339      	add	r3, pc, #228	; (adr r3, 8001f00 <TIM4_IRQHandler+0x518>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fba0 	bl	8000564 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4620      	mov	r0, r4
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	f7fe fe2a 	bl	8000a84 <__aeabi_dcmpgt>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d013      	beq.n	8001e5e <TIM4_IRQHandler+0x476>
			duty_outer = (htim1.Init.Period+1)*DUTY_PERCENTAGE_LIMIT;
 8001e36:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <TIM4_IRQHandler+0x534>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb17 	bl	8000470 <__aeabi_ui2d>
 8001e42:	a32f      	add	r3, pc, #188	; (adr r3, 8001f00 <TIM4_IRQHandler+0x518>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fb8c 	bl	8000564 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fe36 	bl	8000ac4 <__aeabi_d2iz>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <TIM4_IRQHandler+0x520>)
 8001e5c:	6013      	str	r3, [r2, #0]
		}

	TIM1->CCR1 = duty_inner;
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <TIM4_IRQHandler+0x530>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <TIM4_IRQHandler+0x53c>)
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_middle;
 8001e66:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <TIM4_IRQHandler+0x538>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <TIM4_IRQHandler+0x53c>)
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_outer;
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <TIM4_IRQHandler+0x520>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <TIM4_IRQHandler+0x53c>)
 8001e74:	63da      	str	r2, [r3, #60]	; 0x3c

	// Send acknowledge if the system reaches steady state
	if (ack_to_be_sent == 1 && inner_pos_error == 0){
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <TIM4_IRQHandler+0x540>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d11e      	bne.n	8001ebc <TIM4_IRQHandler+0x4d4>
 8001e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8a:	d117      	bne.n	8001ebc <TIM4_IRQHandler+0x4d4>
		steady_state_counter++;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <TIM4_IRQHandler+0x544>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <TIM4_IRQHandler+0x544>)
 8001e96:	701a      	strb	r2, [r3, #0]
		if (steady_state_counter == 255){
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <TIM4_IRQHandler+0x544>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2bff      	cmp	r3, #255	; 0xff
 8001e9e:	d111      	bne.n	8001ec4 <TIM4_IRQHandler+0x4dc>
			memcpy(&usb_out, &acknowledge_message, sizeof(usb_out));
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <TIM4_IRQHandler+0x548>)
 8001ea2:	4a24      	ldr	r2, [pc, #144]	; (8001f34 <TIM4_IRQHandler+0x54c>)
 8001ea4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ea8:	e883 0003 	stmia.w	r3, {r0, r1}
			CDC_Transmit_FS(usb_out, sizeof(usb_out));
 8001eac:	2108      	movs	r1, #8
 8001eae:	4820      	ldr	r0, [pc, #128]	; (8001f30 <TIM4_IRQHandler+0x548>)
 8001eb0:	f007 f834 	bl	8008f1c <CDC_Transmit_FS>
			ack_to_be_sent = 0;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <TIM4_IRQHandler+0x540>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
		if (steady_state_counter == 255){
 8001eba:	e003      	b.n	8001ec4 <TIM4_IRQHandler+0x4dc>
		}
	}
	else {
		steady_state_counter = 0;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <TIM4_IRQHandler+0x544>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
	if(error_code == 0 && external_shutdown == 0){
 8001ec2:	e013      	b.n	8001eec <TIM4_IRQHandler+0x504>
 8001ec4:	e012      	b.n	8001eec <TIM4_IRQHandler+0x504>
	}

	}
	else{
		TIM1->CCR1 = 0;
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <TIM4_IRQHandler+0x53c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <TIM4_IRQHandler+0x53c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <TIM4_IRQHandler+0x53c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	63da      	str	r2, [r3, #60]	; 0x3c
		memcpy(&usb_out, &error_message, sizeof(usb_out));
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <TIM4_IRQHandler+0x548>)
 8001eda:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <TIM4_IRQHandler+0x550>)
 8001edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee0:	e883 0003 	stmia.w	r3, {r0, r1}
		CDC_Transmit_FS(usb_out, sizeof(usb_out));
 8001ee4:	2108      	movs	r1, #8
 8001ee6:	4812      	ldr	r0, [pc, #72]	; (8001f30 <TIM4_IRQHandler+0x548>)
 8001ee8:	f007 f818 	bl	8008f1c <CDC_Transmit_FS>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001eec:	4813      	ldr	r0, [pc, #76]	; (8001f3c <TIM4_IRQHandler+0x554>)
 8001eee:	f002 fcdd 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	66666666 	.word	0x66666666
 8001f04:	3fee6666 	.word	0x3fee6666
 8001f08:	20000314 	.word	0x20000314
 8001f0c:	20000024 	.word	0x20000024
 8001f10:	40020400 	.word	0x40020400
 8001f14:	20000318 	.word	0x20000318
 8001f18:	2000030c 	.word	0x2000030c
 8001f1c:	200001a4 	.word	0x200001a4
 8001f20:	20000310 	.word	0x20000310
 8001f24:	40010000 	.word	0x40010000
 8001f28:	2000029e 	.word	0x2000029e
 8001f2c:	2000029f 	.word	0x2000029f
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000010 	.word	0x20000010
 8001f3c:	20000234 	.word	0x20000234

08001f40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

	CDC_Receive_FS(usb_temp,sizeof(usb_temp));
 8001f44:	2108      	movs	r1, #8
 8001f46:	482e      	ldr	r0, [pc, #184]	; (8002000 <OTG_FS_IRQHandler+0xc0>)
 8001f48:	f006 ffd4 	bl	8008ef4 <CDC_Receive_FS>

	if(strcmp((char *)usb_temp, (char *)empty_string) != 0){
 8001f4c:	492d      	ldr	r1, [pc, #180]	; (8002004 <OTG_FS_IRQHandler+0xc4>)
 8001f4e:	482c      	ldr	r0, [pc, #176]	; (8002000 <OTG_FS_IRQHandler+0xc0>)
 8001f50:	f7fe f942 	bl	80001d8 <strcmp>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d047      	beq.n	8001fea <OTG_FS_IRQHandler+0xaa>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f5e:	482a      	ldr	r0, [pc, #168]	; (8002008 <OTG_FS_IRQHandler+0xc8>)
 8001f60:	f000 fbfd 	bl	800275e <HAL_GPIO_TogglePin>

		// Store the data in usb_in array if a non-empty message received
		memcpy(&usb_in, &usb_temp, sizeof(usb_in));
 8001f64:	4b29      	ldr	r3, [pc, #164]	; (800200c <OTG_FS_IRQHandler+0xcc>)
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <OTG_FS_IRQHandler+0xc0>)
 8001f68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f6c:	e883 0003 	stmia.w	r3, {r0, r1}

		/* Parsing USB Message*/
		if(usb_in[0] == 'm'){
 8001f70:	4b26      	ldr	r3, [pc, #152]	; (800200c <OTG_FS_IRQHandler+0xcc>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b6d      	cmp	r3, #109	; 0x6d
 8001f76:	d131      	bne.n	8001fdc <OTG_FS_IRQHandler+0x9c>
			move_x = usb_in[1]*256 + usb_in[2];
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <OTG_FS_IRQHandler+0xcc>)
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <OTG_FS_IRQHandler+0xcc>)
 8001f84:	789b      	ldrb	r3, [r3, #2]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	b21a      	sxth	r2, r3
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <OTG_FS_IRQHandler+0xd0>)
 8001f90:	801a      	strh	r2, [r3, #0]
			move_y = usb_in[3]*256 + usb_in[4];
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <OTG_FS_IRQHandler+0xcc>)
 8001f94:	78db      	ldrb	r3, [r3, #3]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	021b      	lsls	r3, r3, #8
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <OTG_FS_IRQHandler+0xcc>)
 8001f9e:	791b      	ldrb	r3, [r3, #4]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <OTG_FS_IRQHandler+0xd4>)
 8001faa:	801a      	strh	r2, [r3, #0]
			usb_in[4] = move_y%256;
			usb_in[5] = '\n';
			CDC_Transmit_FS(usb_in,sizeof(usb_in));
			*/

			X_ref = X_curr + (float)move_x/10;
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <OTG_FS_IRQHandler+0xd0>)
 8001fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001fbe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <OTG_FS_IRQHandler+0xd8>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <OTG_FS_IRQHandler+0xdc>)
 8001fce:	edc3 7a00 	vstr	s15, [r3]

			// Apply inverse kinematics to update set values
			inverse_kinematics();
 8001fd2:	f7ff fa0d 	bl	80013f0 <inverse_kinematics>
			ack_to_be_sent = 1;
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <OTG_FS_IRQHandler+0xe0>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]

		}
		if(usb_in[0] == 's'){
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <OTG_FS_IRQHandler+0xcc>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b73      	cmp	r3, #115	; 0x73
 8001fe2:	d102      	bne.n	8001fea <OTG_FS_IRQHandler+0xaa>
			external_shutdown = 1;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <OTG_FS_IRQHandler+0xe4>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
		}

	}

	// Clear usb_temp array
	memset(usb_temp, 0, sizeof(usb_temp));
 8001fea:	2208      	movs	r2, #8
 8001fec:	2100      	movs	r1, #0
 8001fee:	4804      	ldr	r0, [pc, #16]	; (8002000 <OTG_FS_IRQHandler+0xc0>)
 8001ff0:	f007 fc10 	bl	8009814 <memset>

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <OTG_FS_IRQHandler+0xe8>)
 8001ff6:	f000 fd40 	bl	8002a7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200002a8 	.word	0x200002a8
 8002004:	200002b0 	.word	0x200002b0
 8002008:	40020800 	.word	0x40020800
 800200c:	200002a0 	.word	0x200002a0
 8002010:	20000280 	.word	0x20000280
 8002014:	20000282 	.word	0x20000282
 8002018:	20000298 	.word	0x20000298
 800201c:	20000294 	.word	0x20000294
 8002020:	2000029e 	.word	0x2000029e
 8002024:	2000029d 	.word	0x2000029d
 8002028:	20001000 	.word	0x20001000

0800202c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <SystemInit+0x20>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <SystemInit+0x20>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002056:	490e      	ldr	r1, [pc, #56]	; (8002090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800206c:	4c0b      	ldr	r4, [pc, #44]	; (800209c <LoopFillZerobss+0x26>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800207a:	f7ff ffd7 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207e:	f007 fba5 	bl	80097cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002082:	f7fe ff19 	bl	8000eb8 <main>
  bx  lr    
 8002086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002088:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002090:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8002094:	0800b108 	.word	0x0800b108
  ldr r2, =_sbss
 8002098:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 800209c:	2000172c 	.word	0x2000172c

080020a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC_IRQHandler>
	...

080020a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_Init+0x40>)
 80020ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_Init+0x40>)
 80020ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_Init+0x40>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020cc:	2003      	movs	r0, #3
 80020ce:	f000 f94f 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d2:	200f      	movs	r0, #15
 80020d4:	f000 f808 	bl	80020e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d8:	f7ff fb0a 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00

080020e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_InitTick+0x54>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_InitTick+0x58>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002102:	fbb2 f3f3 	udiv	r3, r2, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f967 	bl	80023da <HAL_SYSTICK_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00e      	b.n	8002134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d80a      	bhi.n	8002132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f000 f92f 	bl	8002386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002128:	4a06      	ldr	r2, [pc, #24]	; (8002144 <HAL_InitTick+0x5c>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000028 	.word	0x20000028
 8002140:	20000030 	.word	0x20000030
 8002144:	2000002c 	.word	0x2000002c

08002148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x20>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x24>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_IncTick+0x24>)
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000030 	.word	0x20000030
 800216c:	2000031c 	.word	0x2000031c

08002170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	2000031c 	.word	0x2000031c

08002188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d005      	beq.n	80021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_Delay+0x44>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ae:	bf00      	nop
 80021b0:	f7ff ffde 	bl	8002170 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d8f7      	bhi.n	80021b0 <HAL_Delay+0x28>
  {
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000030 	.word	0x20000030

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <__NVIC_EnableIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	; (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	; (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800233c:	d301      	bcc.n	8002342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233e:	2301      	movs	r3, #1
 8002340:	e00f      	b.n	8002362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <SysTick_Config+0x40>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234a:	210f      	movs	r1, #15
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f7ff ff8e 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <SysTick_Config+0x40>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <SysTick_Config+0x40>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff29 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002398:	f7ff ff3e 	bl	8002218 <__NVIC_GetPriorityGrouping>
 800239c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f7ff ff8e 	bl	80022c4 <NVIC_EncodePriority>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff5d 	bl	8002270 <__NVIC_SetPriority>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff31 	bl	8002234 <__NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffa2 	bl	800232c <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	e159      	b.n	80026c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	429a      	cmp	r2, r3
 800242a:	f040 8148 	bne.w	80026be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d005      	beq.n	8002446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	2b02      	cmp	r3, #2
 8002444:	d130      	bne.n	80024a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 0201 	and.w	r2, r3, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d017      	beq.n	80024e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d123      	bne.n	8002538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3208      	adds	r2, #8
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0203 	and.w	r2, r3, #3
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a2 	beq.w	80026be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b57      	ldr	r3, [pc, #348]	; (80026dc <HAL_GPIO_Init+0x2e8>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a56      	ldr	r2, [pc, #344]	; (80026dc <HAL_GPIO_Init+0x2e8>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b54      	ldr	r3, [pc, #336]	; (80026dc <HAL_GPIO_Init+0x2e8>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002596:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_GPIO_Init+0x2ec>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a49      	ldr	r2, [pc, #292]	; (80026e4 <HAL_GPIO_Init+0x2f0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d019      	beq.n	80025f6 <HAL_GPIO_Init+0x202>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a48      	ldr	r2, [pc, #288]	; (80026e8 <HAL_GPIO_Init+0x2f4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0x1fe>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a47      	ldr	r2, [pc, #284]	; (80026ec <HAL_GPIO_Init+0x2f8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00d      	beq.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a46      	ldr	r2, [pc, #280]	; (80026f0 <HAL_GPIO_Init+0x2fc>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <HAL_GPIO_Init+0x1f6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a45      	ldr	r2, [pc, #276]	; (80026f4 <HAL_GPIO_Init+0x300>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_GPIO_Init+0x1f2>
 80025e2:	2304      	movs	r3, #4
 80025e4:	e008      	b.n	80025f8 <HAL_GPIO_Init+0x204>
 80025e6:	2307      	movs	r3, #7
 80025e8:	e006      	b.n	80025f8 <HAL_GPIO_Init+0x204>
 80025ea:	2303      	movs	r3, #3
 80025ec:	e004      	b.n	80025f8 <HAL_GPIO_Init+0x204>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e002      	b.n	80025f8 <HAL_GPIO_Init+0x204>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_GPIO_Init+0x204>
 80025f6:	2300      	movs	r3, #0
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	f002 0203 	and.w	r2, r2, #3
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	4093      	lsls	r3, r2
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002608:	4935      	ldr	r1, [pc, #212]	; (80026e0 <HAL_GPIO_Init+0x2ec>)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	089b      	lsrs	r3, r3, #2
 800260e:	3302      	adds	r3, #2
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002616:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <HAL_GPIO_Init+0x304>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263a:	4a2f      	ldr	r2, [pc, #188]	; (80026f8 <HAL_GPIO_Init+0x304>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_GPIO_Init+0x304>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002664:	4a24      	ldr	r2, [pc, #144]	; (80026f8 <HAL_GPIO_Init+0x304>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_GPIO_Init+0x304>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800268e:	4a1a      	ldr	r2, [pc, #104]	; (80026f8 <HAL_GPIO_Init+0x304>)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_GPIO_Init+0x304>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b8:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <HAL_GPIO_Init+0x304>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	f67f aea2 	bls.w	8002410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40013800 	.word	0x40013800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	40020400 	.word	0x40020400
 80026ec:	40020800 	.word	0x40020800
 80026f0:	40020c00 	.word	0x40020c00
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40013c00 	.word	0x40013c00

080026fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e001      	b.n	800271e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
 8002738:	4613      	mov	r3, r2
 800273a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002770:	887a      	ldrh	r2, [r7, #2]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4013      	ands	r3, r2
 8002776:	041a      	lsls	r2, r3, #16
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43d9      	mvns	r1, r3
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	400b      	ands	r3, r1
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f806 	bl	80027c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027dc:	b08f      	sub	sp, #60	; 0x3c
 80027de:	af0a      	add	r7, sp, #40	; 0x28
 80027e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e10f      	b.n	8002a0c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f006 fcd0 	bl	80091ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2203      	movs	r2, #3
 8002810:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 ffb7 	bl	800579e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	687e      	ldr	r6, [r7, #4]
 8002838:	466d      	mov	r5, sp
 800283a:	f106 0410 	add.w	r4, r6, #16
 800283e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800284a:	e885 0003 	stmia.w	r5, {r0, r1}
 800284e:	1d33      	adds	r3, r6, #4
 8002850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002852:	6838      	ldr	r0, [r7, #0]
 8002854:	f002 fe8e 	bl	8005574 <USB_CoreInit>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0d0      	b.n	8002a0c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f002 ffa5 	bl	80057c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	e04a      	b.n	8002912 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	333d      	adds	r3, #61	; 0x3d
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	333c      	adds	r3, #60	; 0x3c
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	b298      	uxth	r0, r3
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3344      	adds	r3, #68	; 0x44
 80028b8:	4602      	mov	r2, r0
 80028ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3340      	adds	r3, #64	; 0x40
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028d0:	7bfa      	ldrb	r2, [r7, #15]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3348      	adds	r3, #72	; 0x48
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334c      	adds	r3, #76	; 0x4c
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3354      	adds	r3, #84	; 0x54
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	3301      	adds	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	d3af      	bcc.n	800287c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	e044      	b.n	80029ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	3301      	adds	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d3b5      	bcc.n	8002922 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	687e      	ldr	r6, [r7, #4]
 80029be:	466d      	mov	r5, sp
 80029c0:	f106 0410 	add.w	r4, r6, #16
 80029c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80029d4:	1d33      	adds	r3, r6, #4
 80029d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d8:	6838      	ldr	r0, [r7, #0]
 80029da:	f002 ff3d 	bl	8005858 <USB_DevInit>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e00d      	b.n	8002a0c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 f88c 	bl	8006b22 <USB_DevDisconnect>

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a14 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_PCD_Start+0x1c>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e020      	b.n	8002a72 <HAL_PCD_Start+0x5e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d109      	bne.n	8002a54 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d005      	beq.n	8002a54 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fe8f 	bl	800577c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 f83c 	bl	8006ae0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a7a:	b590      	push	{r4, r7, lr}
 8002a7c:	b08d      	sub	sp, #52	; 0x34
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 f8fa 	bl	8006c8a <USB_GetMode>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 848a 	bne.w	80033b2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 f85e 	bl	8006b64 <USB_ReadInterrupts>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8480 	beq.w	80033b0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 f84b 	bl	8006b64 <USB_ReadInterrupts>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d107      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f002 0202 	and.w	r2, r2, #2
 8002ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 f839 	bl	8006b64 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d161      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0210 	bic.w	r2, r2, #16
 8002b0a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	3304      	adds	r3, #4
 8002b2a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	0c5b      	lsrs	r3, r3, #17
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d124      	bne.n	8002b82 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d035      	beq.n	8002bb0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6a38      	ldr	r0, [r7, #32]
 8002b58:	f003 fe70 	bl	800683c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b68:	441a      	add	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b7a:	441a      	add	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	621a      	str	r2, [r3, #32]
 8002b80:	e016      	b.n	8002bb0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	0c5b      	lsrs	r3, r3, #17
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d110      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b94:	2208      	movs	r2, #8
 8002b96:	4619      	mov	r1, r3
 8002b98:	6a38      	ldr	r0, [r7, #32]
 8002b9a:	f003 fe4f 	bl	800683c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002baa:	441a      	add	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0210 	orr.w	r2, r2, #16
 8002bbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 ffcd 	bl	8006b64 <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bd4:	f040 80a7 	bne.w	8002d26 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 ffd2 	bl	8006b8a <USB_ReadDevAllOutEpInterrupt>
 8002be6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002be8:	e099      	b.n	8002d1e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 808e 	beq.w	8002d12 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 fff6 	bl	8006bf2 <USB_ReadDevOutEPInterrupt>
 8002c06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00c      	beq.n	8002c2c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2301      	movs	r3, #1
 8002c22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fec2 	bl	80039b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c42:	461a      	mov	r2, r3
 8002c44:	2308      	movs	r3, #8
 8002c46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 ff98 	bl	8003b80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c66:	461a      	mov	r2, r3
 8002c68:	2310      	movs	r3, #16
 8002c6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d030      	beq.n	8002cd8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d109      	bne.n	8002c96 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c94:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	78db      	ldrb	r3, [r3, #3]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d108      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f006 fb6f 	bl	80093a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2320      	movs	r3, #32
 8002cf2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d10:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	3301      	adds	r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f47f af62 	bne.w	8002bea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f003 ff1a 	bl	8006b64 <USB_ReadInterrupts>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d3a:	f040 80db 	bne.w	8002ef4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 ff3b 	bl	8006bbe <USB_ReadDevAllInEpInterrupt>
 8002d48:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d4e:	e0cd      	b.n	8002eec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80c2 	beq.w	8002ee0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 ff61 	bl	8006c2e <USB_ReadDevInEPInterrupt>
 8002d6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d057      	beq.n	8002e28 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	2201      	movs	r2, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69f9      	ldr	r1, [r7, #28]
 8002d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d98:	4013      	ands	r3, r2
 8002d9a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da8:	461a      	mov	r2, r3
 8002daa:	2301      	movs	r3, #1
 8002dac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d132      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	334c      	adds	r3, #76	; 0x4c
 8002dc6:	6819      	ldr	r1, [r3, #0]
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4403      	add	r3, r0
 8002dd6:	3348      	adds	r3, #72	; 0x48
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4419      	add	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4403      	add	r3, r0
 8002dea:	334c      	adds	r3, #76	; 0x4c
 8002dec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d113      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x3a2>
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	3354      	adds	r3, #84	; 0x54
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e14:	461a      	mov	r2, r3
 8002e16:	2101      	movs	r1, #1
 8002e18:	f003 ff68 	bl	8006cec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f006 fa43 	bl	80092ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2308      	movs	r3, #8
 8002e42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d008      	beq.n	8002e60 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e76:	461a      	mov	r2, r3
 8002e78:	2340      	movs	r3, #64	; 0x40
 8002e7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d023      	beq.n	8002ece <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e88:	6a38      	ldr	r0, [r7, #32]
 8002e8a:	f002 fe49 	bl	8005b20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	3338      	adds	r3, #56	; 0x38
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	78db      	ldrb	r3, [r3, #3]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d108      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2200      	movs	r2, #0
 8002eae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f006 fa86 	bl	80093c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2302      	movs	r3, #2
 8002ecc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fcdb 	bl	8003896 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f47f af2e 	bne.w	8002d50 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 fe33 	bl	8006b64 <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f08:	d122      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d108      	bne.n	8002f3a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f30:	2100      	movs	r1, #0
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fec2 	bl	8003cbc <HAL_PCDEx_LPM_Callback>
 8002f38:	e002      	b.n	8002f40 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f006 fa24 	bl	8009388 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fe05 	bl	8006b64 <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f64:	d112      	bne.n	8002f8c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d102      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f006 f9e0 	bl	800933c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f8a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 fde7 	bl	8006b64 <USB_ReadInterrupts>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa0:	f040 80b7 	bne.w	8003112 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb2:	f023 0301 	bic.w	r3, r3, #1
 8002fb6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2110      	movs	r1, #16
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f002 fdae 	bl	8005b20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc8:	e046      	b.n	8003058 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fdc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fee:	0151      	lsls	r1, r2, #5
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	440a      	add	r2, r1
 8002ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ffc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300a:	461a      	mov	r2, r3
 800300c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003010:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003022:	0151      	lsls	r1, r2, #5
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	440a      	add	r2, r1
 8003028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800302c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003030:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003042:	0151      	lsls	r1, r2, #5
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	440a      	add	r2, r1
 8003048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800304c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003050:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	3301      	adds	r3, #1
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305e:	429a      	cmp	r2, r3
 8003060:	d3b3      	bcc.n	8002fca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003070:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003074:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308e:	f043 030b 	orr.w	r3, r3, #11
 8003092:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a4:	f043 030b 	orr.w	r3, r3, #11
 80030a8:	6453      	str	r3, [r2, #68]	; 0x44
 80030aa:	e015      	b.n	80030d8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030be:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d2:	f043 030b 	orr.w	r3, r3, #11
 80030d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80030ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030fc:	461a      	mov	r2, r3
 80030fe:	f003 fdf5 	bl	8006cec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fd24 	bl	8006b64 <USB_ReadInterrupts>
 800311c:	4603      	mov	r3, r0
 800311e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003126:	d124      	bne.n	8003172 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f003 fdba 	bl	8006ca6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f002 fd6f 	bl	8005c1a <USB_GetDevSpeed>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681c      	ldr	r4, [r3, #0]
 8003148:	f001 f9e8 	bl	800451c <HAL_RCC_GetHCLKFreq>
 800314c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	4620      	mov	r0, r4
 8003158:	f002 fa6e 	bl	8005638 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f006 f8ce 	bl	80092fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003170:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fcf4 	bl	8006b64 <USB_ReadInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d10a      	bne.n	800319c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f006 f8ab 	bl	80092e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f002 0208 	and.w	r2, r2, #8
 800319a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fcdf 	bl	8006b64 <USB_ReadInterrupts>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d122      	bne.n	80031f6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031bc:	2301      	movs	r3, #1
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
 80031c0:	e014      	b.n	80031ec <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d105      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fb27 	bl	8003834 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	3301      	adds	r3, #1
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d3e5      	bcc.n	80031c2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 fcb2 	bl	8006b64 <USB_ReadInterrupts>
 8003200:	4603      	mov	r3, r0
 8003202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800320a:	d13b      	bne.n	8003284 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800320c:	2301      	movs	r3, #1
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
 8003210:	e02b      	b.n	800326a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	3340      	adds	r3, #64	; 0x40
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d115      	bne.n	8003264 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003238:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	da12      	bge.n	8003264 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	333f      	adds	r3, #63	; 0x3f
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fae8 	bl	8003834 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	3301      	adds	r3, #1
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	429a      	cmp	r2, r3
 8003272:	d3ce      	bcc.n	8003212 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f003 fc6b 	bl	8006b64 <USB_ReadInterrupts>
 800328e:	4603      	mov	r3, r0
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003298:	d155      	bne.n	8003346 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800329a:	2301      	movs	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	e045      	b.n	800332c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d12e      	bne.n	8003326 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da2b      	bge.n	8003326 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80032da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032de:	429a      	cmp	r2, r3
 80032e0:	d121      	bne.n	8003326 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800331e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003322:	6053      	str	r3, [r2, #4]
            break;
 8003324:	e007      	b.n	8003336 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	3301      	adds	r3, #1
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	429a      	cmp	r2, r3
 8003334:	d3b4      	bcc.n	80032a0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fc0a 	bl	8006b64 <USB_ReadInterrupts>
 8003350:	4603      	mov	r3, r0
 8003352:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335a:	d10a      	bne.n	8003372 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f006 f845 	bl	80093ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f003 fbf4 	bl	8006b64 <USB_ReadInterrupts>
 800337c:	4603      	mov	r3, r0
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b04      	cmp	r3, #4
 8003384:	d115      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f006 f835 	bl	8009408 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	e000      	b.n	80033b2 <HAL_PCD_IRQHandler+0x938>
      return;
 80033b0:	bf00      	nop
    }
  }
}
 80033b2:	3734      	adds	r7, #52	; 0x34
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}

080033b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_PCD_SetAddress+0x1a>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e013      	b.n	80033fa <HAL_PCD_SetAddress+0x42>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fb52 	bl	8006a94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	4608      	mov	r0, r1
 800340c:	4611      	mov	r1, r2
 800340e:	461a      	mov	r2, r3
 8003410:	4603      	mov	r3, r0
 8003412:	70fb      	strb	r3, [r7, #3]
 8003414:	460b      	mov	r3, r1
 8003416:	803b      	strh	r3, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003424:	2b00      	cmp	r3, #0
 8003426:	da0f      	bge.n	8003448 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	f003 020f 	and.w	r2, r3, #15
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	3338      	adds	r3, #56	; 0x38
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4413      	add	r3, r2
 800343c:	3304      	adds	r3, #4
 800343e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	705a      	strb	r2, [r3, #1]
 8003446:	e00f      	b.n	8003468 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	f003 020f 	and.w	r2, r3, #15
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	3304      	adds	r3, #4
 8003460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003474:	883a      	ldrh	r2, [r7, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	78ba      	ldrb	r2, [r7, #2]
 800347e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	785b      	ldrb	r3, [r3, #1]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d004      	beq.n	8003492 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003492:	78bb      	ldrb	r3, [r7, #2]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d102      	bne.n	800349e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_PCD_EP_Open+0xaa>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e00e      	b.n	80034ca <HAL_PCD_EP_Open+0xc8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68f9      	ldr	r1, [r7, #12]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fbd2 	bl	8005c64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80034c8:	7afb      	ldrb	r3, [r7, #11]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da0f      	bge.n	8003506 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	3338      	adds	r3, #56	; 0x38
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	3304      	adds	r3, #4
 80034fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	705a      	strb	r2, [r3, #1]
 8003504:	e00f      	b.n	8003526 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	f003 020f 	and.w	r2, r3, #15
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_PCD_EP_Close+0x6e>
 800353c:	2302      	movs	r3, #2
 800353e:	e00e      	b.n	800355e <HAL_PCD_EP_Close+0x8c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68f9      	ldr	r1, [r7, #12]
 800354e:	4618      	mov	r0, r3
 8003550:	f002 fc10 	bl	8005d74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b086      	sub	sp, #24
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	460b      	mov	r3, r1
 8003574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003576:	7afb      	ldrb	r3, [r7, #11]
 8003578:	f003 020f 	and.w	r2, r3, #15
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	3304      	adds	r3, #4
 800358e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2200      	movs	r2, #0
 80035a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2200      	movs	r2, #0
 80035a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a8:	7afb      	ldrb	r3, [r7, #11]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d102      	bne.n	80035c2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035c2:	7afb      	ldrb	r3, [r7, #11]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	6979      	ldr	r1, [r7, #20]
 80035da:	f002 feef 	bl	80063bc <USB_EP0StartXfer>
 80035de:	e008      	b.n	80035f2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	6979      	ldr	r1, [r7, #20]
 80035ee:	f002 fc9d 	bl	8005f2c <USB_EPStartXfer>
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	f003 020f 	and.w	r2, r3, #15
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	460b      	mov	r3, r1
 800363a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800363c:	7afb      	ldrb	r3, [r7, #11]
 800363e:	f003 020f 	and.w	r2, r3, #15
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	3338      	adds	r3, #56	; 0x38
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	3304      	adds	r3, #4
 8003652:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2200      	movs	r2, #0
 8003664:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2201      	movs	r2, #1
 800366a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800366c:	7afb      	ldrb	r3, [r7, #11]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	b2da      	uxtb	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d102      	bne.n	8003686 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003686:	7afb      	ldrb	r3, [r7, #11]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	6979      	ldr	r1, [r7, #20]
 800369e:	f002 fe8d 	bl	80063bc <USB_EP0StartXfer>
 80036a2:	e008      	b.n	80036b6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	6979      	ldr	r1, [r7, #20]
 80036b2:	f002 fc3b 	bl	8005f2c <USB_EPStartXfer>
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	f003 020f 	and.w	r2, r3, #15
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d901      	bls.n	80036de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e050      	b.n	8003780 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	da0f      	bge.n	8003706 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	3338      	adds	r3, #56	; 0x38
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	3304      	adds	r3, #4
 80036fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	705a      	strb	r2, [r3, #1]
 8003704:	e00d      	b.n	8003722 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_PCD_EP_SetStall+0x82>
 800373e:	2302      	movs	r3, #2
 8003740:	e01e      	b.n	8003780 <HAL_PCD_EP_SetStall+0xc0>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	4618      	mov	r0, r3
 8003752:	f003 f8cb 	bl	80068ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	b2d9      	uxtb	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003770:	461a      	mov	r2, r3
 8003772:	f003 fabb 	bl	8006cec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	f003 020f 	and.w	r2, r3, #15
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d901      	bls.n	80037a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e042      	b.n	800382c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da0f      	bge.n	80037ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	3338      	adds	r3, #56	; 0x38
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	705a      	strb	r2, [r3, #1]
 80037cc:	e00f      	b.n	80037ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	f003 020f 	and.w	r2, r3, #15
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	3304      	adds	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_PCD_EP_ClrStall+0x86>
 800380a:	2302      	movs	r3, #2
 800380c:	e00e      	b.n	800382c <HAL_PCD_EP_ClrStall+0xa4>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	4618      	mov	r0, r3
 800381e:	f003 f8d3 	bl	80069c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003844:	2b00      	cmp	r3, #0
 8003846:	da0c      	bge.n	8003862 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	3338      	adds	r3, #56	; 0x38
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	3304      	adds	r3, #4
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e00c      	b.n	800387c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	3304      	adds	r3, #4
 800387a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	4618      	mov	r0, r3
 8003884:	f002 fef2 	bl	800666c <USB_EPStopXfer>
 8003888:	4603      	mov	r3, r0
 800388a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800388c:	7afb      	ldrb	r3, [r7, #11]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b08a      	sub	sp, #40	; 0x28
 800389a:	af02      	add	r7, sp, #8
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	3338      	adds	r3, #56	; 0x38
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	4413      	add	r3, r2
 80038ba:	3304      	adds	r3, #4
 80038bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d901      	bls.n	80038ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e06c      	b.n	80039a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d902      	bls.n	80038ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3303      	adds	r3, #3
 80038ee:	089b      	lsrs	r3, r3, #2
 80038f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038f2:	e02b      	b.n	800394c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	429a      	cmp	r2, r3
 8003908:	d902      	bls.n	8003910 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3303      	adds	r3, #3
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6919      	ldr	r1, [r3, #16]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003928:	b2db      	uxtb	r3, r3
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	4603      	mov	r3, r0
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f002 ff46 	bl	80067c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	441a      	add	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	441a      	add	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	b29b      	uxth	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	429a      	cmp	r2, r3
 8003960:	d809      	bhi.n	8003976 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1a      	ldr	r2, [r3, #32]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800396a:	429a      	cmp	r2, r3
 800396c:	d203      	bcs.n	8003976 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1be      	bne.n	80038f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	429a      	cmp	r2, r3
 8003980:	d811      	bhi.n	80039a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	2201      	movs	r2, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	43db      	mvns	r3, r3
 800399c:	6939      	ldr	r1, [r7, #16]
 800399e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a2:	4013      	ands	r3, r2
 80039a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	333c      	adds	r3, #60	; 0x3c
 80039c8:	3304      	adds	r3, #4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d17b      	bne.n	8003ade <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d015      	beq.n	8003a1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4a61      	ldr	r2, [pc, #388]	; (8003b78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f240 80b9 	bls.w	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80b3 	beq.w	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a12:	461a      	mov	r2, r3
 8003a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a18:	6093      	str	r3, [r2, #8]
 8003a1a:	e0a7      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a32:	461a      	mov	r2, r3
 8003a34:	2320      	movs	r3, #32
 8003a36:	6093      	str	r3, [r2, #8]
 8003a38:	e098      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f040 8093 	bne.w	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4a4b      	ldr	r2, [pc, #300]	; (8003b78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d90f      	bls.n	8003a6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a64:	461a      	mov	r2, r3
 8003a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a6a:	6093      	str	r3, [r2, #8]
 8003a6c:	e07e      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	3304      	adds	r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	0159      	lsls	r1, r3, #5
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	440b      	add	r3, r1
 8003a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d114      	bne.n	8003ad0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2101      	movs	r1, #1
 8003abc:	f003 f916 	bl	8006cec <USB_EP0_OutStart>
 8003ac0:	e006      	b.n	8003ad0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	441a      	add	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f005 fbce 	bl	8009278 <HAL_PCD_DataOutStageCallback>
 8003adc:	e046      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d124      	bne.n	8003b30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	6093      	str	r3, [r2, #8]
 8003b04:	e032      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2320      	movs	r3, #32
 8003b20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f005 fba5 	bl	8009278 <HAL_PCD_DataOutStageCallback>
 8003b2e:	e01d      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d114      	bne.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f003 f8c6 	bl	8006cec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f005 fb86 	bl	8009278 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	4f54300a 	.word	0x4f54300a
 8003b7c:	4f54310a 	.word	0x4f54310a

08003b80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	333c      	adds	r3, #60	; 0x3c
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	; (8003c08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d90e      	bls.n	8003bd4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f005 fb3d 	bl	8009254 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d90c      	bls.n	8003bfc <PCD_EP_OutSetupPacket_int+0x7c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d108      	bne.n	8003bfc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	f003 f878 	bl	8006cec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	4f54300a 	.word	0x4f54300a

08003c0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c2a:	883b      	ldrh	r3, [r7, #0]
 8003c2c:	0419      	lsls	r1, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28
 8003c38:	e028      	b.n	8003c8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4413      	add	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e00d      	b.n	8003c6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	3340      	adds	r3, #64	; 0x40
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	4413      	add	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	3301      	adds	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
 8003c6a:	7bfa      	ldrb	r2, [r7, #15]
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d3ec      	bcc.n	8003c4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c74:	883b      	ldrh	r3, [r7, #0]
 8003c76:	0418      	lsls	r0, r3, #16
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	4302      	orrs	r2, r0
 8003c84:	3340      	adds	r3, #64	; 0x40
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e267      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d075      	beq.n	8003dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf2:	4b88      	ldr	r3, [pc, #544]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d00c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfe:	4b85      	ldr	r3, [pc, #532]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d112      	bne.n	8003d30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0a:	4b82      	ldr	r3, [pc, #520]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d16:	d10b      	bne.n	8003d30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	4b7e      	ldr	r3, [pc, #504]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d05b      	beq.n	8003ddc <HAL_RCC_OscConfig+0x108>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d157      	bne.n	8003ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e242      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d106      	bne.n	8003d48 <HAL_RCC_OscConfig+0x74>
 8003d3a:	4b76      	ldr	r3, [pc, #472]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a75      	ldr	r2, [pc, #468]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e01d      	b.n	8003d84 <HAL_RCC_OscConfig+0xb0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x98>
 8003d52:	4b70      	ldr	r3, [pc, #448]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6f      	ldr	r2, [pc, #444]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b6d      	ldr	r3, [pc, #436]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a6c      	ldr	r2, [pc, #432]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCC_OscConfig+0xb0>
 8003d6c:	4b69      	ldr	r3, [pc, #420]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a68      	ldr	r2, [pc, #416]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4b66      	ldr	r3, [pc, #408]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a65      	ldr	r2, [pc, #404]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d013      	beq.n	8003db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fe f9f0 	bl	8002170 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d94:	f7fe f9ec 	bl	8002170 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	; 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e207      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	4b5b      	ldr	r3, [pc, #364]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0xc0>
 8003db2:	e014      	b.n	8003dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe f9dc 	bl	8002170 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fe f9d8 	bl	8002170 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1f3      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	4b51      	ldr	r3, [pc, #324]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0xe8>
 8003dda:	e000      	b.n	8003dde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d063      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dea:	4b4a      	ldr	r3, [pc, #296]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d11c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e02:	4b44      	ldr	r3, [pc, #272]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d116      	bne.n	8003e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_RCC_OscConfig+0x152>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1c7      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4937      	ldr	r1, [pc, #220]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3a:	e03a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e44:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <HAL_RCC_OscConfig+0x244>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe f991 	bl	8002170 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fe f98d 	bl	8002170 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1a8      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4925      	ldr	r1, [pc, #148]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
 8003e84:	e015      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_OscConfig+0x244>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe f970 	bl	8002170 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fe f96c 	bl	8002170 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e187      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d036      	beq.n	8003f2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <HAL_RCC_OscConfig+0x248>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fe f950 	bl	8002170 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7fe f94c 	bl	8002170 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e167      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x200>
 8003ef2:	e01b      	b.n	8003f2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_OscConfig+0x248>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efa:	f7fe f939 	bl	8002170 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	e00e      	b.n	8003f20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f02:	f7fe f935 	bl	8002170 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d907      	bls.n	8003f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e150      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	42470000 	.word	0x42470000
 8003f1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	4b88      	ldr	r3, [pc, #544]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ea      	bne.n	8003f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8097 	beq.w	8004068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3e:	4b81      	ldr	r3, [pc, #516]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b7d      	ldr	r3, [pc, #500]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a7c      	ldr	r2, [pc, #496]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5a:	4b7a      	ldr	r3, [pc, #488]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	4b77      	ldr	r3, [pc, #476]	; (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d118      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f76:	4b74      	ldr	r3, [pc, #464]	; (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a73      	ldr	r2, [pc, #460]	; (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f82:	f7fe f8f5 	bl	8002170 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fe f8f1 	bl	8002170 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e10c      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	4b6a      	ldr	r3, [pc, #424]	; (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2ea>
 8003fb0:	4b64      	ldr	r3, [pc, #400]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4a63      	ldr	r2, [pc, #396]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbc:	e01c      	b.n	8003ff8 <HAL_RCC_OscConfig+0x324>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x30c>
 8003fc6:	4b5f      	ldr	r3, [pc, #380]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a5e      	ldr	r2, [pc, #376]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd2:	4b5c      	ldr	r3, [pc, #368]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	4a5b      	ldr	r2, [pc, #364]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x324>
 8003fe0:	4b58      	ldr	r3, [pc, #352]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4a57      	ldr	r2, [pc, #348]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
 8003fec:	4b55      	ldr	r3, [pc, #340]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	4a54      	ldr	r2, [pc, #336]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	f023 0304 	bic.w	r3, r3, #4
 8003ff6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d015      	beq.n	800402c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fe f8b6 	bl	8002170 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004006:	e00a      	b.n	800401e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fe f8b2 	bl	8002170 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	; 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0cb      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401e:	4b49      	ldr	r3, [pc, #292]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ee      	beq.n	8004008 <HAL_RCC_OscConfig+0x334>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402c:	f7fe f8a0 	bl	8002170 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fe f89c 	bl	8002170 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e0b5      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404a:	4b3e      	ldr	r3, [pc, #248]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ee      	bne.n	8004034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405c:	4b39      	ldr	r3, [pc, #228]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	4a38      	ldr	r2, [pc, #224]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8004062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004066:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80a1 	beq.w	80041b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004072:	4b34      	ldr	r3, [pc, #208]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b08      	cmp	r3, #8
 800407c:	d05c      	beq.n	8004138 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d141      	bne.n	800410a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b31      	ldr	r3, [pc, #196]	; (800414c <HAL_RCC_OscConfig+0x478>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe f870 	bl	8002170 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe f86c 	bl	8002170 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e087      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b27      	ldr	r3, [pc, #156]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	3b01      	subs	r3, #1
 80040cc:	041b      	lsls	r3, r3, #16
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	491b      	ldr	r1, [pc, #108]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x478>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fe f845 	bl	8002170 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fe f841 	bl	8002170 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e05c      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x416>
 8004108:	e054      	b.n	80041b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_RCC_OscConfig+0x478>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fe f82e 	bl	8002170 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004118:	f7fe f82a 	bl	8002170 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e045      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCC_OscConfig+0x470>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x444>
 8004136:	e03d      	b.n	80041b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e038      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
 8004144:	40023800 	.word	0x40023800
 8004148:	40007000 	.word	0x40007000
 800414c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x4ec>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d028      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d121      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d11a      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004188:	4293      	cmp	r3, r2
 800418a:	d111      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800

080041c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0cc      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b68      	ldr	r3, [pc, #416]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d90c      	bls.n	8004200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b8      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004218:	4b59      	ldr	r3, [pc, #356]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a58      	ldr	r2, [pc, #352]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a52      	ldr	r2, [pc, #328]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800423a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b50      	ldr	r3, [pc, #320]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	494d      	ldr	r1, [pc, #308]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d044      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d119      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d003      	beq.n	8004282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e06f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	4b3b      	ldr	r3, [pc, #236]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e067      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b37      	ldr	r3, [pc, #220]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4934      	ldr	r1, [pc, #208]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fd ff5c 	bl	8002170 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fd ff58 	bl	8002170 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d20c      	bcs.n	800430c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e032      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4916      	ldr	r1, [pc, #88]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	490e      	ldr	r1, [pc, #56]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800434a:	f000 f821 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 800434e:	4602      	mov	r2, r0
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	490a      	ldr	r1, [pc, #40]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	5ccb      	ldrb	r3, [r1, r3]
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd febc 	bl	80020e8 <HAL_InitTick>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023c00 	.word	0x40023c00
 8004380:	40023800 	.word	0x40023800
 8004384:	0800aed0 	.word	0x0800aed0
 8004388:	20000028 	.word	0x20000028
 800438c:	2000002c 	.word	0x2000002c

08004390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004394:	b090      	sub	sp, #64	; 0x40
 8004396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
 800439c:	2300      	movs	r3, #0
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a0:	2300      	movs	r3, #0
 80043a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a8:	4b59      	ldr	r3, [pc, #356]	; (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d00d      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x40>
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	f200 80a1 	bhi.w	80044fc <HAL_RCC_GetSysClockFreq+0x16c>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x34>
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x3a>
 80043c2:	e09b      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c4:	4b53      	ldr	r3, [pc, #332]	; (8004514 <HAL_RCC_GetSysClockFreq+0x184>)
 80043c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043c8:	e09b      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ca:	4b53      	ldr	r3, [pc, #332]	; (8004518 <HAL_RCC_GetSysClockFreq+0x188>)
 80043cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043ce:	e098      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d0:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043da:	4b4d      	ldr	r3, [pc, #308]	; (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d028      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e6:	4b4a      	ldr	r3, [pc, #296]	; (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	2200      	movs	r2, #0
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	627a      	str	r2, [r7, #36]	; 0x24
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043f8:	2100      	movs	r1, #0
 80043fa:	4b47      	ldr	r3, [pc, #284]	; (8004518 <HAL_RCC_GetSysClockFreq+0x188>)
 80043fc:	fb03 f201 	mul.w	r2, r3, r1
 8004400:	2300      	movs	r3, #0
 8004402:	fb00 f303 	mul.w	r3, r0, r3
 8004406:	4413      	add	r3, r2
 8004408:	4a43      	ldr	r2, [pc, #268]	; (8004518 <HAL_RCC_GetSysClockFreq+0x188>)
 800440a:	fba0 1202 	umull	r1, r2, r0, r2
 800440e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004410:	460a      	mov	r2, r1
 8004412:	62ba      	str	r2, [r7, #40]	; 0x28
 8004414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004416:	4413      	add	r3, r2
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	2200      	movs	r2, #0
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	61fa      	str	r2, [r7, #28]
 8004422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004426:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800442a:	f7fc fbc3 	bl	8000bb4 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4613      	mov	r3, r2
 8004434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004436:	e053      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004438:	4b35      	ldr	r3, [pc, #212]	; (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	2200      	movs	r2, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	617a      	str	r2, [r7, #20]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800444a:	f04f 0b00 	mov.w	fp, #0
 800444e:	4652      	mov	r2, sl
 8004450:	465b      	mov	r3, fp
 8004452:	f04f 0000 	mov.w	r0, #0
 8004456:	f04f 0100 	mov.w	r1, #0
 800445a:	0159      	lsls	r1, r3, #5
 800445c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004460:	0150      	lsls	r0, r2, #5
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	ebb2 080a 	subs.w	r8, r2, sl
 800446a:	eb63 090b 	sbc.w	r9, r3, fp
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800447a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800447e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004482:	ebb2 0408 	subs.w	r4, r2, r8
 8004486:	eb63 0509 	sbc.w	r5, r3, r9
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	00eb      	lsls	r3, r5, #3
 8004494:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004498:	00e2      	lsls	r2, r4, #3
 800449a:	4614      	mov	r4, r2
 800449c:	461d      	mov	r5, r3
 800449e:	eb14 030a 	adds.w	r3, r4, sl
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	eb45 030b 	adc.w	r3, r5, fp
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044b6:	4629      	mov	r1, r5
 80044b8:	028b      	lsls	r3, r1, #10
 80044ba:	4621      	mov	r1, r4
 80044bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c0:	4621      	mov	r1, r4
 80044c2:	028a      	lsls	r2, r1, #10
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ca:	2200      	movs	r2, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	60fa      	str	r2, [r7, #12]
 80044d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d4:	f7fc fb6e 	bl	8000bb4 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80044f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044fa:	e002      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetSysClockFreq+0x184>)
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004504:	4618      	mov	r0, r3
 8004506:	3740      	adds	r7, #64	; 0x40
 8004508:	46bd      	mov	sp, r7
 800450a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800450e:	bf00      	nop
 8004510:	40023800 	.word	0x40023800
 8004514:	00f42400 	.word	0x00f42400
 8004518:	017d7840 	.word	0x017d7840

0800451c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <HAL_RCC_GetHCLKFreq+0x14>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	20000028 	.word	0x20000028

08004534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e041      	b.n	80045ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fd f8f0 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 fc5e 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e044      	b.n	8004676 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <HAL_TIM_Base_Start_IT+0xb0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d018      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x6c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004616:	d013      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x6c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <HAL_TIM_Base_Start_IT+0xb4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x6c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a19      	ldr	r2, [pc, #100]	; (800468c <HAL_TIM_Base_Start_IT+0xb8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d009      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x6c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a17      	ldr	r2, [pc, #92]	; (8004690 <HAL_TIM_Base_Start_IT+0xbc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <HAL_TIM_Base_Start_IT+0x6c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <HAL_TIM_Base_Start_IT+0xc0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d111      	bne.n	8004664 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b06      	cmp	r3, #6
 8004650:	d010      	beq.n	8004674 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0201 	orr.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004662:	e007      	b.n	8004674 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40010000 	.word	0x40010000
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40014000 	.word	0x40014000

08004698 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e041      	b.n	800472e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f839 	bl	8004736 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f000 fbac 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_TIM_PWM_Start+0x24>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e022      	b.n	80047b6 <HAL_TIM_PWM_Start+0x6a>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d109      	bne.n	800478a <HAL_TIM_PWM_Start+0x3e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e015      	b.n	80047b6 <HAL_TIM_PWM_Start+0x6a>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d109      	bne.n	80047a4 <HAL_TIM_PWM_Start+0x58>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e008      	b.n	80047b6 <HAL_TIM_PWM_Start+0x6a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e068      	b.n	8004890 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_PWM_Start+0x82>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	e013      	b.n	80047f6 <HAL_TIM_PWM_Start+0xaa>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Start+0x92>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047dc:	e00b      	b.n	80047f6 <HAL_TIM_PWM_Start+0xaa>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0xa2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ec:	e003      	b.n	80047f6 <HAL_TIM_PWM_Start+0xaa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2201      	movs	r2, #1
 80047fc:	6839      	ldr	r1, [r7, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fdbe 	bl	8005380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a23      	ldr	r2, [pc, #140]	; (8004898 <HAL_TIM_PWM_Start+0x14c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d107      	bne.n	800481e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <HAL_TIM_PWM_Start+0x14c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d013      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a19      	ldr	r2, [pc, #100]	; (800489c <HAL_TIM_PWM_Start+0x150>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <HAL_TIM_PWM_Start+0x154>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <HAL_TIM_PWM_Start+0x158>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_TIM_PWM_Start+0x10e>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a14      	ldr	r2, [pc, #80]	; (80048a8 <HAL_TIM_PWM_Start+0x15c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d111      	bne.n	800487e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b06      	cmp	r3, #6
 800486a:	d010      	beq.n	800488e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	e007      	b.n	800488e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40010000 	.word	0x40010000
 800489c:	40000400 	.word	0x40000400
 80048a0:	40000800 	.word	0x40000800
 80048a4:	40000c00 	.word	0x40000c00
 80048a8:	40014000 	.word	0x40014000

080048ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0202 	mvn.w	r2, #2
 80048d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa81 	bl	8004df6 <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa73 	bl	8004de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fa84 	bl	8004e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b04      	cmp	r3, #4
 8004914:	d122      	bne.n	800495c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b04      	cmp	r3, #4
 8004922:	d11b      	bne.n	800495c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0204 	mvn.w	r2, #4
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa57 	bl	8004df6 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa49 	bl	8004de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa5a 	bl	8004e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b08      	cmp	r3, #8
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b08      	cmp	r3, #8
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0208 	mvn.w	r2, #8
 8004980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2204      	movs	r2, #4
 8004986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa2d 	bl	8004df6 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fa1f 	bl	8004de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 fa30 	bl	8004e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0310 	and.w	r3, r3, #16
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0210 	mvn.w	r2, #16
 80049d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2208      	movs	r2, #8
 80049da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa03 	bl	8004df6 <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f9f5 	bl	8004de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa06 	bl	8004e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0201 	mvn.w	r2, #1
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9cf 	bl	8004dce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a48:	2b80      	cmp	r3, #128	; 0x80
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fd82 	bl	8005560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b40      	cmp	r3, #64	; 0x40
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f9cb 	bl	8004e1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d10e      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d107      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0220 	mvn.w	r2, #32
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fd4c 	bl	800554c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e0ae      	b.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b0c      	cmp	r3, #12
 8004ae6:	f200 809f 	bhi.w	8004c28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aea:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af0:	08004b25 	.word	0x08004b25
 8004af4:	08004c29 	.word	0x08004c29
 8004af8:	08004c29 	.word	0x08004c29
 8004afc:	08004c29 	.word	0x08004c29
 8004b00:	08004b65 	.word	0x08004b65
 8004b04:	08004c29 	.word	0x08004c29
 8004b08:	08004c29 	.word	0x08004c29
 8004b0c:	08004c29 	.word	0x08004c29
 8004b10:	08004ba7 	.word	0x08004ba7
 8004b14:	08004c29 	.word	0x08004c29
 8004b18:	08004c29 	.word	0x08004c29
 8004b1c:	08004c29 	.word	0x08004c29
 8004b20:	08004be7 	.word	0x08004be7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fa02 	bl	8004f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0208 	orr.w	r2, r2, #8
 8004b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0204 	bic.w	r2, r2, #4
 8004b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6999      	ldr	r1, [r3, #24]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	619a      	str	r2, [r3, #24]
      break;
 8004b62:	e064      	b.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fa48 	bl	8005000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6999      	ldr	r1, [r3, #24]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	021a      	lsls	r2, r3, #8
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	619a      	str	r2, [r3, #24]
      break;
 8004ba4:	e043      	b.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 fa93 	bl	80050d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0208 	orr.w	r2, r2, #8
 8004bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0204 	bic.w	r2, r2, #4
 8004bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69d9      	ldr	r1, [r3, #28]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	61da      	str	r2, [r3, #28]
      break;
 8004be4:	e023      	b.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fadd 	bl	80051ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69d9      	ldr	r1, [r3, #28]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	021a      	lsls	r2, r3, #8
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	61da      	str	r2, [r3, #28]
      break;
 8004c26:	e002      	b.n	8004c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIM_ConfigClockSource+0x1c>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e0b4      	b.n	8004dc6 <HAL_TIM_ConfigClockSource+0x186>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c94:	d03e      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0xd4>
 8004c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9a:	f200 8087 	bhi.w	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca2:	f000 8086 	beq.w	8004db2 <HAL_TIM_ConfigClockSource+0x172>
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	d87f      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b70      	cmp	r3, #112	; 0x70
 8004cae:	d01a      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0xa6>
 8004cb0:	2b70      	cmp	r3, #112	; 0x70
 8004cb2:	d87b      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b60      	cmp	r3, #96	; 0x60
 8004cb6:	d050      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x11a>
 8004cb8:	2b60      	cmp	r3, #96	; 0x60
 8004cba:	d877      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b50      	cmp	r3, #80	; 0x50
 8004cbe:	d03c      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0xfa>
 8004cc0:	2b50      	cmp	r3, #80	; 0x50
 8004cc2:	d873      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d058      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x13a>
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d86f      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b30      	cmp	r3, #48	; 0x30
 8004cce:	d064      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b30      	cmp	r3, #48	; 0x30
 8004cd2:	d86b      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d060      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d867      	bhi.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d05c      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d05a      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	e062      	b.n	8004dac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6899      	ldr	r1, [r3, #8]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f000 fb23 	bl	8005340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	609a      	str	r2, [r3, #8]
      break;
 8004d12:	e04f      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6899      	ldr	r1, [r3, #8]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f000 fb0c 	bl	8005340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d36:	609a      	str	r2, [r3, #8]
      break;
 8004d38:	e03c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6859      	ldr	r1, [r3, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	461a      	mov	r2, r3
 8004d48:	f000 fa80 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2150      	movs	r1, #80	; 0x50
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fad9 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004d58:	e02c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6859      	ldr	r1, [r3, #4]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	461a      	mov	r2, r3
 8004d68:	f000 fa9f 	bl	80052aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2160      	movs	r1, #96	; 0x60
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fac9 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004d78:	e01c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6859      	ldr	r1, [r3, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f000 fa60 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2140      	movs	r1, #64	; 0x40
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fab9 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004d98:	e00c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f000 fab0 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004daa:	e003      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      break;
 8004db0:	e000      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a34      	ldr	r2, [pc, #208]	; (8004f18 <TIM_Base_SetConfig+0xe4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00f      	beq.n	8004e6c <TIM_Base_SetConfig+0x38>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d00b      	beq.n	8004e6c <TIM_Base_SetConfig+0x38>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a31      	ldr	r2, [pc, #196]	; (8004f1c <TIM_Base_SetConfig+0xe8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_Base_SetConfig+0x38>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <TIM_Base_SetConfig+0xec>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_Base_SetConfig+0x38>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <TIM_Base_SetConfig+0xf0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d108      	bne.n	8004e7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <TIM_Base_SetConfig+0xe4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01b      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d017      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <TIM_Base_SetConfig+0xe8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a21      	ldr	r2, [pc, #132]	; (8004f20 <TIM_Base_SetConfig+0xec>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00f      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <TIM_Base_SetConfig+0xf0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <TIM_Base_SetConfig+0xf4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <TIM_Base_SetConfig+0xf8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	; (8004f30 <TIM_Base_SetConfig+0xfc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d108      	bne.n	8004ed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a08      	ldr	r2, [pc, #32]	; (8004f18 <TIM_Base_SetConfig+0xe4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d103      	bne.n	8004f04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	615a      	str	r2, [r3, #20]
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40000c00 	.word	0x40000c00
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800

08004f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0302 	bic.w	r3, r3, #2
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <TIM_OC1_SetConfig+0xc8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10c      	bne.n	8004faa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0308 	bic.w	r3, r3, #8
 8004f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <TIM_OC1_SetConfig+0xc8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d111      	bne.n	8004fd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	621a      	str	r2, [r3, #32]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40010000 	.word	0x40010000

08005000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f023 0210 	bic.w	r2, r3, #16
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0320 	bic.w	r3, r3, #32
 800504a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <TIM_OC2_SetConfig+0xd4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10d      	bne.n	800507c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <TIM_OC2_SetConfig+0xd4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d113      	bne.n	80050ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800508a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000

080050d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <TIM_OC3_SetConfig+0xd0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10d      	bne.n	8005152 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <TIM_OC3_SetConfig+0xd0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d113      	bne.n	8005182 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40010000 	.word	0x40010000

080051ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	031b      	lsls	r3, r3, #12
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a10      	ldr	r2, [pc, #64]	; (8005248 <TIM_OC4_SetConfig+0x9c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d109      	bne.n	8005220 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	019b      	lsls	r3, r3, #6
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000

0800524c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 030a 	bic.w	r3, r3, #10
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b087      	sub	sp, #28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0210 	bic.w	r2, r3, #16
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	031b      	lsls	r3, r3, #12
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	f043 0307 	orr.w	r3, r3, #7
 800532c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	021a      	lsls	r2, r3, #8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	431a      	orrs	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	2201      	movs	r2, #1
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1a      	ldr	r2, [r3, #32]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1a      	ldr	r2, [r3, #32]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e050      	b.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d013      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a18      	ldr	r2, [pc, #96]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a16      	ldr	r2, [pc, #88]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d10c      	bne.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4313      	orrs	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40010000 	.word	0x40010000
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40014000 	.word	0x40014000

080054a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e03d      	b.n	8005540 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005574:	b084      	sub	sp, #16
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	f107 001c 	add.w	r0, r7, #28
 8005582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	2b01      	cmp	r3, #1
 800558a:	d122      	bne.n	80055d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d105      	bne.n	80055c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fbee 	bl	8006da8 <USB_CoreReset>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]
 80055d0:	e01a      	b.n	8005608 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f001 fbe2 	bl	8006da8 <USB_CoreReset>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
 80055fa:	e005      	b.n	8005608 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	2b01      	cmp	r3, #1
 800560c:	d10b      	bne.n	8005626 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f043 0206 	orr.w	r2, r3, #6
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f043 0220 	orr.w	r2, r3, #32
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005632:	b004      	add	sp, #16
 8005634:	4770      	bx	lr
	...

08005638 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d165      	bne.n	8005718 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4a41      	ldr	r2, [pc, #260]	; (8005754 <USB_SetTurnaroundTime+0x11c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d906      	bls.n	8005662 <USB_SetTurnaroundTime+0x2a>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4a40      	ldr	r2, [pc, #256]	; (8005758 <USB_SetTurnaroundTime+0x120>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d202      	bcs.n	8005662 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800565c:	230f      	movs	r3, #15
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e062      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4a3c      	ldr	r2, [pc, #240]	; (8005758 <USB_SetTurnaroundTime+0x120>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d306      	bcc.n	8005678 <USB_SetTurnaroundTime+0x40>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	4a3b      	ldr	r2, [pc, #236]	; (800575c <USB_SetTurnaroundTime+0x124>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d202      	bcs.n	8005678 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005672:	230e      	movs	r3, #14
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	e057      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4a38      	ldr	r2, [pc, #224]	; (800575c <USB_SetTurnaroundTime+0x124>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d306      	bcc.n	800568e <USB_SetTurnaroundTime+0x56>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4a37      	ldr	r2, [pc, #220]	; (8005760 <USB_SetTurnaroundTime+0x128>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d202      	bcs.n	800568e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005688:	230d      	movs	r3, #13
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	e04c      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4a33      	ldr	r2, [pc, #204]	; (8005760 <USB_SetTurnaroundTime+0x128>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d306      	bcc.n	80056a4 <USB_SetTurnaroundTime+0x6c>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	4a32      	ldr	r2, [pc, #200]	; (8005764 <USB_SetTurnaroundTime+0x12c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d802      	bhi.n	80056a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800569e:	230c      	movs	r3, #12
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e041      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4a2f      	ldr	r2, [pc, #188]	; (8005764 <USB_SetTurnaroundTime+0x12c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d906      	bls.n	80056ba <USB_SetTurnaroundTime+0x82>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4a2e      	ldr	r2, [pc, #184]	; (8005768 <USB_SetTurnaroundTime+0x130>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d802      	bhi.n	80056ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056b4:	230b      	movs	r3, #11
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e036      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <USB_SetTurnaroundTime+0x130>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d906      	bls.n	80056d0 <USB_SetTurnaroundTime+0x98>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4a29      	ldr	r2, [pc, #164]	; (800576c <USB_SetTurnaroundTime+0x134>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d802      	bhi.n	80056d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80056ca:	230a      	movs	r3, #10
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e02b      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4a26      	ldr	r2, [pc, #152]	; (800576c <USB_SetTurnaroundTime+0x134>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d906      	bls.n	80056e6 <USB_SetTurnaroundTime+0xae>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4a25      	ldr	r2, [pc, #148]	; (8005770 <USB_SetTurnaroundTime+0x138>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d202      	bcs.n	80056e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80056e0:	2309      	movs	r3, #9
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	e020      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4a21      	ldr	r2, [pc, #132]	; (8005770 <USB_SetTurnaroundTime+0x138>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d306      	bcc.n	80056fc <USB_SetTurnaroundTime+0xc4>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4a20      	ldr	r2, [pc, #128]	; (8005774 <USB_SetTurnaroundTime+0x13c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d802      	bhi.n	80056fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80056f6:	2308      	movs	r3, #8
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e015      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <USB_SetTurnaroundTime+0x13c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d906      	bls.n	8005712 <USB_SetTurnaroundTime+0xda>
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <USB_SetTurnaroundTime+0x140>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d202      	bcs.n	8005712 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800570c:	2307      	movs	r3, #7
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e00a      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005712:	2306      	movs	r3, #6
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	e007      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800571e:	2309      	movs	r3, #9
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e001      	b.n	8005728 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005724:	2309      	movs	r3, #9
 8005726:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	029b      	lsls	r3, r3, #10
 800573c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005740:	431a      	orrs	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	00d8acbf 	.word	0x00d8acbf
 8005758:	00e4e1c0 	.word	0x00e4e1c0
 800575c:	00f42400 	.word	0x00f42400
 8005760:	01067380 	.word	0x01067380
 8005764:	011a499f 	.word	0x011a499f
 8005768:	01312cff 	.word	0x01312cff
 800576c:	014ca43f 	.word	0x014ca43f
 8005770:	016e3600 	.word	0x016e3600
 8005774:	01a6ab1f 	.word	0x01a6ab1f
 8005778:	01e84800 	.word	0x01e84800

0800577c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f043 0201 	orr.w	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f023 0201 	bic.w	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d115      	bne.n	800580e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f7fc fcca 	bl	8002188 <HAL_Delay>
      ms++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 fa45 	bl	8006c8a <USB_GetMode>
 8005800:	4603      	mov	r3, r0
 8005802:	2b01      	cmp	r3, #1
 8005804:	d01e      	beq.n	8005844 <USB_SetCurrentMode+0x84>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b31      	cmp	r3, #49	; 0x31
 800580a:	d9f0      	bls.n	80057ee <USB_SetCurrentMode+0x2e>
 800580c:	e01a      	b.n	8005844 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d115      	bne.n	8005840 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005820:	2001      	movs	r0, #1
 8005822:	f7fc fcb1 	bl	8002188 <HAL_Delay>
      ms++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3301      	adds	r3, #1
 800582a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f001 fa2c 	bl	8006c8a <USB_GetMode>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <USB_SetCurrentMode+0x84>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b31      	cmp	r3, #49	; 0x31
 800583c:	d9f0      	bls.n	8005820 <USB_SetCurrentMode+0x60>
 800583e:	e001      	b.n	8005844 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e005      	b.n	8005850 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b32      	cmp	r3, #50	; 0x32
 8005848:	d101      	bne.n	800584e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005858:	b084      	sub	sp, #16
 800585a:	b580      	push	{r7, lr}
 800585c:	b086      	sub	sp, #24
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005872:	2300      	movs	r3, #0
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	e009      	b.n	800588c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	3340      	adds	r3, #64	; 0x40
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	2200      	movs	r2, #0
 8005884:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3301      	adds	r3, #1
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b0e      	cmp	r3, #14
 8005890:	d9f2      	bls.n	8005878 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d11c      	bne.n	80058d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a6:	f043 0302 	orr.w	r3, r3, #2
 80058aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
 80058d0:	e00b      	b.n	80058ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058f0:	461a      	mov	r2, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fc:	4619      	mov	r1, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005904:	461a      	mov	r2, r3
 8005906:	680b      	ldr	r3, [r1, #0]
 8005908:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	2b01      	cmp	r3, #1
 800590e:	d10c      	bne.n	800592a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005916:	2100      	movs	r1, #0
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f965 	bl	8005be8 <USB_SetDevSpeed>
 800591e:	e008      	b.n	8005932 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005920:	2101      	movs	r1, #1
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f960 	bl	8005be8 <USB_SetDevSpeed>
 8005928:	e003      	b.n	8005932 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800592a:	2103      	movs	r1, #3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f95b 	bl	8005be8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005932:	2110      	movs	r1, #16
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f8f3 	bl	8005b20 <USB_FlushTxFifo>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f91f 	bl	8005b88 <USB_FlushRxFifo>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	461a      	mov	r2, r3
 800595c:	2300      	movs	r3, #0
 800595e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	461a      	mov	r2, r3
 8005968:	2300      	movs	r3, #0
 800596a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	461a      	mov	r2, r3
 8005974:	2300      	movs	r3, #0
 8005976:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005978:	2300      	movs	r3, #0
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	e043      	b.n	8005a06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005994:	d118      	bne.n	80059c8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a8:	461a      	mov	r2, r3
 80059aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	e013      	b.n	80059da <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	461a      	mov	r2, r3
 80059c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e008      	b.n	80059da <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	461a      	mov	r2, r3
 80059d6:	2300      	movs	r3, #0
 80059d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	461a      	mov	r2, r3
 80059e8:	2300      	movs	r3, #0
 80059ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	461a      	mov	r2, r3
 80059fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	3301      	adds	r3, #1
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d3b7      	bcc.n	800597e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	e043      	b.n	8005a9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a2a:	d118      	bne.n	8005a5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	e013      	b.n	8005a70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	461a      	mov	r2, r3
 8005a56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	e008      	b.n	8005a70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2300      	movs	r3, #0
 8005a80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d3b7      	bcc.n	8005a14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ab6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ac4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d105      	bne.n	8005ad8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	f043 0210 	orr.w	r2, r3, #16
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <USB_DevInit+0x2c4>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f043 0208 	orr.w	r2, r3, #8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d107      	bne.n	8005b0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b04:	f043 0304 	orr.w	r3, r3, #4
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b18:	b004      	add	sp, #16
 8005b1a:	4770      	bx	lr
 8005b1c:	803c3800 	.word	0x803c3800

08005b20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3301      	adds	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <USB_FlushTxFifo+0x64>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d901      	bls.n	8005b40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e01b      	b.n	8005b78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	daf2      	bge.n	8005b2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	019b      	lsls	r3, r3, #6
 8005b50:	f043 0220 	orr.w	r2, r3, #32
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a08      	ldr	r2, [pc, #32]	; (8005b84 <USB_FlushTxFifo+0x64>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d901      	bls.n	8005b6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e006      	b.n	8005b78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d0f0      	beq.n	8005b58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	00030d40 	.word	0x00030d40

08005b88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a11      	ldr	r2, [pc, #68]	; (8005be4 <USB_FlushRxFifo+0x5c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e018      	b.n	8005bd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	daf2      	bge.n	8005b94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2210      	movs	r2, #16
 8005bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <USB_FlushRxFifo+0x5c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d901      	bls.n	8005bca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e006      	b.n	8005bd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0310 	and.w	r3, r3, #16
 8005bd2:	2b10      	cmp	r3, #16
 8005bd4:	d0f0      	beq.n	8005bb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	00030d40 	.word	0x00030d40

08005be8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0306 	and.w	r3, r3, #6
 8005c32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]
 8005c3e:	e00a      	b.n	8005c56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d002      	beq.n	8005c4c <USB_GetDevSpeed+0x32>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	d102      	bne.n	8005c52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	75fb      	strb	r3, [r7, #23]
 8005c50:	e001      	b.n	8005c56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c52:	230f      	movs	r3, #15
 8005c54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d13a      	bne.n	8005cf6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	2101      	movs	r1, #1
 8005c92:	fa01 f303 	lsl.w	r3, r1, r3
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	68f9      	ldr	r1, [r7, #12]
 8005c9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d155      	bne.n	8005d64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	791b      	ldrb	r3, [r3, #4]
 8005cd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	059b      	lsls	r3, r3, #22
 8005cda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	e036      	b.n	8005d64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	2101      	movs	r1, #1
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d11a      	bne.n	8005d64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	791b      	ldrb	r3, [r3, #4]
 8005d48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d161      	bne.n	8005e54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da6:	d11f      	bne.n	8005de8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005de6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	2101      	movs	r1, #1
 8005dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	43db      	mvns	r3, r3
 8005e02:	68f9      	ldr	r1, [r7, #12]
 8005e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e08:	4013      	ands	r3, r2
 8005e0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	43db      	mvns	r3, r3
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	0159      	lsls	r1, r3, #5
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	440b      	add	r3, r1
 8005e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4b35      	ldr	r3, [pc, #212]	; (8005f24 <USB_DeactivateEndpoint+0x1b0>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]
 8005e52:	e060      	b.n	8005f16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e6a:	d11f      	bne.n	8005eac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	68f9      	ldr	r1, [r7, #12]
 8005ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ecc:	4013      	ands	r3, r2
 8005ece:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	68f9      	ldr	r1, [r7, #12]
 8005eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	0159      	lsls	r1, r3, #5
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	440b      	add	r3, r1
 8005f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <USB_DeactivateEndpoint+0x1b4>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	ec337800 	.word	0xec337800
 8005f28:	eff37800 	.word	0xeff37800

08005f2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	; 0x28
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	4613      	mov	r3, r2
 8005f38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	f040 815c 	bne.w	8006206 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d132      	bne.n	8005fbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb4:	0cdb      	lsrs	r3, r3, #19
 8005fb6:	04db      	lsls	r3, r3, #19
 8005fb8:	6113      	str	r3, [r2, #16]
 8005fba:	e074      	b.n	80060a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd6:	0cdb      	lsrs	r3, r3, #19
 8005fd8:	04db      	lsls	r3, r3, #19
 8005fda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ffa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ffe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6999      	ldr	r1, [r3, #24]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	440b      	add	r3, r1
 8006018:	1e59      	subs	r1, r3, #1
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006022:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006024:	4b9d      	ldr	r3, [pc, #628]	; (800629c <USB_EPStartXfer+0x370>)
 8006026:	400b      	ands	r3, r1
 8006028:	69b9      	ldr	r1, [r7, #24]
 800602a:	0148      	lsls	r0, r1, #5
 800602c:	69f9      	ldr	r1, [r7, #28]
 800602e:	4401      	add	r1, r0
 8006030:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006034:	4313      	orrs	r3, r2
 8006036:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800604e:	69b9      	ldr	r1, [r7, #24]
 8006050:	0148      	lsls	r0, r1, #5
 8006052:	69f9      	ldr	r1, [r7, #28]
 8006054:	4401      	add	r1, r0
 8006056:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800605a:	4313      	orrs	r3, r2
 800605c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	791b      	ldrb	r3, [r3, #4]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d11f      	bne.n	80060a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	440a      	add	r2, r1
 800607c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006080:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006084:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	0151      	lsls	r1, r2, #5
 8006098:	69fa      	ldr	r2, [r7, #28]
 800609a:	440a      	add	r2, r1
 800609c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d14b      	bne.n	8006144 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	461a      	mov	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	791b      	ldrb	r3, [r3, #4]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d128      	bne.n	8006122 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d110      	bne.n	8006102 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	e00f      	b.n	8006122 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006120:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e133      	b.n	80063ac <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006162:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	791b      	ldrb	r3, [r3, #4]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d015      	beq.n	8006198 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 811b 	beq.w	80063ac <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	2101      	movs	r1, #1
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	69f9      	ldr	r1, [r7, #28]
 800618e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006192:	4313      	orrs	r3, r2
 8006194:	634b      	str	r3, [r1, #52]	; 0x34
 8006196:	e109      	b.n	80063ac <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d110      	bne.n	80061ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	e00f      	b.n	80061ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	6919      	ldr	r1, [r3, #16]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	781a      	ldrb	r2, [r3, #0]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	b298      	uxth	r0, r3
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	4603      	mov	r3, r0
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 fade 	bl	80067c0 <USB_WritePacket>
 8006204:	e0d2      	b.n	80063ac <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006220:	0cdb      	lsrs	r3, r3, #19
 8006222:	04db      	lsls	r3, r3, #19
 8006224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	69fa      	ldr	r2, [r7, #28]
 800623a:	440a      	add	r2, r1
 800623c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006240:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006244:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006248:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d126      	bne.n	80062a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	0148      	lsls	r0, r1, #5
 800626c:	69f9      	ldr	r1, [r7, #28]
 800626e:	4401      	add	r1, r0
 8006270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006274:	4313      	orrs	r3, r2
 8006276:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006296:	6113      	str	r3, [r2, #16]
 8006298:	e03a      	b.n	8006310 <USB_EPStartXfer+0x3e4>
 800629a:	bf00      	nop
 800629c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	1e5a      	subs	r2, r3, #1
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	8afa      	ldrh	r2, [r7, #22]
 80062bc:	fb03 f202 	mul.w	r2, r3, r2
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	8afb      	ldrh	r3, [r7, #22]
 80062d4:	04d9      	lsls	r1, r3, #19
 80062d6:	4b38      	ldr	r3, [pc, #224]	; (80063b8 <USB_EPStartXfer+0x48c>)
 80062d8:	400b      	ands	r3, r1
 80062da:	69b9      	ldr	r1, [r7, #24]
 80062dc:	0148      	lsls	r0, r1, #5
 80062de:	69f9      	ldr	r1, [r7, #28]
 80062e0:	4401      	add	r1, r0
 80062e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062e6:	4313      	orrs	r3, r2
 80062e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006300:	69b9      	ldr	r1, [r7, #24]
 8006302:	0148      	lsls	r0, r1, #5
 8006304:	69f9      	ldr	r1, [r7, #28]
 8006306:	4401      	add	r1, r0
 8006308:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800630c:	4313      	orrs	r3, r2
 800630e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10d      	bne.n	8006332 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	6919      	ldr	r1, [r3, #16]
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632e:	460a      	mov	r2, r1
 8006330:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	791b      	ldrb	r3, [r3, #4]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d128      	bne.n	800638c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006346:	2b00      	cmp	r3, #0
 8006348:	d110      	bne.n	800636c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006364:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e00f      	b.n	800638c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3720      	adds	r7, #32
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	1ff80000 	.word	0x1ff80000

080063bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 80ce 	bne.w	800657a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d132      	bne.n	800644c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006408:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006444:	0cdb      	lsrs	r3, r3, #19
 8006446:	04db      	lsls	r3, r3, #19
 8006448:	6113      	str	r3, [r2, #16]
 800644a:	e04e      	b.n	80064ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	0151      	lsls	r1, r2, #5
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	440a      	add	r2, r1
 8006462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006466:	0cdb      	lsrs	r3, r3, #19
 8006468:	04db      	lsls	r3, r3, #19
 800646a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	440a      	add	r2, r1
 8006482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006486:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800648a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800648e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	429a      	cmp	r2, r3
 800649a:	d903      	bls.n	80064a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	691a      	ldr	r2, [r3, #16]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064da:	6939      	ldr	r1, [r7, #16]
 80064dc:	0148      	lsls	r0, r1, #5
 80064de:	6979      	ldr	r1, [r7, #20]
 80064e0:	4401      	add	r1, r0
 80064e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064e6:	4313      	orrs	r3, r2
 80064e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d11e      	bne.n	800652e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006526:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	e097      	b.n	800665e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006548:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800654c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8083 	beq.w	800665e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	2101      	movs	r1, #1
 800656a:	fa01 f303 	lsl.w	r3, r1, r3
 800656e:	6979      	ldr	r1, [r7, #20]
 8006570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006574:	4313      	orrs	r3, r2
 8006576:	634b      	str	r3, [r1, #52]	; 0x34
 8006578:	e071      	b.n	800665e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006594:	0cdb      	lsrs	r3, r3, #19
 8006596:	04db      	lsls	r3, r3, #19
 8006598:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800660c:	6939      	ldr	r1, [r7, #16]
 800660e:	0148      	lsls	r0, r1, #5
 8006610:	6979      	ldr	r1, [r7, #20]
 8006612:	4401      	add	r1, r0
 8006614:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006618:	4313      	orrs	r3, r2
 800661a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d10d      	bne.n	800663e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d009      	beq.n	800663e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6919      	ldr	r1, [r3, #16]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663a:	460a      	mov	r2, r1
 800663c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	440a      	add	r2, r1
 8006654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006658:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800665c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d14a      	bne.n	8006720 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800669e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066a2:	f040 8086 	bne.w	80067b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	7812      	ldrb	r2, [r2, #0]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3301      	adds	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d902      	bls.n	8006704 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
          break;
 8006702:	e056      	b.n	80067b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800671c:	d0e7      	beq.n	80066ee <USB_EPStopXfer+0x82>
 800671e:	e048      	b.n	80067b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006738:	d13b      	bne.n	80067b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	440a      	add	r2, r1
 8006754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800675c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	7812      	ldrb	r2, [r2, #0]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800677c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006780:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3301      	adds	r3, #1
 8006786:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f242 7210 	movw	r2, #10000	; 0x2710
 800678e:	4293      	cmp	r3, r2
 8006790:	d902      	bls.n	8006798 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
          break;
 8006796:	e00c      	b.n	80067b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b0:	d0e7      	beq.n	8006782 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b089      	sub	sp, #36	; 0x24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	460b      	mov	r3, r1
 80067d0:	71fb      	strb	r3, [r7, #7]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80067de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d123      	bne.n	800682e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067e6:	88bb      	ldrh	r3, [r7, #4]
 80067e8:	3303      	adds	r3, #3
 80067ea:	089b      	lsrs	r3, r3, #2
 80067ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067ee:	2300      	movs	r3, #0
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	e018      	b.n	8006826 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	031a      	lsls	r2, r3, #12
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006800:	461a      	mov	r2, r3
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	3301      	adds	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	3301      	adds	r3, #1
 8006812:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	3301      	adds	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3301      	adds	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	3301      	adds	r3, #1
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	429a      	cmp	r2, r3
 800682c:	d3e2      	bcc.n	80067f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3724      	adds	r7, #36	; 0x24
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800683c:	b480      	push	{r7}
 800683e:	b08b      	sub	sp, #44	; 0x2c
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	089b      	lsrs	r3, r3, #2
 8006856:	b29b      	uxth	r3, r3
 8006858:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006862:	2300      	movs	r3, #0
 8006864:	623b      	str	r3, [r7, #32]
 8006866:	e014      	b.n	8006892 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	601a      	str	r2, [r3, #0]
    pDest++;
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	3301      	adds	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	3301      	adds	r3, #1
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	3301      	adds	r3, #1
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	3301      	adds	r3, #1
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	3301      	adds	r3, #1
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	6a3a      	ldr	r2, [r7, #32]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	429a      	cmp	r2, r3
 8006898:	d3e6      	bcc.n	8006868 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800689a:	8bfb      	ldrh	r3, [r7, #30]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01e      	beq.n	80068de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068aa:	461a      	mov	r2, r3
 80068ac:	f107 0310 	add.w	r3, r7, #16
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	fa22 f303 	lsr.w	r3, r2, r3
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	701a      	strb	r2, [r3, #0]
      i++;
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	3301      	adds	r3, #1
 80068ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	3301      	adds	r3, #1
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80068d2:	8bfb      	ldrh	r3, [r7, #30]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80068d8:	8bfb      	ldrh	r3, [r7, #30]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1ea      	bne.n	80068b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	372c      	adds	r7, #44	; 0x2c
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d12c      	bne.n	8006962 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	db12      	blt.n	8006940 <USB_EPSetStall+0x54>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00f      	beq.n	8006940 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800693e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	0151      	lsls	r1, r2, #5
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	440a      	add	r2, r1
 8006956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800695e:	6013      	str	r3, [r2, #0]
 8006960:	e02b      	b.n	80069ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	db12      	blt.n	800699a <USB_EPSetStall+0xae>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00f      	beq.n	800699a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006998:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d128      	bne.n	8006a36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	0151      	lsls	r1, r2, #5
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	440a      	add	r2, r1
 80069fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	791b      	ldrb	r3, [r3, #4]
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d003      	beq.n	8006a14 <USB_EPClearStall+0x4c>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	791b      	ldrb	r3, [r3, #4]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d138      	bne.n	8006a86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	e027      	b.n	8006a86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	0151      	lsls	r1, r2, #5
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	440a      	add	r2, r1
 8006a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	791b      	ldrb	r3, [r3, #4]
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d003      	beq.n	8006a66 <USB_EPClearStall+0x9e>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	791b      	ldrb	r3, [r3, #4]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d10f      	bne.n	8006a86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ab2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ab6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ac8:	68f9      	ldr	r1, [r7, #12]
 8006aca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006afa:	f023 0303 	bic.w	r3, r3, #3
 8006afe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b0e:	f023 0302 	bic.w	r3, r3, #2
 8006b12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b3c:	f023 0303 	bic.w	r3, r3, #3
 8006b40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b50:	f043 0302 	orr.w	r3, r3, #2
 8006b54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	4013      	ands	r3, r2
 8006bac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	0c1b      	lsrs	r3, r3, #16
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	4013      	ands	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	b29b      	uxth	r3, r3
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c20:	68bb      	ldr	r3, [r7, #8]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	01db      	lsls	r3, r3, #7
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f003 0301 	and.w	r3, r3, #1
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cc4:	f023 0307 	bic.w	r3, r3, #7
 8006cc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	333c      	adds	r3, #60	; 0x3c
 8006d02:	3304      	adds	r3, #4
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4a26      	ldr	r2, [pc, #152]	; (8006da4 <USB_EP0_OutStart+0xb8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d90a      	bls.n	8006d26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d20:	d101      	bne.n	8006d26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e037      	b.n	8006d96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d54:	f043 0318 	orr.w	r3, r3, #24
 8006d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d10f      	bne.n	8006d94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006d92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	4f54300a 	.word	0x4f54300a

08006da8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4a13      	ldr	r2, [pc, #76]	; (8006e0c <USB_CoreReset+0x64>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e01b      	b.n	8006dfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	daf2      	bge.n	8006db4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f043 0201 	orr.w	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3301      	adds	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a09      	ldr	r2, [pc, #36]	; (8006e0c <USB_CoreReset+0x64>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d901      	bls.n	8006df0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e006      	b.n	8006dfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d0f0      	beq.n	8006dde <USB_CoreReset+0x36>

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	00030d40 	.word	0x00030d40

08006e10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e20:	f002 fc8a 	bl	8009738 <USBD_static_malloc>
 8006e24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d109      	bne.n	8006e40 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32b0      	adds	r2, #176	; 0xb0
 8006e36:	2100      	movs	r1, #0
 8006e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e0d4      	b.n	8006fea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e40:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e44:	2100      	movs	r1, #0
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f002 fce4 	bl	8009814 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32b0      	adds	r2, #176	; 0xb0
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	32b0      	adds	r2, #176	; 0xb0
 8006e66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	7c1b      	ldrb	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d138      	bne.n	8006eea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e78:	4b5e      	ldr	r3, [pc, #376]	; (8006ff4 <USBD_CDC_Init+0x1e4>)
 8006e7a:	7819      	ldrb	r1, [r3, #0]
 8006e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e80:	2202      	movs	r2, #2
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f002 fb35 	bl	80094f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e88:	4b5a      	ldr	r3, [pc, #360]	; (8006ff4 <USBD_CDC_Init+0x1e4>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	f003 020f 	and.w	r2, r3, #15
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3324      	adds	r3, #36	; 0x24
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ea2:	4b55      	ldr	r3, [pc, #340]	; (8006ff8 <USBD_CDC_Init+0x1e8>)
 8006ea4:	7819      	ldrb	r1, [r3, #0]
 8006ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006eaa:	2202      	movs	r2, #2
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f002 fb20 	bl	80094f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006eb2:	4b51      	ldr	r3, [pc, #324]	; (8006ff8 <USBD_CDC_Init+0x1e8>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	f003 020f 	and.w	r2, r3, #15
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006eca:	2201      	movs	r2, #1
 8006ecc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ece:	4b4b      	ldr	r3, [pc, #300]	; (8006ffc <USBD_CDC_Init+0x1ec>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	f003 020f 	and.w	r2, r3, #15
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	3326      	adds	r3, #38	; 0x26
 8006ee4:	2210      	movs	r2, #16
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	e035      	b.n	8006f56 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006eea:	4b42      	ldr	r3, [pc, #264]	; (8006ff4 <USBD_CDC_Init+0x1e4>)
 8006eec:	7819      	ldrb	r1, [r3, #0]
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f002 fafd 	bl	80094f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ef8:	4b3e      	ldr	r3, [pc, #248]	; (8006ff4 <USBD_CDC_Init+0x1e4>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	f003 020f 	and.w	r2, r3, #15
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3324      	adds	r3, #36	; 0x24
 8006f0e:	2201      	movs	r2, #1
 8006f10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f12:	4b39      	ldr	r3, [pc, #228]	; (8006ff8 <USBD_CDC_Init+0x1e8>)
 8006f14:	7819      	ldrb	r1, [r3, #0]
 8006f16:	2340      	movs	r3, #64	; 0x40
 8006f18:	2202      	movs	r2, #2
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f002 fae9 	bl	80094f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f20:	4b35      	ldr	r3, [pc, #212]	; (8006ff8 <USBD_CDC_Init+0x1e8>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 020f 	and.w	r2, r3, #15
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f38:	2201      	movs	r2, #1
 8006f3a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f3c:	4b2f      	ldr	r3, [pc, #188]	; (8006ffc <USBD_CDC_Init+0x1ec>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f003 020f 	and.w	r2, r3, #15
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	3326      	adds	r3, #38	; 0x26
 8006f52:	2210      	movs	r2, #16
 8006f54:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f56:	4b29      	ldr	r3, [pc, #164]	; (8006ffc <USBD_CDC_Init+0x1ec>)
 8006f58:	7819      	ldrb	r1, [r3, #0]
 8006f5a:	2308      	movs	r3, #8
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 fac7 	bl	80094f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f64:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <USBD_CDC_Init+0x1ec>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3324      	adds	r3, #36	; 0x24
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	33b0      	adds	r3, #176	; 0xb0
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e018      	b.n	8006fea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	7c1b      	ldrb	r3, [r3, #16]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fc0:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <USBD_CDC_Init+0x1e8>)
 8006fc2:	7819      	ldrb	r1, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f002 fb7e 	bl	80096d0 <USBD_LL_PrepareReceive>
 8006fd4:	e008      	b.n	8006fe8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fd6:	4b08      	ldr	r3, [pc, #32]	; (8006ff8 <USBD_CDC_Init+0x1e8>)
 8006fd8:	7819      	ldrb	r1, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fe0:	2340      	movs	r3, #64	; 0x40
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f002 fb74 	bl	80096d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	200000bb 	.word	0x200000bb
 8006ff8:	200000bc 	.word	0x200000bc
 8006ffc:	200000bd 	.word	0x200000bd

08007000 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800700c:	4b3a      	ldr	r3, [pc, #232]	; (80070f8 <USBD_CDC_DeInit+0xf8>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f002 fa93 	bl	800953e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007018:	4b37      	ldr	r3, [pc, #220]	; (80070f8 <USBD_CDC_DeInit+0xf8>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f003 020f 	and.w	r2, r3, #15
 8007020:	6879      	ldr	r1, [r7, #4]
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	440b      	add	r3, r1
 800702c:	3324      	adds	r3, #36	; 0x24
 800702e:	2200      	movs	r2, #0
 8007030:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007032:	4b32      	ldr	r3, [pc, #200]	; (80070fc <USBD_CDC_DeInit+0xfc>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f002 fa80 	bl	800953e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800703e:	4b2f      	ldr	r3, [pc, #188]	; (80070fc <USBD_CDC_DeInit+0xfc>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f003 020f 	and.w	r2, r3, #15
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007056:	2200      	movs	r2, #0
 8007058:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800705a:	4b29      	ldr	r3, [pc, #164]	; (8007100 <USBD_CDC_DeInit+0x100>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f002 fa6c 	bl	800953e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007066:	4b26      	ldr	r3, [pc, #152]	; (8007100 <USBD_CDC_DeInit+0x100>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	f003 020f 	and.w	r2, r3, #15
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	4613      	mov	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	440b      	add	r3, r1
 800707a:	3324      	adds	r3, #36	; 0x24
 800707c:	2200      	movs	r2, #0
 800707e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007080:	4b1f      	ldr	r3, [pc, #124]	; (8007100 <USBD_CDC_DeInit+0x100>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	f003 020f 	and.w	r2, r3, #15
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	440b      	add	r3, r1
 8007094:	3326      	adds	r3, #38	; 0x26
 8007096:	2200      	movs	r2, #0
 8007098:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	32b0      	adds	r2, #176	; 0xb0
 80070a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01f      	beq.n	80070ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	33b0      	adds	r3, #176	; 0xb0
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	32b0      	adds	r2, #176	; 0xb0
 80070ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f002 fb40 	bl	8009754 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	32b0      	adds	r2, #176	; 0xb0
 80070de:	2100      	movs	r1, #0
 80070e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200000bb 	.word	0x200000bb
 80070fc:	200000bc 	.word	0x200000bc
 8007100:	200000bd 	.word	0x200000bd

08007104 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	32b0      	adds	r2, #176	; 0xb0
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007130:	2303      	movs	r3, #3
 8007132:	e0bf      	b.n	80072b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800713c:	2b00      	cmp	r3, #0
 800713e:	d050      	beq.n	80071e2 <USBD_CDC_Setup+0xde>
 8007140:	2b20      	cmp	r3, #32
 8007142:	f040 80af 	bne.w	80072a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	88db      	ldrh	r3, [r3, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d03a      	beq.n	80071c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	b25b      	sxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	da1b      	bge.n	8007190 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	33b0      	adds	r3, #176	; 0xb0
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800716e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	88d2      	ldrh	r2, [r2, #6]
 8007174:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	88db      	ldrh	r3, [r3, #6]
 800717a:	2b07      	cmp	r3, #7
 800717c:	bf28      	it	cs
 800717e:	2307      	movcs	r3, #7
 8007180:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	89fa      	ldrh	r2, [r7, #14]
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 fd89 	bl	8008ca0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800718e:	e090      	b.n	80072b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785a      	ldrb	r2, [r3, #1]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	88db      	ldrh	r3, [r3, #6]
 800719e:	2b3f      	cmp	r3, #63	; 0x3f
 80071a0:	d803      	bhi.n	80071aa <USBD_CDC_Setup+0xa6>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	88db      	ldrh	r3, [r3, #6]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	e000      	b.n	80071ac <USBD_CDC_Setup+0xa8>
 80071aa:	2240      	movs	r2, #64	; 0x40
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071b2:	6939      	ldr	r1, [r7, #16]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80071ba:	461a      	mov	r2, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fd9b 	bl	8008cf8 <USBD_CtlPrepareRx>
      break;
 80071c2:	e076      	b.n	80072b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	33b0      	adds	r3, #176	; 0xb0
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	7850      	ldrb	r0, [r2, #1]
 80071da:	2200      	movs	r2, #0
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	4798      	blx	r3
      break;
 80071e0:	e067      	b.n	80072b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b0b      	cmp	r3, #11
 80071e8:	d851      	bhi.n	800728e <USBD_CDC_Setup+0x18a>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <USBD_CDC_Setup+0xec>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007221 	.word	0x08007221
 80071f4:	0800729d 	.word	0x0800729d
 80071f8:	0800728f 	.word	0x0800728f
 80071fc:	0800728f 	.word	0x0800728f
 8007200:	0800728f 	.word	0x0800728f
 8007204:	0800728f 	.word	0x0800728f
 8007208:	0800728f 	.word	0x0800728f
 800720c:	0800728f 	.word	0x0800728f
 8007210:	0800728f 	.word	0x0800728f
 8007214:	0800728f 	.word	0x0800728f
 8007218:	0800724b 	.word	0x0800724b
 800721c:	08007275 	.word	0x08007275
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b03      	cmp	r3, #3
 800722a:	d107      	bne.n	800723c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800722c:	f107 030a 	add.w	r3, r7, #10
 8007230:	2202      	movs	r2, #2
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fd33 	bl	8008ca0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800723a:	e032      	b.n	80072a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fcbd 	bl	8008bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8007244:	2303      	movs	r3, #3
 8007246:	75fb      	strb	r3, [r7, #23]
          break;
 8007248:	e02b      	b.n	80072a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b03      	cmp	r3, #3
 8007254:	d107      	bne.n	8007266 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007256:	f107 030d 	add.w	r3, r7, #13
 800725a:	2201      	movs	r2, #1
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 fd1e 	bl	8008ca0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007264:	e01d      	b.n	80072a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 fca8 	bl	8008bbe <USBD_CtlError>
            ret = USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	75fb      	strb	r3, [r7, #23]
          break;
 8007272:	e016      	b.n	80072a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b03      	cmp	r3, #3
 800727e:	d00f      	beq.n	80072a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f001 fc9b 	bl	8008bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8007288:	2303      	movs	r3, #3
 800728a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800728c:	e008      	b.n	80072a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fc94 	bl	8008bbe <USBD_CtlError>
          ret = USBD_FAIL;
 8007296:	2303      	movs	r3, #3
 8007298:	75fb      	strb	r3, [r7, #23]
          break;
 800729a:	e002      	b.n	80072a2 <USBD_CDC_Setup+0x19e>
          break;
 800729c:	bf00      	nop
 800729e:	e008      	b.n	80072b2 <USBD_CDC_Setup+0x1ae>
          break;
 80072a0:	bf00      	nop
      }
      break;
 80072a2:	e006      	b.n	80072b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072a4:	6839      	ldr	r1, [r7, #0]
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fc89 	bl	8008bbe <USBD_CtlError>
      ret = USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	75fb      	strb	r3, [r7, #23]
      break;
 80072b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	32b0      	adds	r2, #176	; 0xb0
 80072da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e065      	b.n	80073b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	32b0      	adds	r2, #176	; 0xb0
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072f6:	78fb      	ldrb	r3, [r7, #3]
 80072f8:	f003 020f 	and.w	r2, r3, #15
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	4613      	mov	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	3318      	adds	r3, #24
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d02f      	beq.n	8007370 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	f003 020f 	and.w	r2, r3, #15
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	3318      	adds	r3, #24
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	78fb      	ldrb	r3, [r7, #3]
 8007328:	f003 010f 	and.w	r1, r3, #15
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	460b      	mov	r3, r1
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	440b      	add	r3, r1
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4403      	add	r3, r0
 8007338:	3348      	adds	r3, #72	; 0x48
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007340:	fb01 f303 	mul.w	r3, r1, r3
 8007344:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007346:	2b00      	cmp	r3, #0
 8007348:	d112      	bne.n	8007370 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	f003 020f 	and.w	r2, r3, #15
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	3318      	adds	r3, #24
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007362:	78f9      	ldrb	r1, [r7, #3]
 8007364:	2300      	movs	r3, #0
 8007366:	2200      	movs	r2, #0
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f002 f990 	bl	800968e <USBD_LL_Transmit>
 800736e:	e01f      	b.n	80073b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	33b0      	adds	r3, #176	; 0xb0
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d010      	beq.n	80073b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	33b0      	adds	r3, #176	; 0xb0
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073ac:	78fa      	ldrb	r2, [r7, #3]
 80073ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	32b0      	adds	r2, #176	; 0xb0
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	32b0      	adds	r2, #176	; 0xb0
 80073e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e01a      	b.n	8007422 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f002 f98e 	bl	8009712 <USBD_LL_GetRxDataSize>
 80073f6:	4602      	mov	r2, r0
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	33b0      	adds	r3, #176	; 0xb0
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800741c:	4611      	mov	r1, r2
 800741e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	32b0      	adds	r2, #176	; 0xb0
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	e025      	b.n	8007498 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	33b0      	adds	r3, #176	; 0xb0
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01a      	beq.n	8007496 <USBD_CDC_EP0_RxReady+0x6c>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007466:	2bff      	cmp	r3, #255	; 0xff
 8007468:	d015      	beq.n	8007496 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	33b0      	adds	r3, #176	; 0xb0
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007482:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800748a:	b292      	uxth	r2, r2
 800748c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	22ff      	movs	r2, #255	; 0xff
 8007492:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074a8:	2182      	movs	r1, #130	; 0x82
 80074aa:	4818      	ldr	r0, [pc, #96]	; (800750c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074ac:	f000 fd4f 	bl	8007f4e <USBD_GetEpDesc>
 80074b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074b2:	2101      	movs	r1, #1
 80074b4:	4815      	ldr	r0, [pc, #84]	; (800750c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074b6:	f000 fd4a 	bl	8007f4e <USBD_GetEpDesc>
 80074ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074bc:	2181      	movs	r1, #129	; 0x81
 80074be:	4813      	ldr	r0, [pc, #76]	; (800750c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074c0:	f000 fd45 	bl	8007f4e <USBD_GetEpDesc>
 80074c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2210      	movs	r2, #16
 80074d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d006      	beq.n	80074e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2200      	movs	r2, #0
 80074dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e0:	711a      	strb	r2, [r3, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d006      	beq.n	80074fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f4:	711a      	strb	r2, [r3, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2243      	movs	r2, #67	; 0x43
 80074fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007500:	4b02      	ldr	r3, [pc, #8]	; (800750c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20000078 	.word	0x20000078

08007510 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007518:	2182      	movs	r1, #130	; 0x82
 800751a:	4818      	ldr	r0, [pc, #96]	; (800757c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800751c:	f000 fd17 	bl	8007f4e <USBD_GetEpDesc>
 8007520:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007522:	2101      	movs	r1, #1
 8007524:	4815      	ldr	r0, [pc, #84]	; (800757c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007526:	f000 fd12 	bl	8007f4e <USBD_GetEpDesc>
 800752a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800752c:	2181      	movs	r1, #129	; 0x81
 800752e:	4813      	ldr	r0, [pc, #76]	; (800757c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007530:	f000 fd0d 	bl	8007f4e <USBD_GetEpDesc>
 8007534:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2210      	movs	r2, #16
 8007540:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d006      	beq.n	8007556 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	2200      	movs	r2, #0
 800754c:	711a      	strb	r2, [r3, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f042 0202 	orr.w	r2, r2, #2
 8007554:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d006      	beq.n	800756a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	711a      	strb	r2, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f042 0202 	orr.w	r2, r2, #2
 8007568:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2243      	movs	r2, #67	; 0x43
 800756e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000078 	.word	0x20000078

08007580 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007588:	2182      	movs	r1, #130	; 0x82
 800758a:	4818      	ldr	r0, [pc, #96]	; (80075ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800758c:	f000 fcdf 	bl	8007f4e <USBD_GetEpDesc>
 8007590:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007592:	2101      	movs	r1, #1
 8007594:	4815      	ldr	r0, [pc, #84]	; (80075ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007596:	f000 fcda 	bl	8007f4e <USBD_GetEpDesc>
 800759a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800759c:	2181      	movs	r1, #129	; 0x81
 800759e:	4813      	ldr	r0, [pc, #76]	; (80075ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075a0:	f000 fcd5 	bl	8007f4e <USBD_GetEpDesc>
 80075a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2210      	movs	r2, #16
 80075b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d006      	beq.n	80075c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075c0:	711a      	strb	r2, [r3, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d006      	beq.n	80075da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d4:	711a      	strb	r2, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2243      	movs	r2, #67	; 0x43
 80075de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075e0:	4b02      	ldr	r3, [pc, #8]	; (80075ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20000078 	.word	0x20000078

080075f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	220a      	movs	r2, #10
 80075fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075fe:	4b03      	ldr	r3, [pc, #12]	; (800760c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	20000034 	.word	0x20000034

08007610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007620:	2303      	movs	r3, #3
 8007622:	e009      	b.n	8007638 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	33b0      	adds	r3, #176	; 0xb0
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	32b0      	adds	r2, #176	; 0xb0
 800765a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007666:	2303      	movs	r3, #3
 8007668:	e008      	b.n	800767c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	371c      	adds	r7, #28
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	32b0      	adds	r2, #176	; 0xb0
 800769c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d101      	bne.n	80076ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e004      	b.n	80076b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	32b0      	adds	r2, #176	; 0xb0
 80076d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076da:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80076dc:	2301      	movs	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	32b0      	adds	r2, #176	; 0xb0
 80076ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e025      	b.n	8007742 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d11f      	bne.n	8007740 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2201      	movs	r2, #1
 8007704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007708:	4b10      	ldr	r3, [pc, #64]	; (800774c <USBD_CDC_TransmitPacket+0x88>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	f003 020f 	and.w	r2, r3, #15
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4403      	add	r3, r0
 8007722:	3318      	adds	r3, #24
 8007724:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007726:	4b09      	ldr	r3, [pc, #36]	; (800774c <USBD_CDC_TransmitPacket+0x88>)
 8007728:	7819      	ldrb	r1, [r3, #0]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 ffa9 	bl	800968e <USBD_LL_Transmit>

    ret = USBD_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200000bb 	.word	0x200000bb

08007750 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	32b0      	adds	r2, #176	; 0xb0
 8007762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007766:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	32b0      	adds	r2, #176	; 0xb0
 8007772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800777a:	2303      	movs	r3, #3
 800777c:	e018      	b.n	80077b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	7c1b      	ldrb	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <USBD_CDC_ReceivePacket+0x68>)
 8007788:	7819      	ldrb	r1, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 ff9b 	bl	80096d0 <USBD_LL_PrepareReceive>
 800779a:	e008      	b.n	80077ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <USBD_CDC_ReceivePacket+0x68>)
 800779e:	7819      	ldrb	r1, [r3, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077a6:	2340      	movs	r3, #64	; 0x40
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f001 ff91 	bl	80096d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	200000bc 	.word	0x200000bc

080077bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e01f      	b.n	8007814 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	79fa      	ldrb	r2, [r7, #7]
 8007806:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f001 fe0b 	bl	8009424 <USBD_LL_Init>
 800780e:	4603      	mov	r3, r0
 8007810:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007830:	2303      	movs	r3, #3
 8007832:	e025      	b.n	8007880 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	32ae      	adds	r2, #174	; 0xae
 8007846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00f      	beq.n	8007870 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32ae      	adds	r2, #174	; 0xae
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	f107 020e 	add.w	r2, r7, #14
 8007864:	4610      	mov	r0, r2
 8007866:	4798      	blx	r3
 8007868:	4602      	mov	r2, r0
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fe13 	bl	80094bc <USBD_LL_Start>
 8007896:	4603      	mov	r3, r0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	78fa      	ldrb	r2, [r7, #3]
 80078da:	4611      	mov	r1, r2
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	78fa      	ldrb	r2, [r7, #3]
 8007908:	4611      	mov	r1, r2
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f001 f908 	bl	8008b4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007948:	461a      	mov	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007956:	f003 031f 	and.w	r3, r3, #31
 800795a:	2b02      	cmp	r3, #2
 800795c:	d01a      	beq.n	8007994 <USBD_LL_SetupStage+0x72>
 800795e:	2b02      	cmp	r3, #2
 8007960:	d822      	bhi.n	80079a8 <USBD_LL_SetupStage+0x86>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <USBD_LL_SetupStage+0x4a>
 8007966:	2b01      	cmp	r3, #1
 8007968:	d00a      	beq.n	8007980 <USBD_LL_SetupStage+0x5e>
 800796a:	e01d      	b.n	80079a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fb5f 	bl	8008038 <USBD_StdDevReq>
 800797a:	4603      	mov	r3, r0
 800797c:	73fb      	strb	r3, [r7, #15]
      break;
 800797e:	e020      	b.n	80079c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fbc7 	bl	800811c <USBD_StdItfReq>
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]
      break;
 8007992:	e016      	b.n	80079c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc29 	bl	80081f4 <USBD_StdEPReq>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]
      break;
 80079a6:	e00c      	b.n	80079c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 fde0 	bl	800957c <USBD_LL_StallEP>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]
      break;
 80079c0:	bf00      	nop
  }

  return ret;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	460b      	mov	r3, r1
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d16e      	bne.n	8007ac2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	f040 8098 	bne.w	8007b28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d913      	bls.n	8007a2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	1ad2      	subs	r2, r2, r3
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	bf28      	it	cs
 8007a1e:	4613      	movcs	r3, r2
 8007a20:	461a      	mov	r2, r3
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f001 f984 	bl	8008d32 <USBD_CtlContinueRx>
 8007a2a:	e07d      	b.n	8007b28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d014      	beq.n	8007a64 <USBD_LL_DataOutStage+0x98>
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d81d      	bhi.n	8007a7a <USBD_LL_DataOutStage+0xae>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <USBD_LL_DataOutStage+0x7c>
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d003      	beq.n	8007a4e <USBD_LL_DataOutStage+0x82>
 8007a46:	e018      	b.n	8007a7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a4c:	e018      	b.n	8007a80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 fa5e 	bl	8007f1a <USBD_CoreFindIF>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75bb      	strb	r3, [r7, #22]
            break;
 8007a62:	e00d      	b.n	8007a80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fa60 	bl	8007f34 <USBD_CoreFindEP>
 8007a74:	4603      	mov	r3, r0
 8007a76:	75bb      	strb	r3, [r7, #22]
            break;
 8007a78:	e002      	b.n	8007a80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75bb      	strb	r3, [r7, #22]
            break;
 8007a7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a80:	7dbb      	ldrb	r3, [r7, #22]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d119      	bne.n	8007aba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d113      	bne.n	8007aba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a92:	7dba      	ldrb	r2, [r7, #22]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	32ae      	adds	r2, #174	; 0xae
 8007a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007aa2:	7dba      	ldrb	r2, [r7, #22]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007aaa:	7dba      	ldrb	r2, [r7, #22]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	32ae      	adds	r2, #174	; 0xae
 8007ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f001 f94a 	bl	8008d54 <USBD_CtlSendStatus>
 8007ac0:	e032      	b.n	8007b28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	4619      	mov	r1, r3
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fa31 	bl	8007f34 <USBD_CoreFindEP>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ad6:	7dbb      	ldrb	r3, [r7, #22]
 8007ad8:	2bff      	cmp	r3, #255	; 0xff
 8007ada:	d025      	beq.n	8007b28 <USBD_LL_DataOutStage+0x15c>
 8007adc:	7dbb      	ldrb	r3, [r7, #22]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d122      	bne.n	8007b28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d117      	bne.n	8007b1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007aee:	7dba      	ldrb	r2, [r7, #22]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	32ae      	adds	r2, #174	; 0xae
 8007af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00f      	beq.n	8007b1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007afe:	7dba      	ldrb	r2, [r7, #22]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b06:	7dba      	ldrb	r2, [r7, #22]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	32ae      	adds	r2, #174	; 0xae
 8007b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	7afa      	ldrb	r2, [r7, #11]
 8007b14:	4611      	mov	r1, r2
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	4798      	blx	r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	e000      	b.n	8007b2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	607a      	str	r2, [r7, #4]
 8007b3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d16f      	bne.n	8007c26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3314      	adds	r3, #20
 8007b4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d15a      	bne.n	8007c0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d914      	bls.n	8007b8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	689a      	ldr	r2, [r3, #8]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	1ad2      	subs	r2, r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	461a      	mov	r2, r3
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f001 f8ac 	bl	8008cd6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2200      	movs	r2, #0
 8007b82:	2100      	movs	r1, #0
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f001 fda3 	bl	80096d0 <USBD_LL_PrepareReceive>
 8007b8a:	e03f      	b.n	8007c0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d11c      	bne.n	8007bd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d316      	bcc.n	8007bd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d20f      	bcs.n	8007bd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f001 f88d 	bl	8008cd6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2100      	movs	r1, #0
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f001 fd80 	bl	80096d0 <USBD_LL_PrepareReceive>
 8007bd0:	e01c      	b.n	8007c0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d10f      	bne.n	8007bfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bfe:	2180      	movs	r1, #128	; 0x80
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f001 fcbb 	bl	800957c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f001 f8b7 	bl	8008d7a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d03a      	beq.n	8007c8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fe42 	bl	80078a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c24:	e032      	b.n	8007c8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c26:	7afb      	ldrb	r3, [r7, #11]
 8007c28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	4619      	mov	r1, r3
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f97f 	bl	8007f34 <USBD_CoreFindEP>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	2bff      	cmp	r3, #255	; 0xff
 8007c3e:	d025      	beq.n	8007c8c <USBD_LL_DataInStage+0x15a>
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d122      	bne.n	8007c8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d11c      	bne.n	8007c8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c52:	7dfa      	ldrb	r2, [r7, #23]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	32ae      	adds	r2, #174	; 0xae
 8007c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d014      	beq.n	8007c8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c62:	7dfa      	ldrb	r2, [r7, #23]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c6a:	7dfa      	ldrb	r2, [r7, #23]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	32ae      	adds	r2, #174	; 0xae
 8007c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	7afa      	ldrb	r2, [r7, #11]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	4798      	blx	r3
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c82:	7dbb      	ldrb	r3, [r7, #22]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c88:	7dbb      	ldrb	r3, [r7, #22]
 8007c8a:	e000      	b.n	8007c8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d014      	beq.n	8007cfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00e      	beq.n	8007cfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6852      	ldr	r2, [r2, #4]
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	4611      	mov	r1, r2
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2100      	movs	r1, #0
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fbf5 	bl	80094f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2240      	movs	r2, #64	; 0x40
 8007d14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d18:	2340      	movs	r3, #64	; 0x40
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2180      	movs	r1, #128	; 0x80
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 fbe7 	bl	80094f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2240      	movs	r2, #64	; 0x40
 8007d2e:	621a      	str	r2, [r3, #32]

  return ret;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	460b      	mov	r3, r1
 8007d44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	78fa      	ldrb	r2, [r7, #3]
 8007d4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2204      	movs	r2, #4
 8007d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d106      	bne.n	8007da8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b082      	sub	sp, #8
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d110      	bne.n	8007dec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	32ae      	adds	r2, #174	; 0xae
 8007e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e01c      	b.n	8007e52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d115      	bne.n	8007e50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	32ae      	adds	r2, #174	; 0xae
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	32ae      	adds	r2, #174	; 0xae
 8007e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	78fa      	ldrb	r2, [r7, #3]
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b082      	sub	sp, #8
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	32ae      	adds	r2, #174	; 0xae
 8007e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e01c      	b.n	8007eb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d115      	bne.n	8007eb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	32ae      	adds	r2, #174	; 0xae
 8007e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	32ae      	adds	r2, #174	; 0xae
 8007ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00e      	beq.n	8007f10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	6852      	ldr	r2, [r2, #4]
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	4611      	mov	r1, r2
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b083      	sub	sp, #12
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	460b      	mov	r3, r1
 8007f24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b086      	sub	sp, #24
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d920      	bls.n	8007fb8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f7e:	e013      	b.n	8007fa8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f80:	f107 030a 	add.w	r3, r7, #10
 8007f84:	4619      	mov	r1, r3
 8007f86:	6978      	ldr	r0, [r7, #20]
 8007f88:	f000 f81b 	bl	8007fc2 <USBD_GetNextDesc>
 8007f8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	d108      	bne.n	8007fa8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	789b      	ldrb	r3, [r3, #2]
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d008      	beq.n	8007fb6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	885b      	ldrh	r3, [r3, #2]
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	897b      	ldrh	r3, [r7, #10]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d8e5      	bhi.n	8007f80 <USBD_GetEpDesc+0x32>
 8007fb4:	e000      	b.n	8007fb8 <USBD_GetEpDesc+0x6a>
          break;
 8007fb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007fb8:	693b      	ldr	r3, [r7, #16]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b085      	sub	sp, #20
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	881a      	ldrh	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	4413      	add	r3, r2
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4413      	add	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fee:	68fb      	ldr	r3, [r7, #12]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	3301      	adds	r3, #1
 8008012:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800801a:	8a3b      	ldrh	r3, [r7, #16]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	b21a      	sxth	r2, r3
 8008020:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008024:	4313      	orrs	r3, r2
 8008026:	b21b      	sxth	r3, r3
 8008028:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800802a:	89fb      	ldrh	r3, [r7, #14]
}
 800802c:	4618      	mov	r0, r3
 800802e:	371c      	adds	r7, #28
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800804e:	2b40      	cmp	r3, #64	; 0x40
 8008050:	d005      	beq.n	800805e <USBD_StdDevReq+0x26>
 8008052:	2b40      	cmp	r3, #64	; 0x40
 8008054:	d857      	bhi.n	8008106 <USBD_StdDevReq+0xce>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00f      	beq.n	800807a <USBD_StdDevReq+0x42>
 800805a:	2b20      	cmp	r3, #32
 800805c:	d153      	bne.n	8008106 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	32ae      	adds	r2, #174	; 0xae
 8008068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]
      break;
 8008078:	e04a      	b.n	8008110 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	2b09      	cmp	r3, #9
 8008080:	d83b      	bhi.n	80080fa <USBD_StdDevReq+0xc2>
 8008082:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <USBD_StdDevReq+0x50>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080dd 	.word	0x080080dd
 800808c:	080080f1 	.word	0x080080f1
 8008090:	080080fb 	.word	0x080080fb
 8008094:	080080e7 	.word	0x080080e7
 8008098:	080080fb 	.word	0x080080fb
 800809c:	080080bb 	.word	0x080080bb
 80080a0:	080080b1 	.word	0x080080b1
 80080a4:	080080fb 	.word	0x080080fb
 80080a8:	080080d3 	.word	0x080080d3
 80080ac:	080080c5 	.word	0x080080c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fa3c 	bl	8008530 <USBD_GetDescriptor>
          break;
 80080b8:	e024      	b.n	8008104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fba1 	bl	8008804 <USBD_SetAddress>
          break;
 80080c2:	e01f      	b.n	8008104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fbe0 	bl	800888c <USBD_SetConfig>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73fb      	strb	r3, [r7, #15]
          break;
 80080d0:	e018      	b.n	8008104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fc83 	bl	80089e0 <USBD_GetConfig>
          break;
 80080da:	e013      	b.n	8008104 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fcb4 	bl	8008a4c <USBD_GetStatus>
          break;
 80080e4:	e00e      	b.n	8008104 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fce3 	bl	8008ab4 <USBD_SetFeature>
          break;
 80080ee:	e009      	b.n	8008104 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fd07 	bl	8008b06 <USBD_ClrFeature>
          break;
 80080f8:	e004      	b.n	8008104 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fd5e 	bl	8008bbe <USBD_CtlError>
          break;
 8008102:	bf00      	nop
      }
      break;
 8008104:	e004      	b.n	8008110 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fd58 	bl	8008bbe <USBD_CtlError>
      break;
 800810e:	bf00      	nop
  }

  return ret;
 8008110:	7bfb      	ldrb	r3, [r7, #15]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop

0800811c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008132:	2b40      	cmp	r3, #64	; 0x40
 8008134:	d005      	beq.n	8008142 <USBD_StdItfReq+0x26>
 8008136:	2b40      	cmp	r3, #64	; 0x40
 8008138:	d852      	bhi.n	80081e0 <USBD_StdItfReq+0xc4>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <USBD_StdItfReq+0x26>
 800813e:	2b20      	cmp	r3, #32
 8008140:	d14e      	bne.n	80081e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008148:	b2db      	uxtb	r3, r3
 800814a:	3b01      	subs	r3, #1
 800814c:	2b02      	cmp	r3, #2
 800814e:	d840      	bhi.n	80081d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	889b      	ldrh	r3, [r3, #4]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b01      	cmp	r3, #1
 8008158:	d836      	bhi.n	80081c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	889b      	ldrh	r3, [r3, #4]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fed9 	bl	8007f1a <USBD_CoreFindIF>
 8008168:	4603      	mov	r3, r0
 800816a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2bff      	cmp	r3, #255	; 0xff
 8008170:	d01d      	beq.n	80081ae <USBD_StdItfReq+0x92>
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d11a      	bne.n	80081ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008178:	7bba      	ldrb	r2, [r7, #14]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	32ae      	adds	r2, #174	; 0xae
 800817e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00f      	beq.n	80081a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008188:	7bba      	ldrb	r2, [r7, #14]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008190:	7bba      	ldrb	r2, [r7, #14]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	32ae      	adds	r2, #174	; 0xae
 8008196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081a6:	e004      	b.n	80081b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80081a8:	2303      	movs	r3, #3
 80081aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081ac:	e001      	b.n	80081b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80081ae:	2303      	movs	r3, #3
 80081b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	88db      	ldrh	r3, [r3, #6]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d110      	bne.n	80081dc <USBD_StdItfReq+0xc0>
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10d      	bne.n	80081dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fdc7 	bl	8008d54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081c6:	e009      	b.n	80081dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fcf7 	bl	8008bbe <USBD_CtlError>
          break;
 80081d0:	e004      	b.n	80081dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fcf2 	bl	8008bbe <USBD_CtlError>
          break;
 80081da:	e000      	b.n	80081de <USBD_StdItfReq+0xc2>
          break;
 80081dc:	bf00      	nop
      }
      break;
 80081de:	e004      	b.n	80081ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fceb 	bl	8008bbe <USBD_CtlError>
      break;
 80081e8:	bf00      	nop
  }

  return ret;
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	889b      	ldrh	r3, [r3, #4]
 8008206:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008210:	2b40      	cmp	r3, #64	; 0x40
 8008212:	d007      	beq.n	8008224 <USBD_StdEPReq+0x30>
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	f200 817f 	bhi.w	8008518 <USBD_StdEPReq+0x324>
 800821a:	2b00      	cmp	r3, #0
 800821c:	d02a      	beq.n	8008274 <USBD_StdEPReq+0x80>
 800821e:	2b20      	cmp	r3, #32
 8008220:	f040 817a 	bne.w	8008518 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7ff fe83 	bl	8007f34 <USBD_CoreFindEP>
 800822e:	4603      	mov	r3, r0
 8008230:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008232:	7b7b      	ldrb	r3, [r7, #13]
 8008234:	2bff      	cmp	r3, #255	; 0xff
 8008236:	f000 8174 	beq.w	8008522 <USBD_StdEPReq+0x32e>
 800823a:	7b7b      	ldrb	r3, [r7, #13]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 8170 	bne.w	8008522 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008242:	7b7a      	ldrb	r2, [r7, #13]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800824a:	7b7a      	ldrb	r2, [r7, #13]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	32ae      	adds	r2, #174	; 0xae
 8008250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 8163 	beq.w	8008522 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800825c:	7b7a      	ldrb	r2, [r7, #13]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	32ae      	adds	r2, #174	; 0xae
 8008262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	4798      	blx	r3
 800826e:	4603      	mov	r3, r0
 8008270:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008272:	e156      	b.n	8008522 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	785b      	ldrb	r3, [r3, #1]
 8008278:	2b03      	cmp	r3, #3
 800827a:	d008      	beq.n	800828e <USBD_StdEPReq+0x9a>
 800827c:	2b03      	cmp	r3, #3
 800827e:	f300 8145 	bgt.w	800850c <USBD_StdEPReq+0x318>
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 809b 	beq.w	80083be <USBD_StdEPReq+0x1ca>
 8008288:	2b01      	cmp	r3, #1
 800828a:	d03c      	beq.n	8008306 <USBD_StdEPReq+0x112>
 800828c:	e13e      	b.n	800850c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d002      	beq.n	80082a0 <USBD_StdEPReq+0xac>
 800829a:	2b03      	cmp	r3, #3
 800829c:	d016      	beq.n	80082cc <USBD_StdEPReq+0xd8>
 800829e:	e02c      	b.n	80082fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00d      	beq.n	80082c2 <USBD_StdEPReq+0xce>
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b80      	cmp	r3, #128	; 0x80
 80082aa:	d00a      	beq.n	80082c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f963 	bl	800957c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082b6:	2180      	movs	r1, #128	; 0x80
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f95f 	bl	800957c <USBD_LL_StallEP>
 80082be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082c0:	e020      	b.n	8008304 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc7a 	bl	8008bbe <USBD_CtlError>
              break;
 80082ca:	e01b      	b.n	8008304 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	885b      	ldrh	r3, [r3, #2]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10e      	bne.n	80082f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <USBD_StdEPReq+0xfe>
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b80      	cmp	r3, #128	; 0x80
 80082de:	d008      	beq.n	80082f2 <USBD_StdEPReq+0xfe>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	88db      	ldrh	r3, [r3, #6]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082e8:	7bbb      	ldrb	r3, [r7, #14]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f945 	bl	800957c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fd2e 	bl	8008d54 <USBD_CtlSendStatus>

              break;
 80082f8:	e004      	b.n	8008304 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fc5e 	bl	8008bbe <USBD_CtlError>
              break;
 8008302:	bf00      	nop
          }
          break;
 8008304:	e107      	b.n	8008516 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d002      	beq.n	8008318 <USBD_StdEPReq+0x124>
 8008312:	2b03      	cmp	r3, #3
 8008314:	d016      	beq.n	8008344 <USBD_StdEPReq+0x150>
 8008316:	e04b      	b.n	80083b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00d      	beq.n	800833a <USBD_StdEPReq+0x146>
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b80      	cmp	r3, #128	; 0x80
 8008322:	d00a      	beq.n	800833a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 f927 	bl	800957c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800832e:	2180      	movs	r1, #128	; 0x80
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f923 	bl	800957c <USBD_LL_StallEP>
 8008336:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008338:	e040      	b.n	80083bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fc3e 	bl	8008bbe <USBD_CtlError>
              break;
 8008342:	e03b      	b.n	80083bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	885b      	ldrh	r3, [r3, #2]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d136      	bne.n	80083ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008352:	2b00      	cmp	r3, #0
 8008354:	d004      	beq.n	8008360 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	4619      	mov	r1, r3
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 f92d 	bl	80095ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fcf7 	bl	8008d54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7ff fde2 	bl	8007f34 <USBD_CoreFindEP>
 8008370:	4603      	mov	r3, r0
 8008372:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008374:	7b7b      	ldrb	r3, [r7, #13]
 8008376:	2bff      	cmp	r3, #255	; 0xff
 8008378:	d01f      	beq.n	80083ba <USBD_StdEPReq+0x1c6>
 800837a:	7b7b      	ldrb	r3, [r7, #13]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d11c      	bne.n	80083ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008380:	7b7a      	ldrb	r2, [r7, #13]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008388:	7b7a      	ldrb	r2, [r7, #13]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	32ae      	adds	r2, #174	; 0xae
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d010      	beq.n	80083ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008398:	7b7a      	ldrb	r2, [r7, #13]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	32ae      	adds	r2, #174	; 0xae
 800839e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	4798      	blx	r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80083ae:	e004      	b.n	80083ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fc03 	bl	8008bbe <USBD_CtlError>
              break;
 80083b8:	e000      	b.n	80083bc <USBD_StdEPReq+0x1c8>
              break;
 80083ba:	bf00      	nop
          }
          break;
 80083bc:	e0ab      	b.n	8008516 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d002      	beq.n	80083d0 <USBD_StdEPReq+0x1dc>
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d032      	beq.n	8008434 <USBD_StdEPReq+0x240>
 80083ce:	e097      	b.n	8008500 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <USBD_StdEPReq+0x1f2>
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b80      	cmp	r3, #128	; 0x80
 80083da:	d004      	beq.n	80083e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fbed 	bl	8008bbe <USBD_CtlError>
                break;
 80083e4:	e091      	b.n	800850a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	da0b      	bge.n	8008406 <USBD_StdEPReq+0x212>
 80083ee:	7bbb      	ldrb	r3, [r7, #14]
 80083f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083f4:	4613      	mov	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	3310      	adds	r3, #16
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4413      	add	r3, r2
 8008402:	3304      	adds	r3, #4
 8008404:	e00b      	b.n	800841e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	4413      	add	r3, r2
 800841c:	3304      	adds	r3, #4
 800841e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2202      	movs	r2, #2
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fc37 	bl	8008ca0 <USBD_CtlSendData>
              break;
 8008432:	e06a      	b.n	800850a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008438:	2b00      	cmp	r3, #0
 800843a:	da11      	bge.n	8008460 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800843c:	7bbb      	ldrb	r3, [r7, #14]
 800843e:	f003 020f 	and.w	r2, r3, #15
 8008442:	6879      	ldr	r1, [r7, #4]
 8008444:	4613      	mov	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	440b      	add	r3, r1
 800844e:	3324      	adds	r3, #36	; 0x24
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d117      	bne.n	8008486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fbb0 	bl	8008bbe <USBD_CtlError>
                  break;
 800845e:	e054      	b.n	800850a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	f003 020f 	and.w	r2, r3, #15
 8008466:	6879      	ldr	r1, [r7, #4]
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	440b      	add	r3, r1
 8008472:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fb9d 	bl	8008bbe <USBD_CtlError>
                  break;
 8008484:	e041      	b.n	800850a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008486:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800848a:	2b00      	cmp	r3, #0
 800848c:	da0b      	bge.n	80084a6 <USBD_StdEPReq+0x2b2>
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	3310      	adds	r3, #16
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	4413      	add	r3, r2
 80084a2:	3304      	adds	r3, #4
 80084a4:	e00b      	b.n	80084be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	4413      	add	r3, r2
 80084bc:	3304      	adds	r3, #4
 80084be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <USBD_StdEPReq+0x2d8>
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b80      	cmp	r3, #128	; 0x80
 80084ca:	d103      	bne.n	80084d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	e00e      	b.n	80084f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	4619      	mov	r1, r3
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f88d 	bl	80095f8 <USBD_LL_IsStallEP>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2201      	movs	r2, #1
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	e002      	b.n	80084f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2202      	movs	r2, #2
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fbd1 	bl	8008ca0 <USBD_CtlSendData>
              break;
 80084fe:	e004      	b.n	800850a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fb5b 	bl	8008bbe <USBD_CtlError>
              break;
 8008508:	bf00      	nop
          }
          break;
 800850a:	e004      	b.n	8008516 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fb55 	bl	8008bbe <USBD_CtlError>
          break;
 8008514:	bf00      	nop
      }
      break;
 8008516:	e005      	b.n	8008524 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fb4f 	bl	8008bbe <USBD_CtlError>
      break;
 8008520:	e000      	b.n	8008524 <USBD_StdEPReq+0x330>
      break;
 8008522:	bf00      	nop
  }

  return ret;
 8008524:	7bfb      	ldrb	r3, [r7, #15]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	885b      	ldrh	r3, [r3, #2]
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	b29b      	uxth	r3, r3
 800854e:	3b01      	subs	r3, #1
 8008550:	2b06      	cmp	r3, #6
 8008552:	f200 8128 	bhi.w	80087a6 <USBD_GetDescriptor+0x276>
 8008556:	a201      	add	r2, pc, #4	; (adr r2, 800855c <USBD_GetDescriptor+0x2c>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	08008579 	.word	0x08008579
 8008560:	08008591 	.word	0x08008591
 8008564:	080085d1 	.word	0x080085d1
 8008568:	080087a7 	.word	0x080087a7
 800856c:	080087a7 	.word	0x080087a7
 8008570:	08008747 	.word	0x08008747
 8008574:	08008773 	.word	0x08008773
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	7c12      	ldrb	r2, [r2, #16]
 8008584:	f107 0108 	add.w	r1, r7, #8
 8008588:	4610      	mov	r0, r2
 800858a:	4798      	blx	r3
 800858c:	60f8      	str	r0, [r7, #12]
      break;
 800858e:	e112      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7c1b      	ldrb	r3, [r3, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d10d      	bne.n	80085b4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	f107 0208 	add.w	r2, r7, #8
 80085a4:	4610      	mov	r0, r2
 80085a6:	4798      	blx	r3
 80085a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3301      	adds	r3, #1
 80085ae:	2202      	movs	r2, #2
 80085b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085b2:	e100      	b.n	80087b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	f107 0208 	add.w	r2, r7, #8
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
 80085c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	2202      	movs	r2, #2
 80085cc:	701a      	strb	r2, [r3, #0]
      break;
 80085ce:	e0f2      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	885b      	ldrh	r3, [r3, #2]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	f200 80ac 	bhi.w	8008734 <USBD_GetDescriptor+0x204>
 80085dc:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <USBD_GetDescriptor+0xb4>)
 80085de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e2:	bf00      	nop
 80085e4:	080085fd 	.word	0x080085fd
 80085e8:	08008631 	.word	0x08008631
 80085ec:	08008665 	.word	0x08008665
 80085f0:	08008699 	.word	0x08008699
 80085f4:	080086cd 	.word	0x080086cd
 80085f8:	08008701 	.word	0x08008701
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	7c12      	ldrb	r2, [r2, #16]
 8008614:	f107 0108 	add.w	r1, r7, #8
 8008618:	4610      	mov	r0, r2
 800861a:	4798      	blx	r3
 800861c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800861e:	e091      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 facb 	bl	8008bbe <USBD_CtlError>
            err++;
 8008628:	7afb      	ldrb	r3, [r7, #11]
 800862a:	3301      	adds	r3, #1
 800862c:	72fb      	strb	r3, [r7, #11]
          break;
 800862e:	e089      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	7c12      	ldrb	r2, [r2, #16]
 8008648:	f107 0108 	add.w	r1, r7, #8
 800864c:	4610      	mov	r0, r2
 800864e:	4798      	blx	r3
 8008650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008652:	e077      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fab1 	bl	8008bbe <USBD_CtlError>
            err++;
 800865c:	7afb      	ldrb	r3, [r7, #11]
 800865e:	3301      	adds	r3, #1
 8008660:	72fb      	strb	r3, [r7, #11]
          break;
 8008662:	e06f      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	7c12      	ldrb	r2, [r2, #16]
 800867c:	f107 0108 	add.w	r1, r7, #8
 8008680:	4610      	mov	r0, r2
 8008682:	4798      	blx	r3
 8008684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008686:	e05d      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa97 	bl	8008bbe <USBD_CtlError>
            err++;
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	3301      	adds	r3, #1
 8008694:	72fb      	strb	r3, [r7, #11]
          break;
 8008696:	e055      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00b      	beq.n	80086bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	7c12      	ldrb	r2, [r2, #16]
 80086b0:	f107 0108 	add.w	r1, r7, #8
 80086b4:	4610      	mov	r0, r2
 80086b6:	4798      	blx	r3
 80086b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ba:	e043      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa7d 	bl	8008bbe <USBD_CtlError>
            err++;
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	3301      	adds	r3, #1
 80086c8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ca:	e03b      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	7c12      	ldrb	r2, [r2, #16]
 80086e4:	f107 0108 	add.w	r1, r7, #8
 80086e8:	4610      	mov	r0, r2
 80086ea:	4798      	blx	r3
 80086ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ee:	e029      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa63 	bl	8008bbe <USBD_CtlError>
            err++;
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	3301      	adds	r3, #1
 80086fc:	72fb      	strb	r3, [r7, #11]
          break;
 80086fe:	e021      	b.n	8008744 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d00b      	beq.n	8008724 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	7c12      	ldrb	r2, [r2, #16]
 8008718:	f107 0108 	add.w	r1, r7, #8
 800871c:	4610      	mov	r0, r2
 800871e:	4798      	blx	r3
 8008720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008722:	e00f      	b.n	8008744 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa49 	bl	8008bbe <USBD_CtlError>
            err++;
 800872c:	7afb      	ldrb	r3, [r7, #11]
 800872e:	3301      	adds	r3, #1
 8008730:	72fb      	strb	r3, [r7, #11]
          break;
 8008732:	e007      	b.n	8008744 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa41 	bl	8008bbe <USBD_CtlError>
          err++;
 800873c:	7afb      	ldrb	r3, [r7, #11]
 800873e:	3301      	adds	r3, #1
 8008740:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008742:	bf00      	nop
      }
      break;
 8008744:	e037      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	7c1b      	ldrb	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d109      	bne.n	8008762 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008756:	f107 0208 	add.w	r2, r7, #8
 800875a:	4610      	mov	r0, r2
 800875c:	4798      	blx	r3
 800875e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008760:	e029      	b.n	80087b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fa2a 	bl	8008bbe <USBD_CtlError>
        err++;
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	3301      	adds	r3, #1
 800876e:	72fb      	strb	r3, [r7, #11]
      break;
 8008770:	e021      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7c1b      	ldrb	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10d      	bne.n	8008796 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008782:	f107 0208 	add.w	r2, r7, #8
 8008786:	4610      	mov	r0, r2
 8008788:	4798      	blx	r3
 800878a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	2207      	movs	r2, #7
 8008792:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008794:	e00f      	b.n	80087b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fa10 	bl	8008bbe <USBD_CtlError>
        err++;
 800879e:	7afb      	ldrb	r3, [r7, #11]
 80087a0:	3301      	adds	r3, #1
 80087a2:	72fb      	strb	r3, [r7, #11]
      break;
 80087a4:	e007      	b.n	80087b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087a6:	6839      	ldr	r1, [r7, #0]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fa08 	bl	8008bbe <USBD_CtlError>
      err++;
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	3301      	adds	r3, #1
 80087b2:	72fb      	strb	r3, [r7, #11]
      break;
 80087b4:	bf00      	nop
  }

  if (err != 0U)
 80087b6:	7afb      	ldrb	r3, [r7, #11]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d11e      	bne.n	80087fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	88db      	ldrh	r3, [r3, #6]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d016      	beq.n	80087f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80087c4:	893b      	ldrh	r3, [r7, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00e      	beq.n	80087e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	88da      	ldrh	r2, [r3, #6]
 80087ce:	893b      	ldrh	r3, [r7, #8]
 80087d0:	4293      	cmp	r3, r2
 80087d2:	bf28      	it	cs
 80087d4:	4613      	movcs	r3, r2
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087da:	893b      	ldrh	r3, [r7, #8]
 80087dc:	461a      	mov	r2, r3
 80087de:	68f9      	ldr	r1, [r7, #12]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fa5d 	bl	8008ca0 <USBD_CtlSendData>
 80087e6:	e009      	b.n	80087fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f9e7 	bl	8008bbe <USBD_CtlError>
 80087f0:	e004      	b.n	80087fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 faae 	bl	8008d54 <USBD_CtlSendStatus>
 80087f8:	e000      	b.n	80087fc <USBD_GetDescriptor+0x2cc>
    return;
 80087fa:	bf00      	nop
  }
}
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop

08008804 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	889b      	ldrh	r3, [r3, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d131      	bne.n	800887a <USBD_SetAddress+0x76>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	88db      	ldrh	r3, [r3, #6]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d12d      	bne.n	800887a <USBD_SetAddress+0x76>
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	885b      	ldrh	r3, [r3, #2]
 8008822:	2b7f      	cmp	r3, #127	; 0x7f
 8008824:	d829      	bhi.n	800887a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	885b      	ldrh	r3, [r3, #2]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008830:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b03      	cmp	r3, #3
 800883c:	d104      	bne.n	8008848 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f9bc 	bl	8008bbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008846:	e01d      	b.n	8008884 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	7bfa      	ldrb	r2, [r7, #15]
 800884c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008850:	7bfb      	ldrb	r3, [r7, #15]
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fefb 	bl	8009650 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fa7a 	bl	8008d54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886e:	e009      	b.n	8008884 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008878:	e004      	b.n	8008884 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f99e 	bl	8008bbe <USBD_CtlError>
  }
}
 8008882:	bf00      	nop
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	4b4e      	ldr	r3, [pc, #312]	; (80089dc <USBD_SetConfig+0x150>)
 80088a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088a4:	4b4d      	ldr	r3, [pc, #308]	; (80089dc <USBD_SetConfig+0x150>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d905      	bls.n	80088b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f985 	bl	8008bbe <USBD_CtlError>
    return USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e08c      	b.n	80089d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d002      	beq.n	80088ca <USBD_SetConfig+0x3e>
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d029      	beq.n	800891c <USBD_SetConfig+0x90>
 80088c8:	e075      	b.n	80089b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088ca:	4b44      	ldr	r3, [pc, #272]	; (80089dc <USBD_SetConfig+0x150>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d020      	beq.n	8008914 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80088d2:	4b42      	ldr	r3, [pc, #264]	; (80089dc <USBD_SetConfig+0x150>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088dc:	4b3f      	ldr	r3, [pc, #252]	; (80089dc <USBD_SetConfig+0x150>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7fe ffe7 	bl	80078b6 <USBD_SetClassConfig>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d008      	beq.n	8008904 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f962 	bl	8008bbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2202      	movs	r2, #2
 80088fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008902:	e065      	b.n	80089d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fa25 	bl	8008d54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2203      	movs	r2, #3
 800890e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008912:	e05d      	b.n	80089d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 fa1d 	bl	8008d54 <USBD_CtlSendStatus>
      break;
 800891a:	e059      	b.n	80089d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800891c:	4b2f      	ldr	r3, [pc, #188]	; (80089dc <USBD_SetConfig+0x150>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d112      	bne.n	800894a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800892c:	4b2b      	ldr	r3, [pc, #172]	; (80089dc <USBD_SetConfig+0x150>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	461a      	mov	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008936:	4b29      	ldr	r3, [pc, #164]	; (80089dc <USBD_SetConfig+0x150>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fe ffd6 	bl	80078ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fa06 	bl	8008d54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008948:	e042      	b.n	80089d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800894a:	4b24      	ldr	r3, [pc, #144]	; (80089dc <USBD_SetConfig+0x150>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d02a      	beq.n	80089ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7fe ffc4 	bl	80078ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008966:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <USBD_SetConfig+0x150>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008970:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <USBD_SetConfig+0x150>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7fe ff9d 	bl	80078b6 <USBD_SetClassConfig>
 800897c:	4603      	mov	r3, r0
 800897e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00f      	beq.n	80089a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f918 	bl	8008bbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7fe ffa9 	bl	80078ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089a4:	e014      	b.n	80089d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f9d4 	bl	8008d54 <USBD_CtlSendStatus>
      break;
 80089ac:	e010      	b.n	80089d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f9d0 	bl	8008d54 <USBD_CtlSendStatus>
      break;
 80089b4:	e00c      	b.n	80089d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f900 	bl	8008bbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089be:	4b07      	ldr	r3, [pc, #28]	; (80089dc <USBD_SetConfig+0x150>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fe ff92 	bl	80078ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089ca:	2303      	movs	r3, #3
 80089cc:	73fb      	strb	r3, [r7, #15]
      break;
 80089ce:	bf00      	nop
  }

  return ret;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000320 	.word	0x20000320

080089e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	88db      	ldrh	r3, [r3, #6]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d004      	beq.n	80089fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f8e2 	bl	8008bbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089fa:	e023      	b.n	8008a44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	dc02      	bgt.n	8008a0e <USBD_GetConfig+0x2e>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dc03      	bgt.n	8008a14 <USBD_GetConfig+0x34>
 8008a0c:	e015      	b.n	8008a3a <USBD_GetConfig+0x5a>
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d00b      	beq.n	8008a2a <USBD_GetConfig+0x4a>
 8008a12:	e012      	b.n	8008a3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	2201      	movs	r2, #1
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f93c 	bl	8008ca0 <USBD_CtlSendData>
        break;
 8008a28:	e00c      	b.n	8008a44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f934 	bl	8008ca0 <USBD_CtlSendData>
        break;
 8008a38:	e004      	b.n	8008a44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f8be 	bl	8008bbe <USBD_CtlError>
        break;
 8008a42:	bf00      	nop
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d81e      	bhi.n	8008aa2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	88db      	ldrh	r3, [r3, #6]
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d004      	beq.n	8008a76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f8a5 	bl	8008bbe <USBD_CtlError>
        break;
 8008a74:	e01a      	b.n	8008aac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	f043 0202 	orr.w	r2, r3, #2
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	330c      	adds	r3, #12
 8008a96:	2202      	movs	r2, #2
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f900 	bl	8008ca0 <USBD_CtlSendData>
      break;
 8008aa0:	e004      	b.n	8008aac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f88a 	bl	8008bbe <USBD_CtlError>
      break;
 8008aaa:	bf00      	nop
  }
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	885b      	ldrh	r3, [r3, #2]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d107      	bne.n	8008ad6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f940 	bl	8008d54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ad4:	e013      	b.n	8008afe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	885b      	ldrh	r3, [r3, #2]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d10b      	bne.n	8008af6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	889b      	ldrh	r3, [r3, #4]
 8008ae2:	0a1b      	lsrs	r3, r3, #8
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f930 	bl	8008d54 <USBD_CtlSendStatus>
}
 8008af4:	e003      	b.n	8008afe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f860 	bl	8008bbe <USBD_CtlError>
}
 8008afe:	bf00      	nop
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d80b      	bhi.n	8008b36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	885b      	ldrh	r3, [r3, #2]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d10c      	bne.n	8008b40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f910 	bl	8008d54 <USBD_CtlSendStatus>
      }
      break;
 8008b34:	e004      	b.n	8008b40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f840 	bl	8008bbe <USBD_CtlError>
      break;
 8008b3e:	e000      	b.n	8008b42 <USBD_ClrFeature+0x3c>
      break;
 8008b40:	bf00      	nop
  }
}
 8008b42:	bf00      	nop
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	781a      	ldrb	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3301      	adds	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff fa41 	bl	8007ffc <SWAPBYTE>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3301      	adds	r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f7ff fa34 	bl	8007ffc <SWAPBYTE>
 8008b94:	4603      	mov	r3, r0
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7ff fa27 	bl	8007ffc <SWAPBYTE>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	80da      	strh	r2, [r3, #6]
}
 8008bb6:	bf00      	nop
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bc8:	2180      	movs	r1, #128	; 0x80
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fcd6 	bl	800957c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fcd2 	bl	800957c <USBD_LL_StallEP>
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d036      	beq.n	8008c64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bfa:	6938      	ldr	r0, [r7, #16]
 8008bfc:	f000 f836 	bl	8008c6c <USBD_GetLen>
 8008c00:	4603      	mov	r3, r0
 8008c02:	3301      	adds	r3, #1
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c0e:	7dfb      	ldrb	r3, [r7, #23]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	4413      	add	r3, r2
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	7812      	ldrb	r2, [r2, #0]
 8008c18:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	4413      	add	r3, r2
 8008c26:	2203      	movs	r2, #3
 8008c28:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c30:	e013      	b.n	8008c5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	4413      	add	r3, r2
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	3301      	adds	r3, #1
 8008c42:	613b      	str	r3, [r7, #16]
    idx++;
 8008c44:	7dfb      	ldrb	r3, [r7, #23]
 8008c46:	3301      	adds	r3, #1
 8008c48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	4413      	add	r3, r2
 8008c50:	2200      	movs	r2, #0
 8008c52:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	3301      	adds	r3, #1
 8008c58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e7      	bne.n	8008c32 <USBD_GetString+0x52>
 8008c62:	e000      	b.n	8008c66 <USBD_GetString+0x86>
    return;
 8008c64:	bf00      	nop
  }
}
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c7c:	e005      	b.n	8008c8a <USBD_GetLen+0x1e>
  {
    len++;
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	3301      	adds	r3, #1
 8008c82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	3301      	adds	r3, #1
 8008c88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1f5      	bne.n	8008c7e <USBD_GetLen+0x12>
  }

  return len;
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 fce1 	bl	800968e <USBD_LL_Transmit>

  return USBD_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 fcd0 	bl	800968e <USBD_LL_Transmit>

  return USBD_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2203      	movs	r2, #3
 8008d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	2100      	movs	r1, #0
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fcd4 	bl	80096d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	2100      	movs	r1, #0
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fcc3 	bl	80096d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2204      	movs	r2, #4
 8008d60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d64:	2300      	movs	r3, #0
 8008d66:	2200      	movs	r2, #0
 8008d68:	2100      	movs	r1, #0
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fc8f 	bl	800968e <USBD_LL_Transmit>

  return USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2205      	movs	r2, #5
 8008d86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2100      	movs	r1, #0
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fc9d 	bl	80096d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008da4:	2200      	movs	r2, #0
 8008da6:	4912      	ldr	r1, [pc, #72]	; (8008df0 <MX_USB_DEVICE_Init+0x50>)
 8008da8:	4812      	ldr	r0, [pc, #72]	; (8008df4 <MX_USB_DEVICE_Init+0x54>)
 8008daa:	f7fe fd07 	bl	80077bc <USBD_Init>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008db4:	f7f8 fc97 	bl	80016e6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008db8:	490f      	ldr	r1, [pc, #60]	; (8008df8 <MX_USB_DEVICE_Init+0x58>)
 8008dba:	480e      	ldr	r0, [pc, #56]	; (8008df4 <MX_USB_DEVICE_Init+0x54>)
 8008dbc:	f7fe fd2e 	bl	800781c <USBD_RegisterClass>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008dc6:	f7f8 fc8e 	bl	80016e6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008dca:	490c      	ldr	r1, [pc, #48]	; (8008dfc <MX_USB_DEVICE_Init+0x5c>)
 8008dcc:	4809      	ldr	r0, [pc, #36]	; (8008df4 <MX_USB_DEVICE_Init+0x54>)
 8008dce:	f7fe fc1f 	bl	8007610 <USBD_CDC_RegisterInterface>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008dd8:	f7f8 fc85 	bl	80016e6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ddc:	4805      	ldr	r0, [pc, #20]	; (8008df4 <MX_USB_DEVICE_Init+0x54>)
 8008dde:	f7fe fd53 	bl	8007888 <USBD_Start>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008de8:	f7f8 fc7d 	bl	80016e6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008dec:	bf00      	nop
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	200000d4 	.word	0x200000d4
 8008df4:	20000324 	.word	0x20000324
 8008df8:	20000040 	.word	0x20000040
 8008dfc:	200000c0 	.word	0x200000c0

08008e00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e04:	2200      	movs	r2, #0
 8008e06:	4905      	ldr	r1, [pc, #20]	; (8008e1c <CDC_Init_FS+0x1c>)
 8008e08:	4805      	ldr	r0, [pc, #20]	; (8008e20 <CDC_Init_FS+0x20>)
 8008e0a:	f7fe fc1b 	bl	8007644 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e0e:	4905      	ldr	r1, [pc, #20]	; (8008e24 <CDC_Init_FS+0x24>)
 8008e10:	4803      	ldr	r0, [pc, #12]	; (8008e20 <CDC_Init_FS+0x20>)
 8008e12:	f7fe fc39 	bl	8007688 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000a00 	.word	0x20000a00
 8008e20:	20000324 	.word	0x20000324
 8008e24:	20000600 	.word	0x20000600

08008e28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6039      	str	r1, [r7, #0]
 8008e42:	71fb      	strb	r3, [r7, #7]
 8008e44:	4613      	mov	r3, r2
 8008e46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	2b23      	cmp	r3, #35	; 0x23
 8008e4c:	d84a      	bhi.n	8008ee4 <CDC_Control_FS+0xac>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <CDC_Control_FS+0x1c>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008ee5 	.word	0x08008ee5
 8008e58:	08008ee5 	.word	0x08008ee5
 8008e5c:	08008ee5 	.word	0x08008ee5
 8008e60:	08008ee5 	.word	0x08008ee5
 8008e64:	08008ee5 	.word	0x08008ee5
 8008e68:	08008ee5 	.word	0x08008ee5
 8008e6c:	08008ee5 	.word	0x08008ee5
 8008e70:	08008ee5 	.word	0x08008ee5
 8008e74:	08008ee5 	.word	0x08008ee5
 8008e78:	08008ee5 	.word	0x08008ee5
 8008e7c:	08008ee5 	.word	0x08008ee5
 8008e80:	08008ee5 	.word	0x08008ee5
 8008e84:	08008ee5 	.word	0x08008ee5
 8008e88:	08008ee5 	.word	0x08008ee5
 8008e8c:	08008ee5 	.word	0x08008ee5
 8008e90:	08008ee5 	.word	0x08008ee5
 8008e94:	08008ee5 	.word	0x08008ee5
 8008e98:	08008ee5 	.word	0x08008ee5
 8008e9c:	08008ee5 	.word	0x08008ee5
 8008ea0:	08008ee5 	.word	0x08008ee5
 8008ea4:	08008ee5 	.word	0x08008ee5
 8008ea8:	08008ee5 	.word	0x08008ee5
 8008eac:	08008ee5 	.word	0x08008ee5
 8008eb0:	08008ee5 	.word	0x08008ee5
 8008eb4:	08008ee5 	.word	0x08008ee5
 8008eb8:	08008ee5 	.word	0x08008ee5
 8008ebc:	08008ee5 	.word	0x08008ee5
 8008ec0:	08008ee5 	.word	0x08008ee5
 8008ec4:	08008ee5 	.word	0x08008ee5
 8008ec8:	08008ee5 	.word	0x08008ee5
 8008ecc:	08008ee5 	.word	0x08008ee5
 8008ed0:	08008ee5 	.word	0x08008ee5
 8008ed4:	08008ee5 	.word	0x08008ee5
 8008ed8:	08008ee5 	.word	0x08008ee5
 8008edc:	08008ee5 	.word	0x08008ee5
 8008ee0:	08008ee5 	.word	0x08008ee5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ee4:	bf00      	nop
  }

  return (USBD_OK);
 8008ee6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	4805      	ldr	r0, [pc, #20]	; (8008f18 <CDC_Receive_FS+0x24>)
 8008f02:	f7fe fbc1 	bl	8007688 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f06:	4804      	ldr	r0, [pc, #16]	; (8008f18 <CDC_Receive_FS+0x24>)
 8008f08:	f7fe fc22 	bl	8007750 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20000324 	.word	0x20000324

08008f1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <CDC_Transmit_FS+0x48>)
 8008f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e00b      	b.n	8008f5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f42:	887b      	ldrh	r3, [r7, #2]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6879      	ldr	r1, [r7, #4]
 8008f48:	4806      	ldr	r0, [pc, #24]	; (8008f64 <CDC_Transmit_FS+0x48>)
 8008f4a:	f7fe fb7b 	bl	8007644 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f4e:	4805      	ldr	r0, [pc, #20]	; (8008f64 <CDC_Transmit_FS+0x48>)
 8008f50:	f7fe fbb8 	bl	80076c4 <USBD_CDC_TransmitPacket>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000324 	.word	0x20000324

08008f68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	371c      	adds	r7, #28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
	...

08008f8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	6039      	str	r1, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2212      	movs	r2, #18
 8008f9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f9e:	4b03      	ldr	r3, [pc, #12]	; (8008fac <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	200000f0 	.word	0x200000f0

08008fb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6039      	str	r1, [r7, #0]
 8008fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2204      	movs	r2, #4
 8008fc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fc2:	4b03      	ldr	r3, [pc, #12]	; (8008fd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	20000104 	.word	0x20000104

08008fd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	4907      	ldr	r1, [pc, #28]	; (8009008 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fea:	4808      	ldr	r0, [pc, #32]	; (800900c <USBD_FS_ProductStrDescriptor+0x38>)
 8008fec:	f7ff fdf8 	bl	8008be0 <USBD_GetString>
 8008ff0:	e004      	b.n	8008ffc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	4904      	ldr	r1, [pc, #16]	; (8009008 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ff6:	4805      	ldr	r0, [pc, #20]	; (800900c <USBD_FS_ProductStrDescriptor+0x38>)
 8008ff8:	f7ff fdf2 	bl	8008be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ffc:	4b02      	ldr	r3, [pc, #8]	; (8009008 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20000e00 	.word	0x20000e00
 800900c:	0800ae88 	.word	0x0800ae88

08009010 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	6039      	str	r1, [r7, #0]
 800901a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800901c:	683a      	ldr	r2, [r7, #0]
 800901e:	4904      	ldr	r1, [pc, #16]	; (8009030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009020:	4804      	ldr	r0, [pc, #16]	; (8009034 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009022:	f7ff fddd 	bl	8008be0 <USBD_GetString>
  return USBD_StrDesc;
 8009026:	4b02      	ldr	r3, [pc, #8]	; (8009030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000e00 	.word	0x20000e00
 8009034:	0800aea0 	.word	0x0800aea0

08009038 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	6039      	str	r1, [r7, #0]
 8009042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	221a      	movs	r2, #26
 8009048:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800904a:	f000 f843 	bl	80090d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800904e:	4b02      	ldr	r3, [pc, #8]	; (8009058 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20000108 	.word	0x20000108

0800905c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	6039      	str	r1, [r7, #0]
 8009066:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d105      	bne.n	800907a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	4907      	ldr	r1, [pc, #28]	; (8009090 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009072:	4808      	ldr	r0, [pc, #32]	; (8009094 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009074:	f7ff fdb4 	bl	8008be0 <USBD_GetString>
 8009078:	e004      	b.n	8009084 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	4904      	ldr	r1, [pc, #16]	; (8009090 <USBD_FS_ConfigStrDescriptor+0x34>)
 800907e:	4805      	ldr	r0, [pc, #20]	; (8009094 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009080:	f7ff fdae 	bl	8008be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009084:	4b02      	ldr	r3, [pc, #8]	; (8009090 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009086:	4618      	mov	r0, r3
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20000e00 	.word	0x20000e00
 8009094:	0800aeb4 	.word	0x0800aeb4

08009098 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	4907      	ldr	r1, [pc, #28]	; (80090cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ae:	4808      	ldr	r0, [pc, #32]	; (80090d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090b0:	f7ff fd96 	bl	8008be0 <USBD_GetString>
 80090b4:	e004      	b.n	80090c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4904      	ldr	r1, [pc, #16]	; (80090cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090ba:	4805      	ldr	r0, [pc, #20]	; (80090d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090bc:	f7ff fd90 	bl	8008be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20000e00 	.word	0x20000e00
 80090d0:	0800aec0 	.word	0x0800aec0

080090d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090da:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <Get_SerialNum+0x44>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090e0:	4b0e      	ldr	r3, [pc, #56]	; (800911c <Get_SerialNum+0x48>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090e6:	4b0e      	ldr	r3, [pc, #56]	; (8009120 <Get_SerialNum+0x4c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4413      	add	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d009      	beq.n	800910e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090fa:	2208      	movs	r2, #8
 80090fc:	4909      	ldr	r1, [pc, #36]	; (8009124 <Get_SerialNum+0x50>)
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 f814 	bl	800912c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009104:	2204      	movs	r2, #4
 8009106:	4908      	ldr	r1, [pc, #32]	; (8009128 <Get_SerialNum+0x54>)
 8009108:	68b8      	ldr	r0, [r7, #8]
 800910a:	f000 f80f 	bl	800912c <IntToUnicode>
  }
}
 800910e:	bf00      	nop
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	1fff7a10 	.word	0x1fff7a10
 800911c:	1fff7a14 	.word	0x1fff7a14
 8009120:	1fff7a18 	.word	0x1fff7a18
 8009124:	2000010a 	.word	0x2000010a
 8009128:	2000011a 	.word	0x2000011a

0800912c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	4613      	mov	r3, r2
 8009138:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800913e:	2300      	movs	r3, #0
 8009140:	75fb      	strb	r3, [r7, #23]
 8009142:	e027      	b.n	8009194 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	0f1b      	lsrs	r3, r3, #28
 8009148:	2b09      	cmp	r3, #9
 800914a:	d80b      	bhi.n	8009164 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	0f1b      	lsrs	r3, r3, #28
 8009150:	b2da      	uxtb	r2, r3
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	4619      	mov	r1, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	440b      	add	r3, r1
 800915c:	3230      	adds	r2, #48	; 0x30
 800915e:	b2d2      	uxtb	r2, r2
 8009160:	701a      	strb	r2, [r3, #0]
 8009162:	e00a      	b.n	800917a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	0f1b      	lsrs	r3, r3, #28
 8009168:	b2da      	uxtb	r2, r3
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	4619      	mov	r1, r3
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	440b      	add	r3, r1
 8009174:	3237      	adds	r2, #55	; 0x37
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	011b      	lsls	r3, r3, #4
 800917e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009180:	7dfb      	ldrb	r3, [r7, #23]
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	3301      	adds	r3, #1
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	4413      	add	r3, r2
 800918a:	2200      	movs	r2, #0
 800918c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	3301      	adds	r3, #1
 8009192:	75fb      	strb	r3, [r7, #23]
 8009194:	7dfa      	ldrb	r2, [r7, #23]
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	429a      	cmp	r2, r3
 800919a:	d3d3      	bcc.n	8009144 <IntToUnicode+0x18>
  }
}
 800919c:	bf00      	nop
 800919e:	bf00      	nop
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
	...

080091ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08a      	sub	sp, #40	; 0x28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091b4:	f107 0314 	add.w	r3, r7, #20
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	605a      	str	r2, [r3, #4]
 80091be:	609a      	str	r2, [r3, #8]
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091cc:	d13a      	bne.n	8009244 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	4b1e      	ldr	r3, [pc, #120]	; (800924c <HAL_PCD_MspInit+0xa0>)
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	4a1d      	ldr	r2, [pc, #116]	; (800924c <HAL_PCD_MspInit+0xa0>)
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	6313      	str	r3, [r2, #48]	; 0x30
 80091de:	4b1b      	ldr	r3, [pc, #108]	; (800924c <HAL_PCD_MspInit+0xa0>)
 80091e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	613b      	str	r3, [r7, #16]
 80091e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80091ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80091ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091f0:	2302      	movs	r3, #2
 80091f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f4:	2300      	movs	r3, #0
 80091f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091f8:	2303      	movs	r3, #3
 80091fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091fc:	230a      	movs	r3, #10
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009200:	f107 0314 	add.w	r3, r7, #20
 8009204:	4619      	mov	r1, r3
 8009206:	4812      	ldr	r0, [pc, #72]	; (8009250 <HAL_PCD_MspInit+0xa4>)
 8009208:	f7f9 f8f4 	bl	80023f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800920c:	4b0f      	ldr	r3, [pc, #60]	; (800924c <HAL_PCD_MspInit+0xa0>)
 800920e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009210:	4a0e      	ldr	r2, [pc, #56]	; (800924c <HAL_PCD_MspInit+0xa0>)
 8009212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009216:	6353      	str	r3, [r2, #52]	; 0x34
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	4b0b      	ldr	r3, [pc, #44]	; (800924c <HAL_PCD_MspInit+0xa0>)
 800921e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009220:	4a0a      	ldr	r2, [pc, #40]	; (800924c <HAL_PCD_MspInit+0xa0>)
 8009222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009226:	6453      	str	r3, [r2, #68]	; 0x44
 8009228:	4b08      	ldr	r3, [pc, #32]	; (800924c <HAL_PCD_MspInit+0xa0>)
 800922a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009234:	2200      	movs	r2, #0
 8009236:	2100      	movs	r1, #0
 8009238:	2043      	movs	r0, #67	; 0x43
 800923a:	f7f9 f8a4 	bl	8002386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800923e:	2043      	movs	r0, #67	; 0x43
 8009240:	f7f9 f8bd 	bl	80023be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009244:	bf00      	nop
 8009246:	3728      	adds	r7, #40	; 0x28
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	40023800 	.word	0x40023800
 8009250:	40020000 	.word	0x40020000

08009254 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f7fe fb59 	bl	8007922 <USBD_LL_SetupStage>
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	4613      	mov	r3, r2
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	440b      	add	r3, r1
 8009298:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	4619      	mov	r1, r3
 80092a2:	f7fe fb93 	bl	80079cc <USBD_LL_DataOutStage>
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092c0:	78fa      	ldrb	r2, [r7, #3]
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	334c      	adds	r3, #76	; 0x4c
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	4619      	mov	r1, r3
 80092d6:	f7fe fc2c 	bl	8007b32 <USBD_LL_DataInStage>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fe fd60 	bl	8007db6 <USBD_LL_SOF>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009306:	2301      	movs	r3, #1
 8009308:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	2b02      	cmp	r3, #2
 8009310:	d001      	beq.n	8009316 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009312:	f7f8 f9e8 	bl	80016e6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800931c:	7bfa      	ldrb	r2, [r7, #15]
 800931e:	4611      	mov	r1, r2
 8009320:	4618      	mov	r0, r3
 8009322:	f7fe fd0a 	bl	8007d3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe fcb2 	bl	8007c96 <USBD_LL_Reset>
}
 8009332:	bf00      	nop
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
	...

0800933c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fd05 	bl	8007d5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6812      	ldr	r2, [r2, #0]
 800935e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d005      	beq.n	800937c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009370:	4b04      	ldr	r3, [pc, #16]	; (8009384 <HAL_PCD_SuspendCallback+0x48>)
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	4a03      	ldr	r2, [pc, #12]	; (8009384 <HAL_PCD_SuspendCallback+0x48>)
 8009376:	f043 0306 	orr.w	r3, r3, #6
 800937a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	e000ed00 	.word	0xe000ed00

08009388 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fcf5 	bl	8007d86 <USBD_LL_Resume>
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093b6:	78fa      	ldrb	r2, [r7, #3]
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fd4d 	bl	8007e5a <USBD_LL_IsoOUTIncomplete>
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093da:	78fa      	ldrb	r2, [r7, #3]
 80093dc:	4611      	mov	r1, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fd09 	bl	8007df6 <USBD_LL_IsoINIncomplete>
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fe fd5f 	bl	8007ebe <USBD_LL_DevConnected>
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fd5c 	bl	8007ed4 <USBD_LL_DevDisconnected>
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d13c      	bne.n	80094ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009434:	4a20      	ldr	r2, [pc, #128]	; (80094b8 <USBD_LL_Init+0x94>)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a1e      	ldr	r2, [pc, #120]	; (80094b8 <USBD_LL_Init+0x94>)
 8009440:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009444:	4b1c      	ldr	r3, [pc, #112]	; (80094b8 <USBD_LL_Init+0x94>)
 8009446:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800944a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800944c:	4b1a      	ldr	r3, [pc, #104]	; (80094b8 <USBD_LL_Init+0x94>)
 800944e:	2204      	movs	r2, #4
 8009450:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009452:	4b19      	ldr	r3, [pc, #100]	; (80094b8 <USBD_LL_Init+0x94>)
 8009454:	2202      	movs	r2, #2
 8009456:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009458:	4b17      	ldr	r3, [pc, #92]	; (80094b8 <USBD_LL_Init+0x94>)
 800945a:	2200      	movs	r2, #0
 800945c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800945e:	4b16      	ldr	r3, [pc, #88]	; (80094b8 <USBD_LL_Init+0x94>)
 8009460:	2202      	movs	r2, #2
 8009462:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009464:	4b14      	ldr	r3, [pc, #80]	; (80094b8 <USBD_LL_Init+0x94>)
 8009466:	2200      	movs	r2, #0
 8009468:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800946a:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <USBD_LL_Init+0x94>)
 800946c:	2200      	movs	r2, #0
 800946e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009470:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <USBD_LL_Init+0x94>)
 8009472:	2200      	movs	r2, #0
 8009474:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009476:	4b10      	ldr	r3, [pc, #64]	; (80094b8 <USBD_LL_Init+0x94>)
 8009478:	2200      	movs	r2, #0
 800947a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800947c:	4b0e      	ldr	r3, [pc, #56]	; (80094b8 <USBD_LL_Init+0x94>)
 800947e:	2200      	movs	r2, #0
 8009480:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009482:	480d      	ldr	r0, [pc, #52]	; (80094b8 <USBD_LL_Init+0x94>)
 8009484:	f7f9 f9a9 	bl	80027da <HAL_PCD_Init>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800948e:	f7f8 f92a 	bl	80016e6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009492:	2180      	movs	r1, #128	; 0x80
 8009494:	4808      	ldr	r0, [pc, #32]	; (80094b8 <USBD_LL_Init+0x94>)
 8009496:	f7fa fc00 	bl	8003c9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800949a:	2240      	movs	r2, #64	; 0x40
 800949c:	2100      	movs	r1, #0
 800949e:	4806      	ldr	r0, [pc, #24]	; (80094b8 <USBD_LL_Init+0x94>)
 80094a0:	f7fa fbb4 	bl	8003c0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094a4:	2280      	movs	r2, #128	; 0x80
 80094a6:	2101      	movs	r1, #1
 80094a8:	4803      	ldr	r0, [pc, #12]	; (80094b8 <USBD_LL_Init+0x94>)
 80094aa:	f7fa fbaf 	bl	8003c0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20001000 	.word	0x20001000

080094bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7f9 fa9e 	bl	8002a14 <HAL_PCD_Start>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094dc:	7bfb      	ldrb	r3, [r7, #15]
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 f942 	bl	8009768 <USBD_Get_USB_Status>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	4608      	mov	r0, r1
 80094fc:	4611      	mov	r1, r2
 80094fe:	461a      	mov	r2, r3
 8009500:	4603      	mov	r3, r0
 8009502:	70fb      	strb	r3, [r7, #3]
 8009504:	460b      	mov	r3, r1
 8009506:	70bb      	strb	r3, [r7, #2]
 8009508:	4613      	mov	r3, r2
 800950a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800951a:	78bb      	ldrb	r3, [r7, #2]
 800951c:	883a      	ldrh	r2, [r7, #0]
 800951e:	78f9      	ldrb	r1, [r7, #3]
 8009520:	f7f9 ff6f 	bl	8003402 <HAL_PCD_EP_Open>
 8009524:	4603      	mov	r3, r0
 8009526:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f91c 	bl	8009768 <USBD_Get_USB_Status>
 8009530:	4603      	mov	r3, r0
 8009532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009534:	7bbb      	ldrb	r3, [r7, #14]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009558:	78fa      	ldrb	r2, [r7, #3]
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f7f9 ffb8 	bl	80034d2 <HAL_PCD_EP_Close>
 8009562:	4603      	mov	r3, r0
 8009564:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f8fd 	bl	8009768 <USBD_Get_USB_Status>
 800956e:	4603      	mov	r3, r0
 8009570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009572:	7bbb      	ldrb	r3, [r7, #14]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	460b      	mov	r3, r1
 8009586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009596:	78fa      	ldrb	r2, [r7, #3]
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f7fa f890 	bl	80036c0 <HAL_PCD_EP_SetStall>
 80095a0:	4603      	mov	r3, r0
 80095a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 f8de 	bl	8009768 <USBD_Get_USB_Status>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	460b      	mov	r3, r1
 80095c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095d4:	78fa      	ldrb	r2, [r7, #3]
 80095d6:	4611      	mov	r1, r2
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fa f8d5 	bl	8003788 <HAL_PCD_EP_ClrStall>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 f8bf 	bl	8009768 <USBD_Get_USB_Status>
 80095ea:	4603      	mov	r3, r0
 80095ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800960a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800960c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009610:	2b00      	cmp	r3, #0
 8009612:	da0b      	bge.n	800962c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800961a:	68f9      	ldr	r1, [r7, #12]
 800961c:	4613      	mov	r3, r2
 800961e:	00db      	lsls	r3, r3, #3
 8009620:	4413      	add	r3, r2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	440b      	add	r3, r1
 8009626:	333e      	adds	r3, #62	; 0x3e
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	e00b      	b.n	8009644 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800962c:	78fb      	ldrb	r3, [r7, #3]
 800962e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	4613      	mov	r3, r2
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	440b      	add	r3, r1
 800963e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009642:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800966a:	78fa      	ldrb	r2, [r7, #3]
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f7f9 fea2 	bl	80033b8 <HAL_PCD_SetAddress>
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	4618      	mov	r0, r3
 800967c:	f000 f874 	bl	8009768 <USBD_Get_USB_Status>
 8009680:	4603      	mov	r3, r0
 8009682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009684:	7bbb      	ldrb	r3, [r7, #14]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b086      	sub	sp, #24
 8009692:	af00      	add	r7, sp, #0
 8009694:	60f8      	str	r0, [r7, #12]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
 800969a:	460b      	mov	r3, r1
 800969c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096ac:	7af9      	ldrb	r1, [r7, #11]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	f7f9 ffbb 	bl	800362c <HAL_PCD_EP_Transmit>
 80096b6:	4603      	mov	r3, r0
 80096b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ba:	7dfb      	ldrb	r3, [r7, #23]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f853 	bl	8009768 <USBD_Get_USB_Status>
 80096c2:	4603      	mov	r3, r0
 80096c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	607a      	str	r2, [r7, #4]
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	460b      	mov	r3, r1
 80096de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096ee:	7af9      	ldrb	r1, [r7, #11]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	f7f9 ff37 	bl	8003566 <HAL_PCD_EP_Receive>
 80096f8:	4603      	mov	r3, r0
 80096fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 f832 	bl	8009768 <USBD_Get_USB_Status>
 8009704:	4603      	mov	r3, r0
 8009706:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009708:	7dbb      	ldrb	r3, [r7, #22]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	4611      	mov	r1, r2
 8009728:	4618      	mov	r0, r3
 800972a:	f7f9 ff67 	bl	80035fc <HAL_PCD_EP_GetRxCount>
 800972e:	4603      	mov	r3, r0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009740:	4b03      	ldr	r3, [pc, #12]	; (8009750 <USBD_static_malloc+0x18>)
}
 8009742:	4618      	mov	r0, r3
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	2000150c 	.word	0x2000150c

08009754 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]

}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	4603      	mov	r3, r0
 8009770:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d817      	bhi.n	80097ac <USBD_Get_USB_Status+0x44>
 800977c:	a201      	add	r2, pc, #4	; (adr r2, 8009784 <USBD_Get_USB_Status+0x1c>)
 800977e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009782:	bf00      	nop
 8009784:	08009795 	.word	0x08009795
 8009788:	0800979b 	.word	0x0800979b
 800978c:	080097a1 	.word	0x080097a1
 8009790:	080097a7 	.word	0x080097a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
    break;
 8009798:	e00b      	b.n	80097b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800979a:	2303      	movs	r3, #3
 800979c:	73fb      	strb	r3, [r7, #15]
    break;
 800979e:	e008      	b.n	80097b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097a0:	2301      	movs	r3, #1
 80097a2:	73fb      	strb	r3, [r7, #15]
    break;
 80097a4:	e005      	b.n	80097b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097a6:	2303      	movs	r3, #3
 80097a8:	73fb      	strb	r3, [r7, #15]
    break;
 80097aa:	e002      	b.n	80097b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097ac:	2303      	movs	r3, #3
 80097ae:	73fb      	strb	r3, [r7, #15]
    break;
 80097b0:	bf00      	nop
  }
  return usb_status;
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <__errno>:
 80097c0:	4b01      	ldr	r3, [pc, #4]	; (80097c8 <__errno+0x8>)
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20000124 	.word	0x20000124

080097cc <__libc_init_array>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	4d0d      	ldr	r5, [pc, #52]	; (8009804 <__libc_init_array+0x38>)
 80097d0:	4c0d      	ldr	r4, [pc, #52]	; (8009808 <__libc_init_array+0x3c>)
 80097d2:	1b64      	subs	r4, r4, r5
 80097d4:	10a4      	asrs	r4, r4, #2
 80097d6:	2600      	movs	r6, #0
 80097d8:	42a6      	cmp	r6, r4
 80097da:	d109      	bne.n	80097f0 <__libc_init_array+0x24>
 80097dc:	4d0b      	ldr	r5, [pc, #44]	; (800980c <__libc_init_array+0x40>)
 80097de:	4c0c      	ldr	r4, [pc, #48]	; (8009810 <__libc_init_array+0x44>)
 80097e0:	f001 fb44 	bl	800ae6c <_init>
 80097e4:	1b64      	subs	r4, r4, r5
 80097e6:	10a4      	asrs	r4, r4, #2
 80097e8:	2600      	movs	r6, #0
 80097ea:	42a6      	cmp	r6, r4
 80097ec:	d105      	bne.n	80097fa <__libc_init_array+0x2e>
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f4:	4798      	blx	r3
 80097f6:	3601      	adds	r6, #1
 80097f8:	e7ee      	b.n	80097d8 <__libc_init_array+0xc>
 80097fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80097fe:	4798      	blx	r3
 8009800:	3601      	adds	r6, #1
 8009802:	e7f2      	b.n	80097ea <__libc_init_array+0x1e>
 8009804:	0800b100 	.word	0x0800b100
 8009808:	0800b100 	.word	0x0800b100
 800980c:	0800b100 	.word	0x0800b100
 8009810:	0800b104 	.word	0x0800b104

08009814 <memset>:
 8009814:	4402      	add	r2, r0
 8009816:	4603      	mov	r3, r0
 8009818:	4293      	cmp	r3, r2
 800981a:	d100      	bne.n	800981e <memset+0xa>
 800981c:	4770      	bx	lr
 800981e:	f803 1b01 	strb.w	r1, [r3], #1
 8009822:	e7f9      	b.n	8009818 <memset+0x4>
 8009824:	0000      	movs	r0, r0
	...

08009828 <atan>:
 8009828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	ec55 4b10 	vmov	r4, r5, d0
 8009830:	4bc3      	ldr	r3, [pc, #780]	; (8009b40 <atan+0x318>)
 8009832:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009836:	429e      	cmp	r6, r3
 8009838:	46ab      	mov	fp, r5
 800983a:	dd18      	ble.n	800986e <atan+0x46>
 800983c:	4bc1      	ldr	r3, [pc, #772]	; (8009b44 <atan+0x31c>)
 800983e:	429e      	cmp	r6, r3
 8009840:	dc01      	bgt.n	8009846 <atan+0x1e>
 8009842:	d109      	bne.n	8009858 <atan+0x30>
 8009844:	b144      	cbz	r4, 8009858 <atan+0x30>
 8009846:	4622      	mov	r2, r4
 8009848:	462b      	mov	r3, r5
 800984a:	4620      	mov	r0, r4
 800984c:	4629      	mov	r1, r5
 800984e:	f7f6 fcd3 	bl	80001f8 <__adddf3>
 8009852:	4604      	mov	r4, r0
 8009854:	460d      	mov	r5, r1
 8009856:	e006      	b.n	8009866 <atan+0x3e>
 8009858:	f1bb 0f00 	cmp.w	fp, #0
 800985c:	f300 8131 	bgt.w	8009ac2 <atan+0x29a>
 8009860:	a59b      	add	r5, pc, #620	; (adr r5, 8009ad0 <atan+0x2a8>)
 8009862:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009866:	ec45 4b10 	vmov	d0, r4, r5
 800986a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986e:	4bb6      	ldr	r3, [pc, #728]	; (8009b48 <atan+0x320>)
 8009870:	429e      	cmp	r6, r3
 8009872:	dc14      	bgt.n	800989e <atan+0x76>
 8009874:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009878:	429e      	cmp	r6, r3
 800987a:	dc0d      	bgt.n	8009898 <atan+0x70>
 800987c:	a396      	add	r3, pc, #600	; (adr r3, 8009ad8 <atan+0x2b0>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	ee10 0a10 	vmov	r0, s0
 8009886:	4629      	mov	r1, r5
 8009888:	f7f6 fcb6 	bl	80001f8 <__adddf3>
 800988c:	4baf      	ldr	r3, [pc, #700]	; (8009b4c <atan+0x324>)
 800988e:	2200      	movs	r2, #0
 8009890:	f7f7 f8f8 	bl	8000a84 <__aeabi_dcmpgt>
 8009894:	2800      	cmp	r0, #0
 8009896:	d1e6      	bne.n	8009866 <atan+0x3e>
 8009898:	f04f 3aff 	mov.w	sl, #4294967295
 800989c:	e02b      	b.n	80098f6 <atan+0xce>
 800989e:	f000 f9b7 	bl	8009c10 <fabs>
 80098a2:	4bab      	ldr	r3, [pc, #684]	; (8009b50 <atan+0x328>)
 80098a4:	429e      	cmp	r6, r3
 80098a6:	ec55 4b10 	vmov	r4, r5, d0
 80098aa:	f300 80bf 	bgt.w	8009a2c <atan+0x204>
 80098ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80098b2:	429e      	cmp	r6, r3
 80098b4:	f300 80a0 	bgt.w	80099f8 <atan+0x1d0>
 80098b8:	ee10 2a10 	vmov	r2, s0
 80098bc:	ee10 0a10 	vmov	r0, s0
 80098c0:	462b      	mov	r3, r5
 80098c2:	4629      	mov	r1, r5
 80098c4:	f7f6 fc98 	bl	80001f8 <__adddf3>
 80098c8:	4ba0      	ldr	r3, [pc, #640]	; (8009b4c <atan+0x324>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	f7f6 fc92 	bl	80001f4 <__aeabi_dsub>
 80098d0:	2200      	movs	r2, #0
 80098d2:	4606      	mov	r6, r0
 80098d4:	460f      	mov	r7, r1
 80098d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098da:	4620      	mov	r0, r4
 80098dc:	4629      	mov	r1, r5
 80098de:	f7f6 fc8b 	bl	80001f8 <__adddf3>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4630      	mov	r0, r6
 80098e8:	4639      	mov	r1, r7
 80098ea:	f7f6 ff65 	bl	80007b8 <__aeabi_ddiv>
 80098ee:	f04f 0a00 	mov.w	sl, #0
 80098f2:	4604      	mov	r4, r0
 80098f4:	460d      	mov	r5, r1
 80098f6:	4622      	mov	r2, r4
 80098f8:	462b      	mov	r3, r5
 80098fa:	4620      	mov	r0, r4
 80098fc:	4629      	mov	r1, r5
 80098fe:	f7f6 fe31 	bl	8000564 <__aeabi_dmul>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4680      	mov	r8, r0
 8009908:	4689      	mov	r9, r1
 800990a:	f7f6 fe2b 	bl	8000564 <__aeabi_dmul>
 800990e:	a374      	add	r3, pc, #464	; (adr r3, 8009ae0 <atan+0x2b8>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	4606      	mov	r6, r0
 8009916:	460f      	mov	r7, r1
 8009918:	f7f6 fe24 	bl	8000564 <__aeabi_dmul>
 800991c:	a372      	add	r3, pc, #456	; (adr r3, 8009ae8 <atan+0x2c0>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f7f6 fc69 	bl	80001f8 <__adddf3>
 8009926:	4632      	mov	r2, r6
 8009928:	463b      	mov	r3, r7
 800992a:	f7f6 fe1b 	bl	8000564 <__aeabi_dmul>
 800992e:	a370      	add	r3, pc, #448	; (adr r3, 8009af0 <atan+0x2c8>)
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7f6 fc60 	bl	80001f8 <__adddf3>
 8009938:	4632      	mov	r2, r6
 800993a:	463b      	mov	r3, r7
 800993c:	f7f6 fe12 	bl	8000564 <__aeabi_dmul>
 8009940:	a36d      	add	r3, pc, #436	; (adr r3, 8009af8 <atan+0x2d0>)
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	f7f6 fc57 	bl	80001f8 <__adddf3>
 800994a:	4632      	mov	r2, r6
 800994c:	463b      	mov	r3, r7
 800994e:	f7f6 fe09 	bl	8000564 <__aeabi_dmul>
 8009952:	a36b      	add	r3, pc, #428	; (adr r3, 8009b00 <atan+0x2d8>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f7f6 fc4e 	bl	80001f8 <__adddf3>
 800995c:	4632      	mov	r2, r6
 800995e:	463b      	mov	r3, r7
 8009960:	f7f6 fe00 	bl	8000564 <__aeabi_dmul>
 8009964:	a368      	add	r3, pc, #416	; (adr r3, 8009b08 <atan+0x2e0>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f7f6 fc45 	bl	80001f8 <__adddf3>
 800996e:	4642      	mov	r2, r8
 8009970:	464b      	mov	r3, r9
 8009972:	f7f6 fdf7 	bl	8000564 <__aeabi_dmul>
 8009976:	a366      	add	r3, pc, #408	; (adr r3, 8009b10 <atan+0x2e8>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	4680      	mov	r8, r0
 800997e:	4689      	mov	r9, r1
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f7f6 fdee 	bl	8000564 <__aeabi_dmul>
 8009988:	a363      	add	r3, pc, #396	; (adr r3, 8009b18 <atan+0x2f0>)
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	f7f6 fc31 	bl	80001f4 <__aeabi_dsub>
 8009992:	4632      	mov	r2, r6
 8009994:	463b      	mov	r3, r7
 8009996:	f7f6 fde5 	bl	8000564 <__aeabi_dmul>
 800999a:	a361      	add	r3, pc, #388	; (adr r3, 8009b20 <atan+0x2f8>)
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	f7f6 fc28 	bl	80001f4 <__aeabi_dsub>
 80099a4:	4632      	mov	r2, r6
 80099a6:	463b      	mov	r3, r7
 80099a8:	f7f6 fddc 	bl	8000564 <__aeabi_dmul>
 80099ac:	a35e      	add	r3, pc, #376	; (adr r3, 8009b28 <atan+0x300>)
 80099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b2:	f7f6 fc1f 	bl	80001f4 <__aeabi_dsub>
 80099b6:	4632      	mov	r2, r6
 80099b8:	463b      	mov	r3, r7
 80099ba:	f7f6 fdd3 	bl	8000564 <__aeabi_dmul>
 80099be:	a35c      	add	r3, pc, #368	; (adr r3, 8009b30 <atan+0x308>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f6 fc16 	bl	80001f4 <__aeabi_dsub>
 80099c8:	4632      	mov	r2, r6
 80099ca:	463b      	mov	r3, r7
 80099cc:	f7f6 fdca 	bl	8000564 <__aeabi_dmul>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4640      	mov	r0, r8
 80099d6:	4649      	mov	r1, r9
 80099d8:	f7f6 fc0e 	bl	80001f8 <__adddf3>
 80099dc:	4622      	mov	r2, r4
 80099de:	462b      	mov	r3, r5
 80099e0:	f7f6 fdc0 	bl	8000564 <__aeabi_dmul>
 80099e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	d14b      	bne.n	8009a86 <atan+0x25e>
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fbff 	bl	80001f4 <__aeabi_dsub>
 80099f6:	e72c      	b.n	8009852 <atan+0x2a>
 80099f8:	ee10 0a10 	vmov	r0, s0
 80099fc:	4b53      	ldr	r3, [pc, #332]	; (8009b4c <atan+0x324>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	4629      	mov	r1, r5
 8009a02:	f7f6 fbf7 	bl	80001f4 <__aeabi_dsub>
 8009a06:	4b51      	ldr	r3, [pc, #324]	; (8009b4c <atan+0x324>)
 8009a08:	4606      	mov	r6, r0
 8009a0a:	460f      	mov	r7, r1
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7f6 fbf1 	bl	80001f8 <__adddf3>
 8009a16:	4602      	mov	r2, r0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	f7f6 fecb 	bl	80007b8 <__aeabi_ddiv>
 8009a22:	f04f 0a01 	mov.w	sl, #1
 8009a26:	4604      	mov	r4, r0
 8009a28:	460d      	mov	r5, r1
 8009a2a:	e764      	b.n	80098f6 <atan+0xce>
 8009a2c:	4b49      	ldr	r3, [pc, #292]	; (8009b54 <atan+0x32c>)
 8009a2e:	429e      	cmp	r6, r3
 8009a30:	da1d      	bge.n	8009a6e <atan+0x246>
 8009a32:	ee10 0a10 	vmov	r0, s0
 8009a36:	4b48      	ldr	r3, [pc, #288]	; (8009b58 <atan+0x330>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	f7f6 fbda 	bl	80001f4 <__aeabi_dsub>
 8009a40:	4b45      	ldr	r3, [pc, #276]	; (8009b58 <atan+0x330>)
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	2200      	movs	r2, #0
 8009a48:	4620      	mov	r0, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	f7f6 fd8a 	bl	8000564 <__aeabi_dmul>
 8009a50:	4b3e      	ldr	r3, [pc, #248]	; (8009b4c <atan+0x324>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	f7f6 fbd0 	bl	80001f8 <__adddf3>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	4639      	mov	r1, r7
 8009a60:	f7f6 feaa 	bl	80007b8 <__aeabi_ddiv>
 8009a64:	f04f 0a02 	mov.w	sl, #2
 8009a68:	4604      	mov	r4, r0
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	e743      	b.n	80098f6 <atan+0xce>
 8009a6e:	462b      	mov	r3, r5
 8009a70:	ee10 2a10 	vmov	r2, s0
 8009a74:	4939      	ldr	r1, [pc, #228]	; (8009b5c <atan+0x334>)
 8009a76:	2000      	movs	r0, #0
 8009a78:	f7f6 fe9e 	bl	80007b8 <__aeabi_ddiv>
 8009a7c:	f04f 0a03 	mov.w	sl, #3
 8009a80:	4604      	mov	r4, r0
 8009a82:	460d      	mov	r5, r1
 8009a84:	e737      	b.n	80098f6 <atan+0xce>
 8009a86:	4b36      	ldr	r3, [pc, #216]	; (8009b60 <atan+0x338>)
 8009a88:	4e36      	ldr	r6, [pc, #216]	; (8009b64 <atan+0x33c>)
 8009a8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009a8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009a92:	e9da 2300 	ldrd	r2, r3, [sl]
 8009a96:	f7f6 fbad 	bl	80001f4 <__aeabi_dsub>
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	f7f6 fba9 	bl	80001f4 <__aeabi_dsub>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009aaa:	f7f6 fba3 	bl	80001f4 <__aeabi_dsub>
 8009aae:	f1bb 0f00 	cmp.w	fp, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	460d      	mov	r5, r1
 8009ab6:	f6bf aed6 	bge.w	8009866 <atan+0x3e>
 8009aba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009abe:	461d      	mov	r5, r3
 8009ac0:	e6d1      	b.n	8009866 <atan+0x3e>
 8009ac2:	a51d      	add	r5, pc, #116	; (adr r5, 8009b38 <atan+0x310>)
 8009ac4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ac8:	e6cd      	b.n	8009866 <atan+0x3e>
 8009aca:	bf00      	nop
 8009acc:	f3af 8000 	nop.w
 8009ad0:	54442d18 	.word	0x54442d18
 8009ad4:	bff921fb 	.word	0xbff921fb
 8009ad8:	8800759c 	.word	0x8800759c
 8009adc:	7e37e43c 	.word	0x7e37e43c
 8009ae0:	e322da11 	.word	0xe322da11
 8009ae4:	3f90ad3a 	.word	0x3f90ad3a
 8009ae8:	24760deb 	.word	0x24760deb
 8009aec:	3fa97b4b 	.word	0x3fa97b4b
 8009af0:	a0d03d51 	.word	0xa0d03d51
 8009af4:	3fb10d66 	.word	0x3fb10d66
 8009af8:	c54c206e 	.word	0xc54c206e
 8009afc:	3fb745cd 	.word	0x3fb745cd
 8009b00:	920083ff 	.word	0x920083ff
 8009b04:	3fc24924 	.word	0x3fc24924
 8009b08:	5555550d 	.word	0x5555550d
 8009b0c:	3fd55555 	.word	0x3fd55555
 8009b10:	2c6a6c2f 	.word	0x2c6a6c2f
 8009b14:	bfa2b444 	.word	0xbfa2b444
 8009b18:	52defd9a 	.word	0x52defd9a
 8009b1c:	3fadde2d 	.word	0x3fadde2d
 8009b20:	af749a6d 	.word	0xaf749a6d
 8009b24:	3fb3b0f2 	.word	0x3fb3b0f2
 8009b28:	fe231671 	.word	0xfe231671
 8009b2c:	3fbc71c6 	.word	0x3fbc71c6
 8009b30:	9998ebc4 	.word	0x9998ebc4
 8009b34:	3fc99999 	.word	0x3fc99999
 8009b38:	54442d18 	.word	0x54442d18
 8009b3c:	3ff921fb 	.word	0x3ff921fb
 8009b40:	440fffff 	.word	0x440fffff
 8009b44:	7ff00000 	.word	0x7ff00000
 8009b48:	3fdbffff 	.word	0x3fdbffff
 8009b4c:	3ff00000 	.word	0x3ff00000
 8009b50:	3ff2ffff 	.word	0x3ff2ffff
 8009b54:	40038000 	.word	0x40038000
 8009b58:	3ff80000 	.word	0x3ff80000
 8009b5c:	bff00000 	.word	0xbff00000
 8009b60:	0800af00 	.word	0x0800af00
 8009b64:	0800aee0 	.word	0x0800aee0

08009b68 <cos>:
 8009b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b6a:	ec53 2b10 	vmov	r2, r3, d0
 8009b6e:	4826      	ldr	r0, [pc, #152]	; (8009c08 <cos+0xa0>)
 8009b70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009b74:	4281      	cmp	r1, r0
 8009b76:	dc06      	bgt.n	8009b86 <cos+0x1e>
 8009b78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009c00 <cos+0x98>
 8009b7c:	b005      	add	sp, #20
 8009b7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b82:	f000 bb95 	b.w	800a2b0 <__kernel_cos>
 8009b86:	4821      	ldr	r0, [pc, #132]	; (8009c0c <cos+0xa4>)
 8009b88:	4281      	cmp	r1, r0
 8009b8a:	dd09      	ble.n	8009ba0 <cos+0x38>
 8009b8c:	ee10 0a10 	vmov	r0, s0
 8009b90:	4619      	mov	r1, r3
 8009b92:	f7f6 fb2f 	bl	80001f4 <__aeabi_dsub>
 8009b96:	ec41 0b10 	vmov	d0, r0, r1
 8009b9a:	b005      	add	sp, #20
 8009b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ba0:	4668      	mov	r0, sp
 8009ba2:	f000 f8c5 	bl	8009d30 <__ieee754_rem_pio2>
 8009ba6:	f000 0003 	and.w	r0, r0, #3
 8009baa:	2801      	cmp	r0, #1
 8009bac:	d00b      	beq.n	8009bc6 <cos+0x5e>
 8009bae:	2802      	cmp	r0, #2
 8009bb0:	d016      	beq.n	8009be0 <cos+0x78>
 8009bb2:	b9e0      	cbnz	r0, 8009bee <cos+0x86>
 8009bb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009bb8:	ed9d 0b00 	vldr	d0, [sp]
 8009bbc:	f000 fb78 	bl	800a2b0 <__kernel_cos>
 8009bc0:	ec51 0b10 	vmov	r0, r1, d0
 8009bc4:	e7e7      	b.n	8009b96 <cos+0x2e>
 8009bc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009bca:	ed9d 0b00 	vldr	d0, [sp]
 8009bce:	f000 ff87 	bl	800aae0 <__kernel_sin>
 8009bd2:	ec53 2b10 	vmov	r2, r3, d0
 8009bd6:	ee10 0a10 	vmov	r0, s0
 8009bda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009bde:	e7da      	b.n	8009b96 <cos+0x2e>
 8009be0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009be4:	ed9d 0b00 	vldr	d0, [sp]
 8009be8:	f000 fb62 	bl	800a2b0 <__kernel_cos>
 8009bec:	e7f1      	b.n	8009bd2 <cos+0x6a>
 8009bee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009bf2:	ed9d 0b00 	vldr	d0, [sp]
 8009bf6:	2001      	movs	r0, #1
 8009bf8:	f000 ff72 	bl	800aae0 <__kernel_sin>
 8009bfc:	e7e0      	b.n	8009bc0 <cos+0x58>
 8009bfe:	bf00      	nop
	...
 8009c08:	3fe921fb 	.word	0x3fe921fb
 8009c0c:	7fefffff 	.word	0x7fefffff

08009c10 <fabs>:
 8009c10:	ec51 0b10 	vmov	r0, r1, d0
 8009c14:	ee10 2a10 	vmov	r2, s0
 8009c18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c1c:	ec43 2b10 	vmov	d0, r2, r3
 8009c20:	4770      	bx	lr
 8009c22:	0000      	movs	r0, r0
 8009c24:	0000      	movs	r0, r0
	...

08009c28 <sin>:
 8009c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c2a:	ec53 2b10 	vmov	r2, r3, d0
 8009c2e:	4828      	ldr	r0, [pc, #160]	; (8009cd0 <sin+0xa8>)
 8009c30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c34:	4281      	cmp	r1, r0
 8009c36:	dc07      	bgt.n	8009c48 <sin+0x20>
 8009c38:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009cc8 <sin+0xa0>
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	b005      	add	sp, #20
 8009c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c44:	f000 bf4c 	b.w	800aae0 <__kernel_sin>
 8009c48:	4822      	ldr	r0, [pc, #136]	; (8009cd4 <sin+0xac>)
 8009c4a:	4281      	cmp	r1, r0
 8009c4c:	dd09      	ble.n	8009c62 <sin+0x3a>
 8009c4e:	ee10 0a10 	vmov	r0, s0
 8009c52:	4619      	mov	r1, r3
 8009c54:	f7f6 face 	bl	80001f4 <__aeabi_dsub>
 8009c58:	ec41 0b10 	vmov	d0, r0, r1
 8009c5c:	b005      	add	sp, #20
 8009c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c62:	4668      	mov	r0, sp
 8009c64:	f000 f864 	bl	8009d30 <__ieee754_rem_pio2>
 8009c68:	f000 0003 	and.w	r0, r0, #3
 8009c6c:	2801      	cmp	r0, #1
 8009c6e:	d00c      	beq.n	8009c8a <sin+0x62>
 8009c70:	2802      	cmp	r0, #2
 8009c72:	d011      	beq.n	8009c98 <sin+0x70>
 8009c74:	b9f0      	cbnz	r0, 8009cb4 <sin+0x8c>
 8009c76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c7a:	ed9d 0b00 	vldr	d0, [sp]
 8009c7e:	2001      	movs	r0, #1
 8009c80:	f000 ff2e 	bl	800aae0 <__kernel_sin>
 8009c84:	ec51 0b10 	vmov	r0, r1, d0
 8009c88:	e7e6      	b.n	8009c58 <sin+0x30>
 8009c8a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c8e:	ed9d 0b00 	vldr	d0, [sp]
 8009c92:	f000 fb0d 	bl	800a2b0 <__kernel_cos>
 8009c96:	e7f5      	b.n	8009c84 <sin+0x5c>
 8009c98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c9c:	ed9d 0b00 	vldr	d0, [sp]
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	f000 ff1d 	bl	800aae0 <__kernel_sin>
 8009ca6:	ec53 2b10 	vmov	r2, r3, d0
 8009caa:	ee10 0a10 	vmov	r0, s0
 8009cae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009cb2:	e7d1      	b.n	8009c58 <sin+0x30>
 8009cb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009cb8:	ed9d 0b00 	vldr	d0, [sp]
 8009cbc:	f000 faf8 	bl	800a2b0 <__kernel_cos>
 8009cc0:	e7f1      	b.n	8009ca6 <sin+0x7e>
 8009cc2:	bf00      	nop
 8009cc4:	f3af 8000 	nop.w
	...
 8009cd0:	3fe921fb 	.word	0x3fe921fb
 8009cd4:	7fefffff 	.word	0x7fefffff

08009cd8 <sqrt>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	ed2d 8b02 	vpush	{d8}
 8009cde:	ec55 4b10 	vmov	r4, r5, d0
 8009ce2:	f000 fa31 	bl	800a148 <__ieee754_sqrt>
 8009ce6:	4622      	mov	r2, r4
 8009ce8:	462b      	mov	r3, r5
 8009cea:	4620      	mov	r0, r4
 8009cec:	4629      	mov	r1, r5
 8009cee:	eeb0 8a40 	vmov.f32	s16, s0
 8009cf2:	eef0 8a60 	vmov.f32	s17, s1
 8009cf6:	f7f6 fecf 	bl	8000a98 <__aeabi_dcmpun>
 8009cfa:	b990      	cbnz	r0, 8009d22 <sqrt+0x4a>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4620      	mov	r0, r4
 8009d02:	4629      	mov	r1, r5
 8009d04:	f7f6 fea0 	bl	8000a48 <__aeabi_dcmplt>
 8009d08:	b158      	cbz	r0, 8009d22 <sqrt+0x4a>
 8009d0a:	f7ff fd59 	bl	80097c0 <__errno>
 8009d0e:	2321      	movs	r3, #33	; 0x21
 8009d10:	6003      	str	r3, [r0, #0]
 8009d12:	2200      	movs	r2, #0
 8009d14:	2300      	movs	r3, #0
 8009d16:	4610      	mov	r0, r2
 8009d18:	4619      	mov	r1, r3
 8009d1a:	f7f6 fd4d 	bl	80007b8 <__aeabi_ddiv>
 8009d1e:	ec41 0b18 	vmov	d8, r0, r1
 8009d22:	eeb0 0a48 	vmov.f32	s0, s16
 8009d26:	eef0 0a68 	vmov.f32	s1, s17
 8009d2a:	ecbd 8b02 	vpop	{d8}
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}

08009d30 <__ieee754_rem_pio2>:
 8009d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d34:	ed2d 8b02 	vpush	{d8}
 8009d38:	ec55 4b10 	vmov	r4, r5, d0
 8009d3c:	4bca      	ldr	r3, [pc, #808]	; (800a068 <__ieee754_rem_pio2+0x338>)
 8009d3e:	b08b      	sub	sp, #44	; 0x2c
 8009d40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009d44:	4598      	cmp	r8, r3
 8009d46:	4682      	mov	sl, r0
 8009d48:	9502      	str	r5, [sp, #8]
 8009d4a:	dc08      	bgt.n	8009d5e <__ieee754_rem_pio2+0x2e>
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2300      	movs	r3, #0
 8009d50:	ed80 0b00 	vstr	d0, [r0]
 8009d54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009d58:	f04f 0b00 	mov.w	fp, #0
 8009d5c:	e028      	b.n	8009db0 <__ieee754_rem_pio2+0x80>
 8009d5e:	4bc3      	ldr	r3, [pc, #780]	; (800a06c <__ieee754_rem_pio2+0x33c>)
 8009d60:	4598      	cmp	r8, r3
 8009d62:	dc78      	bgt.n	8009e56 <__ieee754_rem_pio2+0x126>
 8009d64:	9b02      	ldr	r3, [sp, #8]
 8009d66:	4ec2      	ldr	r6, [pc, #776]	; (800a070 <__ieee754_rem_pio2+0x340>)
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	ee10 0a10 	vmov	r0, s0
 8009d6e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a030 <__ieee754_rem_pio2+0x300>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	4629      	mov	r1, r5
 8009d76:	dd39      	ble.n	8009dec <__ieee754_rem_pio2+0xbc>
 8009d78:	f7f6 fa3c 	bl	80001f4 <__aeabi_dsub>
 8009d7c:	45b0      	cmp	r8, r6
 8009d7e:	4604      	mov	r4, r0
 8009d80:	460d      	mov	r5, r1
 8009d82:	d01b      	beq.n	8009dbc <__ieee754_rem_pio2+0x8c>
 8009d84:	a3ac      	add	r3, pc, #688	; (adr r3, 800a038 <__ieee754_rem_pio2+0x308>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	f7f6 fa33 	bl	80001f4 <__aeabi_dsub>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	e9ca 2300 	strd	r2, r3, [sl]
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	f7f6 fa2b 	bl	80001f4 <__aeabi_dsub>
 8009d9e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a038 <__ieee754_rem_pio2+0x308>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	f7f6 fa26 	bl	80001f4 <__aeabi_dsub>
 8009da8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009dac:	f04f 0b01 	mov.w	fp, #1
 8009db0:	4658      	mov	r0, fp
 8009db2:	b00b      	add	sp, #44	; 0x2c
 8009db4:	ecbd 8b02 	vpop	{d8}
 8009db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbc:	a3a0      	add	r3, pc, #640	; (adr r3, 800a040 <__ieee754_rem_pio2+0x310>)
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	f7f6 fa17 	bl	80001f4 <__aeabi_dsub>
 8009dc6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a048 <__ieee754_rem_pio2+0x318>)
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	f7f6 fa10 	bl	80001f4 <__aeabi_dsub>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	e9ca 2300 	strd	r2, r3, [sl]
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f6 fa08 	bl	80001f4 <__aeabi_dsub>
 8009de4:	a398      	add	r3, pc, #608	; (adr r3, 800a048 <__ieee754_rem_pio2+0x318>)
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	e7db      	b.n	8009da4 <__ieee754_rem_pio2+0x74>
 8009dec:	f7f6 fa04 	bl	80001f8 <__adddf3>
 8009df0:	45b0      	cmp	r8, r6
 8009df2:	4604      	mov	r4, r0
 8009df4:	460d      	mov	r5, r1
 8009df6:	d016      	beq.n	8009e26 <__ieee754_rem_pio2+0xf6>
 8009df8:	a38f      	add	r3, pc, #572	; (adr r3, 800a038 <__ieee754_rem_pio2+0x308>)
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	f7f6 f9fb 	bl	80001f8 <__adddf3>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	e9ca 2300 	strd	r2, r3, [sl]
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 f9f1 	bl	80001f4 <__aeabi_dsub>
 8009e12:	a389      	add	r3, pc, #548	; (adr r3, 800a038 <__ieee754_rem_pio2+0x308>)
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 f9ee 	bl	80001f8 <__adddf3>
 8009e1c:	f04f 3bff 	mov.w	fp, #4294967295
 8009e20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e24:	e7c4      	b.n	8009db0 <__ieee754_rem_pio2+0x80>
 8009e26:	a386      	add	r3, pc, #536	; (adr r3, 800a040 <__ieee754_rem_pio2+0x310>)
 8009e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2c:	f7f6 f9e4 	bl	80001f8 <__adddf3>
 8009e30:	a385      	add	r3, pc, #532	; (adr r3, 800a048 <__ieee754_rem_pio2+0x318>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	4604      	mov	r4, r0
 8009e38:	460d      	mov	r5, r1
 8009e3a:	f7f6 f9dd 	bl	80001f8 <__adddf3>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	e9ca 2300 	strd	r2, r3, [sl]
 8009e46:	4620      	mov	r0, r4
 8009e48:	4629      	mov	r1, r5
 8009e4a:	f7f6 f9d3 	bl	80001f4 <__aeabi_dsub>
 8009e4e:	a37e      	add	r3, pc, #504	; (adr r3, 800a048 <__ieee754_rem_pio2+0x318>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	e7e0      	b.n	8009e18 <__ieee754_rem_pio2+0xe8>
 8009e56:	4b87      	ldr	r3, [pc, #540]	; (800a074 <__ieee754_rem_pio2+0x344>)
 8009e58:	4598      	cmp	r8, r3
 8009e5a:	f300 80d9 	bgt.w	800a010 <__ieee754_rem_pio2+0x2e0>
 8009e5e:	f7ff fed7 	bl	8009c10 <fabs>
 8009e62:	ec55 4b10 	vmov	r4, r5, d0
 8009e66:	ee10 0a10 	vmov	r0, s0
 8009e6a:	a379      	add	r3, pc, #484	; (adr r3, 800a050 <__ieee754_rem_pio2+0x320>)
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7f6 fb77 	bl	8000564 <__aeabi_dmul>
 8009e76:	4b80      	ldr	r3, [pc, #512]	; (800a078 <__ieee754_rem_pio2+0x348>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f7f6 f9bd 	bl	80001f8 <__adddf3>
 8009e7e:	f7f6 fe21 	bl	8000ac4 <__aeabi_d2iz>
 8009e82:	4683      	mov	fp, r0
 8009e84:	f7f6 fb04 	bl	8000490 <__aeabi_i2d>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	ec43 2b18 	vmov	d8, r2, r3
 8009e90:	a367      	add	r3, pc, #412	; (adr r3, 800a030 <__ieee754_rem_pio2+0x300>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	f7f6 fb65 	bl	8000564 <__aeabi_dmul>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f7f6 f9a7 	bl	80001f4 <__aeabi_dsub>
 8009ea6:	a364      	add	r3, pc, #400	; (adr r3, 800a038 <__ieee754_rem_pio2+0x308>)
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	ec51 0b18 	vmov	r0, r1, d8
 8009eb4:	f7f6 fb56 	bl	8000564 <__aeabi_dmul>
 8009eb8:	f1bb 0f1f 	cmp.w	fp, #31
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	dc0d      	bgt.n	8009ede <__ieee754_rem_pio2+0x1ae>
 8009ec2:	4b6e      	ldr	r3, [pc, #440]	; (800a07c <__ieee754_rem_pio2+0x34c>)
 8009ec4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ecc:	4543      	cmp	r3, r8
 8009ece:	d006      	beq.n	8009ede <__ieee754_rem_pio2+0x1ae>
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	462b      	mov	r3, r5
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	f7f6 f98c 	bl	80001f4 <__aeabi_dsub>
 8009edc:	e00f      	b.n	8009efe <__ieee754_rem_pio2+0x1ce>
 8009ede:	462b      	mov	r3, r5
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	f7f6 f985 	bl	80001f4 <__aeabi_dsub>
 8009eea:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009ef4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009ef8:	f1b8 0f10 	cmp.w	r8, #16
 8009efc:	dc02      	bgt.n	8009f04 <__ieee754_rem_pio2+0x1d4>
 8009efe:	e9ca 0100 	strd	r0, r1, [sl]
 8009f02:	e039      	b.n	8009f78 <__ieee754_rem_pio2+0x248>
 8009f04:	a34e      	add	r3, pc, #312	; (adr r3, 800a040 <__ieee754_rem_pio2+0x310>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	ec51 0b18 	vmov	r0, r1, d8
 8009f0e:	f7f6 fb29 	bl	8000564 <__aeabi_dmul>
 8009f12:	4604      	mov	r4, r0
 8009f14:	460d      	mov	r5, r1
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	4639      	mov	r1, r7
 8009f1e:	f7f6 f969 	bl	80001f4 <__aeabi_dsub>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	4680      	mov	r8, r0
 8009f28:	4689      	mov	r9, r1
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 f961 	bl	80001f4 <__aeabi_dsub>
 8009f32:	4622      	mov	r2, r4
 8009f34:	462b      	mov	r3, r5
 8009f36:	f7f6 f95d 	bl	80001f4 <__aeabi_dsub>
 8009f3a:	a343      	add	r3, pc, #268	; (adr r3, 800a048 <__ieee754_rem_pio2+0x318>)
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	4604      	mov	r4, r0
 8009f42:	460d      	mov	r5, r1
 8009f44:	ec51 0b18 	vmov	r0, r1, d8
 8009f48:	f7f6 fb0c 	bl	8000564 <__aeabi_dmul>
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	462b      	mov	r3, r5
 8009f50:	f7f6 f950 	bl	80001f4 <__aeabi_dsub>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	4604      	mov	r4, r0
 8009f5a:	460d      	mov	r5, r1
 8009f5c:	4640      	mov	r0, r8
 8009f5e:	4649      	mov	r1, r9
 8009f60:	f7f6 f948 	bl	80001f4 <__aeabi_dsub>
 8009f64:	9a03      	ldr	r2, [sp, #12]
 8009f66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	2b31      	cmp	r3, #49	; 0x31
 8009f6e:	dc24      	bgt.n	8009fba <__ieee754_rem_pio2+0x28a>
 8009f70:	e9ca 0100 	strd	r0, r1, [sl]
 8009f74:	4646      	mov	r6, r8
 8009f76:	464f      	mov	r7, r9
 8009f78:	e9da 8900 	ldrd	r8, r9, [sl]
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	4642      	mov	r2, r8
 8009f80:	464b      	mov	r3, r9
 8009f82:	4639      	mov	r1, r7
 8009f84:	f7f6 f936 	bl	80001f4 <__aeabi_dsub>
 8009f88:	462b      	mov	r3, r5
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	f7f6 f932 	bl	80001f4 <__aeabi_dsub>
 8009f90:	9b02      	ldr	r3, [sp, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f98:	f6bf af0a 	bge.w	8009db0 <__ieee754_rem_pio2+0x80>
 8009f9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fa0:	f8ca 3004 	str.w	r3, [sl, #4]
 8009fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fa8:	f8ca 8000 	str.w	r8, [sl]
 8009fac:	f8ca 0008 	str.w	r0, [sl, #8]
 8009fb0:	f8ca 300c 	str.w	r3, [sl, #12]
 8009fb4:	f1cb 0b00 	rsb	fp, fp, #0
 8009fb8:	e6fa      	b.n	8009db0 <__ieee754_rem_pio2+0x80>
 8009fba:	a327      	add	r3, pc, #156	; (adr r3, 800a058 <__ieee754_rem_pio2+0x328>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	ec51 0b18 	vmov	r0, r1, d8
 8009fc4:	f7f6 face 	bl	8000564 <__aeabi_dmul>
 8009fc8:	4604      	mov	r4, r0
 8009fca:	460d      	mov	r5, r1
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	f7f6 f90e 	bl	80001f4 <__aeabi_dsub>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4606      	mov	r6, r0
 8009fde:	460f      	mov	r7, r1
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	f7f6 f906 	bl	80001f4 <__aeabi_dsub>
 8009fe8:	4622      	mov	r2, r4
 8009fea:	462b      	mov	r3, r5
 8009fec:	f7f6 f902 	bl	80001f4 <__aeabi_dsub>
 8009ff0:	a31b      	add	r3, pc, #108	; (adr r3, 800a060 <__ieee754_rem_pio2+0x330>)
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	ec51 0b18 	vmov	r0, r1, d8
 8009ffe:	f7f6 fab1 	bl	8000564 <__aeabi_dmul>
 800a002:	4622      	mov	r2, r4
 800a004:	462b      	mov	r3, r5
 800a006:	f7f6 f8f5 	bl	80001f4 <__aeabi_dsub>
 800a00a:	4604      	mov	r4, r0
 800a00c:	460d      	mov	r5, r1
 800a00e:	e75f      	b.n	8009ed0 <__ieee754_rem_pio2+0x1a0>
 800a010:	4b1b      	ldr	r3, [pc, #108]	; (800a080 <__ieee754_rem_pio2+0x350>)
 800a012:	4598      	cmp	r8, r3
 800a014:	dd36      	ble.n	800a084 <__ieee754_rem_pio2+0x354>
 800a016:	ee10 2a10 	vmov	r2, s0
 800a01a:	462b      	mov	r3, r5
 800a01c:	4620      	mov	r0, r4
 800a01e:	4629      	mov	r1, r5
 800a020:	f7f6 f8e8 	bl	80001f4 <__aeabi_dsub>
 800a024:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a028:	e9ca 0100 	strd	r0, r1, [sl]
 800a02c:	e694      	b.n	8009d58 <__ieee754_rem_pio2+0x28>
 800a02e:	bf00      	nop
 800a030:	54400000 	.word	0x54400000
 800a034:	3ff921fb 	.word	0x3ff921fb
 800a038:	1a626331 	.word	0x1a626331
 800a03c:	3dd0b461 	.word	0x3dd0b461
 800a040:	1a600000 	.word	0x1a600000
 800a044:	3dd0b461 	.word	0x3dd0b461
 800a048:	2e037073 	.word	0x2e037073
 800a04c:	3ba3198a 	.word	0x3ba3198a
 800a050:	6dc9c883 	.word	0x6dc9c883
 800a054:	3fe45f30 	.word	0x3fe45f30
 800a058:	2e000000 	.word	0x2e000000
 800a05c:	3ba3198a 	.word	0x3ba3198a
 800a060:	252049c1 	.word	0x252049c1
 800a064:	397b839a 	.word	0x397b839a
 800a068:	3fe921fb 	.word	0x3fe921fb
 800a06c:	4002d97b 	.word	0x4002d97b
 800a070:	3ff921fb 	.word	0x3ff921fb
 800a074:	413921fb 	.word	0x413921fb
 800a078:	3fe00000 	.word	0x3fe00000
 800a07c:	0800af20 	.word	0x0800af20
 800a080:	7fefffff 	.word	0x7fefffff
 800a084:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a088:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a08c:	ee10 0a10 	vmov	r0, s0
 800a090:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a094:	ee10 6a10 	vmov	r6, s0
 800a098:	460f      	mov	r7, r1
 800a09a:	f7f6 fd13 	bl	8000ac4 <__aeabi_d2iz>
 800a09e:	f7f6 f9f7 	bl	8000490 <__aeabi_i2d>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	4639      	mov	r1, r7
 800a0aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0ae:	f7f6 f8a1 	bl	80001f4 <__aeabi_dsub>
 800a0b2:	4b23      	ldr	r3, [pc, #140]	; (800a140 <__ieee754_rem_pio2+0x410>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f7f6 fa55 	bl	8000564 <__aeabi_dmul>
 800a0ba:	460f      	mov	r7, r1
 800a0bc:	4606      	mov	r6, r0
 800a0be:	f7f6 fd01 	bl	8000ac4 <__aeabi_d2iz>
 800a0c2:	f7f6 f9e5 	bl	8000490 <__aeabi_i2d>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	4639      	mov	r1, r7
 800a0ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a0d2:	f7f6 f88f 	bl	80001f4 <__aeabi_dsub>
 800a0d6:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <__ieee754_rem_pio2+0x410>)
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f7f6 fa43 	bl	8000564 <__aeabi_dmul>
 800a0de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0e2:	ad04      	add	r5, sp, #16
 800a0e4:	f04f 0803 	mov.w	r8, #3
 800a0e8:	46a9      	mov	r9, r5
 800a0ea:	2600      	movs	r6, #0
 800a0ec:	2700      	movs	r7, #0
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	463b      	mov	r3, r7
 800a0f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a0f6:	46c3      	mov	fp, r8
 800a0f8:	3d08      	subs	r5, #8
 800a0fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0fe:	f7f6 fc99 	bl	8000a34 <__aeabi_dcmpeq>
 800a102:	2800      	cmp	r0, #0
 800a104:	d1f3      	bne.n	800a0ee <__ieee754_rem_pio2+0x3be>
 800a106:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <__ieee754_rem_pio2+0x414>)
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	2302      	movs	r3, #2
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4622      	mov	r2, r4
 800a110:	465b      	mov	r3, fp
 800a112:	4651      	mov	r1, sl
 800a114:	4648      	mov	r0, r9
 800a116:	f000 f993 	bl	800a440 <__kernel_rem_pio2>
 800a11a:	9b02      	ldr	r3, [sp, #8]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	4683      	mov	fp, r0
 800a120:	f6bf ae46 	bge.w	8009db0 <__ieee754_rem_pio2+0x80>
 800a124:	e9da 2100 	ldrd	r2, r1, [sl]
 800a128:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a12c:	e9ca 2300 	strd	r2, r3, [sl]
 800a130:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a138:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a13c:	e73a      	b.n	8009fb4 <__ieee754_rem_pio2+0x284>
 800a13e:	bf00      	nop
 800a140:	41700000 	.word	0x41700000
 800a144:	0800afa0 	.word	0x0800afa0

0800a148 <__ieee754_sqrt>:
 800a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a14c:	ec55 4b10 	vmov	r4, r5, d0
 800a150:	4e55      	ldr	r6, [pc, #340]	; (800a2a8 <__ieee754_sqrt+0x160>)
 800a152:	43ae      	bics	r6, r5
 800a154:	ee10 0a10 	vmov	r0, s0
 800a158:	ee10 3a10 	vmov	r3, s0
 800a15c:	462a      	mov	r2, r5
 800a15e:	4629      	mov	r1, r5
 800a160:	d110      	bne.n	800a184 <__ieee754_sqrt+0x3c>
 800a162:	ee10 2a10 	vmov	r2, s0
 800a166:	462b      	mov	r3, r5
 800a168:	f7f6 f9fc 	bl	8000564 <__aeabi_dmul>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4620      	mov	r0, r4
 800a172:	4629      	mov	r1, r5
 800a174:	f7f6 f840 	bl	80001f8 <__adddf3>
 800a178:	4604      	mov	r4, r0
 800a17a:	460d      	mov	r5, r1
 800a17c:	ec45 4b10 	vmov	d0, r4, r5
 800a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a184:	2d00      	cmp	r5, #0
 800a186:	dc10      	bgt.n	800a1aa <__ieee754_sqrt+0x62>
 800a188:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a18c:	4330      	orrs	r0, r6
 800a18e:	d0f5      	beq.n	800a17c <__ieee754_sqrt+0x34>
 800a190:	b15d      	cbz	r5, 800a1aa <__ieee754_sqrt+0x62>
 800a192:	ee10 2a10 	vmov	r2, s0
 800a196:	462b      	mov	r3, r5
 800a198:	ee10 0a10 	vmov	r0, s0
 800a19c:	f7f6 f82a 	bl	80001f4 <__aeabi_dsub>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	f7f6 fb08 	bl	80007b8 <__aeabi_ddiv>
 800a1a8:	e7e6      	b.n	800a178 <__ieee754_sqrt+0x30>
 800a1aa:	1512      	asrs	r2, r2, #20
 800a1ac:	d074      	beq.n	800a298 <__ieee754_sqrt+0x150>
 800a1ae:	07d4      	lsls	r4, r2, #31
 800a1b0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a1b4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a1b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a1bc:	bf5e      	ittt	pl
 800a1be:	0fda      	lsrpl	r2, r3, #31
 800a1c0:	005b      	lslpl	r3, r3, #1
 800a1c2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a1c6:	2400      	movs	r4, #0
 800a1c8:	0fda      	lsrs	r2, r3, #31
 800a1ca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a1ce:	107f      	asrs	r7, r7, #1
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	2516      	movs	r5, #22
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a1da:	1886      	adds	r6, r0, r2
 800a1dc:	428e      	cmp	r6, r1
 800a1de:	bfde      	ittt	le
 800a1e0:	1b89      	suble	r1, r1, r6
 800a1e2:	18b0      	addle	r0, r6, r2
 800a1e4:	18a4      	addle	r4, r4, r2
 800a1e6:	0049      	lsls	r1, r1, #1
 800a1e8:	3d01      	subs	r5, #1
 800a1ea:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a1ee:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a1f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1f6:	d1f0      	bne.n	800a1da <__ieee754_sqrt+0x92>
 800a1f8:	462a      	mov	r2, r5
 800a1fa:	f04f 0e20 	mov.w	lr, #32
 800a1fe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a202:	4281      	cmp	r1, r0
 800a204:	eb06 0c05 	add.w	ip, r6, r5
 800a208:	dc02      	bgt.n	800a210 <__ieee754_sqrt+0xc8>
 800a20a:	d113      	bne.n	800a234 <__ieee754_sqrt+0xec>
 800a20c:	459c      	cmp	ip, r3
 800a20e:	d811      	bhi.n	800a234 <__ieee754_sqrt+0xec>
 800a210:	f1bc 0f00 	cmp.w	ip, #0
 800a214:	eb0c 0506 	add.w	r5, ip, r6
 800a218:	da43      	bge.n	800a2a2 <__ieee754_sqrt+0x15a>
 800a21a:	2d00      	cmp	r5, #0
 800a21c:	db41      	blt.n	800a2a2 <__ieee754_sqrt+0x15a>
 800a21e:	f100 0801 	add.w	r8, r0, #1
 800a222:	1a09      	subs	r1, r1, r0
 800a224:	459c      	cmp	ip, r3
 800a226:	bf88      	it	hi
 800a228:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a22c:	eba3 030c 	sub.w	r3, r3, ip
 800a230:	4432      	add	r2, r6
 800a232:	4640      	mov	r0, r8
 800a234:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a238:	f1be 0e01 	subs.w	lr, lr, #1
 800a23c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a240:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a244:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a248:	d1db      	bne.n	800a202 <__ieee754_sqrt+0xba>
 800a24a:	430b      	orrs	r3, r1
 800a24c:	d006      	beq.n	800a25c <__ieee754_sqrt+0x114>
 800a24e:	1c50      	adds	r0, r2, #1
 800a250:	bf13      	iteet	ne
 800a252:	3201      	addne	r2, #1
 800a254:	3401      	addeq	r4, #1
 800a256:	4672      	moveq	r2, lr
 800a258:	f022 0201 	bicne.w	r2, r2, #1
 800a25c:	1063      	asrs	r3, r4, #1
 800a25e:	0852      	lsrs	r2, r2, #1
 800a260:	07e1      	lsls	r1, r4, #31
 800a262:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a266:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a26a:	bf48      	it	mi
 800a26c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a270:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a274:	4614      	mov	r4, r2
 800a276:	e781      	b.n	800a17c <__ieee754_sqrt+0x34>
 800a278:	0ad9      	lsrs	r1, r3, #11
 800a27a:	3815      	subs	r0, #21
 800a27c:	055b      	lsls	r3, r3, #21
 800a27e:	2900      	cmp	r1, #0
 800a280:	d0fa      	beq.n	800a278 <__ieee754_sqrt+0x130>
 800a282:	02cd      	lsls	r5, r1, #11
 800a284:	d50a      	bpl.n	800a29c <__ieee754_sqrt+0x154>
 800a286:	f1c2 0420 	rsb	r4, r2, #32
 800a28a:	fa23 f404 	lsr.w	r4, r3, r4
 800a28e:	1e55      	subs	r5, r2, #1
 800a290:	4093      	lsls	r3, r2
 800a292:	4321      	orrs	r1, r4
 800a294:	1b42      	subs	r2, r0, r5
 800a296:	e78a      	b.n	800a1ae <__ieee754_sqrt+0x66>
 800a298:	4610      	mov	r0, r2
 800a29a:	e7f0      	b.n	800a27e <__ieee754_sqrt+0x136>
 800a29c:	0049      	lsls	r1, r1, #1
 800a29e:	3201      	adds	r2, #1
 800a2a0:	e7ef      	b.n	800a282 <__ieee754_sqrt+0x13a>
 800a2a2:	4680      	mov	r8, r0
 800a2a4:	e7bd      	b.n	800a222 <__ieee754_sqrt+0xda>
 800a2a6:	bf00      	nop
 800a2a8:	7ff00000 	.word	0x7ff00000
 800a2ac:	00000000 	.word	0x00000000

0800a2b0 <__kernel_cos>:
 800a2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	ec57 6b10 	vmov	r6, r7, d0
 800a2b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a2bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a2c0:	ed8d 1b00 	vstr	d1, [sp]
 800a2c4:	da07      	bge.n	800a2d6 <__kernel_cos+0x26>
 800a2c6:	ee10 0a10 	vmov	r0, s0
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f7f6 fbfa 	bl	8000ac4 <__aeabi_d2iz>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f000 8088 	beq.w	800a3e6 <__kernel_cos+0x136>
 800a2d6:	4632      	mov	r2, r6
 800a2d8:	463b      	mov	r3, r7
 800a2da:	4630      	mov	r0, r6
 800a2dc:	4639      	mov	r1, r7
 800a2de:	f7f6 f941 	bl	8000564 <__aeabi_dmul>
 800a2e2:	4b51      	ldr	r3, [pc, #324]	; (800a428 <__kernel_cos+0x178>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4604      	mov	r4, r0
 800a2e8:	460d      	mov	r5, r1
 800a2ea:	f7f6 f93b 	bl	8000564 <__aeabi_dmul>
 800a2ee:	a340      	add	r3, pc, #256	; (adr r3, 800a3f0 <__kernel_cos+0x140>)
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	4682      	mov	sl, r0
 800a2f6:	468b      	mov	fp, r1
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	f7f6 f932 	bl	8000564 <__aeabi_dmul>
 800a300:	a33d      	add	r3, pc, #244	; (adr r3, 800a3f8 <__kernel_cos+0x148>)
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	f7f5 ff77 	bl	80001f8 <__adddf3>
 800a30a:	4622      	mov	r2, r4
 800a30c:	462b      	mov	r3, r5
 800a30e:	f7f6 f929 	bl	8000564 <__aeabi_dmul>
 800a312:	a33b      	add	r3, pc, #236	; (adr r3, 800a400 <__kernel_cos+0x150>)
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	f7f5 ff6c 	bl	80001f4 <__aeabi_dsub>
 800a31c:	4622      	mov	r2, r4
 800a31e:	462b      	mov	r3, r5
 800a320:	f7f6 f920 	bl	8000564 <__aeabi_dmul>
 800a324:	a338      	add	r3, pc, #224	; (adr r3, 800a408 <__kernel_cos+0x158>)
 800a326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32a:	f7f5 ff65 	bl	80001f8 <__adddf3>
 800a32e:	4622      	mov	r2, r4
 800a330:	462b      	mov	r3, r5
 800a332:	f7f6 f917 	bl	8000564 <__aeabi_dmul>
 800a336:	a336      	add	r3, pc, #216	; (adr r3, 800a410 <__kernel_cos+0x160>)
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	f7f5 ff5a 	bl	80001f4 <__aeabi_dsub>
 800a340:	4622      	mov	r2, r4
 800a342:	462b      	mov	r3, r5
 800a344:	f7f6 f90e 	bl	8000564 <__aeabi_dmul>
 800a348:	a333      	add	r3, pc, #204	; (adr r3, 800a418 <__kernel_cos+0x168>)
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	f7f5 ff53 	bl	80001f8 <__adddf3>
 800a352:	4622      	mov	r2, r4
 800a354:	462b      	mov	r3, r5
 800a356:	f7f6 f905 	bl	8000564 <__aeabi_dmul>
 800a35a:	4622      	mov	r2, r4
 800a35c:	462b      	mov	r3, r5
 800a35e:	f7f6 f901 	bl	8000564 <__aeabi_dmul>
 800a362:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a366:	4604      	mov	r4, r0
 800a368:	460d      	mov	r5, r1
 800a36a:	4630      	mov	r0, r6
 800a36c:	4639      	mov	r1, r7
 800a36e:	f7f6 f8f9 	bl	8000564 <__aeabi_dmul>
 800a372:	460b      	mov	r3, r1
 800a374:	4602      	mov	r2, r0
 800a376:	4629      	mov	r1, r5
 800a378:	4620      	mov	r0, r4
 800a37a:	f7f5 ff3b 	bl	80001f4 <__aeabi_dsub>
 800a37e:	4b2b      	ldr	r3, [pc, #172]	; (800a42c <__kernel_cos+0x17c>)
 800a380:	4598      	cmp	r8, r3
 800a382:	4606      	mov	r6, r0
 800a384:	460f      	mov	r7, r1
 800a386:	dc10      	bgt.n	800a3aa <__kernel_cos+0xfa>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4650      	mov	r0, sl
 800a38e:	4659      	mov	r1, fp
 800a390:	f7f5 ff30 	bl	80001f4 <__aeabi_dsub>
 800a394:	460b      	mov	r3, r1
 800a396:	4926      	ldr	r1, [pc, #152]	; (800a430 <__kernel_cos+0x180>)
 800a398:	4602      	mov	r2, r0
 800a39a:	2000      	movs	r0, #0
 800a39c:	f7f5 ff2a 	bl	80001f4 <__aeabi_dsub>
 800a3a0:	ec41 0b10 	vmov	d0, r0, r1
 800a3a4:	b003      	add	sp, #12
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	4b22      	ldr	r3, [pc, #136]	; (800a434 <__kernel_cos+0x184>)
 800a3ac:	4920      	ldr	r1, [pc, #128]	; (800a430 <__kernel_cos+0x180>)
 800a3ae:	4598      	cmp	r8, r3
 800a3b0:	bfcc      	ite	gt
 800a3b2:	4d21      	ldrgt	r5, [pc, #132]	; (800a438 <__kernel_cos+0x188>)
 800a3b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a3b8:	2400      	movs	r4, #0
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	462b      	mov	r3, r5
 800a3be:	2000      	movs	r0, #0
 800a3c0:	f7f5 ff18 	bl	80001f4 <__aeabi_dsub>
 800a3c4:	4622      	mov	r2, r4
 800a3c6:	4680      	mov	r8, r0
 800a3c8:	4689      	mov	r9, r1
 800a3ca:	462b      	mov	r3, r5
 800a3cc:	4650      	mov	r0, sl
 800a3ce:	4659      	mov	r1, fp
 800a3d0:	f7f5 ff10 	bl	80001f4 <__aeabi_dsub>
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	f7f5 ff0c 	bl	80001f4 <__aeabi_dsub>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	e7da      	b.n	800a39c <__kernel_cos+0xec>
 800a3e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a420 <__kernel_cos+0x170>
 800a3ea:	e7db      	b.n	800a3a4 <__kernel_cos+0xf4>
 800a3ec:	f3af 8000 	nop.w
 800a3f0:	be8838d4 	.word	0xbe8838d4
 800a3f4:	bda8fae9 	.word	0xbda8fae9
 800a3f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a3fc:	3e21ee9e 	.word	0x3e21ee9e
 800a400:	809c52ad 	.word	0x809c52ad
 800a404:	3e927e4f 	.word	0x3e927e4f
 800a408:	19cb1590 	.word	0x19cb1590
 800a40c:	3efa01a0 	.word	0x3efa01a0
 800a410:	16c15177 	.word	0x16c15177
 800a414:	3f56c16c 	.word	0x3f56c16c
 800a418:	5555554c 	.word	0x5555554c
 800a41c:	3fa55555 	.word	0x3fa55555
 800a420:	00000000 	.word	0x00000000
 800a424:	3ff00000 	.word	0x3ff00000
 800a428:	3fe00000 	.word	0x3fe00000
 800a42c:	3fd33332 	.word	0x3fd33332
 800a430:	3ff00000 	.word	0x3ff00000
 800a434:	3fe90000 	.word	0x3fe90000
 800a438:	3fd20000 	.word	0x3fd20000
 800a43c:	00000000 	.word	0x00000000

0800a440 <__kernel_rem_pio2>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	ed2d 8b02 	vpush	{d8}
 800a448:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a44c:	f112 0f14 	cmn.w	r2, #20
 800a450:	9308      	str	r3, [sp, #32]
 800a452:	9101      	str	r1, [sp, #4]
 800a454:	4bc4      	ldr	r3, [pc, #784]	; (800a768 <__kernel_rem_pio2+0x328>)
 800a456:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a458:	900b      	str	r0, [sp, #44]	; 0x2c
 800a45a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a45e:	9302      	str	r3, [sp, #8]
 800a460:	9b08      	ldr	r3, [sp, #32]
 800a462:	f103 33ff 	add.w	r3, r3, #4294967295
 800a466:	bfa8      	it	ge
 800a468:	1ed4      	subge	r4, r2, #3
 800a46a:	9306      	str	r3, [sp, #24]
 800a46c:	bfb2      	itee	lt
 800a46e:	2400      	movlt	r4, #0
 800a470:	2318      	movge	r3, #24
 800a472:	fb94 f4f3 	sdivge	r4, r4, r3
 800a476:	f06f 0317 	mvn.w	r3, #23
 800a47a:	fb04 3303 	mla	r3, r4, r3, r3
 800a47e:	eb03 0a02 	add.w	sl, r3, r2
 800a482:	9b02      	ldr	r3, [sp, #8]
 800a484:	9a06      	ldr	r2, [sp, #24]
 800a486:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a758 <__kernel_rem_pio2+0x318>
 800a48a:	eb03 0802 	add.w	r8, r3, r2
 800a48e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a490:	1aa7      	subs	r7, r4, r2
 800a492:	ae22      	add	r6, sp, #136	; 0x88
 800a494:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a498:	2500      	movs	r5, #0
 800a49a:	4545      	cmp	r5, r8
 800a49c:	dd13      	ble.n	800a4c6 <__kernel_rem_pio2+0x86>
 800a49e:	9b08      	ldr	r3, [sp, #32]
 800a4a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a758 <__kernel_rem_pio2+0x318>
 800a4a4:	aa22      	add	r2, sp, #136	; 0x88
 800a4a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a4aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a4ae:	f04f 0800 	mov.w	r8, #0
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	4598      	cmp	r8, r3
 800a4b6:	dc2f      	bgt.n	800a518 <__kernel_rem_pio2+0xd8>
 800a4b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a4bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a4c0:	462f      	mov	r7, r5
 800a4c2:	2600      	movs	r6, #0
 800a4c4:	e01b      	b.n	800a4fe <__kernel_rem_pio2+0xbe>
 800a4c6:	42ef      	cmn	r7, r5
 800a4c8:	d407      	bmi.n	800a4da <__kernel_rem_pio2+0x9a>
 800a4ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a4ce:	f7f5 ffdf 	bl	8000490 <__aeabi_i2d>
 800a4d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a4d6:	3501      	adds	r5, #1
 800a4d8:	e7df      	b.n	800a49a <__kernel_rem_pio2+0x5a>
 800a4da:	ec51 0b18 	vmov	r0, r1, d8
 800a4de:	e7f8      	b.n	800a4d2 <__kernel_rem_pio2+0x92>
 800a4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a4e8:	f7f6 f83c 	bl	8000564 <__aeabi_dmul>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4f4:	f7f5 fe80 	bl	80001f8 <__adddf3>
 800a4f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4fc:	3601      	adds	r6, #1
 800a4fe:	9b06      	ldr	r3, [sp, #24]
 800a500:	429e      	cmp	r6, r3
 800a502:	f1a7 0708 	sub.w	r7, r7, #8
 800a506:	ddeb      	ble.n	800a4e0 <__kernel_rem_pio2+0xa0>
 800a508:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a50c:	f108 0801 	add.w	r8, r8, #1
 800a510:	ecab 7b02 	vstmia	fp!, {d7}
 800a514:	3508      	adds	r5, #8
 800a516:	e7cc      	b.n	800a4b2 <__kernel_rem_pio2+0x72>
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	aa0e      	add	r2, sp, #56	; 0x38
 800a51c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a520:	930d      	str	r3, [sp, #52]	; 0x34
 800a522:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a524:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a528:	9c02      	ldr	r4, [sp, #8]
 800a52a:	930c      	str	r3, [sp, #48]	; 0x30
 800a52c:	00e3      	lsls	r3, r4, #3
 800a52e:	930a      	str	r3, [sp, #40]	; 0x28
 800a530:	ab9a      	add	r3, sp, #616	; 0x268
 800a532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a536:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a53a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a53e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a540:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a544:	46c3      	mov	fp, r8
 800a546:	46a1      	mov	r9, r4
 800a548:	f1b9 0f00 	cmp.w	r9, #0
 800a54c:	f1a5 0508 	sub.w	r5, r5, #8
 800a550:	dc77      	bgt.n	800a642 <__kernel_rem_pio2+0x202>
 800a552:	ec47 6b10 	vmov	d0, r6, r7
 800a556:	4650      	mov	r0, sl
 800a558:	f000 fc02 	bl	800ad60 <scalbn>
 800a55c:	ec57 6b10 	vmov	r6, r7, d0
 800a560:	2200      	movs	r2, #0
 800a562:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a566:	ee10 0a10 	vmov	r0, s0
 800a56a:	4639      	mov	r1, r7
 800a56c:	f7f5 fffa 	bl	8000564 <__aeabi_dmul>
 800a570:	ec41 0b10 	vmov	d0, r0, r1
 800a574:	f000 fb74 	bl	800ac60 <floor>
 800a578:	4b7c      	ldr	r3, [pc, #496]	; (800a76c <__kernel_rem_pio2+0x32c>)
 800a57a:	ec51 0b10 	vmov	r0, r1, d0
 800a57e:	2200      	movs	r2, #0
 800a580:	f7f5 fff0 	bl	8000564 <__aeabi_dmul>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f5 fe32 	bl	80001f4 <__aeabi_dsub>
 800a590:	460f      	mov	r7, r1
 800a592:	4606      	mov	r6, r0
 800a594:	f7f6 fa96 	bl	8000ac4 <__aeabi_d2iz>
 800a598:	9004      	str	r0, [sp, #16]
 800a59a:	f7f5 ff79 	bl	8000490 <__aeabi_i2d>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	f7f5 fe25 	bl	80001f4 <__aeabi_dsub>
 800a5aa:	f1ba 0f00 	cmp.w	sl, #0
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	460f      	mov	r7, r1
 800a5b2:	dd6d      	ble.n	800a690 <__kernel_rem_pio2+0x250>
 800a5b4:	1e62      	subs	r2, r4, #1
 800a5b6:	ab0e      	add	r3, sp, #56	; 0x38
 800a5b8:	9d04      	ldr	r5, [sp, #16]
 800a5ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a5be:	f1ca 0118 	rsb	r1, sl, #24
 800a5c2:	fa40 f301 	asr.w	r3, r0, r1
 800a5c6:	441d      	add	r5, r3
 800a5c8:	408b      	lsls	r3, r1
 800a5ca:	1ac0      	subs	r0, r0, r3
 800a5cc:	ab0e      	add	r3, sp, #56	; 0x38
 800a5ce:	9504      	str	r5, [sp, #16]
 800a5d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a5d4:	f1ca 0317 	rsb	r3, sl, #23
 800a5d8:	fa40 fb03 	asr.w	fp, r0, r3
 800a5dc:	f1bb 0f00 	cmp.w	fp, #0
 800a5e0:	dd65      	ble.n	800a6ae <__kernel_rem_pio2+0x26e>
 800a5e2:	9b04      	ldr	r3, [sp, #16]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	4615      	mov	r5, r2
 800a5ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a5f0:	4294      	cmp	r4, r2
 800a5f2:	f300 809c 	bgt.w	800a72e <__kernel_rem_pio2+0x2ee>
 800a5f6:	f1ba 0f00 	cmp.w	sl, #0
 800a5fa:	dd07      	ble.n	800a60c <__kernel_rem_pio2+0x1cc>
 800a5fc:	f1ba 0f01 	cmp.w	sl, #1
 800a600:	f000 80c0 	beq.w	800a784 <__kernel_rem_pio2+0x344>
 800a604:	f1ba 0f02 	cmp.w	sl, #2
 800a608:	f000 80c6 	beq.w	800a798 <__kernel_rem_pio2+0x358>
 800a60c:	f1bb 0f02 	cmp.w	fp, #2
 800a610:	d14d      	bne.n	800a6ae <__kernel_rem_pio2+0x26e>
 800a612:	4632      	mov	r2, r6
 800a614:	463b      	mov	r3, r7
 800a616:	4956      	ldr	r1, [pc, #344]	; (800a770 <__kernel_rem_pio2+0x330>)
 800a618:	2000      	movs	r0, #0
 800a61a:	f7f5 fdeb 	bl	80001f4 <__aeabi_dsub>
 800a61e:	4606      	mov	r6, r0
 800a620:	460f      	mov	r7, r1
 800a622:	2d00      	cmp	r5, #0
 800a624:	d043      	beq.n	800a6ae <__kernel_rem_pio2+0x26e>
 800a626:	4650      	mov	r0, sl
 800a628:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a760 <__kernel_rem_pio2+0x320>
 800a62c:	f000 fb98 	bl	800ad60 <scalbn>
 800a630:	4630      	mov	r0, r6
 800a632:	4639      	mov	r1, r7
 800a634:	ec53 2b10 	vmov	r2, r3, d0
 800a638:	f7f5 fddc 	bl	80001f4 <__aeabi_dsub>
 800a63c:	4606      	mov	r6, r0
 800a63e:	460f      	mov	r7, r1
 800a640:	e035      	b.n	800a6ae <__kernel_rem_pio2+0x26e>
 800a642:	4b4c      	ldr	r3, [pc, #304]	; (800a774 <__kernel_rem_pio2+0x334>)
 800a644:	2200      	movs	r2, #0
 800a646:	4630      	mov	r0, r6
 800a648:	4639      	mov	r1, r7
 800a64a:	f7f5 ff8b 	bl	8000564 <__aeabi_dmul>
 800a64e:	f7f6 fa39 	bl	8000ac4 <__aeabi_d2iz>
 800a652:	f7f5 ff1d 	bl	8000490 <__aeabi_i2d>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	ec43 2b18 	vmov	d8, r2, r3
 800a65e:	4b46      	ldr	r3, [pc, #280]	; (800a778 <__kernel_rem_pio2+0x338>)
 800a660:	2200      	movs	r2, #0
 800a662:	f7f5 ff7f 	bl	8000564 <__aeabi_dmul>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4630      	mov	r0, r6
 800a66c:	4639      	mov	r1, r7
 800a66e:	f7f5 fdc1 	bl	80001f4 <__aeabi_dsub>
 800a672:	f7f6 fa27 	bl	8000ac4 <__aeabi_d2iz>
 800a676:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a67a:	f84b 0b04 	str.w	r0, [fp], #4
 800a67e:	ec51 0b18 	vmov	r0, r1, d8
 800a682:	f7f5 fdb9 	bl	80001f8 <__adddf3>
 800a686:	f109 39ff 	add.w	r9, r9, #4294967295
 800a68a:	4606      	mov	r6, r0
 800a68c:	460f      	mov	r7, r1
 800a68e:	e75b      	b.n	800a548 <__kernel_rem_pio2+0x108>
 800a690:	d106      	bne.n	800a6a0 <__kernel_rem_pio2+0x260>
 800a692:	1e63      	subs	r3, r4, #1
 800a694:	aa0e      	add	r2, sp, #56	; 0x38
 800a696:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a69a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a69e:	e79d      	b.n	800a5dc <__kernel_rem_pio2+0x19c>
 800a6a0:	4b36      	ldr	r3, [pc, #216]	; (800a77c <__kernel_rem_pio2+0x33c>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f7f6 f9e4 	bl	8000a70 <__aeabi_dcmpge>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d13d      	bne.n	800a728 <__kernel_rem_pio2+0x2e8>
 800a6ac:	4683      	mov	fp, r0
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	f7f6 f9bd 	bl	8000a34 <__aeabi_dcmpeq>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	f000 80c0 	beq.w	800a840 <__kernel_rem_pio2+0x400>
 800a6c0:	1e65      	subs	r5, r4, #1
 800a6c2:	462b      	mov	r3, r5
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	9902      	ldr	r1, [sp, #8]
 800a6c8:	428b      	cmp	r3, r1
 800a6ca:	da6c      	bge.n	800a7a6 <__kernel_rem_pio2+0x366>
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	f000 8089 	beq.w	800a7e4 <__kernel_rem_pio2+0x3a4>
 800a6d2:	ab0e      	add	r3, sp, #56	; 0x38
 800a6d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a6d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f000 80ad 	beq.w	800a83c <__kernel_rem_pio2+0x3fc>
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a760 <__kernel_rem_pio2+0x320>
 800a6e8:	f000 fb3a 	bl	800ad60 <scalbn>
 800a6ec:	ab9a      	add	r3, sp, #616	; 0x268
 800a6ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6f2:	ec57 6b10 	vmov	r6, r7, d0
 800a6f6:	00ec      	lsls	r4, r5, #3
 800a6f8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a6fc:	46aa      	mov	sl, r5
 800a6fe:	f1ba 0f00 	cmp.w	sl, #0
 800a702:	f280 80d6 	bge.w	800a8b2 <__kernel_rem_pio2+0x472>
 800a706:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a758 <__kernel_rem_pio2+0x318>
 800a70a:	462e      	mov	r6, r5
 800a70c:	2e00      	cmp	r6, #0
 800a70e:	f2c0 8104 	blt.w	800a91a <__kernel_rem_pio2+0x4da>
 800a712:	ab72      	add	r3, sp, #456	; 0x1c8
 800a714:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a718:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a780 <__kernel_rem_pio2+0x340>
 800a71c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a720:	f04f 0800 	mov.w	r8, #0
 800a724:	1baf      	subs	r7, r5, r6
 800a726:	e0ea      	b.n	800a8fe <__kernel_rem_pio2+0x4be>
 800a728:	f04f 0b02 	mov.w	fp, #2
 800a72c:	e759      	b.n	800a5e2 <__kernel_rem_pio2+0x1a2>
 800a72e:	f8d8 3000 	ldr.w	r3, [r8]
 800a732:	b955      	cbnz	r5, 800a74a <__kernel_rem_pio2+0x30a>
 800a734:	b123      	cbz	r3, 800a740 <__kernel_rem_pio2+0x300>
 800a736:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a73a:	f8c8 3000 	str.w	r3, [r8]
 800a73e:	2301      	movs	r3, #1
 800a740:	3201      	adds	r2, #1
 800a742:	f108 0804 	add.w	r8, r8, #4
 800a746:	461d      	mov	r5, r3
 800a748:	e752      	b.n	800a5f0 <__kernel_rem_pio2+0x1b0>
 800a74a:	1acb      	subs	r3, r1, r3
 800a74c:	f8c8 3000 	str.w	r3, [r8]
 800a750:	462b      	mov	r3, r5
 800a752:	e7f5      	b.n	800a740 <__kernel_rem_pio2+0x300>
 800a754:	f3af 8000 	nop.w
	...
 800a764:	3ff00000 	.word	0x3ff00000
 800a768:	0800b0e8 	.word	0x0800b0e8
 800a76c:	40200000 	.word	0x40200000
 800a770:	3ff00000 	.word	0x3ff00000
 800a774:	3e700000 	.word	0x3e700000
 800a778:	41700000 	.word	0x41700000
 800a77c:	3fe00000 	.word	0x3fe00000
 800a780:	0800b0a8 	.word	0x0800b0a8
 800a784:	1e62      	subs	r2, r4, #1
 800a786:	ab0e      	add	r3, sp, #56	; 0x38
 800a788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a790:	a90e      	add	r1, sp, #56	; 0x38
 800a792:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a796:	e739      	b.n	800a60c <__kernel_rem_pio2+0x1cc>
 800a798:	1e62      	subs	r2, r4, #1
 800a79a:	ab0e      	add	r3, sp, #56	; 0x38
 800a79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a7a4:	e7f4      	b.n	800a790 <__kernel_rem_pio2+0x350>
 800a7a6:	a90e      	add	r1, sp, #56	; 0x38
 800a7a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	e789      	b.n	800a6c6 <__kernel_rem_pio2+0x286>
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a7b8:	2900      	cmp	r1, #0
 800a7ba:	d0fa      	beq.n	800a7b2 <__kernel_rem_pio2+0x372>
 800a7bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7be:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a7c2:	446a      	add	r2, sp
 800a7c4:	3a98      	subs	r2, #152	; 0x98
 800a7c6:	920a      	str	r2, [sp, #40]	; 0x28
 800a7c8:	9a08      	ldr	r2, [sp, #32]
 800a7ca:	18e3      	adds	r3, r4, r3
 800a7cc:	18a5      	adds	r5, r4, r2
 800a7ce:	aa22      	add	r2, sp, #136	; 0x88
 800a7d0:	f104 0801 	add.w	r8, r4, #1
 800a7d4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a7d8:	9304      	str	r3, [sp, #16]
 800a7da:	9b04      	ldr	r3, [sp, #16]
 800a7dc:	4543      	cmp	r3, r8
 800a7de:	da04      	bge.n	800a7ea <__kernel_rem_pio2+0x3aa>
 800a7e0:	461c      	mov	r4, r3
 800a7e2:	e6a3      	b.n	800a52c <__kernel_rem_pio2+0xec>
 800a7e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e7e4      	b.n	800a7b4 <__kernel_rem_pio2+0x374>
 800a7ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a7f0:	f7f5 fe4e 	bl	8000490 <__aeabi_i2d>
 800a7f4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7fa:	46ab      	mov	fp, r5
 800a7fc:	461c      	mov	r4, r3
 800a7fe:	f04f 0900 	mov.w	r9, #0
 800a802:	2600      	movs	r6, #0
 800a804:	2700      	movs	r7, #0
 800a806:	9b06      	ldr	r3, [sp, #24]
 800a808:	4599      	cmp	r9, r3
 800a80a:	dd06      	ble.n	800a81a <__kernel_rem_pio2+0x3da>
 800a80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a812:	f108 0801 	add.w	r8, r8, #1
 800a816:	930a      	str	r3, [sp, #40]	; 0x28
 800a818:	e7df      	b.n	800a7da <__kernel_rem_pio2+0x39a>
 800a81a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a81e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a822:	f7f5 fe9f 	bl	8000564 <__aeabi_dmul>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	f7f5 fce3 	bl	80001f8 <__adddf3>
 800a832:	f109 0901 	add.w	r9, r9, #1
 800a836:	4606      	mov	r6, r0
 800a838:	460f      	mov	r7, r1
 800a83a:	e7e4      	b.n	800a806 <__kernel_rem_pio2+0x3c6>
 800a83c:	3d01      	subs	r5, #1
 800a83e:	e748      	b.n	800a6d2 <__kernel_rem_pio2+0x292>
 800a840:	ec47 6b10 	vmov	d0, r6, r7
 800a844:	f1ca 0000 	rsb	r0, sl, #0
 800a848:	f000 fa8a 	bl	800ad60 <scalbn>
 800a84c:	ec57 6b10 	vmov	r6, r7, d0
 800a850:	4ba0      	ldr	r3, [pc, #640]	; (800aad4 <__kernel_rem_pio2+0x694>)
 800a852:	ee10 0a10 	vmov	r0, s0
 800a856:	2200      	movs	r2, #0
 800a858:	4639      	mov	r1, r7
 800a85a:	f7f6 f909 	bl	8000a70 <__aeabi_dcmpge>
 800a85e:	b1f8      	cbz	r0, 800a8a0 <__kernel_rem_pio2+0x460>
 800a860:	4b9d      	ldr	r3, [pc, #628]	; (800aad8 <__kernel_rem_pio2+0x698>)
 800a862:	2200      	movs	r2, #0
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	f7f5 fe7c 	bl	8000564 <__aeabi_dmul>
 800a86c:	f7f6 f92a 	bl	8000ac4 <__aeabi_d2iz>
 800a870:	4680      	mov	r8, r0
 800a872:	f7f5 fe0d 	bl	8000490 <__aeabi_i2d>
 800a876:	4b97      	ldr	r3, [pc, #604]	; (800aad4 <__kernel_rem_pio2+0x694>)
 800a878:	2200      	movs	r2, #0
 800a87a:	f7f5 fe73 	bl	8000564 <__aeabi_dmul>
 800a87e:	460b      	mov	r3, r1
 800a880:	4602      	mov	r2, r0
 800a882:	4639      	mov	r1, r7
 800a884:	4630      	mov	r0, r6
 800a886:	f7f5 fcb5 	bl	80001f4 <__aeabi_dsub>
 800a88a:	f7f6 f91b 	bl	8000ac4 <__aeabi_d2iz>
 800a88e:	1c65      	adds	r5, r4, #1
 800a890:	ab0e      	add	r3, sp, #56	; 0x38
 800a892:	f10a 0a18 	add.w	sl, sl, #24
 800a896:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a89a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a89e:	e720      	b.n	800a6e2 <__kernel_rem_pio2+0x2a2>
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	4639      	mov	r1, r7
 800a8a4:	f7f6 f90e 	bl	8000ac4 <__aeabi_d2iz>
 800a8a8:	ab0e      	add	r3, sp, #56	; 0x38
 800a8aa:	4625      	mov	r5, r4
 800a8ac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a8b0:	e717      	b.n	800a6e2 <__kernel_rem_pio2+0x2a2>
 800a8b2:	ab0e      	add	r3, sp, #56	; 0x38
 800a8b4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a8b8:	f7f5 fdea 	bl	8000490 <__aeabi_i2d>
 800a8bc:	4632      	mov	r2, r6
 800a8be:	463b      	mov	r3, r7
 800a8c0:	f7f5 fe50 	bl	8000564 <__aeabi_dmul>
 800a8c4:	4b84      	ldr	r3, [pc, #528]	; (800aad8 <__kernel_rem_pio2+0x698>)
 800a8c6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f5 fe48 	bl	8000564 <__aeabi_dmul>
 800a8d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8d8:	4606      	mov	r6, r0
 800a8da:	460f      	mov	r7, r1
 800a8dc:	e70f      	b.n	800a6fe <__kernel_rem_pio2+0x2be>
 800a8de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a8e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a8e6:	f7f5 fe3d 	bl	8000564 <__aeabi_dmul>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8f2:	f7f5 fc81 	bl	80001f8 <__adddf3>
 800a8f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8fa:	f108 0801 	add.w	r8, r8, #1
 800a8fe:	9b02      	ldr	r3, [sp, #8]
 800a900:	4598      	cmp	r8, r3
 800a902:	dc01      	bgt.n	800a908 <__kernel_rem_pio2+0x4c8>
 800a904:	45b8      	cmp	r8, r7
 800a906:	ddea      	ble.n	800a8de <__kernel_rem_pio2+0x49e>
 800a908:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a90c:	ab4a      	add	r3, sp, #296	; 0x128
 800a90e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a912:	ed87 7b00 	vstr	d7, [r7]
 800a916:	3e01      	subs	r6, #1
 800a918:	e6f8      	b.n	800a70c <__kernel_rem_pio2+0x2cc>
 800a91a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	dc0b      	bgt.n	800a938 <__kernel_rem_pio2+0x4f8>
 800a920:	2b00      	cmp	r3, #0
 800a922:	dc35      	bgt.n	800a990 <__kernel_rem_pio2+0x550>
 800a924:	d059      	beq.n	800a9da <__kernel_rem_pio2+0x59a>
 800a926:	9b04      	ldr	r3, [sp, #16]
 800a928:	f003 0007 	and.w	r0, r3, #7
 800a92c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a930:	ecbd 8b02 	vpop	{d8}
 800a934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a938:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d1f3      	bne.n	800a926 <__kernel_rem_pio2+0x4e6>
 800a93e:	ab4a      	add	r3, sp, #296	; 0x128
 800a940:	4423      	add	r3, r4
 800a942:	9306      	str	r3, [sp, #24]
 800a944:	461c      	mov	r4, r3
 800a946:	469a      	mov	sl, r3
 800a948:	9502      	str	r5, [sp, #8]
 800a94a:	9b02      	ldr	r3, [sp, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f1aa 0a08 	sub.w	sl, sl, #8
 800a952:	dc6b      	bgt.n	800aa2c <__kernel_rem_pio2+0x5ec>
 800a954:	46aa      	mov	sl, r5
 800a956:	f1ba 0f01 	cmp.w	sl, #1
 800a95a:	f1a4 0408 	sub.w	r4, r4, #8
 800a95e:	f300 8085 	bgt.w	800aa6c <__kernel_rem_pio2+0x62c>
 800a962:	9c06      	ldr	r4, [sp, #24]
 800a964:	2000      	movs	r0, #0
 800a966:	3408      	adds	r4, #8
 800a968:	2100      	movs	r1, #0
 800a96a:	2d01      	cmp	r5, #1
 800a96c:	f300 809d 	bgt.w	800aaaa <__kernel_rem_pio2+0x66a>
 800a970:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a974:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a978:	f1bb 0f00 	cmp.w	fp, #0
 800a97c:	f040 809b 	bne.w	800aab6 <__kernel_rem_pio2+0x676>
 800a980:	9b01      	ldr	r3, [sp, #4]
 800a982:	e9c3 5600 	strd	r5, r6, [r3]
 800a986:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a98a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a98e:	e7ca      	b.n	800a926 <__kernel_rem_pio2+0x4e6>
 800a990:	3408      	adds	r4, #8
 800a992:	ab4a      	add	r3, sp, #296	; 0x128
 800a994:	441c      	add	r4, r3
 800a996:	462e      	mov	r6, r5
 800a998:	2000      	movs	r0, #0
 800a99a:	2100      	movs	r1, #0
 800a99c:	2e00      	cmp	r6, #0
 800a99e:	da36      	bge.n	800aa0e <__kernel_rem_pio2+0x5ce>
 800a9a0:	f1bb 0f00 	cmp.w	fp, #0
 800a9a4:	d039      	beq.n	800aa1a <__kernel_rem_pio2+0x5da>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9ac:	9c01      	ldr	r4, [sp, #4]
 800a9ae:	e9c4 2300 	strd	r2, r3, [r4]
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a9ba:	f7f5 fc1b 	bl	80001f4 <__aeabi_dsub>
 800a9be:	ae4c      	add	r6, sp, #304	; 0x130
 800a9c0:	2401      	movs	r4, #1
 800a9c2:	42a5      	cmp	r5, r4
 800a9c4:	da2c      	bge.n	800aa20 <__kernel_rem_pio2+0x5e0>
 800a9c6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ca:	d002      	beq.n	800a9d2 <__kernel_rem_pio2+0x592>
 800a9cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	9b01      	ldr	r3, [sp, #4]
 800a9d4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a9d8:	e7a5      	b.n	800a926 <__kernel_rem_pio2+0x4e6>
 800a9da:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a9de:	eb0d 0403 	add.w	r4, sp, r3
 800a9e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	2d00      	cmp	r5, #0
 800a9ec:	da09      	bge.n	800aa02 <__kernel_rem_pio2+0x5c2>
 800a9ee:	f1bb 0f00 	cmp.w	fp, #0
 800a9f2:	d002      	beq.n	800a9fa <__kernel_rem_pio2+0x5ba>
 800a9f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	9b01      	ldr	r3, [sp, #4]
 800a9fc:	e9c3 0100 	strd	r0, r1, [r3]
 800aa00:	e791      	b.n	800a926 <__kernel_rem_pio2+0x4e6>
 800aa02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa06:	f7f5 fbf7 	bl	80001f8 <__adddf3>
 800aa0a:	3d01      	subs	r5, #1
 800aa0c:	e7ed      	b.n	800a9ea <__kernel_rem_pio2+0x5aa>
 800aa0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa12:	f7f5 fbf1 	bl	80001f8 <__adddf3>
 800aa16:	3e01      	subs	r6, #1
 800aa18:	e7c0      	b.n	800a99c <__kernel_rem_pio2+0x55c>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	e7c5      	b.n	800a9ac <__kernel_rem_pio2+0x56c>
 800aa20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800aa24:	f7f5 fbe8 	bl	80001f8 <__adddf3>
 800aa28:	3401      	adds	r4, #1
 800aa2a:	e7ca      	b.n	800a9c2 <__kernel_rem_pio2+0x582>
 800aa2c:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800aa34:	9b02      	ldr	r3, [sp, #8]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	9302      	str	r3, [sp, #8]
 800aa3a:	4632      	mov	r2, r6
 800aa3c:	463b      	mov	r3, r7
 800aa3e:	4640      	mov	r0, r8
 800aa40:	4649      	mov	r1, r9
 800aa42:	f7f5 fbd9 	bl	80001f8 <__adddf3>
 800aa46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4640      	mov	r0, r8
 800aa50:	4649      	mov	r1, r9
 800aa52:	f7f5 fbcf 	bl	80001f4 <__aeabi_dsub>
 800aa56:	4632      	mov	r2, r6
 800aa58:	463b      	mov	r3, r7
 800aa5a:	f7f5 fbcd 	bl	80001f8 <__adddf3>
 800aa5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800aa62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa66:	ed8a 7b00 	vstr	d7, [sl]
 800aa6a:	e76e      	b.n	800a94a <__kernel_rem_pio2+0x50a>
 800aa6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aa70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800aa74:	4640      	mov	r0, r8
 800aa76:	4632      	mov	r2, r6
 800aa78:	463b      	mov	r3, r7
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	f7f5 fbbc 	bl	80001f8 <__adddf3>
 800aa80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4640      	mov	r0, r8
 800aa8a:	4649      	mov	r1, r9
 800aa8c:	f7f5 fbb2 	bl	80001f4 <__aeabi_dsub>
 800aa90:	4632      	mov	r2, r6
 800aa92:	463b      	mov	r3, r7
 800aa94:	f7f5 fbb0 	bl	80001f8 <__adddf3>
 800aa98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aaa0:	ed84 7b00 	vstr	d7, [r4]
 800aaa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaa8:	e755      	b.n	800a956 <__kernel_rem_pio2+0x516>
 800aaaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aaae:	f7f5 fba3 	bl	80001f8 <__adddf3>
 800aab2:	3d01      	subs	r5, #1
 800aab4:	e759      	b.n	800a96a <__kernel_rem_pio2+0x52a>
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	9a01      	ldr	r2, [sp, #4]
 800aaba:	601d      	str	r5, [r3, #0]
 800aabc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aac0:	605c      	str	r4, [r3, #4]
 800aac2:	609f      	str	r7, [r3, #8]
 800aac4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800aac8:	60d3      	str	r3, [r2, #12]
 800aaca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aace:	6110      	str	r0, [r2, #16]
 800aad0:	6153      	str	r3, [r2, #20]
 800aad2:	e728      	b.n	800a926 <__kernel_rem_pio2+0x4e6>
 800aad4:	41700000 	.word	0x41700000
 800aad8:	3e700000 	.word	0x3e700000
 800aadc:	00000000 	.word	0x00000000

0800aae0 <__kernel_sin>:
 800aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	ed2d 8b04 	vpush	{d8-d9}
 800aae8:	eeb0 8a41 	vmov.f32	s16, s2
 800aaec:	eef0 8a61 	vmov.f32	s17, s3
 800aaf0:	ec55 4b10 	vmov	r4, r5, d0
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aafa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aafe:	9001      	str	r0, [sp, #4]
 800ab00:	da06      	bge.n	800ab10 <__kernel_sin+0x30>
 800ab02:	ee10 0a10 	vmov	r0, s0
 800ab06:	4629      	mov	r1, r5
 800ab08:	f7f5 ffdc 	bl	8000ac4 <__aeabi_d2iz>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d051      	beq.n	800abb4 <__kernel_sin+0xd4>
 800ab10:	4622      	mov	r2, r4
 800ab12:	462b      	mov	r3, r5
 800ab14:	4620      	mov	r0, r4
 800ab16:	4629      	mov	r1, r5
 800ab18:	f7f5 fd24 	bl	8000564 <__aeabi_dmul>
 800ab1c:	4682      	mov	sl, r0
 800ab1e:	468b      	mov	fp, r1
 800ab20:	4602      	mov	r2, r0
 800ab22:	460b      	mov	r3, r1
 800ab24:	4620      	mov	r0, r4
 800ab26:	4629      	mov	r1, r5
 800ab28:	f7f5 fd1c 	bl	8000564 <__aeabi_dmul>
 800ab2c:	a341      	add	r3, pc, #260	; (adr r3, 800ac34 <__kernel_sin+0x154>)
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	4680      	mov	r8, r0
 800ab34:	4689      	mov	r9, r1
 800ab36:	4650      	mov	r0, sl
 800ab38:	4659      	mov	r1, fp
 800ab3a:	f7f5 fd13 	bl	8000564 <__aeabi_dmul>
 800ab3e:	a33f      	add	r3, pc, #252	; (adr r3, 800ac3c <__kernel_sin+0x15c>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f7f5 fb56 	bl	80001f4 <__aeabi_dsub>
 800ab48:	4652      	mov	r2, sl
 800ab4a:	465b      	mov	r3, fp
 800ab4c:	f7f5 fd0a 	bl	8000564 <__aeabi_dmul>
 800ab50:	a33c      	add	r3, pc, #240	; (adr r3, 800ac44 <__kernel_sin+0x164>)
 800ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab56:	f7f5 fb4f 	bl	80001f8 <__adddf3>
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	465b      	mov	r3, fp
 800ab5e:	f7f5 fd01 	bl	8000564 <__aeabi_dmul>
 800ab62:	a33a      	add	r3, pc, #232	; (adr r3, 800ac4c <__kernel_sin+0x16c>)
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	f7f5 fb44 	bl	80001f4 <__aeabi_dsub>
 800ab6c:	4652      	mov	r2, sl
 800ab6e:	465b      	mov	r3, fp
 800ab70:	f7f5 fcf8 	bl	8000564 <__aeabi_dmul>
 800ab74:	a337      	add	r3, pc, #220	; (adr r3, 800ac54 <__kernel_sin+0x174>)
 800ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7a:	f7f5 fb3d 	bl	80001f8 <__adddf3>
 800ab7e:	9b01      	ldr	r3, [sp, #4]
 800ab80:	4606      	mov	r6, r0
 800ab82:	460f      	mov	r7, r1
 800ab84:	b9eb      	cbnz	r3, 800abc2 <__kernel_sin+0xe2>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4650      	mov	r0, sl
 800ab8c:	4659      	mov	r1, fp
 800ab8e:	f7f5 fce9 	bl	8000564 <__aeabi_dmul>
 800ab92:	a325      	add	r3, pc, #148	; (adr r3, 800ac28 <__kernel_sin+0x148>)
 800ab94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab98:	f7f5 fb2c 	bl	80001f4 <__aeabi_dsub>
 800ab9c:	4642      	mov	r2, r8
 800ab9e:	464b      	mov	r3, r9
 800aba0:	f7f5 fce0 	bl	8000564 <__aeabi_dmul>
 800aba4:	4602      	mov	r2, r0
 800aba6:	460b      	mov	r3, r1
 800aba8:	4620      	mov	r0, r4
 800abaa:	4629      	mov	r1, r5
 800abac:	f7f5 fb24 	bl	80001f8 <__adddf3>
 800abb0:	4604      	mov	r4, r0
 800abb2:	460d      	mov	r5, r1
 800abb4:	ec45 4b10 	vmov	d0, r4, r5
 800abb8:	b003      	add	sp, #12
 800abba:	ecbd 8b04 	vpop	{d8-d9}
 800abbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc2:	4b1b      	ldr	r3, [pc, #108]	; (800ac30 <__kernel_sin+0x150>)
 800abc4:	ec51 0b18 	vmov	r0, r1, d8
 800abc8:	2200      	movs	r2, #0
 800abca:	f7f5 fccb 	bl	8000564 <__aeabi_dmul>
 800abce:	4632      	mov	r2, r6
 800abd0:	ec41 0b19 	vmov	d9, r0, r1
 800abd4:	463b      	mov	r3, r7
 800abd6:	4640      	mov	r0, r8
 800abd8:	4649      	mov	r1, r9
 800abda:	f7f5 fcc3 	bl	8000564 <__aeabi_dmul>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	ec51 0b19 	vmov	r0, r1, d9
 800abe6:	f7f5 fb05 	bl	80001f4 <__aeabi_dsub>
 800abea:	4652      	mov	r2, sl
 800abec:	465b      	mov	r3, fp
 800abee:	f7f5 fcb9 	bl	8000564 <__aeabi_dmul>
 800abf2:	ec53 2b18 	vmov	r2, r3, d8
 800abf6:	f7f5 fafd 	bl	80001f4 <__aeabi_dsub>
 800abfa:	a30b      	add	r3, pc, #44	; (adr r3, 800ac28 <__kernel_sin+0x148>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	4606      	mov	r6, r0
 800ac02:	460f      	mov	r7, r1
 800ac04:	4640      	mov	r0, r8
 800ac06:	4649      	mov	r1, r9
 800ac08:	f7f5 fcac 	bl	8000564 <__aeabi_dmul>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	460b      	mov	r3, r1
 800ac10:	4630      	mov	r0, r6
 800ac12:	4639      	mov	r1, r7
 800ac14:	f7f5 faf0 	bl	80001f8 <__adddf3>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f7f5 fae8 	bl	80001f4 <__aeabi_dsub>
 800ac24:	e7c4      	b.n	800abb0 <__kernel_sin+0xd0>
 800ac26:	bf00      	nop
 800ac28:	55555549 	.word	0x55555549
 800ac2c:	3fc55555 	.word	0x3fc55555
 800ac30:	3fe00000 	.word	0x3fe00000
 800ac34:	5acfd57c 	.word	0x5acfd57c
 800ac38:	3de5d93a 	.word	0x3de5d93a
 800ac3c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac40:	3e5ae5e6 	.word	0x3e5ae5e6
 800ac44:	57b1fe7d 	.word	0x57b1fe7d
 800ac48:	3ec71de3 	.word	0x3ec71de3
 800ac4c:	19c161d5 	.word	0x19c161d5
 800ac50:	3f2a01a0 	.word	0x3f2a01a0
 800ac54:	1110f8a6 	.word	0x1110f8a6
 800ac58:	3f811111 	.word	0x3f811111
 800ac5c:	00000000 	.word	0x00000000

0800ac60 <floor>:
 800ac60:	ec51 0b10 	vmov	r0, r1, d0
 800ac64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ac6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ac70:	2e13      	cmp	r6, #19
 800ac72:	ee10 5a10 	vmov	r5, s0
 800ac76:	ee10 8a10 	vmov	r8, s0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	dc32      	bgt.n	800ace4 <floor+0x84>
 800ac7e:	2e00      	cmp	r6, #0
 800ac80:	da14      	bge.n	800acac <floor+0x4c>
 800ac82:	a333      	add	r3, pc, #204	; (adr r3, 800ad50 <floor+0xf0>)
 800ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac88:	f7f5 fab6 	bl	80001f8 <__adddf3>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f7f5 fef8 	bl	8000a84 <__aeabi_dcmpgt>
 800ac94:	b138      	cbz	r0, 800aca6 <floor+0x46>
 800ac96:	2c00      	cmp	r4, #0
 800ac98:	da57      	bge.n	800ad4a <floor+0xea>
 800ac9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ac9e:	431d      	orrs	r5, r3
 800aca0:	d001      	beq.n	800aca6 <floor+0x46>
 800aca2:	4c2d      	ldr	r4, [pc, #180]	; (800ad58 <floor+0xf8>)
 800aca4:	2500      	movs	r5, #0
 800aca6:	4621      	mov	r1, r4
 800aca8:	4628      	mov	r0, r5
 800acaa:	e025      	b.n	800acf8 <floor+0x98>
 800acac:	4f2b      	ldr	r7, [pc, #172]	; (800ad5c <floor+0xfc>)
 800acae:	4137      	asrs	r7, r6
 800acb0:	ea01 0307 	and.w	r3, r1, r7
 800acb4:	4303      	orrs	r3, r0
 800acb6:	d01f      	beq.n	800acf8 <floor+0x98>
 800acb8:	a325      	add	r3, pc, #148	; (adr r3, 800ad50 <floor+0xf0>)
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	f7f5 fa9b 	bl	80001f8 <__adddf3>
 800acc2:	2200      	movs	r2, #0
 800acc4:	2300      	movs	r3, #0
 800acc6:	f7f5 fedd 	bl	8000a84 <__aeabi_dcmpgt>
 800acca:	2800      	cmp	r0, #0
 800accc:	d0eb      	beq.n	800aca6 <floor+0x46>
 800acce:	2c00      	cmp	r4, #0
 800acd0:	bfbe      	ittt	lt
 800acd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800acd6:	fa43 f606 	asrlt.w	r6, r3, r6
 800acda:	19a4      	addlt	r4, r4, r6
 800acdc:	ea24 0407 	bic.w	r4, r4, r7
 800ace0:	2500      	movs	r5, #0
 800ace2:	e7e0      	b.n	800aca6 <floor+0x46>
 800ace4:	2e33      	cmp	r6, #51	; 0x33
 800ace6:	dd0b      	ble.n	800ad00 <floor+0xa0>
 800ace8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800acec:	d104      	bne.n	800acf8 <floor+0x98>
 800acee:	ee10 2a10 	vmov	r2, s0
 800acf2:	460b      	mov	r3, r1
 800acf4:	f7f5 fa80 	bl	80001f8 <__adddf3>
 800acf8:	ec41 0b10 	vmov	d0, r0, r1
 800acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ad04:	f04f 33ff 	mov.w	r3, #4294967295
 800ad08:	fa23 f707 	lsr.w	r7, r3, r7
 800ad0c:	4207      	tst	r7, r0
 800ad0e:	d0f3      	beq.n	800acf8 <floor+0x98>
 800ad10:	a30f      	add	r3, pc, #60	; (adr r3, 800ad50 <floor+0xf0>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	f7f5 fa6f 	bl	80001f8 <__adddf3>
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f7f5 feb1 	bl	8000a84 <__aeabi_dcmpgt>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0bf      	beq.n	800aca6 <floor+0x46>
 800ad26:	2c00      	cmp	r4, #0
 800ad28:	da02      	bge.n	800ad30 <floor+0xd0>
 800ad2a:	2e14      	cmp	r6, #20
 800ad2c:	d103      	bne.n	800ad36 <floor+0xd6>
 800ad2e:	3401      	adds	r4, #1
 800ad30:	ea25 0507 	bic.w	r5, r5, r7
 800ad34:	e7b7      	b.n	800aca6 <floor+0x46>
 800ad36:	2301      	movs	r3, #1
 800ad38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ad3c:	fa03 f606 	lsl.w	r6, r3, r6
 800ad40:	4435      	add	r5, r6
 800ad42:	4545      	cmp	r5, r8
 800ad44:	bf38      	it	cc
 800ad46:	18e4      	addcc	r4, r4, r3
 800ad48:	e7f2      	b.n	800ad30 <floor+0xd0>
 800ad4a:	2500      	movs	r5, #0
 800ad4c:	462c      	mov	r4, r5
 800ad4e:	e7aa      	b.n	800aca6 <floor+0x46>
 800ad50:	8800759c 	.word	0x8800759c
 800ad54:	7e37e43c 	.word	0x7e37e43c
 800ad58:	bff00000 	.word	0xbff00000
 800ad5c:	000fffff 	.word	0x000fffff

0800ad60 <scalbn>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	ec55 4b10 	vmov	r4, r5, d0
 800ad66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	b99a      	cbnz	r2, 800ad98 <scalbn+0x38>
 800ad70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad74:	4323      	orrs	r3, r4
 800ad76:	d036      	beq.n	800ade6 <scalbn+0x86>
 800ad78:	4b39      	ldr	r3, [pc, #228]	; (800ae60 <scalbn+0x100>)
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	ee10 0a10 	vmov	r0, s0
 800ad80:	2200      	movs	r2, #0
 800ad82:	f7f5 fbef 	bl	8000564 <__aeabi_dmul>
 800ad86:	4b37      	ldr	r3, [pc, #220]	; (800ae64 <scalbn+0x104>)
 800ad88:	429e      	cmp	r6, r3
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	460d      	mov	r5, r1
 800ad8e:	da10      	bge.n	800adb2 <scalbn+0x52>
 800ad90:	a32b      	add	r3, pc, #172	; (adr r3, 800ae40 <scalbn+0xe0>)
 800ad92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad96:	e03a      	b.n	800ae0e <scalbn+0xae>
 800ad98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ad9c:	428a      	cmp	r2, r1
 800ad9e:	d10c      	bne.n	800adba <scalbn+0x5a>
 800ada0:	ee10 2a10 	vmov	r2, s0
 800ada4:	4620      	mov	r0, r4
 800ada6:	4629      	mov	r1, r5
 800ada8:	f7f5 fa26 	bl	80001f8 <__adddf3>
 800adac:	4604      	mov	r4, r0
 800adae:	460d      	mov	r5, r1
 800adb0:	e019      	b.n	800ade6 <scalbn+0x86>
 800adb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adb6:	460b      	mov	r3, r1
 800adb8:	3a36      	subs	r2, #54	; 0x36
 800adba:	4432      	add	r2, r6
 800adbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800adc0:	428a      	cmp	r2, r1
 800adc2:	dd08      	ble.n	800add6 <scalbn+0x76>
 800adc4:	2d00      	cmp	r5, #0
 800adc6:	a120      	add	r1, pc, #128	; (adr r1, 800ae48 <scalbn+0xe8>)
 800adc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adcc:	da1c      	bge.n	800ae08 <scalbn+0xa8>
 800adce:	a120      	add	r1, pc, #128	; (adr r1, 800ae50 <scalbn+0xf0>)
 800add0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add4:	e018      	b.n	800ae08 <scalbn+0xa8>
 800add6:	2a00      	cmp	r2, #0
 800add8:	dd08      	ble.n	800adec <scalbn+0x8c>
 800adda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ade2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ade6:	ec45 4b10 	vmov	d0, r4, r5
 800adea:	bd70      	pop	{r4, r5, r6, pc}
 800adec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800adf0:	da19      	bge.n	800ae26 <scalbn+0xc6>
 800adf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800adf6:	429e      	cmp	r6, r3
 800adf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800adfc:	dd0a      	ble.n	800ae14 <scalbn+0xb4>
 800adfe:	a112      	add	r1, pc, #72	; (adr r1, 800ae48 <scalbn+0xe8>)
 800ae00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d1e2      	bne.n	800adce <scalbn+0x6e>
 800ae08:	a30f      	add	r3, pc, #60	; (adr r3, 800ae48 <scalbn+0xe8>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	f7f5 fba9 	bl	8000564 <__aeabi_dmul>
 800ae12:	e7cb      	b.n	800adac <scalbn+0x4c>
 800ae14:	a10a      	add	r1, pc, #40	; (adr r1, 800ae40 <scalbn+0xe0>)
 800ae16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0b8      	beq.n	800ad90 <scalbn+0x30>
 800ae1e:	a10e      	add	r1, pc, #56	; (adr r1, 800ae58 <scalbn+0xf8>)
 800ae20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae24:	e7b4      	b.n	800ad90 <scalbn+0x30>
 800ae26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae2a:	3236      	adds	r2, #54	; 0x36
 800ae2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ae34:	4620      	mov	r0, r4
 800ae36:	4b0c      	ldr	r3, [pc, #48]	; (800ae68 <scalbn+0x108>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	e7e8      	b.n	800ae0e <scalbn+0xae>
 800ae3c:	f3af 8000 	nop.w
 800ae40:	c2f8f359 	.word	0xc2f8f359
 800ae44:	01a56e1f 	.word	0x01a56e1f
 800ae48:	8800759c 	.word	0x8800759c
 800ae4c:	7e37e43c 	.word	0x7e37e43c
 800ae50:	8800759c 	.word	0x8800759c
 800ae54:	fe37e43c 	.word	0xfe37e43c
 800ae58:	c2f8f359 	.word	0xc2f8f359
 800ae5c:	81a56e1f 	.word	0x81a56e1f
 800ae60:	43500000 	.word	0x43500000
 800ae64:	ffff3cb0 	.word	0xffff3cb0
 800ae68:	3c900000 	.word	0x3c900000

0800ae6c <_init>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	bf00      	nop
 800ae70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae72:	bc08      	pop	{r3}
 800ae74:	469e      	mov	lr, r3
 800ae76:	4770      	bx	lr

0800ae78 <_fini>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	bf00      	nop
 800ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7e:	bc08      	pop	{r3}
 800ae80:	469e      	mov	lr, r3
 800ae82:	4770      	bx	lr
